
// Configuraçao de utilizaçao" // "
//site pra colocar musica
//https://ytmp3.mobi/pt1/

#define ArmaColada
#define MailerUser

//Includes
#include <		a_samp		>

#if defined MAX_PLAYERS
	#undef MAX_PLAYERS
	#define MAX_PLAYERS 50
#endif

#if defined MAX_VEHICLES
    #undef MAX_VEHICLES
    #define MAX_VEHICLES 300
#endif


#include <		DOF2				>
#include <		a_http				>
#include <		pawn.cmd			>
#include <		sscanf2				>
#include <		streamer			>
#include <		fixobjects			> //Corretor de mapas - - By:Leo
#include <      foreach             >
#include <      Fader       		>
#include <		seif_walk			>
#include <      AntiAB         		>
#include <      cuffs           	>
#include <      progress2	    	>

new DB:Database;

//Sistema de recuperaçao de Senha
#define MAILER_URL ("35.199.103.187/MailerPhP/mailer.php")

#define EmailSent ("lvmobile@gmail.com")
#define SentEmail ("[ Play Style ]")

#if defined MailerUser
	#include <		mailer		> //Slice Include
#else
	#pragma unused ShowPlayerEmail
#endif

#pragma disablerecursion
#pragma warning disable 208

// Configuraçoes Nomes

#define GM_VERSAO "v0.1"
#define SERVER_NAME "Brasil Play Style RPG"
#define SERVER_NAME2 "Brasil Play Style/MOBILE RPG"
#define GAMEMODE_NAME "BPS:RPG "#GM_VERSAO" - MOBILE"
#define LANG "PT/BR"
#define SV_SITE "Em contrucao"
#define SV_IP "127.0.0.1:7777"
//#define SV_IP "5.9.8.124:11334"
#define INSTA "@life__virtual"
#define FACE "Em contrucao"
#define DISCORD "desativado"
#define ATUALIZE_DATA "05 de Dezembro de 2020"


// Logo do Servidor Sem Cor Herdando cor da Mensagem
#define SERVELOGO "{FFFFFF}P{FF0000}S {FFFFFF}RPG "

#define VALOR_MULTA 2 //valor a ser multiplicado na multa de radar
#define MAX_RADAR 100
#define MAX_GATES 50 //Maximo de Portoes
#define MAX_HOUSES 500 // Numero maximo de casas
#define MAX_CAM 30 // Maximo de Cameras
#define MAX_ORGS 5 // Maximo de orgs no servidor
#define MAX_EGGS 25 // Maximo de easter eggs no servidor
#define MAX_AFK_TIME 4 // Tolerancia de tempo AFK
#define MAX_EMPRESAS 26 //Maximo de Empresas
#define MAX_VEHICLES_CONCE 200 //Maximo de veiculos da concessionaria
#define MAX_SENHA 16 // Max de caracteres por senha
#define MIN_SENHA 4 // Min de caracteres por senha
#define MAX_WEAPONS 100 // Maximo de weapons
#define MAX_PROFS 12 //Numero de profissoes do servidor
#define MAX_NPC 2 //Maximo de NPC
#define QuantiaMin 15000 //Quantia Inicial do Player ao Entrar


#define CUSTO_PLANO_SAUDE 103 //Quantia paga pelo player ao contratar o plano de saude
#define CUSTO_SERVICO_HOSPITAL 320 //Quantia paga ao hospital pelos serviços medicos

#define TEMPO_FOME_MIN 3
#define TEMPO_SEDE_MIN 3

//Pre definiçao da variavel de veiculo
#define INVALID_VEHICLE_CONCE -1

// Minimo de Questoes Acertas pelo usuario no tutorial
#define QUEST_ACERTAS_MINIMO (3)

// Sistema de Bans
#define DESBAN_NAME (0)
#define DESBAN_IP (1)
#define DESBAN_ID (2)

//Cfg Flood System
#define TimerFlood 1000

//Diretorios

#define PASTA_CODIGOS "Codigos/%s.ini"
#define PASTA_CONFIG "Configuracoes.cfg"
#define PASTA_CONTAS "Contas/%s.ini"
#define PASTA_ACESSORIOS "Toys/%s.ini"
#define PASTA_BANS "Bans/%s.ini"
#define PASTA_HOUSES "Casas/House_%d.ini"
#define P_GATES "/Gates/Portao_%d.ini"
#define PASTA_ORGS "Orgs/Org_%d.cfg"
#define PASTA_CANDIDATOS "Orgs/Candidatos/Org_%d.cfg"
#define PASTA_COFRE_ORGS "Orgs/Cofres/Org_%d.cfg"
#define PASTA_EMPRESAS "Empresas/Emp_%i.ini"
//#define PASTA_VEICULOS "Veiculos/Veh_%i.ini"
#define PASTA_EGGS "Eggs/%i.ini"


#define SERVER_OWNER1 "SHADOW"
#define SERVER_OWNER3 "SHADOW"

// Bus Sistem
#define BlueBusNPCName "Pasqual"
#define BlackBusNPCName "Rivelino"
#define SENHA_NPC "0xsbUTW4"

//Bot System
#define BotName "BOT GL"

//Weapon Hack

#define WEAPON_SLOTs 13

//Race CP's
#define CHECK_RACER_DISTANCE 500.0
#define CHECK_RACER_SIZE 9.0


#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2

//Elevador
#define ELEVATOR_SPEED      (5.0)   // Definiçao de velocidade do elevador.
#define DOORS_SPEED         (5.0)   // Definiçao de velocidade das portas.
#define ELEVATOR_WAIT_TIME  (5000)  // Tempo de demora ate o elevador inicie depois que as portas sao fechadas.
#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)
#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
#define INVALID_FLOOR           (-1)


//Empresas ID's
const EMP_AMMULS = 1;
const EMP_ACADEMIALS = 2;
const EMP_LOTERICALS = 3;
const EMP_BINCOLS = 4;
const EMP_ZIPLS = 5;
const EMP_BURGERSHOTLS = 6;
const EMP_AUTOESCOLALS = 7;
const EMP_BANCOLS = 8;
const EMP_CONCELS = 21;
const EMP_ULTILITARIOSLS = 22;
const EMP_TUNINGLS = 23;
const EMP_SHOP = 24;
const EMP_HOSP = 25;
const EMP_PROLS = 26;
const EMP_SUBLS = 27;



//	Database de cores
const C_ERROR = 0xF0000000;
const C_OFICIAL = 0xFF34B3F6;
const C_POLICIAL = 0x993333FF;

const Amarelo = 0xFFFF00AA;
const Branco = 0xFFFFFFFF;
const Vermelho = 0xF00000AA;
const VermelhoClaro = 0xFF6347AA;
const Roxo = 0x800080FF;
const RoxoClaro = 0x7777FFAA;
const Laranja = 0xFF6600AA;
const Azul = 0x2F3EF9FF;
const Cinza = 0x2D363500;
const Purple = 0xC2A2DAAA;
const Teal = 0x00AAAAAA;
const OffBranco = 0xF5DEB3AA;
const Darkaqua = 0x83BFBFAA;
const AzulClaro = 0x33CCFFAA;
const AzulMedio = 0x33CCFFAA;
const Verde = 0x3C982EFF;
const VerdeClaro = 0x316262AA;
const Verdel = 0x9ACD32AA;
const Preto = 0x000000AA;
const Violeta = 0x9955DEEE;

const cadm = 0x33AAFFFF;

// Cores Xat
const C_XAT1 = 0xE6E6E6E6;
const C_XAT2 = 0xC8C8C8C8;
const C_XAT3 = 0xAAAAAAAA;
const C_XAT4 = 0x8C8C8C8C;
const C_XAT5 = 0x6E6E6E6E;

/* =============================================================================
						Definiçoes dos Dialogs
============================================================================= */

enum
{
	DIALOG_RANKS,
	DIALOG_LISTA_RANKS,
    DIALOG_mp3tt,
    Dinfo,
    DIALOG_PLATAFORMA,
    DIALOG_REGISTRO,
    DIALOG_REGISTRO_MOBILE,
    DIALOG_LOGAR,
    DIALOG_LOGAR_MOBILE,
    DIALOG_TUTORIAL,
    DIALOG_TUTORIAL_SEX,
    DIALOG_TUTORIAL_KNOW,
    DIALOG_AJUDA,
    DIALOG_AJUDA1,
    DIALOG_CMDADMIN,
    EmailCfg,
    REmail,
    CfgIdade,
    DIALOG_AVISO_NICK,
    DIALOG_EMPREGOS,
    DIALOG_ABANDONO_EMPREGO,
    DIALOG_EMPESCOLHIDO,
    DIALOG_LOJACASH,
    DIALOG_COMPRARCASH,
    DIALOG_CONTATO,
    DIALOG_LOJA_ARMAS,
    DIALOG_LOJA_CONCE,
    DIALOG_TUNAR,
    DIALOG_TUNAR_RODAS,
    DIALOG_JOB_ACCEPT, // Aceitando emprego no local
	DIALOG_INFO_CASA, //Informaçoes da Casa Vip


    DIALOG_ADMINS,
    DIALOG_ADMIN_PM,

    DIALOG_ORG_CONVIDAR,
    DIALOG_MANAGERORG_MEMBROS,
    DIALOG_ORG_PROMOVER,
    DIALOG_ORG_PATENTES,
    DIALOG_PATENTES_CONF,
    DIALOG_ORG_SALARIOS,
    DIALOG_SALARIOS_CONF,
    DIALOG_ORG_MENU,
    DIALOG_LIMPAR_CANDIDATOS,
    DIALOG_MATERIAIS_GANG,
    DIALOG_DROGAS_GANG,
    DIALOG_MATERIAIS_COP,

    DIALOG_COMPRAR_EMPRESA_VIP,
    DIALOG_COMPRAR_CASA_VIP,
    DIALOG_INFO_,
    DIALOG_INFO_VIP,

	DIALOG_ELEVADOR,
    DIALOG_SKINMOBILE,

    EMPRESA_MENU,
    EMPRESA_MENU_NOME,
    EMPRESA_MENU_SOCIO,
    EMPRESA_MENU_ENTRADA,
    EMPRESA_MENU_COFRE,
    E_COFRE_SACAR,

    DIALOG_CONVITE_ORG,
    DIALOG_LISTA_ORG,
    DIALOG_GERENCIAMENTO_ORG,
    DIALOG_ORG_DEMITIR,
    DIALOG_CLICK_MAP,
    DIALOG_LIMPAR_FICHA,
    DIALOG_ABASTECIMENTO_INICIAL,
    DIALOG_ABASTECIMENTO_GALAO,
    DIALOG_GALAO_ESCOLHA,
    DIALOG_ABASTECIMENTO_ESCOLHA,
    DIALOG_GALAOUSAR,

    DIALOG_MANAGERORG_HOME,
    DIALOG_MANAG_MATERIAIS,
    DIALOG_ORG_MAT_DEPOSITAR,
    DIALOG_ORG_MAT_PEGAR,
    DIALOG_MANAGERORG_DINHEIRO,
    DIALOG_ORG_MONEY_DEPOSITAR,
    DIALOG_CAIXA_HOME,
    DIALOG_CAIXA_DEPOSITAR,
    DIALOG_CAIXA_SACAR,

    DIALOG_BANCO_HOME,
    DIALOG_BANCO_SACAR,
    DIALOG_BANCO_DEPOSITAR,
    DIALOG_BANCO_TRANS,

    //Sistema de Cameras
    CamPM,
    CamBOPE,
    CamCV,
    CamPCC,


    CellSMS,

    //DIALOG_QUEST = 43,

    DIALOG_ULTILIDADES,
    DIALOG_CELLBUY,
    DIALOG_CREDITBUY,
    DIALOG_GALAO,
    DIALOG_VIP,
    DIALOG_VIPMAIS,
    DIALOG_VIPPLUS,
    DIALOG_VIP_INFO,
    DIALOG_VIP_BENEFICIOS,
    DIALOG_SOCIO,

    DIALOG_SERVEROWNER,
    DIALOG_SERVENAME,
    DIALOG_MAPNAME,
    DIALOG_SITESV,
    DIALOG_SVNPC,
    DIALOG_LOADFS,
    DIALOG_UNLOADFS,
    DIALOG_GMX,
    DIALOG_SETPASSWORD,
    DIALOG_PINGLIMITE,

    DIALOG_GPS,
    DIALOG_GPS_EMPREGOS,
    DIALOG_GPS_LOCAISP,
    DIALOG_GPS_ORGS,

    DIALOG_LOTERICA,
    DIALOG_LOT_PDIV,
    DIALOG_LOT_PMULT,
    DIALOG_MEGA_SENA,
    DIALOG_RASPADINHA,

    ConfConta,
    ConfNick,
    ConfChat,
    ConfSenha,
    ConfSenha2,
    ConfEmail,
    ConfCell,
    ConfMSGs,
    ConfSex,
    ConfPlataforma,
    Conta_Defines,
    ConfSpawn,


    DIALOG_BURGERSHOT,
    BURGER_LANCHES,
    BURGER_BEBIDAS,

    //== Sistema de Portao 'SK GATE EDITOR By SKy'
    Index,
    ModelID,
    EditModel,
    InfosGateEdit,
    SaveGate,
    DeletGate,
    EditSpeed,

    SCONFIRM_COMPRA,

    //Sistema de veiculos
    VCONFIRM_COMPRA,
    CONCE_VENDAS,
    CONCE_VENDAS_CONFIRM,

    PAINEL_VEICULO,
    MENU_VEICULO,


    //Tuning Menu
    DIALOG_TUNING_CORES,
    DIALOG_CONFIRM_COMPRA,

    //Sistema de Lutas
    DIALOG_LUTAS,

    // Sistema de Armas
    DIALOG_ARMAS,
    DIALOG_MENU,
    DIALOG_CONFIRMAR,
    DIALOG_MUNICAO,

    //Dialog Missao petroleiro
    DIALOG_PETROLEIRO,
	DIALOG_PAINTJOB, //ADICAO PAINT POR AQUI MESMO

    DIALOG_AUTO_ESCOLA,
    AE_CONFIRM_EXAME,
    AE_EXAME_TEORICO,

    Novatos,
    Respostas,


    DIALOG_LANCHONETES,
    DIALOG_LAN_BEBIDAS,
    DIALOG_LAN_COMIDA,

	//Pizzaria LS
	DIALOG_PIZZARIA,
	DIALOG_PI_PIZZAS,
	DIALOG_PI_BEBIDAS,

    DIALOG_CONTRATO_ADV,
    DIALOG_RADIOS,
	DIALOG_MP3,

    //LOJA
    DIALOG_COMPRAR_VIP,
    DIALOG_COMPRAR_SOCIO,
    DIALOG_LOJACASH_VIP,
    DIALOG_LOJACASH_SOCIO,
    DIALOG_LOJACASH_DIN,
    DIALOG_LOJACASH_LEVEL,
    DIALOG_LOJACASH_INFO,

    DIALOG_HOSP_PLANOS,

	INVENT_MENU,
	INVENT_MENU2,
	CRAFT_MENU,

	DIALOG_CONTRACT_OP,
	DIALOG_IMOBILIARIA,
	DIALOG_IMO_INDEX,
	DIALOG_IMO_INT,
	DIALOG_IMO_TRANSF,

	// Sistema de Detran

	DIALOG_CONTRACT_DETRAN,
	DIALOG_DETRAN,
	DIALOG_DETRAN_INDEX,
	DIALOG_DETRAN_TRANSF,
	DIALOG_ANUNCIO,

    DIALOG_MENU_ANDAR,

	DIALOG_DINAMITE,
	DIALOG_MENU_CASSINO,
	DIALOG_COMPRAR_FICHA,
	DIALOG_ROLAR_DADOS
};


// VALORES CASH
new PRECO_VIP1 =         1500,
    PRECO_VIP2 =         2500,
    PRECO_VIP3 =         3000,
    PRECO_SOCIO1 =       4000,
    PRECO_SOCIO2 =       4000,
    PRECO_SOCIO3 =       5000,
    PRECO_LEVEL =         50, // por level
    PRECO_ECS =         2500, //escolher casa
    PRECO_EVE =         2200, //escolher veh
    PRECO_EEMP =        4000, //empresa
    PRECO_ACS =         3500, //add casa
    PRECO_AVE =         1000, //add veiculo
    PRECO_NICK =         500; //Preco para troca de nick no servidor...

new LEVEL_VIP1 =          15,
    GRANA_VIP1 =       500000,
    LEVEL_VIP2 =          30,
    GRANA_VIP2 =       800000,
    LEVEL_VIP3 =          50,
    GRANA_VIP3 =      1000000,
    LEVEL_SOCIO1 =         50,
    GRANA_SOCIO1 =    1200000;

new DES_EMP_VIP1 =      20, // porcentagems
    DES_EMP_VIP2 =      40,
    DES_EMP_VIP3 =      60,

    DES_CASA_VIP1 =     20,
    DES_CASA_VIP2 =     40,
    DES_CASA_VIP3 =     60,

    BONUS_VIP1 =        20,
    BONUS_VIP2 =        35,
    BONUS_VIP3 =        45,

    BONUS_EMP_VIP1 =    10,
    BONUS_EMP_VIP2 =    25,
    BONUS_EMP_VIP3 =    45;

#define COR_VIP 0x008B00FF


// =================== FIM Dialogs ===================================

//Mineradores
#define MINERIO_OURO 1
#define MINERIO_PRATA 2
#define MINERIO_BRONZE 3
#define MINERIO_FERRO 4


// =================== macros ===================================

#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define BODY_PART_HEAD 9

//Macros de Loops
#define ForPlayers(%1) foreach(Player, %1) if(IsPlayerConnected(%1) && !IsPlayerNPC(%1)) //for(new %1 = 0; %1 <= (GetPlayerPoolSize()+1); %1++) if(IsPlayerConnected(%1) && !IsPlayerNPC(%1))
#define skyLoop(%1) static %1; %1 = GetPlayerPoolSize(); for( ; %1 > -1; %1--) if(IsPlayerConnected(%1))
#define Loop(%0,%1)	for(new %0 = 0; %0 < %1; %0++)

#define SCM SendClientMessage

#define Public:%1(%2) \
	forward %1(%2); public %1(%2)


#define Freeze(%0) \
		TogglePlayerControllable(%0,false)

#define UnFreeze(%0) \
		TogglePlayerControllable(%0,true)

#define GetVehicleName(%0) SkVeh[GetVehicleModel(%0)-400]

#define ClearAnimationsEx(%0,%1) SetTimerEx("PararAnimsSIFS", %1, false, "i", %0)

#define AutoSpawn(%0,%1) \
			  SetTimerEx("SpawnarPlayer", %1, false, "i", %0)

#define Kick(%0) \
		SetTimerEx("Kickado", 200, false, "i", %0)

#define Ban(%0) \
		SetTimerEx("Banned", 200, false, "i", %0)


#define TDias(%0) (60*60*24*%0)
#define TSegundos(%0) (%0*1000)
#define THora(%0) (60*1000*60*%0)
#define TMinutos(%0) (60*1000*%0)

forward ReiniciarServidor();

#define ADMAVISO "{6C7B8B}________________ {FFFFFF}[ Admin Aviso ] {6C7B8B}________________"

// AttachedObject's Slots
const SlotTaser = 10;
const SlotRouboBolsa = 9;
const SlotCervoCacada = 9;
const SlotTrabalhadores = 9;
const SlotCapacete = 7;

#if defined ArmaColada
const SlotAKeFUZIL = 8;
#endif

#if defined DamageUser
	#define pD_MaxHealth 100
	#define pD_Unarmed 7
	#define pD_brass 5
	#define pD_golf 4
	#define pD_knife 2
	#define pD_katana 1
	#define pD_dildo 6
	#define pD_flowers 10
	#define pD_grenades 1
	#define pD_colt 3
	#define pD_silenced 2.5
	#define pD_deagle 2
	#define pD_shotgun 2
	#define pD_sawn 2.5
	#define pD_combat 3
	#define pD_SMG 4
	#define pD_MP5 3.5
	#define pD_AK47 3
	#define pD_M4 3.2
	#define pD_TEC9 4
	#define pD_rifle 1
	#define pD_launchers 1
	#define pD_minigun 1
	#define pD_spraycan 11
#endif


/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
 Toys - System ViniBorn
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/

#define MAX_FREE_TOYS    3
#define MAX_VIP_TOYS     7

#define PLAYER_INFO_ATTACHED MAX_VIP_TOYS+1
#define PLAYER_CUFF_ATTACHED PLAYER_INFO_ATTACHED+1

// * Attachments * //
#define DIALOG_TOYS              14321
#define DIALOG_BUY_TOYS          DIALOG_TOYS+1
#define DIALOG_BUY_TOYS_SELECT   DIALOG_TOYS+2
#define DIALOG_BUY_TOYS_CONF     DIALOG_TOYS+3
#define DIALOG_TOYS_ATTACH       DIALOG_TOYS+4
#define DIALOG_TOYS_EDIT         DIALOG_TOYS+5
#define DIALOG_TOYS_EDIT_TYPE    DIALOG_TOYS+6
#define DIALOG_TOYS_EDIT_BONE    DIALOG_TOYS+7
#define DIALOG_TOYS_DELETE       DIALOG_TOYS+8
#define DIALOG_TOYS_DELETE_CONF  DIALOG_TOYS+9


enum ptInfo
{
	ptModelID,
	ptBoneID,
	Float:ptOffsetX,
	Float:ptOffsetY,
	Float:ptOffsetZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	bool:ptWearing
}

new VidaADM[MAX_PLAYERS];
new PlayerToys[MAX_PLAYERS][MAX_VIP_TOYS][ptInfo];
new PlayerEditingToyID[MAX_PLAYERS];
new PlayerBuyingType[MAX_PLAYERS];
new PlayerBuyingModel[MAX_PLAYERS];
new PlayerDeletingID[MAX_PLAYERS];

enum AttachmentEnum
{
    attachtype,
    attachname[32],
    attachmodel,
    attachprice
}

enum DefaultOffsets
{
	dBoneid,
	Float:dOffSets[6]
}


#define TOYS_TYPE_GLASSES  0
#define TOYS_TYPE_RELOGIO  1
#define TOYS_TYPE_BOINA    2
#define TOYS_TYPE_BANDANA  3
#define TOYS_TYPE_BONE     4
#define TOYS_TYPE_CHAPEU   5
#define TOYS_TYPE_MASCARA  6
#define TOYS_TYPE_PERUCA   7
#define TOYS_TYPE_MAGNATA  8
#define TOYS_TYPE_VIP      9

new AttachmentHeaders[][] = {
	{"oculos"},
	{"Relogios"},
	{"Boinas/Tocas"},
	{"Bandanas"},
	{"Bones"},
	{"Chapeus"},
	{"Mascaras/Capacetes"},
	{"Perucas"},
	{"Magnata"},
	{"{FFE000}VIP"}
};

new Float:AttachmentDefaultOffsets[][DefaultOffsets] = {
	{2, {0.098771,0.030772,-0.000335,85.342658, 84.122947,4.236968}}, // oculos
	{5, {-0.014000,-0.021721,-0.002143,9.279357,270.517852,190.637268}}, // Relogios
	{2, {0.117533,0.007857,0.000726,268.970458,1.533373,269.223754}},    // Boinas
	{2, {0.078534,0.041857,-0.001727,268.970458,1.533374,269.223754}},   // Bandanas
	{2, {0.094485,0.007215,0.000000,0.000000,0.000000,0.000000}},        // Bones/Tocas
	{2, {0.128484,0.007215,0.000000,0.000000,0.000000,0.000000}},        // Chapeus
	{2, {0.107000,0.020000,0.000000,90.000000,90.000000,0.000000}},      // Mascaras
	{2, {0.128484,0.007215,0.000000,0.000000,0.000000,0.000000}},        // Perucas
	{2, {0.004483,0.107215,0.000000,2.999999,-0.199998,-108.699966}},    // Bigodes
	{2, {0.004483,0.107215,0.000000,2.999999,-0.199998,-108.699966}}     // VIP
};

new AttachmentObjects[][AttachmentEnum] = {
	// oculos
	{TOYS_TYPE_GLASSES, "oculos Vermelho", 19006, 150},
	{TOYS_TYPE_GLASSES, "oculos Laranja", 19007, 150},
	{TOYS_TYPE_GLASSES, "oculos Verde", 19008, 150},
	{TOYS_TYPE_GLASSES, "oculos Azul", 19009, 150},
	{TOYS_TYPE_GLASSES, "oculos Roxo", 19010, 150},
	{TOYS_TYPE_GLASSES, "oculos Preto", 19012, 150},
	{TOYS_TYPE_GLASSES, "oculos em Espiral", 19011, 200},
	{TOYS_TYPE_GLASSES, "oculos Xadrez", 19014, 200},
	{TOYS_TYPE_GLASSES, "oculos Transparente", 19015, 200},
	{TOYS_TYPE_GLASSES, "oculos de Raio-X", 19016, 250},
	{TOYS_TYPE_GLASSES, "oculos Quadradao Amarelo", 19017, 350},
	{TOYS_TYPE_GLASSES, "oculos Quadradao Laranja", 19018, 350},
	{TOYS_TYPE_GLASSES, "oculos Quadradao Vermelho", 19019, 350},
	{TOYS_TYPE_GLASSES, "oculos Quadradao Verde", 19021, 350},
	{TOYS_TYPE_GLASSES, "Ray-Ban Cinza", 19022, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Azul", 19023, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Roxo", 19024, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Rosa", 19025, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Vermelho", 19026, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Laranja", 19027, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Amarelo", 19028, 450},
	{TOYS_TYPE_GLASSES, "Ray-Ban Verde", 19029, 450},
	{TOYS_TYPE_GLASSES, "oculos de Policial Preto", 19138, 200},
	{TOYS_TYPE_GLASSES, "oculos de Policial Vermelho", 19139, 200},
	{TOYS_TYPE_GLASSES, "oculos de Policial Azul", 19140, 200},
	// Relogios
	{TOYS_TYPE_RELOGIO, "Rolex de Ouro", 19039, 750},
	{TOYS_TYPE_RELOGIO, "Rolex de Prata", 19043, 750},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Roxo", 19044, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Rosa", 19045, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Verde", 19046, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Roxo Escuro", 19047, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Trovao", 19048, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Festivo", 19049, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Surfista", 19050, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Laranja e Preto", 19051, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Florido", 19052, 250},
	{TOYS_TYPE_RELOGIO, "Relogio Digital Exercito", 19053, 250},
	{TOYS_TYPE_RELOGIO, "Relogio de Ponteiro de Ouro", 19042, 450},
	{TOYS_TYPE_RELOGIO, "Relogio de Ponteiro de Prata", 19040, 450},
	{TOYS_TYPE_RELOGIO, "Relogio de Ponteiro de Cobre", 19041, 450},
	{TOYS_TYPE_RELOGIO, "Relogio de Ponteiro Prateado", 19040, 450},
	// Boinas
	{TOYS_TYPE_BOINA, "Boina Vermelha", 18892, 75},
	{TOYS_TYPE_BOINA, "Boina Amarela", 18902, 75},
	{TOYS_TYPE_BOINA, "Boina Azul", 18897, 75},
	{TOYS_TYPE_BOINA, "Boina Verde", 18898, 75},
	{TOYS_TYPE_BOINA, "Boina Rosa", 18899, 75},
	{TOYS_TYPE_BOINA, "Boina Roxa", 18903, 75},
	{TOYS_TYPE_BOINA, "Boina Preta", 18891, 75},
	{TOYS_TYPE_BOINA, "Boina Xadrez", 18893, 100},
	{TOYS_TYPE_BOINA, "Boina Relampago", 18904, 100},
	{TOYS_TYPE_BOINA, "Boina 420", 18894, 100},
	{TOYS_TYPE_BOINA, "Boina UFO", 18895, 100},
	{TOYS_TYPE_BOINA, "Boina dos Insetos", 18896, 100},
	{TOYS_TYPE_BOINA, "Boina em Espiral", 18900, 100},
	{TOYS_TYPE_BOINA, "Boina do Tigre", 18901, 100},
	{TOYS_TYPE_BOINA, "Boina Militar", 18905, 100},
	{TOYS_TYPE_BOINA, "Boina Festiva", 18906, 100},
	{TOYS_TYPE_BOINA, "Boina Hippie", 18907, 100},
	{TOYS_TYPE_BOINA, "Boina Surfista", 18908, 100},
	{TOYS_TYPE_BOINA, "Boina Bolha", 18909, 100},
	{TOYS_TYPE_BOINA, "Boina Pimenta", 18910, 100},
	{TOYS_TYPE_BOINA, "Toca Preta", 18967, 85},
	{TOYS_TYPE_BOINA, "Toca Cinza", 18968, 85},
	{TOYS_TYPE_BOINA, "Toca Festiva", 18969, 90},
	{TOYS_TYPE_BOINA, "Gorro Natalino", 19065, 125},
	// Bandana
	{TOYS_TYPE_BANDANA, "Bandana Verde", 18913, 75},
	{TOYS_TYPE_BANDANA, "Bandana Cinza", 18918, 75},
	{TOYS_TYPE_BANDANA, "Bandana Preta", 18912, 75},
	{TOYS_TYPE_BANDANA, "Bandana UFO", 18911, 100},
	{TOYS_TYPE_BANDANA, "Bandana Militar", 18914, 100},
	{TOYS_TYPE_BANDANA, "Bandana Festiva", 18915, 100},
	{TOYS_TYPE_BANDANA, "Bandana Taco", 18916, 100},
	{TOYS_TYPE_BANDANA, "Bandana Relampago", 18917, 100},
	{TOYS_TYPE_BANDANA, "Bandana Tigre Branco", 18919, 100},
	{TOYS_TYPE_BANDANA, "Bandana Piramide", 18920, 100},
	// Bone
	{TOYS_TYPE_BONE, "Bone Verde", 18926, 65},
	{TOYS_TYPE_BONE, "Bone Rosa", 18934, 65},
	{TOYS_TYPE_BONE, "Bone Cinza", 18929, 65},
	{TOYS_TYPE_BONE, "Bone Bege", 18933, 65},
	{TOYS_TYPE_BONE, "Bone da Dude Cinza", 19093, 90},
	{TOYS_TYPE_BONE, "Bone da Dude Azeitona", 19160, 90},
	{TOYS_TYPE_BONE, "Bone Surfista", 18927, 80},
	{TOYS_TYPE_BONE, "Bone Hippie", 18928, 80},
	{TOYS_TYPE_BONE, "Bone Pimenta", 18930, 80},
	{TOYS_TYPE_BONE, "Bone Relampago", 18931, 80},
	{TOYS_TYPE_BONE, "Bone Festivo", 18932, 80},
	{TOYS_TYPE_BONE, "Bone Militar", 18935, 80},
	{TOYS_TYPE_BONE, "Bone da Policia Preto", 19161, 125},
	{TOYS_TYPE_BONE, "Bone da Policia Azul", 19162, 125},
	{TOYS_TYPE_BONE, "Bone da Policia Aba Cinza", 18636, 125},
	// Chapeus
	{TOYS_TYPE_CHAPEU, "Chapeu Vermelho", 18950, 250},
	{TOYS_TYPE_CHAPEU, "Chapeu Amarelo", 18951, 250},
	{TOYS_TYPE_CHAPEU, "Chapeu Azul", 18948, 250},
	{TOYS_TYPE_CHAPEU, "Chapeu Verde", 18949, 250},
	{TOYS_TYPE_CHAPEU, "Chapeu Cinza", 19488, 250},
	{TOYS_TYPE_CHAPEU, "Chapeu Preto", 18947, 250},
	{TOYS_TYPE_CHAPEU, "Chapeu Tigresa", 18970, 350},
	{TOYS_TYPE_CHAPEU, "Chapeu Pontilhado", 18971, 350},
	{TOYS_TYPE_CHAPEU, "Chapeu Florido", 18972, 350},
	{TOYS_TYPE_CHAPEU, "Chapeu Militar", 18973, 350},
	{TOYS_TYPE_CHAPEU, "Chapeu de Piloto de Aviao", 19520, 400},
	{TOYS_TYPE_CHAPEU, "Chapeu do Detran Preto", 19099, 400},
	{TOYS_TYPE_CHAPEU, "Chapeu do Detran Marrom", 19100, 400},
	{TOYS_TYPE_CHAPEU, "Chapeu de Bombeiro Amarelo", 19330, 400},
	{TOYS_TYPE_CHAPEU, "Chapeu de Bombeiro Preto", 19331, 400},
	{TOYS_TYPE_CHAPEU, "Chapeu de Cowboy Preto", 19096, 450},
	{TOYS_TYPE_CHAPEU, "Chapeu de Cowboy Marrom", 19095, 450},
	{TOYS_TYPE_CHAPEU, "Chapeu de Cowboy Rosa", 19097, 450},
	{TOYS_TYPE_CHAPEU, "Chapeu de Cowboy Marrom Escuro", 19098, 450},
	{TOYS_TYPE_CHAPEU, "Cartola Preta", 19352, 600},
	{TOYS_TYPE_CHAPEU, "Cartola Cinza", 19487, 600},
	{TOYS_TYPE_CHAPEU, "Chapeu de Palha Festivo", 18944, 200},
	{TOYS_TYPE_CHAPEU, "Chapeu de Palha Cinza", 18945, 200},
	{TOYS_TYPE_CHAPEU, "Chapeu de Palha Preto", 18946, 200},
	{TOYS_TYPE_CHAPEU, "Chapeu de Rockeiro", 19136, 400},
	// Mascaras
	{TOYS_TYPE_MASCARA, "Mascara de Hockey Branca", 19036, 250},
	{TOYS_TYPE_MASCARA, "Mascara de Hockey Vermelha", 19037, 250},
	{TOYS_TYPE_MASCARA, "Mascara de Hockey Verde", 19038, 250},
	{TOYS_TYPE_MASCARA, "Mascara do Zorro", 18974, 350},
	{TOYS_TYPE_MASCARA, "Mascara de Gas", 19472, 450},
	{TOYS_TYPE_MASCARA, "Mascara de Estuprador", 19163, 250},
	{TOYS_TYPE_MASCARA, "Capacete Emplumado Cinza", 18936, 400},
	{TOYS_TYPE_MASCARA, "Capacete Emplumado Vermelho", 18936, 400},
	{TOYS_TYPE_MASCARA, "Capacete Emplumado Azul", 18936, 400},
	// Perucas
	{TOYS_TYPE_PERUCA, "Peruca Black Power", 18640, 1000},
	{TOYS_TYPE_PERUCA, "Peruca Topete", 19077, 1000},
	{TOYS_TYPE_PERUCA, "Peruca Afro", 18975, 1000},
	{TOYS_TYPE_PERUCA, "Peruca de Palhaco", 19274, 1200},
	{TOYS_TYPE_PERUCA, "Peruca de Velho", 19518, 1200},
	// Bigodes
	{TOYS_TYPE_MAGNATA, "Bigode Magnata", 19350, 350},
	{TOYS_TYPE_MAGNATA, "Bigode Frances", 19351, 350},
	{TOYS_TYPE_MAGNATA, "Monoculo", 19349, 450},
	{TOYS_TYPE_MAGNATA, "Bengala", 19348, 200},
	// VIP
	{TOYS_TYPE_VIP, "Chapeu Funcionario Cluckin Bell", 19137, 1000},
	{TOYS_TYPE_VIP, "Chapeu Funcionario BurgerShot", 19094, 1000},
	{TOYS_TYPE_VIP, "Chapeu de Pedreiro", 18638, 1200},
	{TOYS_TYPE_VIP, "Escudo do Batalhao de Shock", 18637, 3000},
	{TOYS_TYPE_VIP, "Colete", 19142, 3000},
	{TOYS_TYPE_VIP, "Vara de Pescar", 18632, 1000},
	{TOYS_TYPE_VIP, "Lanterna", 18641, 1000},
	{TOYS_TYPE_VIP, "Distintivo", 19347, 1500},
	{TOYS_TYPE_VIP, "Guitarra Ibanez GRG 150", 19317, 3000},
	{TOYS_TYPE_VIP, "Guitarra Gibson Flying V", 19318, 3000},
	{TOYS_TYPE_VIP, "Guitarra Trace Warbeast", 19319, 3000}
};

new AttachmentBones[][24] = {
	{"Coluna"},
	{"Cabeca"},
	{"Braco esquerdo"},
	{"Braco direito"},
	{"Mao esquerda"},
	{"Mao direita"},
	{"Coxa esquerda"},
	{"Coxa direita"},
	{"Pe esquerdo"},
	{"Pe direito"},
	{"Panturrilha direita"},
	{"Panturrilha esquerda"},
	{"Antebraco esquerdo"},
	{"Braco direito"},
	{"Clavicula esquerda"},
	{"Clavicula direita"},
	{"Pescoco"},
	{"Mandibula"}
};

#define MAX_ANIMS 130
/*static const AnimesListLoader[MAX_ANIMS][13] =
{
	"Attractors","Bar","Baseball","Bd_fire","Beach","Benchpress","Bf_injection","Biked","Bikeh","Bikeleap",
	"Bikes","Bikev","Bike_dbz","Bmx","Bomber","Box","Bsktball","Buddy","Bus","Camera",
	"Car","Carry","Car_chat","Casino","Chainsaw","Choppa","Clothes","Coach","Colt45","Cop_ambient",
	"Cop_dvbyz","Crack","Crib","Dam_jump","Dancing","Dealer","Dildo","Dodge","Dozer","Drivebys",
	"Fat","Fight_b","Fight_c","Fight_d","Fight_e","Finale","Finale2","Flame","Flowers","Food",
	"Freeweights","Gangs","Ghands","Ghetto_db","Goggles","Graffiti","Graveyard","Grenade","Gymnasium","Haircuts",
	"Heist9","Int_house","Int_office","Int_shop","Jst_buisness","Kart","Kissing","Knife","Lapdan1","Lapdan2",
	"Lapdan3","Lowrider","Md_chase","Md_end","Medic","Misc","Mtb","Muscular","Nevada","On_lookers",
	"Otb","Parachute","Park","Paulnmac","Ped","Player_dvbys","Playidles","Police","Pool","Poor",
	"Python","Quad","Quad_dbz","Rapping","Rifle","Riot","Rob_bank","Rocket","Rustler","Ryder",
	"Scratching","Shamal","Shop","Shotgun","Silenced","Skate","Smoking","Sniper","Spraycan","Strip",
	"Sunbathe","Swat","Sweet","Swim","Sword","Tank","Tattoos","Tec","Train","Truck",
	"Uzi","Van","Vending","Vortex","Wayfarer","Weapons","Wuzi","Wop","Gfunk","Runningman"
};*/

static FloorNames[][] =
{
	"Terreo",
	"° Andar - Imobiliaria",
	"2Ñ Andar - Detran",
	"3Ñ Andar",
	"4Ñ Andar",
	"5Ñ Andar",
	"6Ñ Andar",
	"7Ñ Andar",
	"8Ñ Andar",
	"9Ñ Andar",
	"10Ñ Andar",
	"1° Andar",
	"12Ñ Andar",
	"13Ñ Andar",
	"14Ñ Andar",
	"15Ñ Andar",
	"16Ñ Andar",
	"17Ñ Andar",
	"18Ñ Andar",
	"19Ñ Andar",
	"20Ñ Andar"
};

static Float:FloorZOffsets[] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};

// easter eggs
enum EasterEgg
{
    eLevel,
    eGrana,
    Float:eX,
    Float:eY,
    Float:eZ,
    eID
};
new egg[MAX_EGGS][EasterEgg], totaleggs;

enum pInfo
{
    pName[MAX_PLAYER_NAME],
	pLogger,
    pSenha[MAX_SENHA],
    pErrouSenha,
    pSenhaAtiva,
    Float:pVida,
    Float:pColete,
    pLevel,
    pExp,
    pFome,
    pSede,
    pTimerF,
    pTimerS,
    pSalario,
    pDinheiro,
    pBanco,
    pAdmin,
    pVIP,
    pVIPTEMP,
    pOrg,
    pCargo,
    pDespedidoOrg,
    pTutorial,
    pSegundosUP,
    pMinutosUP,
    pSkin,
    pSex,
    pInicio,
    pAWork,
    pMateriais,
    pKnow[128],
    pLastLogin[50],
    pEmail[50],
    pIdade,
    pWalkingStyle,
    pCapacete,
    bool:UsandoCapacete,
    pGPS,
    pAgenda,
    pSpawnType,
    pHouse1,
    pHouse2,
    pHouseEnter,
 	pEmpKey,
    pWorld,
    pCheckGPS,
    pCheck,
    pEmprego,
    Text3D:pEmpLabel,
    pColdre,
    bool:pPlanoSaude,
    bool:temparceiro,
    TemBeneficio,
    Organizador,
    pAvaliacoes,

    bool:DigitouSenha,
    SenhaDigitada[100],
    bool:Mobile,
    VIPescolhido,
    SOCIOescolhido,
    VIPvalor,
    SOCIOvalor,
    Cash,
    CasaCash,
    VeiculoCash,
    EmpresaCash,
    CriarCasaCash,
    CriarSetCash,
    pMultas,
    bool:PegouKIT,

    NoEvento,

   /* pVehKey1,
    pVehKey2,
    pVehKey3,
    pVehKey4,
    pVehKey5,*/

    bool:pTextABlock,
	bool:pChatABlock,
	bool:pChatCA,
	bool:CfgColdreAtivo,
	bool:CfgVelocimetro,
	bool:CfgRelogioUP,
    bool:CfgCash,
    bool:CfgChatKill,

    bool:pBlockCA,
	pBlockCATemp,

    //Hospital
    pHospTemp,
    pHospitalizado,

    bool:Morreu,
    Float:DeathX,
    Float:DeathY,
    Float:DeathZ,
    DeathInt,

    //Sistema de spawn
    Float:UltimaPosX,
    Float:UltimaPosY,
    Float:UltimaPosZ,
    Float:UltimaPosA,
    UInt,
	UWorld,
    IDcomprar,
    VALORcomprar,

    //Ban e Kick Aviso
    BanAviso,
    KickAviso,
    //Flood
    _Aviso,
    _TAlert,
	bool:pBlockchat,
	pBlockTemp,

	//Loteria
	pBilheteMega,

	//Questooes
	/*pQuestID,
	pQuestAcert,*/

	//Sistema de Morte
	timeOfDeath[MAX_PLAYERS],
	PedMorto[MAX_PLAYERS],

    //Prisao
    pWanted,
	PresoTempo,
	PresoOrg,

	//Weapons
	pWeapon1,
	pBullet1,
	pWeapon2,
	pBullet2,
	pWeapon3,
	pBullet3,
	pWeapon4,
	pBullet4,
	pWeapon5,
	pBullet5,
	pWeapon6,
	pBullet6,
	pWeapon7,
	pBullet7,
	pWeapon8,
	pBullet8,
	pWeapon9,
	pBullet9,
	pWeapon10,
	pBullet10,
	pWeapon11,
	pBullet11,
	pWeapon12,
	pBullet12,

	//Mecanico
	pRepairOffer,
	pRepairValue,
	pUniforme,

	//Sistema de Habilitaçoes
	pHabA,
	pHabB,
	pHabD,
	pHabE,
	pHabAR,
	pHabN,
	pHabES,
	// Sistema de Lutas
	pLutas,

	//Sistema de Drogas
	pMaconha,
	pCocaina,
	pCrack,

    //DJ
    musica,

	// Taxista
	pTaxiOffer,
	pTaxiValue,

	pProfLevel[MAX_PROFS],

	PrimeiraVezMO,
	PrimeiraVezPetro,
	PrimeiraVezLix,
	PrimeiraVezCart,
	PrimeiraVezMec,
	PrimeiraVezMin,
	PrimeiraVezTax,
	PrimeiraVezAdv,
	PrimeiraVezPara,
	PrimeiraVezLenh,
	PrimeiraVezEPizza,

	pFichas,

	pTimerCheat,
    pTimerComb

};


new TempoMortePQP[MAX_PLAYERS];

new TimerComb[MAX_PLAYERS];

enum rInfo //RADAR
{
    Float:rX,
    Float:rY,
    Float:rZ,
    Float:rA,
    rVelocidade,
    rObjeto[2],
    //rIcone,
    Text3D:rText
};
new radar[MAX_RADAR][rInfo], PassouRadar, TOTALRADAR;

enum E_ARMS {
	w_ArmaID,
	w_Balas,
	Float:w_PosX,
	Float:w_PosY,
	Float:w_PosZ,
	Text3D:w_Label,
	w_Pickup,
	bool:w_Ativa
};

enum CofreInfo{
	Dinheiro,
	Materiais,
	Maconha,
	Cocaina,
	Crack,
	WEagle,
	WPistol,
	WShot,
	WMP5,
	WAK47,
	WM4,
 	WRifle,
	WGranada,
    WColote,
	salarioc1,
	salarioc2,
	salarioc3,
	salarioc4,
	salarioc5,
	salariolider
};


enum Oinfo {
	Lider[MAX_PLAYER_NAME],
	SubLider[MAX_PLAYER_NAME],
	SubLider2[MAX_PLAYER_NAME],
	Membro1[MAX_PLAYER_NAME],
	Membro2[MAX_PLAYER_NAME],
	Membro3[MAX_PLAYER_NAME],
	Membro4[MAX_PLAYER_NAME],
	Membro5[MAX_PLAYER_NAME],
	Membro6[MAX_PLAYER_NAME],
	Membro7[MAX_PLAYER_NAME],
	Membro8[MAX_PLAYER_NAME],
	Membro9[MAX_PLAYER_NAME],
	Membro10[MAX_PLAYER_NAME],
	Membro11[MAX_PLAYER_NAME],
	Membro12[MAX_PLAYER_NAME],
	Membro13[MAX_PLAYER_NAME],
	Membro14[MAX_PLAYER_NAME],
	Membro15[MAX_PLAYER_NAME],
	Membro16[MAX_PLAYER_NAME],
	Membro17[MAX_PLAYER_NAME],
	Membro18[MAX_PLAYER_NAME],
	Membro19[MAX_PLAYER_NAME],
	Membro20[MAX_PLAYER_NAME],
	PatenteName1[20],
	PatenteName2[20],
	PatenteName3[20],
	PatenteName4[20],
	PatenteName5[20],
	PatenteName6[20]
};

enum Oinfo2{
	Candidato1[MAX_PLAYER_NAME],
	Candidato2[MAX_PLAYER_NAME],
	Candidato3[MAX_PLAYER_NAME],
	Candidato4[MAX_PLAYER_NAME],
	Candidato5[MAX_PLAYER_NAME],
	Candidato6[MAX_PLAYER_NAME],
	Candidato7[MAX_PLAYER_NAME],
	Candidato8[MAX_PLAYER_NAME],
	Candidato9[MAX_PLAYER_NAME],
	Candidato10[MAX_PLAYER_NAME],
};

enum hInfo
{
    hOwner[32],
    hOwned,
    bool:hVipHouse,
    hPrice,
    Float: hEntranceX,
    Float: hEntranceY,
    Float: hEntranceZ,
    Float: hExitX,
    Float: hExitY,
    Float: hExitZ,
    Float: hSpawnX,
    Float: hSpawnY,
    Float: hSpawnZ,
    Float: hSpawnA,
    hInterior,
    hWorld,
    hLocked,
    bool:hExist
};

enum hinfo2 {
	h_Int,
	Float:h_Px,
	Float:h_Py,
	Float:h_Pz,
	Float:h_Sx,
	Float:h_Sy,
	Float:h_Sz,
	Float:h_Sa,
	h_value,
	h_eps
};


new InteriorHouse[][hinfo2] = {
    {8, 2807.6999, -1174.5, 1025.5999, 2812.3694, -1167.7023, 1029.1719, 357.4108, 50000, 0},
	{3, 235.5089, 1189.1698, 1080.3399, 223.4618, 1196.2832, 1080.2656, 344.1058, 50000, 0},
	{2, 225.7569, 1240.0000, 1082.1499, 223.4704, 1250.8544, 1082.1406, 55.0881, 50000, 0},
	{1, 223.1292, 1287.5729, 1082.1406, 1.8002, 1293.0381, 1082.1406, 182.5926, 50000, 0},
	{10, 2259.6999, -1135.9000, 1050.5999, 2260.7974, -1141.2212, 1050.6328, 339.8873, 50000, 0},
	{8, 2365.3000, -1135.1999, 1050.9000, 2371.5513, -1124.7029, 1050.8750, 184.2059, 50000, 0},
	{6, 2196.5, -1204.3000, 1049.0, 2198.5649, -1217.0319, 1049.0234, 124.3821, 50000, 0},
	{10, 2270.1999, -1210.5, 1047.5999, 2248.6057, -1209.1210, 1049.0234, 271.3369, 50000, 0},
	{2, 2237.6000, -1081.0999, 1049.0, 2242.5176, -1078.5479, 1049.0234, 0.3477, 50000, 0},
	{9, 2317.8000, -1026.8000, 1050.1999, 2328.2793, -1013.0277, 1050.2109, 269.7935, 50000, 0},
	{4, 261.0, 1284.5999, 1080.3000, 265.1830, 1293.9318, 1080.2578, 112.2087, 50000, 0},
	{9, 83.1999, 1322.8000, 1083.9000, 92.5923, 1336.6315, 1088.3672, 84.3440, 50000, 0},
	{15, -284.0, 1471.0, 1084.4000, -292.1408, 1478.3896, 1088.8750, 134.1645, 50000, 0},
	{8, -45.5, 1405.8000, 1084.4000, -49.4788,1399.1814,1084.4297,337.2063, 50000, 0},
	{6, 2333.1999, -1077.0, 1049.0, 2340.8774,-1063.0236,1049.0310,101.2875, 50000, 0},
	{3, 966.2000, -53.2000, 1001.0999, 951.8765,-54.4150,1001.1172,1.6934, 50000, 0},
	{5, 1261.3000, -785.4000, 1091.9000, 1276.1833,-794.2271,1089.9375,312.1862, 50000, 0},
	{7, 225.630997, 1022.479980, 1084.069946, 238.8535,1020.1136,1084.0276,279.9125, 50000, 0},
	{15, 328.493988, 1480.589966, 1084.449951, 322.5442,1487.9918,1084.4443,331.5897, 50000, 0},
	{15, 385.803986, 1471.769897, 1080.209961, 372.6799,1461.0883,1080.1875,114.4710, 50000, 0}
};

//Sistema de empresas com interior
enum empinfo
{
	EDono[MAX_PLAYER_NAME],
	ESocio[MAX_PLAYER_NAME],
	EMessage[128],
	EType,
	EEstado,
	EPreco,
	Float:ELocalX,
	Float:ELocalY,
	Float:ELocalZ,
	ELocked,
	ELevel,
	ECEntrada,
	EGrana,

	EmpMapIcon,
	bool:EEmpExist,

	EmpPickup,
	Text3D:EmpLabel
};

//Sistema de Portoes
enum ginfo
{
	Dono[MAX_PLAYER_NAME],
	CopyKey1[MAX_PLAYER_NAME],
	CopyKey2[MAX_PLAYER_NAME],
	CopyKey3[MAX_PLAYER_NAME],
	Model,
	IntID,
	Id2,
    Text3D:gText,
	SDono,
	Speed,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosRX,
	Float:aPosRY,
	Float:aPosRZ
};

enum cVeh{
    vID
}
;
// Sistema de Veiculos
/*enum cVeh
{
	vID,
	vVeiculo,
	bool:vIsValid,
	vDono[MAX_PLAYER_NAME],
	vPreco,
	vModel,
	vCombustivel,
	vSeguro,
	vPlaca[10],
	vConsumo,
	vCor1,
	vCor2,
	vNitro,
	vRodas,
	vSuspensao,
	vEstado,
	//vDoc,

	bool:vDoors,
	bool:vRadio,
	bool:vGPS,

    bool:vAlarme,
	vAlarmStatus,

	bool:vNeon,
	vNeonColor,
	bool:vNeonStatus,

	Float:vDamage,

	Float:vLocalX,
	Float:vLocalZ,
	Float:vLocalY,
	Float:vLocalA
};*/

enum Conceinfo
{
	c_model,
	c_consumo,
	c_preco,
	c_level,
	c_EP
};

new ConceTerrestreVeiculos[][Conceinfo] = {
	// id veiculo, kilometros por litro, preço, level (100 = VIP) EP (EURO POINTS)
	{400, 10, 36000, 0, 1},
	{401, 15, 25300, 0, 1},
	{402, 11, 78000, 0, 1},
	{404, 20, 6325, 0, 1},
	{405, 16, 26700, 0, 1},
	{409, 14, 856000, 100, 8},
	{410, 18, 16210, 0, 1},
	{411, 12, 565000, 100, 6},
	{412, 17, 28371, 0, 1},
	{413, 19, 19253, 0, 1},
	{415, 14, 87652, 100, 1},
	{418, 22, 27600, 0, 1},
	{419, 15, 24500, 0, 1},
	{421, 19, 21550, 0, 1},
	{422, 15, 15500, 0, 1},
	{424, 13, 89530, 0, 1},
	{426, 17, 31250, 0, 1},
	{429, 13, 115320, 100, 1},
	{434, 14, 214000, 100, 1},
	{436, 17, 13025, 0, 1},
	{439, 15, 30500, 0, 1},
	{440, 18, 19100, 0, 1},
	{442, 16, 39750, 0, 1},
	{445, 17, 10250, 0, 1},
	{451, 12, 250300, 100, 2},
	{458, 18, 32500, 0, 1},
	{459, 16, 47500, 0, 1},
	{466, 17, 17500, 0, 1},
	{467, 17, 16750, 0, 1},
	{470, 13, 64530, 0, 1},
	{474, 19, 19530, 0, 1},
	{475, 17, 49740, 0, 1},
	{477, 12, 120930, 100, 1},
	{478, 23, 4500, 0, 1},
	{479, 16, 14300, 0, 1},
	{480, 14, 89350, 0, 1},
	{482, 17, 23575, 0, 1},
	{483, 16, 6230, 0, 1},
	{489, 15, 59320, 0, 1},
	{491, 19, 8569, 0, 1},
	{492, 16, 14550, 0, 1},
	{494, 12, 157505, 100, 1},
	{495, 14, 59530, 0, 1},
	{496, 15, 25530, 0, 1},
	{500, 16, 43094, 0, 1},
	{502, 11, 175203, 100, 2},
	{503, 12, 169503, 0, 1},
	{505, 18, 53500, 0, 1},
	{506, 11, 357350, 100, 3},
	{507, 16, 27530, 0, 1},
	{508, 12, 43250, 0, 1},
	{516, 16, 35300, 0, 1},
	{517, 16, 21500, 0, 1},
	{518, 15, 19673, 0, 1},
	{526, 14, 12250, 0, 2},
	{527, 17, 18523, 0, 1},
	{533, 15, 20530, 0, 1},
	{534, 16, 27000, 0, 1},
	{535, 13, 55075, 0, 1},
	{536, 14, 32500, 0, 2},
	{540, 16, 17530, 0, 1},
	{541, 14, 375300, 100, 3},
	{542, 18, 11500, 0, 1},
	{543, 17, 10000, 0, 3},
	{545, 18, 32500, 0, 1},
	{546, 19, 12553, 0, 1},
	{547, 16, 15300, 0, 1},
	{549, 14, 43574, 0, 1},
	{550, 15, 19500, 0, 1},
	{551, 17, 24550, 0, 2},
	{554, 16, 47530, 0, 1},
	{555, 15, 20530, 0, 1},
	{558, 16, 37050, 0, 1},
	{559, 14, 45300, 0, 1},
	{560, 13, 75020, 0, 1},
	{561, 16, 37530, 0, 1},
	{562, 14, 125300, 0, 1},
	{565, 16, 41530, 0, 1},
	{566, 17, 19550, 0, 2},
	{567, 13, 59320, 0, 1},
	{568, 15, 53500, 0, 1},
	{575, 16, 43500, 0, 1},
	{576, 14, 8000, 0, 1},
	{579, 15, 75300, 0, 1},
	{580, 17, 24550, 0, 2},
	{585, 17, 15000, 0, 2},
	{587, 16, 125000, 100, 1},
	{589, 17, 42730, 0, 1},
	{600, 15, 18530, 0, 1},
	{602, 17, 215750, 100, 2},
	{603, 16, 137500, 100, 1},
	{589, 13, 42730, 0, 1},
	{600, 12, 18530, 0, 1}
};

new ConceTerrestreBikes[][Conceinfo] = {
	{461, 25, 16300, 0, 1},
	{462, 35, 4600, 0, 1},
	{463, 30, 40000, 0, 1},
	{468, 26, 26400, 0, 1},
	{471, 26, 49250, 0, 1},
	{521, 24, 32900, 0, 1},
	{522, 20, 63400, 100, 1},
	{581, 29, 18000, 0, 1},
	{586, 30, 43000, 0, 1}

};

//new ConceTerrestreUltimaPos;


new SkinEscolhida[MAX_PLAYERS],
    ActorSkin[MAX_PLAYERS],
    EntrouLojaSkin[MAX_PLAYERS];

enum skininfo
{
    skID,
    skVALOR
};

new Skins[][skininfo] =
{
    {2, 200},
    {6, 200},
    {7, 200},
    {12, 200},
    {20, 200},
    {21, 200},
    {22, 200},
    {24, 200},
    {25, 200},
    {28, 200}, //traficantes
    {29, 200}, //traficantes
    {30, 200}, //traficantes
    {121, 200}, //traficantes
    {47, 200},
    {48, 200},
    {49, 200},
    {86, 200},
    {101, 200},
    {102, 200}, //Gang Balas "CV"
    {103, 200}, //Gang Balas "CV"
    {104, 200}, //Gang Balas "CV"
    {105, 200}, //Gang Grove
    {106, 200}, //Gang Grove
    {107, 200}, //Gang Grove
    {108, 200}, //Los Vargos "PCC"
    {109, 200}, //Los Vargos "PCC"
    {110, 200}, //Los Vargos "PCC"
    {111, 200}, //Mafia Russa
    {112, 200}, //Mafia Russa
    {113, 200}, //Mafia Russa
    {114, 200}, //Los Astec "ADA"
    {115, 200}, //Los Astec "ADA"
    {116, 200}, //Los Astec "ADA"
    {173, 200}, //San fierro "gang"
    {269, 200}, //Los Santos "123"
    {270, 200}, //Los Santos "123"
    {271, 200}, //Los Santos "123"

    {12, 200},
    {13, 200},
    {40, 200},
    {41, 200},
    {55, 200},
    {56, 200},
    {63, 200}, //Prostitutas
    {64, 200}, //Prostitutas
    {65, 200},
    {75, 200}, //Prostitutas
    {85, 200}, //Prostitutas
    {87, 200}, //Stripper
    {91, 200},
    {93, 200},
    {138, 200}, //Bikini
    {139, 200}, //Bikini
    {140, 200}, //Bikini
    {141, 200},
    {150, 200}, //Advogada
    {152, 200}, //Prostitutas
    {169, 200},
    {172, 200},
    {178, 200}, //PERIGO
    {190, 200},
    {191, 200},
    {192, 200},
    {193, 200},
    {194, 200},
    {195, 200},
    {211, 200},
    {214, 200},
    {216, 200},
    {219, 200},
    {226, 200},
    {233, 200},
    {237, 200}, //Prostitutas
    {244, 200}, //Prostitutas
    {246, 200}, //Prostitutas
    {251, 200}, //Prostitutas
    {256, 200}, //Prostitutas
    {257, 200}, //Prostitutas
    {298, 200}
};

// skin org
new SkinsPM[][skininfo] =
{
    {280, 0},
    {281, 0},
    {267, 0} //Policia Militar
};

new SkinsBOPE[][skininfo] =
{
    {285, 0}
};

new SkinsCV[][skininfo] =
{
    {114, 0},
    {115, 0},
    {116, 0}
};

new SkinsPCC[][skininfo] =
{
    {108, 0},
    {109, 0},
    {110, 0}
};

enum // == Cores
{
    COR_Taxista =         0xF7FE2EAA,
    COR_Lixeiro =         0xFAAC58AA,
    COR_Petroleiro =      0xBE81F7AA,
    COR_Motorista =       0x316262AA,
    COR_Carteiro =        0xF79F81AA,
    COR_Mecanico =        0x5858FAAA,
    COR_Minerador =       0xACFA58AA,
    COR_Advogado =        0x9A2EFEAA,
    COR_Paramedico =      0xFE2E64AA,
    COR_Lenhador =        0x886A08AA,
    COR_PizzaJob =        0xFF8000AA
};


/*
new Float:conceNewbiesPos[][] =
{
	{1706.0975,-1798.0688,13.2462,269.3914},
	{1706.5543,-1792.4154,13.2777,269.2815},
	{1706.8767,-1787.3491,13.3742,269.4046},
	{1706.7727,-1782.5620,13.4468,269.6357},
	{1706.8267,-1777.3057,13.4702,269.4816},
	{1706.8801,-1772.3080,13.4951,269.3998},
	{1707.1019,-1767.4365,13.5244,268.3251},
	{1706.8438,-1762.5559,13.5450,269.9272},
	{1706.8636,-1757.5394,13.4899,269.5717},
	{1707.0398,-1751.0553,13.4120,269.9635},
	{1706.1921,-1745.0363,13.2987,270.4673}
};
*/

/*new Float:conceNewbiesPos[][] =
{
    {2147.888427,-1203.515625,23.579528,269.603576},
    {2148.004394,-1198.808105,23.613475,268.949005},
    {2148.088867,-1194.344360,23.559419,269.286193},
    {2147.806884,-1189.842163,23.547393,269.516937},
    {2148.115234,-1185.057373,23.547388,270.945739},
    {2148.097900,-1180.254516,23.547393,267.957977},
    {2147.869873,-1175.608642,23.547393,270.063537},
    {2147.799804,-1170.994384,23.547391,270.323547},
    {2147.871093,-1166.249633,23.547395,268.921661},
    {2147.871093,-1166.249633,23.547395,268.921661},
    {2148.529541,-1161.496215,23.550506,271.210021},
    {2147.788574,-1157.274291,23.572805,270.606170},
    {2148.081054,-1152.945068,23.663002,269.016723},
    {2148.296630,-1148.397827,24.131010,270.967864},
    {2148.419921,-1143.096679,24.712415,267.350708},
    {2148.767578,-1138.582031,25.209732,269.914489},
    {2148.835693,-1133.876708,25.294012,268.201171},
    {2162.013183,-1143.620849,24.584140,90.732299},
    {2161.779052,-1148.322875,24.105255,90.669883},
    {2162.255371,-1152.880493,23.664327,89.517684},
    {2161.833007,-1158.112548,23.566501,87.591941},
    {2161.852783,-1162.981323,23.544040,92.435569},
    {2161.811035,-1168.074951,23.545682,89.759063},
    {2162.119628,-1172.872924,23.545301,90.983360},
    {2162.154052,-1177.564331,23.545522,90.577453},
    {2161.867919,-1182.450317,23.544910,89.527130},
    {2161.645751,-1187.778198,23.546262,89.512748},
    {2161.925292,-1192.343261,23.547376,90.058822},
    {2161.904541,-1196.943237,23.619655,91.536170}
};
*/
/*new Float:ConceTerrestrePos[14][] = {
	{2147.7437, -1152.8286, 23.6696, 268.5766},
	{2147.8477, -1157.3835, 23.5722, 269.6382},
	{2148.5742, -1161.5323, 23.5504, 267.9843},
	{2148.0005, -1166.3317, 23.5474, 267.5713},
	{2148.0708, -1170.8019, 23.5474, 268.5347},
	{2148.0010, -1175.7871, 23.5474, 268.2812},
	{2148.0530, -1180.2384, 23.5474, 269.5532},
	{2148.2090, -1184.8285, 23.5474, 269.1677},
	{2161.4829, -1192.4773, 23.5474, 89.5307},
	{2161.4050, -1182.7974, 23.5450, 89.0300},
	{2161.1265, -1177.8799, 23.5456, 87.5791},
	{2161.3748, -1163.1691, 23.5435, 89.0610},
	{2161.6016, -1157.9863, 23.5671, 89.8609},
	{2161.2725, -1148.7477, 24.0620, 88.2285}
};*/

//Exame Moto Pista
new Float:MotoPistaTest[35][3] = {
	{ -2061.5049, -114.1256, 34.9227},
	{ -2082.5618, -209.1084, 34.8933},
	{ -2064.8252, -236.6233, 34.8991},
	{ -2091.5222, -259.0858, 34.8827},
	{ -2057.9487, -246.7453, 34.8921},
	{ -2082.4287, -265.6734, 34.8841},
	{ -2072.3848, -267.9534, 34.8899},
	{ -2065.9453, -270.6672, 34.8996},
	{ -2059.3083, -267.3587, 34.8913},
	{ -2053.9165, -270.6945, 34.8916},
	{ -2047.2545, -267.2112, 34.8961},
	{ -2041.1064, -270.4273, 34.8921},
	{ -2036.3995, -266.7715, 34.8883},
	{ -2031.5027, -271.3363, 34.8949},
	{ -2019.4928, -256.4401, 34.9592},
	{ -2022.4731, -250.8140, 35.0879},
	{ -2016.1047, -243.5144, 35.0618},
	{ -2022.8538, -237.3977, 35.0047},
	{ -2026.8696, -216.0406, 34.8932},
	{ -2032.5935, -211.2124, 34.8921},
	{ -2034.6404, -216.8492, 34.8921},
	{ -2028.5948, -218.2765, 34.8921},
	{ -2027.4423, -212.8817, 34.8915},
	{ -2037.3318, -210.8736, 34.8947},
	{ -2036.9550, -203.9949, 34.8923},
	{ -2046.1648, -200.5472, 34.8885},
	{ -2040.3114, -198.8771, 34.8849},
	{ -2043.5034, -203.2558, 34.8850},
	{ -2058.5493, -185.1481, 34.8764},
	{ -2077.7490, -167.5296, 34.8911},
	{ -2068.2651, -150.4858, 34.8917},
	{ -2027.9838, -148.8703, 34.8859},
	{ -2024.4750, -140.6543, 34.8668},
	{ -2066.1279, -140.6277, 34.8838},
	{ -2047.0315, -108.4245, 34.7911}
};



#define CAT_NONE 0
#define CAT_A 1
#define CAT_B 2
#define CAT_D 3
#define CAT_E 4
#define CAT_N 5
#define CAT_AR 6
#define CAT_ES 7

new DinheiroAntesTrab[MAX_PLAYERS];


//Veiculos e suas respectivas Categorias
new VehicleCategory[] = {
    CAT_B,
	CAT_B,
	CAT_B,
	CAT_E,
	CAT_B,
	CAT_E,
	CAT_ES,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_ES,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_N,
	CAT_D,
	CAT_ES,
	CAT_E,
	CAT_B,
	CAT_NONE,
	CAT_B,
	CAT_D,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_B,
	CAT_E,
	CAT_ES,
	CAT_B,
	CAT_N,
	CAT_ES,
	CAT_A,
	CAT_NONE,
	CAT_NONE,
	CAT_B,
	CAT_N,
	CAT_N,
	CAT_N,
	CAT_E,
	CAT_E,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_A,
	CAT_A,
	CAT_A,
	CAT_NONE,
	CAT_NONE,
	CAT_B,
	CAT_B,
	CAT_A,
	CAT_ES,
	CAT_B,
	CAT_A,
	CAT_N,
	CAT_N,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_B,
	CAT_B,
	CAT_N,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_AR,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_N,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE, //Bike nao tem habilitaçao,
	CAT_NONE, //Bike nao tem habilitaçao,
	CAT_AR,
	CAT_AR,
	CAT_AR,
	CAT_E,
	CAT_E,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_ES,
	CAT_A,
	CAT_A,
	CAT_A,
	CAT_E,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_NONE,
	CAT_N,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_E,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_B,
	CAT_B,
	CAT_ES,
	CAT_ES,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_NONE,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_NONE,
	CAT_B,
	CAT_B,
	CAT_E,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_AR,
	CAT_E,
	CAT_B,
	CAT_B,
	CAT_A,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_B,
	CAT_A,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_NONE,
	CAT_AR,
	CAT_AR,
	CAT_NONE,
	CAT_N,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_B,
	CAT_NONE,
	CAT_NONE,
	CAT_NONE,
	CAT_B,
	CAT_NONE,
	CAT_NONE
};

//Velocidade Maxima
new VeiculosMaxSpeed[] = {
	163,
	152,
	191,
	115,
	138,
	169,
	117,
	154,
	111,
	162,
	135,
	226,
	173,
	117,
	115,
	197,
	159,
	112,
	122,
	154,
	151,
	158,
	145,
	106,
	141,
	170,
	178,
	171,
	161,
	206,
	139,
	136,
	102,
	115,
	171,
	40,
	153,
	162,
	147,
	173,
	141,
	80,
	144,
	145,
	131,
	116,
	168,
	243,
	107,
	119,
	185,
	198,
	187,
	67,
	132,
	163,
	110,
	100,
	162,
	40,
	131,
	166,
	115,
	148,
	200,
	200,
	151,
	145,
	148,
	140,
	161,
	115,
	125,
	107,
	153,
	177,
	182,
	191,
	122,
	144,
	187,
	73,
	161,
	127,
	69,
	104,
	69,
	175,
	170,
	144,
	161,
	154,
	145,
	185,
	219,
	181,
	167,
	175,
	112,
	127,
	145,
	14,
	220,
	220,
	178,
	174,
	184,
	171,
	112,
	110,
	110,
	270,
	270,
	300,
	125,
	147,
	162,
	163,
	169,
	270,
	300,
	200,
	225,
	20,
	135,
	180,
	163,
	153,
	181,
	154,
	65,
	75,
	114,
	172,
	173,
	163,
	178,
	300,
	300,
	111,
	160,
	208,
	169,
	156,
	153,
	153,
	154,
	147,
	270,
	158,
	149,
	162,
	125,
	266,
	148,
	162,
	115,
	115,
	160,
	182,
	173,
	158,
	182,
	151,
	93,
	169,
	164,
	190,
	150,
	300,
	300,
	98,
	65,
	115,
	153,
	162,
	162,
	190,
	135,
	162,
	157,
	170,
	140,
	90,
	300,
	157,
	162,
	169,
	112,
	167,
	300,
	300,
	274,
	175,
	65,
	101,
	180,
	180,
	180,
	162,
	155,
	115,
	173,
	175,
	161,
	155,
	104,
	104,
	300,
	112,
	300,
	300
};

new Float:CacaObjects[][3] = {
    {-1611.0374,-1915.2295,91.9374},
	{-1654.3376,-1705.4436,3.9677},
	{-1388.5555,-1912.6348,26.2867},
	{-1415.9030,-2040.2267,0.9353},
	{-1504.3273,-2140.5869,0.8760},
	{-1659.7134,-2438.0759,99.4722},
	{-1401.9694,-2490.4661,45.8682},
	{-1486.6349,-2500.6169,61.1497},
	{-1662.3113,-2434.1411,99.9181},
	{-1805.4933,-2442.4536,23.4845},
	{-1916.9709,-2404.2129,30.1482},
	{-1801.9448,-2282.0710,67.5424},
	{-1641.0441,-2298.1411,60.9841},
	{-1422.4589,-2631.4497,34.9111},
	{-1128.7074,-2646.2751,15.2439},
	{-934.1075,-2637.6799,96.6086},
	{-1033.3667,-2773.7830,116.2592},
	{-789.3524,-2539.5195,91.4496},
	{-909.2827,-2386.6570,53.5773},
	{-866.6528,-2192.3364,31.4882},
	{-1080.6681,-2147.4785,40.6251},
	{-1225.9463,-2371.3938,0.8622}
};

new CacaObject[MAX_PLAYERS char],
	bool:Cacando[MAX_PLAYERS char],
	bool:PegouCaca[MAX_PLAYERS char],
	bool:PegouCervo[MAX_PLAYERS char],
	CacandoTemp[MAX_PLAYERS char],
	CacaID[MAX_PLAYERS char],
	CacaProgress[MAX_PLAYERS char];


new PrimeiroSpawn_[MAX_PLAYERS char];

enum dropweapons {
	i_Name[50],
    i_Model
};

new ItensDrop[][dropweapons] = {
	//Id Inexistente
	{"BUG", 0},

	{"Brass Knuckles", 331},
	{"Golf Club", 333},
	{"Nightstick", 334},
	{"Knife", 335},
	{"Baseball Bat", 336},
	{"Shovel", 337},
	{"Pool Cue", 338},
	{"Katana", 339},
	{"Chainsaw", 341},
	{"Purple Dildo", 321},
	{"Dildo", 322},
	{"Vibrator", 323},
	{"Silver Vibrator", 324},
	{"Flowers", 325},
	{"Cane", 326},
	{"Grenade", 342},
	{"Tear Gas", 343},
	{"Molotov Cocktail", 344},

	//Ids inexistentes
	{"BUG", 0},
	{"BUG", 0},
	{"BUG", 0},

	{"9mm", 346},
	{"Silenced 9mm", 347},
	{"Desert Eagle", 348},
	{"Shotgun", 349},
	{"Sawnoff Shotgun", 350},
	{"Combat Shotgun", 351},
	{"Micro SMG/Uzi", 352},
	{"MP5", 353},
	{"AK-47", 355},
	{"M4", 356},
	{"Tec-9", 372},
	{"Country Rifle", 357},
	{"Sniper Rifle", 358},
	{"RPG", 359},
	{"HS Rocket", 360},
	{"Flamethrower", 361},
	{"Minigun", 362},
	{"Satchel Charge", 363},
	{"Detonator", 364},
	{"Spraycan", 365},
	{"Fire Extinguisher", 366},
	{"Camera", 367},
	{"Night Vis Goggles", 368},
	{"Thermal Goggles", 369},
	{"Parachute", 371}
};

enum MLS {
	mlsNome[ 15 ],
	mlsPrice,
	mlsStyle
};

new ArrayMenuLutas[][MLS] = {
	//Nome              Preço       Estilo Aprendido
	{"Boxe", 			3240,		FIGHT_STYLE_BOXING},
	{"Kung-Fu", 		4100,		FIGHT_STYLE_KUNGFU},
	{"Briga de rua", 	2120,		FIGHT_STYLE_KNEEHEAD},
	{"Luta-Livre", 		1140,		FIGHT_STYLE_GRABKICK},
	{"Padrao", 			0, 			FIGHT_STYLE_ELBOW}
};

enum petrolRoute {
	Float:px_,
    Float:py_,
    Float:pz_,
};

new PostoPetrol[][petrolRoute] = {
    {1943.3470, -1776.1817, 13.5510},
	{1019.0871, -935.8121, 42.1796},
	{656.6843, -549.5194, 16.3359},
	{-75.3619, -1157.5346, 1.7500},
	{-1318.5213, 2683.6020, 50.0625},
	{-2417.4338, 958.1279, 45.2968},
	{-1711.6945, 389.3115, 7.1796},
	{2133.8020, 2733.3649, 10.8203},
	{623.4422, 1680.2624, 6.9921},
	{2638.2321, 1096.7347, 10.8203},
	{1593.0313, 2207.3164, 10.8203},
	{-1602.8261, -2708.6584, 48.5334}
};

enum arrayLanch {
	L_Name[30],
	L_Valor,
	L_Quant
}
//Lanchonetes
new TraillerLanchesArray[][arrayLanch] = {
	//Comidas
	{"Pizza/Fatia", 10, 20},
	{"Hamburguer", 25, 50},
	{"X-Egg", 30, 70},
	{"X-Tudo", 40, 80},
	{"Subway", 50, 100}
};

new TraillerBebidasArray[][arrayLanch] = {
	//Bebidas
	{"Agua", 5, 10},
	{"Suco", 8, 20},
	{"Dolly", 13, 40},
	{"Pepsi", 15, 50},
	{"Gatorade", 23, 100}
};

static pizzariaLanchesMenu[][arrayLanch] = {
	{"Fatia Pizza Pequena", 	8, 		20},
	{"Fatia Pizza Media", 		20, 	55},
	{"Fatia Pizza Grande",		35,		100}
};

static pizzariaBebidasMenu[][arrayLanch] = {
	{"Agua",			4,		10},
	{"Suco", 			8, 		20},
	{"Refrigerante", 	20, 	55}
};

//Sistema de Conquistas
enum pSugestion
{
	sNovato,
	sMotorista,
	sTrabalhador
};


//E_STREAMER_X Novato 	 =	1;
const Motorista =  2;
const Trabalhador = 3;


// Sistema de Cassino
new ValorFicha[MAX_PLAYERS];
new NumeroApostado[MAX_PLAYERS];
new Apostado[MAX_PLAYERS];
//
new LadoApostado[MAX_PLAYERS];
new LadoApostado2[MAX_PLAYERS];
new LadoDado[MAX_PLAYERS];

//Sistema de contas/Dividas
enum pConts
{
	Float:cCell,
	cBanco,
	cAvisado,
	cTotal,
	bool:cBlock
};

//Sistema de Celular
enum pcellinfo
{
    pCell,
    pNumero,
    Float:pCredito,
    pBlockCall,
    pBlockSMS,

	bool:LinhaAtiva,
	LinhaAtivaID,
	Tentativas,
	Timer,
	PosTemp,
	LinhaOwner
};

//Loteria
enum ploto {
	LotoWinner[24],
	LotoValue,
	LotoNum,
	LotoArrec,
	LotoTimer
}

enum prasp {
	pRaspValue,
	pRaspNum
}

//Sistema de Galao
enum pgal
{
	pGalao,
	pLitros,
	pMax,
};

//Anti-AFK
enum pPos
{
	Float:LastX,
	Float:LastY,
	Float:LastZ,
};

//Cameras Vars
enum VarCam
{
	Float:UX,
	Float:UY,
	Float:UZ,
	Float:UA,
	UInterior
};

//Sistema de NPC Bus By Adil
new
	Text3D:NPCLabel[ MAX_PLAYERS ],
	Text3D:NPCTextBlue,
	Text3D:NPCTextBlack,
	NPCBlueBus,
	NPCBlackBus
;

//Actores
enum acinfo {
    ac_id,
	Float:ac_x,
	Float:ac_y,
	Float:ac_z,
	Float:ac_r
};

new Actores[][acinfo] = {
	{211, 	1074.8560,  -1791.0226,     13.6598,    0.2433}, 		//Spawn novatos
	{217, 	356.2979,	167.7715,		1008.3762,	271.6393}, 		//PRef LS
	{179, 	316.1084, 	-133.6708, 		999.6016, 	92.0580}, 		//Ammu Nation
	{179, 	316.2253, 	-139.5653, 		1004.0625, 	91.4294}, 		//Materiais Ammu nation
	{240, 	820.1833, 	2.3682, 		1004.1797, 	272.4224}, 		//Loterica
	{150, 	359.7139, 	173.6266, 		1008.3893, 	281.0553}, 		//Pref LS
	{169,	-26.9952, 	-91.6215, 		1003.5469, 	0.2383}, 		//24/7
	{155,	375.9992, 	-65.3533, 		1001.5078, 	137.8733}, 		//Burger Shot
	{70, 	-199.9855, 	-1739.2909, 	675.7687, 	89.0986}, 		//Hospital
	{13, 	207.1055, 	-127.3829, 		1003.5078, 	180.4668}, 		//Pawn Shop
	{209, 	2160.1062, 	-1210.2323, 	23.9054, 	0.1753}, 		//Concessionaria
	{205, 	1215.6348, 	-1309.3090, 	13.5572, 	91.7924}, 		//Hospital
	{155,	1715.4832, 	-1712.8928, 	13.5000, 	227.2640}, 		//Barra de Lanche Na Praça
	{155,	1949.379516,-1767.335693,	13.547272,226.619262}, 		//Barra de Lanche Na Praça

	//Atores Cassino
	{171, 	1961.2374,	 1009.2132,	 	992.4687, 	270.9191}, 		//Mesa1
	{171, 	1957.1688, 	1009.1177,		992.4687, 	269.9557}, 		//Mesa2
	{171, 	1960.7193, 	1015.6178, 		992.4687, 	87.5940}, 		//Mesa3
	{171, 	1961.9226, 	1015.5535, 		992.4687, 	269.6190}, 		//Mesa4

	{194,	1962.0081, 	1020.2916, 		992.4687, 	270.8723}, 		//Mesa5
	{194,	1960.6918, 	1020.1007, 		992.4687, 	88.5105}, 		//Mesa6
	{194,	1957.2025, 	1025.3145, 		992.4687, 	268.3422}, 		//Mesa7
	{194,	1961.6495, 	1025.2556, 		992.4687, 	269.5956}, 		//Mesa8


	{171,	1953.7908, 	1018.1131, 		992.4687, 	272.1022} 		//BarMan

};

new Actor[sizeof(Actores)];
new Text3D:ActorLabel[3];

new InfoOrg[MAX_ORGS][Oinfo];
new InfoOrg2[MAX_ORGS][Oinfo2];
new CofreOrg[MAX_ORGS][CofreInfo];
new	PlayerInfo[MAX_PLAYERS][pInfo];
new GalaoInfo[MAX_PLAYERS][pgal];
new RaspadinhaInfo[MAX_PLAYERS][prasp];
new	HouseInfo[MAX_HOUSES][hInfo];
new GateInfo[MAX_GATES][ginfo];
//new VeiculoInfo[MAX_VEHICLES_CONCE][cVeh];
new EmpInfo[MAX_EMPRESAS][empinfo];
new ContaInfo[MAX_PLAYERS][pConts];
new CelularInfo[MAX_PLAYERS][pcellinfo];
new WeaponData[MAX_WEAPONS][E_ARMS];
new ConquistasInfo[MAX_PLAYERS][pSugestion];

new LotoInfo[ ploto ];
new Jogador[ MAX_PLAYERS] ;

// Votaçao
enum pvotacao
{
	bool:iniciada,
	sim,
	nao,
	total
};

new
	Votacao[pvotacao],
	Votou[MAX_PLAYERS]
;

// Questoes Inicio
enum Questinfo
{
	QuestTitle[128],
	Resposta1[128],
	Resposta2[128],
	Resposta3[128],
	Correta
}

enum TutInt
{
	Title[50],
	Context[600]
}

enum ItemsV {
	ItemNome[ 50 ],
	ItemValor,
	ItemArm,
	ItemBPrice,
	ItemBMax,
	ItemVip
};

new ItemsAmmuNation[][ItemsV] = {
/*	Nome | Valor | Weapon id | preço por bala | capacidade | VIP = 0 nao = 1 sim	*/
	{"Faca", 100, 4, -1, 1, 0},
	{"Pistola 9mm", 1500, 22, 50, 150, 0},
	{"Silenciadora 9mm", 1600, 23, 50, 150, 0},
	{"Rifle de caca", 1000, 33, 150, 99, 0},
	{"Coldre", 10000, -1, -1, 1, 0}
};

new Float:CordsLixeiro[15][3] = {
    {0.0, 0.0, 0.0},
	{-1158.0999, -2294.0, 36.9},
	{-64.3, -1588.5, 2.3},
    {421.2999, -1781.4000, 5.2},
    {1307.3000, -2472.0, 7.5},
    {2675.3999, -2490.8000, 13.3},
    {2222.6001, -1766.0, 13.2},
    {1906.8000, -1762.9000, 13.2},
    {1593.9000, -1724.5, 13.2},
    {1625.0999, -1153.5, 23.7},
    {1388.8000, -1027.9000, 25.3},
    {1489.5, -762.2999, 87.5},
    {1237.6999, -730.2000, 95.2},
    {185.3999, -1378.1999, 48.7},
    {-994.7000, -1899.6999, 79.4}
};

new Float:CordsLixeiro2[13][3] = {
    {0.0, 0.0, 0.0},
	{-1536.6501,-1592.6337,38.0859},
	{-1885.1860,-1251.1580,39.7755},
	{-1980.8955,-893.6535,32.1729},
	{-2326.6335,-184.4145,35.3203},
	{-2629.7307,-64.9728,4.3359},
	{-2717.2429,340.5005,4.4063},
	{-2746.1899,634.2665,27.7656},
	{-2802.5256,889.3047,44.0547},
	{-2580.5142,1339.9304,7.1875},
	{-1652.5906,1223.4326,7.1797},
	{-1650.8191,413.3356,7.1875},
	{-1837.4176,-570.0753,18.0432}
};

new Float:CarteiroLS[16][3] = {
	{1829.7411,-1672.8552,13.1187},
	{2022.7983,-1406.3959,16.7580},
	{1629.4485,-1169.5468,23.6495},
	{1309.8008,-913.6773,38.2158},
	{1177.9457,-1320.1788,13.6634},
	{1363.7616,-1274.2383,13.1104},
	{1511.0365,-1609.7529,13.6094},
	{1068.9980,-1703.9316,13.5469},
	{824.8695,-1616.2389,13.5469},
	{1261.1377,-1845.8469,13.0630},
	{1572.1761,-1879.6381,13.0582},
	{1829.3519,-1847.1378,13.0905},
	{2006.9702,-1721.7668,13.0583},
	{2240.2983,-1661.8595,14.9887},
	{2205.4626,-1111.0875,25.14324},
	{2171.3342,-998.2298,62.4793}
};

new Float:RotasBusLS[10][3] = {
	//Primeira Rota
	{1965.3105, -1782.7686, 13.3828},// 0
	{1568.4615, -1728.9124, 13.3828}, //1
	{1361.4006, -1266.2330, 13.3828}, // 2
	{1438.8880, -1037.0576, 23.6562}, // 3
	{1948.6719, -1048.5093, 24.0107}, // 4
	{2662.9650, -1051.7102, 69.4140},// 5
	{2871.8925, -1416.1938, 10.8808}, //6
	{2243.5073, -1728.5700, 13.3828},// 7
    {1330.2979, -1729.7452, 12.9452},// 8
	{1972.8380, -2199.4982, 13.5468}// 9
};

new Float:RotasBusLS2[10][3] = {
	// Segunda Rota
    {1962.3441,-2172.1228,13.5582}, // 0
	{1976.0968,-1754.1116,13.4849}, // 1
	{2113.6599,-1687.1097,13.4815}, // 2
	{2158.2607,-1386.6233,23.9321}, // 3
	{2373.3794,-1346.7859,23.9335}, // 4
	{2466.6201,-1186.6090,37.3163}, // 5
	{2728.8206,-1253.6664,59.6524}, // 6
	{2661.9895,-1069.7987,69.4125}, // 7
	{2559.9719,-1062.9872,69.2995}, // 8
	{1972.8380, -2199.4982, 13.5468} // 9
};

new Float:RotasBusLS3[10][3] = {
	// Terceira Rota
	{2180.3450,-2191.2095,13.5216}, // 21
	{2801.3545,-2054.3369,11.4325}, // 22
	{2844.4001,-1893.4830,11.0744}, //23
	{2893.2720,-1080.1515,11.0842}, // 24
	{2864.1465,36.9036,19.3179}, // 25
	{2201.3687,46.9299,26.5092}, // 26
	{1545.7720,119.9557,29.5918}, // 27
	{1152.1798,-912.3863,42.8665}, // 28
	{1292.4772,-1832.4620,13.5532}, // 29
	{1972.8380, -2199.4982, 13.5468} //30
};

//==== Entregadores de Pizza ==================

const PAY_PIZZAJOB = 30; //Pagamento Minimo pela entrega de Pizza
const PIZZA_INDEX = 9; //Index ID para attach do Objeto "Pizza"
const VALUE_PIZZA = 150; //Valor da Pizza Entregue ao player

//Rota das casas classe A do servidor Maddog & casas vip
static Float:pizzaJobRoute1[][4] = {
    {1334.6306,-1065.8334,28.1480,273.0919},
	{1228.0294,-1016.8992,36.3359,187.9513},
	{1151.1748,-1068.2212,28.4604,276.0598},
	{1174.6711,-1074.4015,28.5235,85.6767},
	{1147.1473,-1094.6782,26.8828,272.4919},
	{1174.5225,-1100.8013,25.1466,92.0520},
	{1101.9226,-1067.9156,31.8828,88.9592},
	{1050.7386,-1057.3494,34.8040,1.5175},
	{993.4661,-1056.9518,33.7100,1.1473},
	{1421.7905,-885.5565,50.6616,356.5124},
	{1468.7532,-905.2087,54.8359,0.8586},
	{1539.5916,-851.3460,64.3361,88.9196},
	{1534.3093,-800.3965,72.8495,88.5532},
	{1527.5409,-773.3648,80.5781,137.5648},
	{1093.5234,-806.0566,107.4208,13.3095},
	{989.4193,-828.3566,95.4686,119.0690},
	{937.9124,-848.1530,93.6474,27.4573},
	{836.5066,-893.9826,68.7689,329.4225},
	{699.8362,-1059.8402,49.4217,55.5077},
	{552.6436,-1199.7360,44.8315,18.8815},
	{431.8396,-1253.1556,51.5809,23.7506},
	{253.0611,-1269.4355,74.1871,37.8368},
	{351.3072,-1197.2721,76.5156,45.4914},
	{891.0126,-782.3539,101.3061,12.7526}
};

//Rota Pref/Praia
static Float:pizzaJobRoute2[][4] = {
    {1685.6550,-1463.3369,13.5469,358.0163},
	{1739.2014,-1582.3325,14.1542,173.8971},
	{1379.0598,-1753.1229,14.1406,271.3367},
	{1359.4312,-1854.4943,13.5703,175.1279},
	{1081.2273,-1698.5007,13.5469,175.3043},
	{980.8917,-1814.5089,13.9181,341.1204},
	{933.4886,-1804.7893,13.8445,357.5876},
	{910.3975,-1802.2273,13.7786,348.8726},
	{893.6596,-1635.9550,14.9297,184.2243},
	{773.4700,-1793.8174,13.0234,355.0856},
	{791.5453,-1754.1880,13.4369,187.3379},
	{794.5156,-1707.5946,14.0382,272.5798},
	{772.1767,-1511.0201,13.5469,259.5064},
	{761.4113,-1564.3206,13.8069,265.6887},
	{766.7106,-1605.9335,13.8039,86.4321},
	{768.8489,-1696.5377,5.1554,89.3535},
	{693.8011,-1705.8536,3.8195,268.4400},
	{697.5870,-1627.0123,3.7492,264.3351},
	{725.6729,-1440.2152,13.5391,357.4524},
	{813.3125,-1457.0201,14.0696,93.2247},
	{315.6213,-1771.1910,4.6801,181.2396},
	{206.9971,-1769.5884,4.3561,183.2035},
	{1086.3402,-1794.0052,13.6663,89.5261},
	{1321.9297,-1779.4149,13.5469,83.9412}
};

//Groover Street e arredores
static Float:pizzaJobRoute3[][4] = {
    {1981.0533,-1718.8134,17.0302,270.8624},
	{1978.2935,-1671.6544,18.5456,95.4749},
	{1972.1711,-1633.9293,15.9688,174.4827},
	{1910.3156,-1597.9938,14.3062,179.7971},
	{2011.7437,-1594.3088,13.5834,226.9312},
	{2067.9375,-1628.8591,13.8762,268.3798},
	{2067.1355,-1656.7013,13.9737,269.5007},
	{2067.6333,-1731.5923,13.8762,273.0291},
	{2148.3811,-1484.9540,26.6240,87.6064},
	{2149.2354,-1433.5688,25.7693,87.8677},
	{2100.5300,-1321.7054,25.9531,359.9680},
	{2091.0852,-1278.3792,26.1797,181.6237},
	{2209.5999,-1239.5945,24.1496,3.9758},
	{2388.0010,-1279.7062,25.1291,82.3570},
	{2468.6394,-1278.1808,30.3664,90.4646},
	{2434.6716,-1303.4727,24.9196,278.9911},
	{2495.2808,-1690.4692,14.7656,351.8134},
	{2513.2263,-1650.4464,14.3557,132.1272},
	{2469.3931,-1646.6411,13.7801,183.3030},
	{2393.3301,-1646.2307,13.9051,186.9575},
	{2327.3726,-1681.7755,14.9297,274.4338},
	{2395.5852,-1796.0416,13.5469,271.7046}
};

/*new QuestData[][Questinfo] =
{
	{"Qual o Estilo (Modo) de jogo do servidor?", "Role Play", "MATA-MATA", "RPG", 2},
	{"Voce deve fazer Deathmatch?", "Nunca", "Sim", "so se fizerem em mim.", 0},
	{"Ao Perceber um Bug/Erro no Servidor?", "Devo Contar aos outros e Pratica-lo", "Reportar-lo ao Forum", "Abusar e tirar vantagens", 1}
};*/


new ExameTeoricoData[][Questinfo] =
{
	{"Qual categoria permite a ultilizacao de carretas?", "{FFFF52}A{FFFFFF} - A", "{55FF7D}B{FFFFFF} - Especial", "{43F7FA}C{FFFFFF} - E", 2},
	{"Qual a faixa correta de cirulacao?", "{FFFF52}A{FFFFFF} - A da esquerda", "{55FF7D}B{FFFFFF} - A da direita", "{43F7FA}C{FFFFFF} - No centro da pista", 1},
	{"Qual e a funcao do semaforo?", "{FFFF52}A{FFFFFF} - Sinalizar e indicar exclusividade de passagem", "{55FF7D}B{FFFFFF} - Enfeite", "{43F7FA}C{FFFFFF} - Sinalizacao de racha", 0},
	{"O sinal verde no semaforo significa?", "{FFFF52}A{FFFFFF} - Pare", "{55FF7D}B{FFFFFF} - Atencao", "{43F7FA}C{FFFFFF} - Nenhuma Alternativa", 2},
	{"Um veiculo com apenas 3 rodas e considerado?", "{FFFF52}A{FFFFFF} - Quadriciclo", "{55FF7D}B{FFFFFF} - Triciclo", "{43F7FA}C{FFFFFF} - Nenhuma Alternativa", 1},
	{"A categoria que permite pilotar veiculos especiais e?", "{FFFF52}A{FFFFFF} - A + B", "{55FF7D}B{FFFFFF} - Hab. Aerea", "{43F7FA}C{FFFFFF} - Hab. Especial", 2},
	{"Se o sinal do semaforo estiver vermelho devo?", "{FFFF52}A{FFFFFF} - Parar e esperar", "{55FF7D}B{FFFFFF} - Seguir com atencao", "{43F7FA}C{FFFFFF} - Nenhuma Alternativa", 0},
	{"Qual a funcao das setas?", "{FFFF52}A{FFFFFF} - Indicar velocidade", "{55FF7D}B{FFFFFF} - Indicar a direcao", "{43F7FA}C{FFFFFF} - Enfeite", 1}
};

new InfoBasic[][TutInt] = //Max In Line 66 Caracteres depois disso ~n~
{
	{"O Servidor", "O Servidor foi construindo sob nenhum tipo de base ou codigo fonte~n~incompleto encontrado na 'Web', foi totalmente desenvolvido partir do 0"},
	{"A Administracao", "A equipe Administrativa do servidor e composta por 5 Leveis~n~Voce pode soliciar ajuda imediata usando o comando ~y~/ajuda > admin~n~~w~ou enviando mensagem particular ~y~/duvida!"},
    {"A Jogabilidade", "Tentando fugir ao maximo das caracteristicas dos demais servidores~n~da web nos propomos a nossos players uma jogabilidade diferenciada~n~e assim atraindo a confianca e fidelidade de nossos jogadores!"},
	{"Sede e Fome", "Com o passar do tempo ira sentir fome e sede,~n~para evitar o desidratamento e preciso que se alimente corretamente~n~utilizando as barracas de lanches ou a burger shot!~n~Ao conseguir upar seu nivel, sua fome e sede tambem serao reduzidas!"},
	{"Utilitarios", "Aqui voce pode adiquirir celular, gps, creditos e outros tipos de utilitarios .."},
	{"Prefeitura", "Voce precisa ir a prefeitura para conseguir uma profissao,~n~fazer anuncios sobre seus pertences, votar na nova staff do servidor~n~e reportar noticias quentes para a GL News"},
	{"Concessionaria", "Para que voce nao precise ficar andando a pe pela cidade~n~voce pode vir ate a concessionaria e adiquirir um veiculo ou motocicleta~n~para uso pessoal"},
	{"Informacoes", "Voce pode configurar sua conta a seu gosto a qualquer momento~n~utilizando ~y~/minhaconta~w~, como configuracoes de senha, e-mail, anuncios, velocimetro, etc.."},
	{"Informacoes finais", "Voce iniciara com a quantia de ~g~$~w~15.000,00 sendo parte no bolso e a outra em sua conta bancaria.~n~para sua sobrevivencia e para conseguir seus itens basicos!"},
	{"Boas Vindas", "Seja bem vindo(a) ao nosso servidor.~n~Nos da equipe BPS:RPG agradecemos sua preferencia,~n~tenha um bom jogo!"}
};


new Horarios[] =
{
	2,3,5, // Madrugada
	23,22,6,8, // Manha
	10,12,16,20, // Tarde
	22,23,0 //Noite
};

new RandomClima[] =
{
    2, 4,
	20,	13,
	24,	3,
	28,	29,
	15,	1,
	4, 28,
	25,	8,
	30,	35,
	20,	40,
	31
};

new CoresMSGs[10][] =
{
	"FFFFFF",
	"FF0000",
	"FFFF00",
	"3C982E",
	"800080",
	"FF6600",
	"2D3635",
	"C2A2DA",
	"F5DEB3",
	"83BFBF"
};

new MSGs[][130] =
{
	"{E1E6E8}Esta perdido? use {B2E4F9}/gps {E1E6E8}ou chame um taxi {B2E4F9}/solicitar taxi",
	"{E1E6E8}Precisa de ajuda? tem duvidas ? use: {B2E4F9}/ajuda {E1E6E8}e solicite ajuda administrativa",
	"{E1E6E8}Achou algo desnecessario? mudancas e melhorias? acesse nosso /discord e divulgue sua opiniao!",
	"{E1E6E8}Achou algum bug? use /bug para reporta-lo e assim contribuindo para uma boa jagabilidade!",
	//"{E1E6E8}Acesse nosso site {B2E4F9}"#SV_SITE" {E1E6E8}e fique por dentro das noticias do servidor.",
 	"{E1E6E8}Alguma duvida sobre o servidor ? use {B2E4F9}/duvida {E1E6E8}e envie sua duvida a nossa equipe.",
 	"{E1E6E8}Esta cansado/estressado? conheca o {B2E4F9}ponto de caca (/gps){E1E6E8}do servidor e divirta-se.",
	"{E1E6E8}Nao gosta do seu personagem? voce pode ir ate a binco ou qualquer outra loja e encontrar o seu favorito, ultilize o /gps.",
    "{E1E6E8}Encontrou algum bug ? Use o comando para reportar aos admin mesmo offline: {B2E4F9}/bug",
    "{E1E6E8}Estamos sempre de olho no feedback dos nossos players, para dicas e sugestoes use {B2E4F9}/dica",
	"{E1E6E8}Para acessar a loja do servidor e obter beneficios exclusivos veja {B2E4F9}/loja",
    "{E1E6E8}Para obter beneficios exclusivos veja a {B2E4F9}/loja /comprarcash",
    "{E1E6E8}Ajude a manter o servidor online compre seu beneficio vip ou socio. Veja em {B2E4F9}/beneficios",
    "{E1E6E8}Existem Easter Eggs espalhados pelo servidor. Quando achar algum use {B2E4F9}/abrir"
};


static const News[][128] =
{
    {"{00BF00}>{FFFFFF} Comando /lc adicionado."},
    {"{00BF00}>{FFFFFF} Comando /ficha adicionado para policiais."},
    {"{00BF00}>{FFFFFF} Local de trabalho Lenhador, Paramedico adicionados ao GPS."},
	{"{00BF00}>{FFFFFF} Anuncios de conexao de player na configuracao da conta /minhaconta."},

	{"#Edicao em andamento ..."}
};

//Menu SA-MP
new Menu:MenuTuning; //Tuning Menu
new Menu:MenuTRodas; //Menu Tuning Rodas
new Menu:MenuTCores; //Tuning Menu

//Progresso dos Mineradores
new PlayerBar:ProgressMineirador[ MAX_PLAYERS ];

//Progresso dos paramedicos
new
	Text:TextParamedicos,
	PlayerBar:ProgressCurando[ MAX_PLAYERS ],
	TimerCurando[ MAX_PLAYERS ],
	ProgressoCurando[ MAX_PLAYERS ];

//Lenhador
new CortandoArvore[MAX_PLAYERS char];


new
	PlayerText:TextLenhadores[MAX_PLAYERS],
	PlayerBar:ProgressCorte[MAX_PLAYERS],
	TimerCorte[MAX_PLAYERS],
	ProgressoCorte[MAX_PLAYERS],
	bool:PodeClicar[MAX_PLAYERS],
	CortouArvore[MAX_PLAYERS]
;

/* ============= Lenhadores =============================*/

#define MAX_TREE 9


new
	treeCuttingId[MAX_TREE],
	objTreeSlices[MAX_TREE][4], //Numero de fatias que a arvore fica quando cortada.
	//bool:treeCuttingDisp[MAX_TREE], vou usar para saber se a arvore ta morta ou nao .
	Text3D:treeCuttingLabel[MAX_TREE],
	bool:playerCuttingTree[MAX_TREE],
	retrieveTreeTemp[MAX_TREE], //Armazena o tempo para recuperar.
	retrieveTreeTimer[MAX_TREE], //Armazena o timer para recuperaçao

	//Vars in Player
	bool:playerCutting[MAX_PLAYERS],
	cuttingTreeId[MAX_PLAYERS],
	QuantSlices[MAX_PLAYERS],
	Float:PosSlices[MAX_PLAYERS][3],
	parceiroLenhador[MAX_PLAYERS],

	//Vars in Vehicle
	//treeSliceToVehicle[MAX_VEHICLES],
	objSlicesAttachCount[MAX_VEHICLES],
	objSlicesAttach[MAX_VEHICLES][24]
;

enum lenInfo {
	treeObj,
    Float:t_posx,
    Float:t_posy,
    Float:t_posz
};

// Tree = Arvore / Lumb = Lumberjack = Lenhador
new treeLumb[MAX_TREE][lenInfo] = {
	{771, -458.029022,-67.223144,58.833106},
	{771, -489.619567,-58.337238,59.662021},
	{771, -530.346862,-40.820652,61.421875},
	{771, -549.846252,-15.409967,62.066520},
	{771, -446.176696,-88.011466,58.213008},
    {771, -446.176696,-88.011466,58.213008},
    {771, -585.172851,-68.909553,64.071197},
    {771, -560.755859,-34.205478,63.109466},
    {771, -462.687255,-48.535476,58.953453}
};


loadTreeCuttings(){
	Loop(tid, MAX_TREE){
		treeCuttingId[tid] = CreateDynamicObject(treeLumb[tid][treeObj], treeLumb[tid][t_posx], treeLumb[tid][t_posy], treeLumb[tid][t_posz], 0.0, 0.0, 0.0);
    	treeCuttingLabel[tid] = Create3DTextLabel("{F2FFA0}Arvore para corte\n\n{51F364}/cortar", -1, treeLumb[tid][t_posx], treeLumb[tid][t_posy], (treeLumb[tid][t_posz]+3.0), 100.0,0, 0);
	}
}

Public:Retrievetree(tree){
	if(retrieveTreeTemp[tree] <= 0){
		DestroyDynamicObject(treeCuttingId[tree]);

	    treeCuttingId[tree] = CreateDynamicObject(treeLumb[tree][treeObj], treeLumb[tree][t_posx], treeLumb[tree][t_posy], treeLumb[tree][t_posz], 0.0, 0.0, 0.0);
		Update3DTextLabelText(treeCuttingLabel[tree], -1, "{F2FFA0}Arvore para corte\n\n{51F364}/cortar");
		KillTimer(retrieveTreeTimer[tree]);
	}
	else {
		static str[ 100 ];
		if(retrieveTreeTemp[tree] > 9)format(str, sizeof(str), "{D6D2CF}Arvore morta\n\nTempo:{51F364}00:00:%d{D6D2CF}m", retrieveTreeTemp[tree]);
		else format(str, sizeof(str), "{D6D2CF}Arvore morta\n\nTempo:{51F364}00:00:0%d{D6D2CF}m", retrieveTreeTemp[tree]);

		Update3DTextLabelText(treeCuttingLabel[tree], -1, str);
		retrieveTreeTemp[tree]--;
	}
}

//=====================================================

// ==================== Entregadores de Pizza ==============================

const NUM_ROUTES = 3; 					//Quantidades de rotas existentes

new PlayerText:textPizzaJobs[MAX_PLAYERS][3]; 		//TextDraws da profissao
new randPizzaRoute = 1; 							//Variavel responsavel por armazenar a Proxima rota selecionada!
new pizzasQuant[ MAX_PLAYERS ]; 					//Armazena a quantia de pizzas em seu bau
new pizzaRoute[ MAX_PLAYERS ];						//Rota que ele esta seguindo
new actorPizzaJob[ MAX_PLAYERS ];					// Armazena o Actor Para o jogador
new routeTimer[ MAX_PLAYERS ]; 						//Armazena o Tempo de cada entrega
new timerRoutePizzaJob[ MAX_PLAYERS ];				//Timer de cada entrega.
new timerEntregadores[ MAX_PLAYERS ]; 				//timer dos entregadores de pizza minimapa
new TimerLocalizar[ MAX_PLAYERS ];
new TimerRespawn[MAX_PLAYERS];
//Zerar pvar SetPVarInt(playerid, "lastPointRoute",

//===========================================================================

//Progresso do sistema de caçar
new PlayerBar:CacaDistance[MAX_PLAYERS];
new Text:DistanceCaca;

new	CamsTotal;
new	PlayerText:CamsTextTwo[ MAX_PLAYERS ][9];

new Text:Radar[MAX_PLAYERS][7];

//Text Taxista
new PlayerText:TextTaximetro[ MAX_PLAYERS ];

//Text Concessionaria
new Text:ConceMenu[MAX_PLAYERS][10];
new Text:MenuSelectSkin[MAX_PLAYERS][9];
new Text:EscolherSkinOrg[MAX_PLAYERS][3];

//Text Carregar sv
new Text:Carregando[MAX_PLAYERS][5];

//Text Prisao e Hospital
new Text:TimerPH[3],
	Text:TimerPHIndividual[MAX_PLAYERS];

//CameraID[ MAX_CAM ],
new	CameraOwner[ MAX_CAM ];
new	CameraName[ MAX_CAM ][ 200 ];
new	Float:CameraFloat[ MAX_CAM ][ 4 ];
new	Float:CameraFloat2[ MAX_CAM ][ 3 ];
new	CameraInterior[ MAX_CAM ];

//Vars Em Players
new	CameraAtual[ MAX_PLAYERS ] = -1;
new	KeyTimer[ MAX_PLAYERS ];
new	Float:CamerFloat[ MAX_PLAYERS ][3];
new	Float:CameraRadius[ MAX_PLAYERS ];
new	Float:CameraDegres[ MAX_PLAYERS ] = 0.0;
new	UltimaPosicao[ MAX_PLAYERS ][ VarCam ];

//Vars do hospital timer
new
	EsperandoA_Timer[ MAX_PLAYERS ],
	AnimeMorte[ MAX_PLAYERS ]
;

//Bloqueio de Chat
new	TimerBlockChat[ MAX_PLAYERS];

//Casas
new
	HousePickup[MAX_HOUSES],
	Text3D:HouseLabel[MAX_HOUSES]
	//HouseIcon[MAX_HOUSES]
;

//Empresas
new MapIconEmp[ MAX_EMPRESAS ];

//Anti-AFK
new	PlayerLastPos[MAX_PLAYERS][pPos];
new	PlayerAfkTicks[MAX_PLAYERS];
new bool:PlayerAFK[MAX_PLAYERS char];
new	Float:PlayerCurrentPos[3];

//Anti C-Bug
new fAutoC[MAX_PLAYERS];

new	proxhouse = 0;

//Drogas

new	DrogasUP[MAX_PLAYERS],
	bool:UsandoDrogas[MAX_PLAYERS];

//Veiculos
//new QuantidadeVeiculos;

new CamaID = 0;


//Variaveis das profissoes

//Taxistas
new
	TimerCorridaTaxi[ MAX_PLAYERS ],
	Float:TaxiSPos[ MAX_PLAYERS ][3],
	PrecoTotalCorrida[ MAX_PLAYERS ],
	InTaxi[ MAX_PLAYERS ],
	TaxiOwn[ MAX_PLAYERS ],
	Cliente[ MAX_PLAYERS ],
	TaxiValue[ MAX_PLAYERS ]
;

//Timers Dos Mapas das profissoes
new
	TimerPMedico[ MAX_PLAYERS ],
	TimerPMecanico[ MAX_PLAYERS ],
	TimerPTaxista[ MAX_PLAYERS ]
;

//Glob
new PlayerSolicitou[ MAX_PLAYERS ];

//Advogado
new	ContratoID[ MAX_PLAYERS ], TempoCOffer[ MAX_PLAYERS ], ContratoValor[ MAX_PLAYERS ];

new	TrashObjects[ MAX_PLAYERS ][ 2 ];

//Veiculos Profissoes
new	Trukers[9], CargasPetroleiros[9];
new MecanicVehs[7];
new	Onibus[12];
new	TrukersLixeiros[8];
new VehCarteiros[13];
new NewbieVehs[10];
new CarrosTaxistas[15];
new VehParamedics[6];
new VehBOPE[6];
new HeliBOPE[3];

new onibuscriados,
    mecanicoscriados,
    carteiroscriados,
    taxiscriados,
    ambulacriados,
    pizzacriados,
    pmcriados,
    lixcriados,
    bopecriados,
    bopecriados_H,
    petrocriados,
    lencriados;

//Entregadores de Pizza
new pizzaBikes[14];

/*===== Lenhadores ============*/
new TruckersLenhadores[13];

//Veiculos das Orgs
new CarrosPM[13];

//Auto Escola LS
new
	AutoVeiculosB[5],
	AutoVeiculosA[6],
	AutoVeiculosD[2],
	AutoVeiculosE[5],
	AutoEscolaProgresso[ MAX_PLAYERS ],
	AutoEscolaAviso[ MAX_PLAYERS ],
	RaceChecksAutoEscolaTipoB[ MAX_PLAYERS ][19],
	RaceChecksAutoEscolaTipoD[ MAX_PLAYERS ][18],
	RaceChecksAutoEscolaTipoE[ MAX_PLAYERS ][25]
;

new CurrentVehicle[MAX_PLAYERS];
new VeiculoConce[MAX_PLAYERS];
new MenuConceType[MAX_PLAYERS];


//Mecanico
//new	PlayerText:TMecanico[ MAX_PLAYERS ][4];


//Text Petroleiros

new PlayerText:TimerTruck[ MAX_PLAYERS ];

//Sistema de Ticket/Senha
new
	Fila = 1,
	Atendimentos[ MAX_PLAYERS ],
	Senha[ MAX_PLAYERS ]
;

//Cone/Barreiras
new playerCone[MAX_PLAYERS][5];
new playerConeCount[MAX_PLAYERS] = 0;
new playerBarreira[MAX_PLAYERS][3];
new playerBarreiraCount[MAX_PLAYERS] = 0;

//Habilitaçao

new
    CNHTest[ MAX_PLAYERS ],
	ExameQuestID[ MAX_PLAYERS ],
	ExamePoints[  MAX_PLAYERS ]
;

//Primeiro spawn de Lideres de Orgs
new bool:liderSpawnOrg[ MAX_PLAYERS ];

// Variaveis globais ---
new Hora_Servidor,
	Record_Servidor,
	PingLimite_Servidor;


//Elevador
new ElevatorState,
	ElevatorFloor,
	ElevatorQueue[21],
	FloorRequestedBy[21],
	ElevatorBoostTimer,
	Obj_Elevator,
	Obj_ElevatorDoors[2],
	Obj_FloorDoors[21][2],
	Text3D:Label_Elevator,
	Text3D:Label_Floors[21]
;


//Spectating
new
	Espectype[ MAX_PLAYERS ],
	PlayerEspec[ MAX_PLAYERS ],
	bool:EstavaEspectando[ MAX_PLAYERS ],
	Float:UPosEspec[ MAX_PLAYERS ][3],
	UPosInt[ MAX_PLAYERS ],
	UPosVirt[ MAX_PLAYERS ]
;

//AntiAFK do Bus
new InBus[ MAX_PLAYERS ];

// Variavel usada para identificar quanto do nivel de procurado e referente ao nao pagamento de dividas!
new ProcuradoDividas[ MAX_PLAYERS ];

new TutorialStatus[MAX_PLAYERS];

new	strx[ 512 ]; // string global de menssagens de texto e dialogs formatados!
new	STRLOG[ 200 ]; // String usada para formatar textos para Logs do servidor!
new	ano, mes, dia; // Getar Data
new	hora, minuto, segundo; // Getar Hora

	// Correçao sistema de Animes
new	gPlayerUsingLoopingAnim[ MAX_PLAYERS ];
new	gPlayerAnimLibsPreloaded[ MAX_PLAYERS ];
new	InAnim[ MAX_PLAYERS ] = 0;

	//	Variavel do nome do jogador
new	nomeSugerido[MAX_PLAYERS][MAX_PLAYER_NAME];
new	ClickPlayerResult[ MAX_PLAYERS ];

//Anti Aimbot IpsLeon
new AimbotWarnings[MAX_PLAYERS];

//Banco transferencias
new TransferenciaID[MAX_PLAYERS];

//Sistema de portoes
new GateID[ MAX_PLAYERS ];
new Float:Pos[ 3 ], Float:Rot[ 3 ];
new proxgate;

// Sistema de Clima
new Tempo;

//Venda de Drogas
new
	DrogasOff[ MAX_PLAYERS ],
	DrogasID[ MAX_PLAYERS ],
	DrogasPreco[ MAX_PLAYERS ],
	DrogasQuant[ MAX_PLAYERS ]
;

//Anti Weapon Hack
new Weapons[MAX_PLAYERS][WEAPON_SLOTs];

	// CMD /imo
new	Imobilizado[MAX_PLAYERS];
new ImobilizadoTime[MAX_PLAYERS];

//CMD amarrar
new Amarrado[MAX_PLAYERS];
new AmarradoTime[MAX_PLAYERS];


    //Roubo Sistema
new
	Roubando[MAX_PLAYERS],
	bool:EmRouboRecente[MAX_PLAYERS],
	SacolaRoubo[MAX_PLAYERS]
;

//Posto de gasolina
new PostoID[ MAX_PLAYERS ];

//Menu do veiculo
new VehKeyID[ MAX_PLAYERS ];

new V_@Conce[ MAX_PLAYERS ];

//Neons
new
	NeonVeicular1[MAX_VEHICLES_CONCE],
	NeonVeicular2[MAX_VEHICLES_CONCE]
;

//Tuning System Sistema de Veiculo
new RodaOriginal[ MAX_PLAYERS ];
new TuningVehicleID[ MAX_PLAYERS ];


const COMPRA_RODAS = 1;
const COMPRA_NITRO = 3;
const COMPRA_RADIO = 4;
const COMPRA_ALARME = 5;
const COMPRA_SUSPENSAO = 6;
const COMPRA_NEON = 7;
const COMPRA_GPS = 8;


new TuningCompraID[ MAX_PLAYERS ];

enum ri {
	rName[ 50 ],
	rLink[ 100 ]
};

new RadioInfo[][ri] = {
	{"Minerios FM - OFICIAL BPS-RPG", 		"http://s02.kshost.com.br:9550/live"},
	{"Dance Pulse", 						"http://pulseedm.cdnstream1.com:8124/1373_128"},
	{"DubStep Musics", 						"http://stream.dubstep.fm/256mp3"},
	{"Kral Pop", 							"http://46.20.4.53:80"}
};

new CdsInfo[][ri] = {
	{"Music - Danca_Conmigo", 					"http://18.231.148.98/mp3/MUSICAS/Danca_Conmigo_Abel.mp3"},
	{"Music - Slow_Down", 						"http://18.231.148.98/mp3/MUSICAS/Slow_Down.mp3"},
	{"CD - As Mais Tocadas nos Bailes", 		"http://18.231.148.98/mp3/CDS/AS_MAIS_TOCADAS_NOS_BAILES_FUNK.mp3"},
	{"CD - PlayList Estilo DUB By Nitrox", 		"http://18.231.148.98/mp3/CDS/ESTILO_DUB_1.mp3"},
	{"CD - PlayList Estilo DUB", 				"http://18.231.148.98/mp3/CDS/ESTILO_DUB_2.mp3"},
	{"CD - Henrique e Juliano", 				"http://18.231.148.98/mp3/CDS/HENRIQUE_E_JULIANO.mp3"},
	{"CD - MC POZE", 							"http://18.231.148.98/mp3/CDS/MC_POZE.mp3"},
	{"CD - Os Meninos de Baroes", 				"http://18.231.148.98/mp3/CDS/OS_MENINOS_DE_BAROES.mp3"},
	{"CD - O Melhor do Pizeiro", 				"http://18.231.148.98/mp3/CDS/O_MELHOR_DO_PIZEIRO.mp3"},
	{"CD - Pizada de Barao", 					"http://18.231.148.98/mp3/CDS/PIZADA_DE_BARAO.mp3"}
};

// Sistema de Armas
new SelecionouArma[ MAX_PLAYERS ] ;
new PegouArma[ MAX_PLAYERS ];

// AmmuNation
new ComprandoArma[ MAX_PLAYERS ] ;

	//Emprego
new	EmpregoEscolhido[MAX_PLAYERS],
	catSelected[MAX_PLAYERS];

new	EmpregoDuty[MAX_PLAYERS];

//Mineiradores
new Mineirando[MAX_PLAYERS],
	MinerioValue[MAX_PLAYERS],
	MinerioType[MAX_PLAYERS]
;
//Petroleiros
new
	PetroleiroMoney[MAX_PLAYERS],
	bool:TraillerAttach[ MAX_PLAYERS ],
	TraillerComb[ MAX_PLAYERS ],
	_SecurityPetrol[ MAX_PLAYERS ],
	TraillerCount[ MAX_PLAYERS ]
;

new	TrashMoney[MAX_PLAYERS], TrashRoute[ MAX_PLAYERS ], TrashCheck[ MAX_PLAYERS ], bool:RotaFailed[MAX_PLAYERS], RotaFailedTemp[MAX_PLAYERS]; // Lixeiros
new	TransportMoney[MAX_PLAYERS], CheckBus[MAX_PLAYERS], bool:RotaBusFailed[MAX_PLAYERS], RotaBusFailedTemp[MAX_PLAYERS]; //Motoristas de Onibus

new OnibusRoute[ MAX_PLAYERS ];

new CartCheck[ MAX_PLAYERS ], CarteiroMoney[ MAX_PLAYERS ], RotaSelecionada[ MAX_PLAYERS ],
	bool: PegouPacotes[ MAX_PLAYERS ], bool: InicioRota[MAX_PLAYERS];

// Taxista
new bool:PediuTaxi[ MAX_PLAYERS ],
	bool: Localizado[ MAX_PLAYERS ],
	Float:LocalizadoPos[ MAX_PLAYERS ][3],
	bool: NoTaxi[ MAX_PLAYERS ],
	TaxiMoney[ MAX_PLAYERS ];

//Mecanico
new MecanicoMoney[ MAX_PLAYERS ], PediuMecanico[ MAX_PLAYERS ];

// Policial
new Equipado [ MAX_PLAYERS ];

new	GZSave;
new	Float:PosGZ[4];
new	PickupSave;
new	PickID;
new	Float:PosPick[3];
	// /houseint
new	Float:PPos[MAX_PLAYERS][3];


// TextDraws

new Text:TextAreas;
new	Text:Anuncios;
new Text:Objetivo[2];
new Text:BPSBRO[42];
new totalon = 0;

//PlayerTexts
new PlayerText:Entrada[MAX_PLAYERS][16];
new	PlayerText:BombAssalt[ 4 ][ MAX_PLAYERS ];
new PlayerText:Tutorial[ MAX_PLAYERS ][10];
new PlayerText:TextTutorial[ MAX_PLAYERS ][ 4 ];
new	Text:Date[ MAX_PLAYERS ];
new	PlayerText:TextVida[ 4 ][ MAX_PLAYERS ];
new PlayerText:TuningCores[ 15 ][MAX_PLAYERS];

// === Velocimetro ====== //

//new PlayerText:PTVelocimetro[19][ MAX_PLAYERS];
new PlayerText:PlayerTD[16][ MAX_PLAYERS];

// ==========================

new PlayerText:UPText[MAX_PLAYERS][1];

// ==== Fome ==== //
new	PlayerText:TextFome[4][MAX_PLAYERS],
	PlayerText:TextSede[5][MAX_PLAYERS];



#if defined ArmaColada
new
	ArmasColadas[MAX_PLAYERS],
	BalasColadas[MAX_PLAYERS]
;
#endif


// Caixas eletrônicos
enum coordenadasBasicas {
	Float:cx,
	Float:cy,
	Float:cz
}

new
	caixaEletronicoContador = 0,
	caixaEletronico[10][coordenadasBasicas]
;

/**
*	Dados de veiculos
*/

//new blindagem[MAX_VEHICLES];

/* ================

Sistema de Combustivel		*/

new combustivel[MAX_VEHICLES];
new abastecendo[MAX_PLAYERS];
#define COMBUSTIVEL_PRECO 2

//Text3d Veiculos Criados
new CarrosCriados[ MAX_PLAYERS ];
new VeiculoVip[ MAX_PLAYERS ];

// Areas Name

enum ZONEInfo
{
	zone_name[30],
	Float:zone_minx,
	Float:zone_miny,
	Float:zone_minz,
	Float:zone_maxx,
	Float:zone_maxy,
	Float:zone_maxz
};

new Float:Zones[][ZONEInfo] =
{
	{ "The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
	{ "Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
	{ "Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
	{ "Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
	{ "Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
	{ "Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
	{ "Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
	{ "Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
	{ "Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
	{ "Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
	{ "Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
	{ "Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
	{ "Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
	{ "Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
	{ "Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
	{ "Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
	{ "Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
	{ "Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
	{ "Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
	{ "Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
	{ "Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
	{ "Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
	{ "Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
	{ "Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
	{ "Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
	{ "Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
	{ "Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
	{ "Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
	{ "Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
	{ "Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
	{ "City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
	{ "Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
	{ "Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
	{ "Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
	{ "Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
	{ "Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
	{ "Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
	{ "Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
	{ "Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
	{ "Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
	{ "Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
	{ "Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
	{ "Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
	{ "Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
	{ "Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
	{ "Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
	{ "Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
	{ "Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
	{ "Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
	{ "Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
	{ "Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
	{ "Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
	{ "Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
	{ "Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
	{ "Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
	{ "Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
	{ "Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
	{ "Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
	{ "Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
	{ "Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
	{ "East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
	{ "East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
	{ "East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
	{ "East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
	{ "East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
	{ "East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
	{ "East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
	{ "East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
	{ "East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
	{ "East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
	{ "East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
	{ "Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
	{ "Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
	{ "Aeroporto de Easter Bay",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
	{ "Aeroporto de Easter Bay",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
	{ "Aeroporto de Easter Bay",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
	{ "Aeroporto de Easter Bay",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
	{ "Aeroporto de Easter Bay",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
	{ "Aeroporto de Easter Bay",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
	{ "Aeroporto de Easter Bay",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
	{ "Aeroporto de Easter Bay",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
	{ "Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
	{ "Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
	{ "El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
	{ "El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
	{ "El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
	{ "El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
	{ "El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
	{ "El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
	{ "Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
	{ "Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
	{ "Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
	{ "Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
	{ "Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
	{ "Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
	{ "Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
	{ "Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
	{ "Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
	{ "Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
	{ "Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
	{ "Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
	{ "Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
	{ "Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
	{ "Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
	{ "Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
	{ "Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
	{ "Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
	{ "Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
	{ "Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
	{ "Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
	{ "Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
	{ "Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
	{ "Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
	{ "Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
	{ "Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
	{ "~yGarver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
	{ "Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
	{ "Parque Glen",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
	{ "Parque Glen",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
	{ "Parque Glen",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
	{ "Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
	{ "Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
	{ "Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
	{ "Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
	{ "Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
	{ "Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
	{ "Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
	{ "Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
	{ "Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
	{ "Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
	{ "Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
	{ "Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
	{ "Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
	{ "Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
	{ "Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
	{ "Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
	{ "Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
	{ "Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
	{ "Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
	{ "Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
	{ "Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
	{ "Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
	{ "Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
	{ "Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
	{ "Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
	{ "Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
	{ "Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
	{ "Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
	{ "Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
	{ "Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
	{ "Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
	{ "Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
	{ "Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
	{ "Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
	{ "Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
	{ "Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
	{ "Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
	{ "Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
	{ "Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
	{ "K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
	{ "Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
	{ "Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
	{ "Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
	{ "King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
	{ "King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
	{ "King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
	{ "LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
	{ "LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
	{ "LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
	{ "LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
	{ "LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
	{ "Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
	{ "Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
	{ "Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
	{ "Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
	{ "Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{ "Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{ "Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{ "Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{ "Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
	{ "Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
	{ "Aeroporto de Las Venturas",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{ "Aeroporto de Las Venturas",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{ "Aeroporto de Las Venturas",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{ "Aeroporto de Las Venturas",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
	{ "Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{ "Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
	{ "Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
	{ "Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{ "Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{ "Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
	{ "Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{ "Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{ "Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{ "Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{ "Aeroporto de Los Santos",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{ "Aeroporto de Los Santos",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{ "Aeroporto de Los Santos",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{ "Aeroporto de Los Santos",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
	{ "Aeroporto de Los Santos",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
	{ "Aeroporto de Los Santos",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
	{ "Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{ "Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{ "Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{ "Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{ "Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{ "Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{ "Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{ "Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
	{ "Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
	{ "Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
	{ "Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
	{ "Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
	{ "Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
	{ "Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
	{ "Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{ "Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{ "Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{ "Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{ "Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{ "Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{ "Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{ "Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{ "Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{ "Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{ "Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{ "Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{ "Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{ "Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{ "North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
	{ "Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{ "Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{ "Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{ "Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{ "Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{ "Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{ "Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{ "Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
	{ "Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
	{ "Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
	{ "Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
	{ "Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{ "Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
	{ "Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
	{ "Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
	{ "Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{ "Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{ "Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{ "Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{ "Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{ "Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{ "Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{ "Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{ "Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{ "Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{ "Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
	{ "Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
	{ "Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
	{ "Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{ "Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{ "Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{ "Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{ "Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{ "Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{ "Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{ "Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{ "Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
	{ "Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{ "Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{ "Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{ "Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{ "Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{ "Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{ "Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{ "Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{ "Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{ "Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{ "Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{ "Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{ "Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{ "Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{ "Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{ "Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{ "Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{ "Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{ "Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{ "Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{ "Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{ "Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{ "Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{ "Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{ "Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{ "Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{ "Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{ "Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{ "Royal Cassino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{ "San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{ "Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
	{ "Praia de Santa Maria",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{ "Praia de Santa Maria",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{ "Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
	{ "Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
	{ "Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
	{ "Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{ "Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{ "Starfish Cassino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{ "Starfish Cassino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
	{ "Starfish Cassino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{ "Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{ "Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{ "Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{ "Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{ "Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{ "Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{ "The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{ "The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{ "The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{ "Fazenda VDL",      -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{ "The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{ "The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{ "The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
	{ "The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
	{ "The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{ "The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
	{ "The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{ "The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{ "The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{ "The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{ "The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{ "The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{ "Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
	{ "Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
	{ "Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{ "Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{ "Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{ "Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
	{ "Praia de Verona",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{ "Praia de Verona",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{ "Praia de Verona",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{ "Praia de Verona",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{ "Praia de Verona",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{ "Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{ "Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{ "Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{ "Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{ "Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{ "Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{ "Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{ "Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{ "Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{ "Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{ "Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{ "Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{ "Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{ "Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00},
	// Main Zones
	{ "Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{ "Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{ "Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{ "Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{ "Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{ "San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{ "Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{ "Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
	{ "Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

new RandMusic[][] =
{
	"http://35.199.103.187/Music/Fist/Abertura1.mp3",
	"http://35.199.103.187/Music/Fist/Abertura2.mp3"
};

new NicksInvalidos[37][] =
{
	"com1", "com2", "com3",
	"com4", "com5", "com6",
	"com7", "com8", "com9",
	"lpt4", "lpt5", "lpt6",
	"lpt7", "lpt8", "lpt9",
	"nul", "clock$", "aux",
	"prn", "con", "InvalidNick",
	"fdp", "@", "'", "*", "+", "-", "=",
	"pnc", "hacker", "hack",
	"adm", "admin", "Server",
	"lixo", "Noob","Servidor"
};

new Palavroes[][] =
{
	{"desgraçado"}, {"d esgraçado"}, {"de sgraçado"}, {"des graçado"}, {"desg raçado"}, {"desgr açado"},
	{"desgra çado"}, {"desgraç ado"}, {"desgraça do"}, {"desgraçad o"},
	{"desgraça"}, {"d esgraça"}, {"de sgraça"}, {"des graça"}, {"desg raça"}, {"desgr aça"}, {"desgra ça"},
	{"desgraç a"},{"pnc"},{"caralho"},
	{"capeta"}, {"c apeta"}, {"ca peta"}, {"cap eta"}, {"cape ta"}, {"capet a"},
	{"kapeta"}, {"k apeta"}, {"ka peta"}, {"kap eta"}, {"kape ta"}, {"kapet a"},
	{"buceta"}, {"b uceta"}, {"bu ceta"}, {"buc eta"}, {"buce ta"}, {"bucet a"},
	{"fdp"}, {"f dp"}, {"fd p"}, {"f.d.p"}, {"f. d.p"}, {"f.d. p"}, {"f d p"}, {"filha da puta"},
	{"puta"}, {"p uta"}, {"pu ta"}, {"put a"},
	{"porra"}, {"arrombado"}
};

new ChatAttack[][] = {
	{"!kill"},
	{"!lag"},
	{"!attack"},
	{"!spam"},
	{"!npc"},
	{"!ft"},
	{"samphax"},
	{"samphax"},
	{"samphax.com"},
	{"[Fuck This Server]"},
	{"www.samphax.com"}
};

new adminInfo[9][50] =
{
	"Cidadao",
 	"Helper",
	"Administrador",
	"Supervisor",
	"Sub Gerente",
	"Gerente",
    "Mapper",
    "Scripter",
    "Fundador"
};




//Profissoes Definiçao
const MOnibus 		= 1;
const Petroleiro 	= 2;
const Lixeiro 		= 3;
const Carteiro 		= 4;
const Mecanico 		= 5;
const Minerador 	= 6;
const Taxista 		= 7;
const Advogado 		= 8;
const Paramedico 	= 9;
const Lenhador 		= 10;
const PizzaJob      = 11;


// Nome dos Empregos
new EmpregoNome[][] =
{
	"Desempregado",
	"Motorista de Onibus",
	"Petroleiro",
	"Lixeiro",
	"Carteiro",
	"Mecanico",
	"Minerador",
	"Taxista",
	"Advogado",
	"Paramedico",
	"Lenhador",
	"Entregador de Pizza"
};

enum empregosmenu
{
	JobID,
	JobType,
	JobName[ 50 ],
	JobHabName[ 20 ],
	JobHab,
	JobLevel
};

//Menu Empregos prefeitura
//JobHab  1 = A, 2 = B, 3 = D, 4 = E
//JobLevel  0 = N/A ...

const TYPE_TRANS		= 1;
const TYPE_CONJ         = 2;
const TYPE_SINGLE       = 3;
const TYPE_DESONEST     = 4;
const TYPE_SECOND       = 5;

new EmpregosTypeTrans[][empregosmenu] = {
    { MOnibus,		TYPE_TRANS,			"Motorista de Onibus", 		"Hab. D", 	3,  0},
	{ Petroleiro,	TYPE_TRANS,			"Petroleiro",				"Hab. E", 	4,  1},
	{ Lixeiro,		TYPE_TRANS,			"Lixeiro",                	"Hab. E", 	4,  0},
	{ Taxista,		TYPE_TRANS,			"Taxista",               	"Hab A/B",	2,  1}
};

static EmpregosTypeSingle[][empregosmenu] = {
    { Minerador,	TYPE_SINGLE,		"Minerador",           		"N/A",	  	0,	0},
	{ PizzaJob,   	TYPE_SINGLE,		"Entregador de Pizza",     	"N/A",    	0,  0},
    { Carteiro,		TYPE_SINGLE,		"Carteiro",               	"N/A",	  	0,  0},
    { Mecanico,		TYPE_SINGLE,		"Mecanico",               	"Hab. B", 	2,  1},
   	{ Advogado,		TYPE_SINGLE,		"Advogado",               	"N/A",		2,  3},
	{ Paramedico,   TYPE_SINGLE,		"Paramedico",               "Hab B",    2,  2}
};

static EmpregosTypeGroup[][empregosmenu] = {
    { Lenhador,   	TYPE_CONJ,			"Lenhador",               	"N/A",    	0,  0}
};

//Novo Menu de pegar empregos
enum getjobs {
	jobID,
    jobMinLevel,
    jobDescrition[150],
	Float:jobPosX,
	Float:jobPosY,
	Float:jobPosZ,
};

new getJobMenu[][getjobs] =
{
 {PizzaJob, 0, "{FFFFFF}Deseja trabalhar como {ECE264}Entregador de Pizza{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 2098.8298, -1797.1786, 13.3889},
 {Petroleiro, 1, "{FFFFFF}Deseja trabalhar como {ECE264}Petroleiro{FFFFFF}?\nUtilize {ECE264}/pegar emprego", -1031.0725, -593.9385, 32.0078},
 {Lixeiro, 3, "{FFFFFF}Deseja trabalhar como {ECE264}Lixeiro{FFFFFF}?\nUtilize {ECE264}/pegar emprego", -1896.253784,-1678.267700,23.015625},
 {Carteiro, 4, "{FFFFFF}Deseja trabalhar como {ECE264}Carteiro{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 1797.7214, -1704.0864, 13.5286},
 {Taxista, 7, "{FFFFFF}Deseja trabalhar como {ECE264}Taxista{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 1767.0256, -1905.6582, 13.5678},
 {Mecanico, 5, "{FFFFFF}Deseja trabalhar como {ECE264}Mecanico{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 1613.6652, -1885.7825, 13.5468},
 {Minerador, 6, "{FFFFFF}Deseja trabalhar como {ECE264}Minerador{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 586.9746, 861.9193, -43.1594},
 {Paramedico, 9, "{FFFFFF}Deseja trabalhar como {ECE264}Paramedico{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 1177.5429, -1327.5900, 14.0758},
 {Lenhador, 10, "{FFFFFF}Deseja trabalhar como {ECE264}Lenhador{FFFFFF}?\nUtilize {ECE264}/pegar emprego", -443.135192,-60.661300,59.153186},
 {Advogado, 8, "{FFFFFF}Deseja trabalhar como {ECE264}Advogado(a){FFFFFF}?\nUtilize {ECE264}/pegar emprego", 334.4796, 157.5179, 1014.1875},
 {MOnibus, 1, "{FFFFFF}Deseja trabalhar como {ECE264}Motorista de Ð¤nibus{FFFFFF}?\nUtilize {ECE264}/pegar emprego", 1992.4210, -2201.3220, 13.5468}
};

//Orgs ID Definiçao

const C_ADMIN		=	0xFF34B300;
const C_CIVIL		=	0xFFFFFFFF;


const PM = 1;
const BOPE = 2;
const CV = 3;
const PCC = 4;

new nomeOrgs[][50] = {
	"Civil",
	"Policia Militar",
	"BOPE",
	"CV",
	"PCC"
};

//	Lista de cargos

GetPatentNome(organizacao, cargo)
{
	new PatenteStr[50];
	switch(cargo){
		case 1: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName1]);
		case 2: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName2]);
		case 3: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName3]);
		case 4: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName4]);
		case 5: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName5]);
		case 6: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName6]);
		case 10: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName5]);
		case 20: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName5]);
		default: format(PatenteStr, sizeof(PatenteStr), "%s", InfoOrg[organizacao][PatenteName1]);
	}
	return PatenteStr;
}

//	Database de cores das Organizaçoes

new orgsColorName[] = { //Funçao unica /trabalhar dos policiais n aparecer no mapa.
	0xFFFFFF00,
	0x0D05FC00,
	0xD154C200,
	0xFF000000,
	0xB0A7AF00
};


new orgsColor[] = {
	0xFFFFFFFF,
	0x0D05FCFF,
	0xD154C2FF,
	0xFF0000AA,
	0xB0A7AFFF
};

new orgsColorArea[] = {
    0xFFFFFFFF,
    0x0D05FC66,
    0xD154C266,
    0xFF000066,
    0xB0A7AF66
};

new OrgColorHex[][128] = {
	"FFFFFF",
	"0D05FC",
	"D154C2",
  	"FF0000",
    "B0A7AF"
 };


/*	Database de respawn das Organizaçoes
===========================================================*/
enum orgsRespawnNames {
	Float:orpX,
	Float:orpY,
	Float:orpZ,
	Float:orpA,
	orpInt
}

static orgsRespawnPoint[][orgsRespawnNames] = {
    {1718.0671,-1696.1619,13.5000,181.5397, 0}, // Civil
	{217.0476, 78.4039, 1005.0390, 0.0, 6}, //PM
	{1931.1485, 1187.6645, 22.2679, 0.0, 0}, //Bope
	{331.1448, 1128.5080, 1083.8828, 0.0, 5},//CV
	{2272.5486, -1581.3295, 1493.6078, 0.0, 1}//PCC
};

//Todos os spawn dos novatos sao no mesmo local porem em posiçoes diferentes para evitar tumultos
/*static spawnNewbies[][orgsRespawnNames] = {
    {1721.2136,		-1699.4026,		13.5000,	82.8620, 	0},
	{1721.1877,		-1705.5127,		13.5000,	93.4429, 	0},
	{1721.2452,		-1707.0532,		13.5000,	87.8028, 	0},
	{1719.6606,		-1699.8295,		13.5000,	180.5996, 	0},
	{1725.4594,		-1699.7571,		13.5000,	180.5996, 	0},
	{1721.0474,		-1693.2936,		13.5000,	174.6462, 	0},
	{1716.3447,		-1693.1907,		13.5154,	187.1797, 	0}
};*/

static spawnNewbies[][orgsRespawnNames] =
{
    {1108.651855,-1791.939086,16.593750,90.219360,0},
    {1108.133178,-1794.711181,16.593750,90.300308,0},
    {1107.599121,-1796.594848,16.593750,90.300308,0},
    {1107.165527,-1798.565673,16.593750,90.300308,0},
    {1106.676513,-1800.474853,16.593750,90.300308,0},
    {1108.432739,-1802.572753,16.593750,90.300308,0},
    {1110.921875,-1800.902587,16.593750,90.300308,0},
    {1109.322875,-1798.178100,16.593750,90.300308,0},
    {1108.786376,-1795.535766,16.593750,90.300308,0},
    {1109.447509,-1791.250732,16.593750,90.300308,0}
};


const MOnibus = 1;
const Petroleiro = 2;
const Lixeiro = 3;
const Carteiro = 4;
const Mecanico = 5;
const Minerador = 6;
const Taxista = 7;
const Advogado = 8;


enum coordCadeiasEnum {
	Float:ccnX,
	Float:ccnY,
	Float:ccnZ,
	ccnInt
};

new coordCadeias[][coordCadeiasEnum] = {
	//Solitaria
	{258.98694, 1816.81470, 0.76250, 0},

	//PM
	{264.8281, 77.4400, 1001.0390, 6},
	{263.8008, 82.3987, 1001.0390, 6},
	{263.9862, 86.6724, 1001.0390, 6},

	//BOPE
	{1922.4965, 1150.9216, 18.2329, 0},
	{1943.5920, 1151.1444, 18.2329, 0},
	{1923.7838, 1157.1115, 18.2329, 0},
	{1943.6066, 1160.2147, 18.2329, 0},
	{1923.4802, 1164.0917, 18.2329, 0},
	{1944.8485, 1154.0893, 21.7170, 0},
	{1943.9768, 1160.5806, 21.7170, 0},
	{1923.1572, 1153.8977, 21.7170, 0},
	{1922.1300, 1157.4833, 21.7170, 0}

};


enum cordsglobais {
	Float:Cx,
    Float:Cy,
    Float:Cz,
    Float:Ca,
    CInt
};

new CamasHospitalLS[][cordsglobais] = {
	{-212.6929,-1766.6002,676.4475,90.1436, 3},
	{-210.0340,-1766.5507,676.4475,86.4070, 3},
	{-210.0004,-1771.4828,676.4475,88.2870, 3},
	{-212.8640,-1771.5430,676.4475,86.7203, 3},
	{-209.9955,-1776.3633,676.4475,90.1670, 3},
	{-212.7720,-1776.3571,676.4475,89.8770, 3},
	{-211.1394,-1787.9177,676.4475,0.8895, 3},
	{-210.9930,-1790.4376,676.4475,356.5028, 3},
	{-207.0738,-1790.5718,676.4475,357.4428, 3},
	{-206.9889,-1787.9354,676.4475,358.0695, 3},
	{-201.5002,-1790.7091,676.4475,6.2162, 3},
	{-201.6643,-1787.6625,676.4475,3.0829, 3},
	{-196.6758,-1790.7194,676.4475,7.7829, 3},
	{-196.5647,-1788.0078,676.4475,356.5028, 3}
};


//	Database de portoes das Organizaçoes
new
	P_PM[3],
	P_BOPE[3]
;

//	Lista de /su
enum reasonListName {
	fName[8],
	lName[64]

};

new reasonList[][reasonListName] = {
	{"th", "Tentativa de Homicidio"},
	{"h", "Homicidio"},
	{"pim", "Porte Ilegal de Materiais"},
	{"td", "Trafico de Drogas"},
	{"fuga", "Fuga"},
	{"ap", "Ajuste de Prisao"},
	{"ta", "Tentativa de Assalto"},
	{"ts", "Tentativa de Suborno"},
	{"rp", "Resistencia a prisao"},
	{"dop", "Desobediencia a Ordem Policial"},
	{"da", "Desacato a autoridade"},
	{"pia", "Porte Ilegal de Armas"}
};

//	Escolha de skin das orgss
new Float:posAnterior[MAX_PLAYERS][3],
    intAnterior[MAX_PLAYERS];
new
	orgsInvitedID[MAX_PLAYERS],
	orgsInvitedPID[MAX_PLAYERS]
;

// Variavel de contagem de atualizacao dos dados do velocimetro
new carVelocimetro[MAX_PLAYERS];

// Pickups de Acesso ( menus )
enum pickupinfo {
	PickupName[ 150 ],
	PModel,
	PStyle,
	CorPick,
	Float:Px,
	Float:Py,
	Float:Pz,
	MenuID
};

new PickupFix[][pickupinfo] = {
	{"24/7 n{8BFFCF}/menu utilidades", 								1274, 1, -1, -27.5, -89.8000, 1003.5, 0},
	{"Empregos\n{8BFFCF}/menu empregos", 						1210, 1, 0xFFFFFFAA, 361.2999,173.6999, 1008.4000, -1},

	{"{FF0000}Zip\n{FFFFFF}Pressione 'F'", 						1275, 1, -1, 161.0859, -83.6697, 1001.8046, 2},
	{"{FF0000}Binco\n{FFFFFF}Pressione 'F'", 					1275, 1, -1, 207.5289, -101.1268, 1005.2578, 5},

	{"Caixa Eletronico\nPressione {17D21C}'{FFFFFF}Y{17D21C}'", 1274, 1, 0xF9FAFB88, 830.7438, -0.0537, 1004.1796, 3},
	{"Caixa Eletronico\nPressione {17D21C}'{FFFFFF}Y{17D21C}'", 1274, 1, 0xF9FAFB88, 833.5213, 3.2227, 1004.1796, 3},

	{"Loterica\nDigite: {FFFF00}/menu loterica", 				1274, 1, 0xF9FAFB88, 822.8012, 2.5352, 1004.1796, 4}, // Loterica LS
	{"Pressione 'F'\npara acessar o menu", 						1239, 1, 0xF9FAFB88, 375.3554, -67.4426, 1001.5078, 6}, //Burger SHot LS
	{"Armas\n/menu armas\npara acessar o menu", 				1239, 1, 0xF9FAFB88, 314.2578, -134.1084, 999.6015, 7}, // ammu nation LS


	{"/menu banco\npara acessar o menu", 						1239, 1, 0xF9FAFB88, 2316.6213, -15.5158, 26.7421, 8}, //Banco
	{"/menu banco\npara acessar o menu", 						1239, 1, 0xF9FAFB88, 2316.6213, -12.7518, 26.7421, 8}, //Banco


	{"{F59898}Plano de saude\n\n{CBC7C7}/menu hospital", 		1240, 1, -1, -201.7175, -1741.5043, 675.7687, 19}, //Hospital


	{"/menu conce\npara acessar o menu", 						1239, 1, 0xF9FAFB88, 2116.125488,-1171.545776,25.104999, -1}, //Concessionaria LS
	//{"Deseja vender seu veiculo?\nPressione 'F' para acessar o menu", 1239, 1, 0xF9FAFB88, 2119.3891, -1172.6318, 25.1052, 10},


	//Sistema de Lutas
	{"Pressione 'F' ou /menu lutas\nPara acessar o menu", 		1254, 1, 0xF9FAFB88, 771.0333, 12.7343, 1000.7002, 11},

	//Advogados
	{"{DEEFE8}Contratos para executar\nPressione 'F'", 			1239, 1, -1, 325.5008, 155.1680, 1014.1875, 13},

	//Pawn Shop
	{"Acessorios\n\n{D3D0CE}/menu acessorios", 					1239, 1, 0xFCBA2C88, 207.1092, -129.5366, 1003.5078, 12},

	//Predio LS
	{"Para utilizar os servicos do Detran\nDigite: {EBFF8B}/menu detran", 								1239, 1, 0xF9FAFB88, 1797.4390, -1304.0562, 27.6718, -1},
    {"Para utilizar os servicos do Detran\nDigite: {EBFF8B}/menu detran",                               1239, 1, 0xF9FAFB88, -2033.0900,-117.3085,1035.1719, -1},// mobile

	{"Para utilizar os servicos da imobiliaria\nDigite: {EBFF8B}/menu imobiliaria", 					1239, 1, 0xF9FAFB88, 1797.4356, -1303.8337, 22.2109, -1},
    {"Para utilizar os servicos da imobiliaria\nDigite: {EBFF8B}/menu imobiliaria",                     1239, 1, 0xF9FAFB88, 1490.7349,1306.0675,1093.2964, -1},//mobile

	{"Pressione 'F'\npara comprar fichas", 																1274, 1, -1, 1955.4541, 1018.1587, 992.4687, 14},

	{"{FFFF00}/menu pizzaria", 																			1239, 1, -1, 1373.6212, -0.9385, 1000.9316, 15},
    {"{FFFFFF}1- Andar Detran\n2- Andar Imobiliaria\nAperte {FF0000}'F'{FFFFFF} para entrar",           1239, 1, -1, 593.487548,-1250.483276,18.236093, 16},
	{"{FFFFFF}Para recarregar seu estoque de Pizzas\nna moto utilize\n\n{FFFF00}/recarregarbau", 		1239, 1, -1, 2111.2754, -1787.5969, 13.5608, -1} // -1 porque nao tem menu por F ou pela funcao OnplayerMenu
};
//

// Sistema de Labels
enum text3d {
    T3dText[ 200 ],
	Float:T3dx,
	Float:T3dy,
	Float:T3dz,
	Float:Tdist
};

new Text3DLabel[][text3d] = {
	{"{9CEECE}Acessorios e Tuning\nUse {FFFFFF}/menu tuning\n{9CEECE}para acessar o menu", 1649.7916, -1838.3610, 13.5452, 20.0}, //Tuning Menu
	{"{9CEECE}Acessorios e Tuning\nUse {FFFFFF}/menu tuning\n{9CEECE}para acessar o menu", 1649.8812, -1830.0577, 13.5461, 20.0}, //Tuning Menu


	//Ponto de Onibus
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 2243.7329, -1725.9332, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1947.9551, -1454.8018, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1571.1820, -2188.4109, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1926.9893, -1471.3167, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 2252.6199, -1738.3641, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 2648.5239, -1709.1935, 10.9063, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 2869.2996, -1417.4501, 11.0478, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 2637.2354, -1693.1294, 10.9063, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 2243.5540, -1726.1753, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1712.8535, -1818.1896, 13.5391, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1705.7375, -1806.1991, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1567.0848, -1726.3063, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 850.4814, -1333.8123, 13.6406, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1211.9958, -1327.3477, 13.5599, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1440.6088, -1040.3807, 23.8281, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1544.4050, -1738.6406, 13.5469, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1504.0242, -1028.5443, 23.7979, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 1189.1548, -1354.4376, 13.5695, 15.0},
	{"{00ff00}Ponto de Onibus\n{ffffff}Use /localizaronibus", 861.5580, -1313.6953 ,13.5469, 15.0},


	//Auto Escola
	{"{9CEECE}Habilitacoes\nUse {FFFFFF}/menu autoescola\n{9CEECE}para acessar o menu", -2039.353271,-126.431694,-50.914062, 10.0},

	//Cassino
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1964.2100, 1025.1600, 992.6600, 10.0},
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1959.4950, 1025.2075, 992.5411, 10.0},
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1959.3324, 1009.1357, 992.5411, 10.0},
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1963.6646, 1009.1615, 992.6628, 10.0},

	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1963.7776, 1015.5802, 992.7337, 10.0},
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1958.7339, 1015.6523, 992.8322, 10.0},
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1959.1542, 1020.1597, 992.7113, 10.0},
	{"{ffffff}Pressione {00AAEE}'{FFFFFF}F{00AAEE}'{FFFFFF}\n para comecar uma aposta", 1963.5472, 1020.1309, 992.7909, 10.0},



	//Menu Lanches
	{"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches", 1068.5289, -1793.5102, 13.6652, 50.0}, //Spawn novatos
	{"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches", 582.1516, 852.7593, -42.7081, 60.0},//Mineiros
    {"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches", -1903.0164, -1606.4281, 21.7564, 60.0}, //Lixeiros
	{"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches",  2160.2956, -1208.0113, 23.9620, 50.0}, //Hospital
    {"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches",  1213.5698, -1309.4743, 13.5572, 50.0},//Concessionaria
    {"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches",  1501.278686,-1023.729125,23.811782, 50.0},//banco
    {"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches",  1716.9113, -1714.1030, 13.8450, 50.0}, //Praca Perto da Pref
	{"{89C4FF}Lanchonete\n\n{CBD1CF}Para ver o menu digite\n{89C8FF}/menu lanches",  1951.216796,-1769.125732,13.547272, 50.0}, //Praca Perto da Pref

	//Mineradores
	{"{D3DFD7}Entrada permitida apenas para funcionarios!\nPressione '{A1F8C0}F{D3DFD7}' para entrar", 637.5589, 831.0137, -42.9609, 30.0},
	{"{D3DFD7}Saida!\n\nPressione '{A1F8C0}F{D3DFD7}'", -2686.2673, 3950.9407, 251.1671, 30.0},

	{"{D3DFD7}Para minerar use:\n\n{A1F8C0}/minerar", -2595.2668, 3950.6301, 251.4338, 50.0},
	{"{D3DFD7}Para minerar use:\n\n{A1F8C0}/minerar", -2589.2111, 3942.4921, 251.7765, 50.0},
	{"{D3DFD7}Para minerar use:\n\n{A1F8C0}/minerar", -2587.3886, 3924.4562, 252.7747, 50.0},
	{"{D3DFD7}Para minerar use:\n\n{A1F8C0}/minerar", -2594.7407, 3914.3105, 253.3480, 50.0},
	{"{D3DFD7}Para minerar use:\n\n{A1F8C0}/minerar", 2604.9072, 3909.9938, 253.5944, 50.0},
	{"{D3DFD7}Para minerar use:\n\n{A1F8C0}/minerar", -2616.8371, 3916.8371, 253.2293, 50.0},

	{"{D3DFD7}Coloque os minerios aqui\n\n{A1F8C0}/colocarminerio", 673.2671, 828.9078, -38.3878, 60.0},

	//Sistema de cacar
	{"{B8ABEF}Area: {E2DDF7}Caca\n{B8ABEF}Use: {E2DDF7}/cacar\n{B8ABEF}Para comecar a cacar", -1634.8252,-2244.1931,31.4766, 20.0},
	{"{B8ABEF}Venda de caca\n\n\n{E2DDF7}Use: {B8ABEF}/vendercaca", -1639.9047, -2233.8567, 31.4766, 20.0},

	{"{B8ABEF}Agua gratis\n/agua", 1804.4326, -1297.3082, 13.5169, 20.0},

    {"{B8ABEF}Para abastecimento\nUse o '/Abastecer'", 1921.248413,-1776.254638,13.283356, 20.0},
    {"{B8ABEF}Para abastecimento\nUse o '/Abastecer'", 1932.238281,-1776.200683,13.283354, 20.0},
    {"{B8ABEF}Para abastecimento\nUse o '/Abastecer'", 1929.585693,-1766.068725,13.283355, 20.0},
    {"{B8ABEF}Para abastecimento\nUse o '/Abastecer'", 1920.781982,-1766.127441,13.283283, 20.0}
};

new PickupEmprego[][pickupinfo] = {
    {"Petroleiros\nPressione 'Y'", 					1314, 1, -1, -1019.5973, -593.0824, 32.0126, 	Petroleiro}, // Petroleiros
	{"Motorista de Onibus\nPressione 'Y'", 			1314, 1, -1, 1993.2864, -2205.1135, 13.5468, 	MOnibus}, // Motorista de Onibus
	{"Lixeiros\nPressione 'Y'", 					1314, 1, -1, -1896.135253,-1683.285888,23.015625, 	Lixeiro}, // Lixeiros
	{"Taxistas\nPressione 'Y'", 					1314, 1, -1, 1766.5969, -1931.7559, 13.6096,	Taxista}, //Taxista
	{"Mecanicos\nPressione 'Y'",					1314, 1, -1, 1614.3958, -1896.6317, 13.5485,	Mecanico}, //Mecanicos
	{"Mineradores\nPressione 'Y'", 					1314, 1, -1, 587.4077, 876.8841, -42.6358,		Minerador}, //Mineradores
	{"Carteiros\nPressione 'Y'", 					1314, 1, -1, 1791.3527, -1705.0816, 16.9343,	Carteiro}, // Carteiro
	{"Advogados\nPressione 'Y'", 					1210, 1, -1, 326.9513, 151.6942, 1014.1875,		Advogado}, // Advogados
	{"Paramedicos\nPressione 'Y'",					1240, 1, -1, -197.6157, -1757.3067, 675.7687,	Paramedico}, // Paramedicos
	{"Lenhadores\nPressione 'Y'",					1314, 1, -1, -435.120117,-60.336788,58.875000,	Lenhador}, // Lenhador
	{"Pressione 'Y'\nPara pegar seu uniforme",		1314, 1, -1, 1366.3765, 3.4999, 1001.0324,	PizzaJob} // Entregador de Pizzas
};



new PickupOrg[][pickupinfo] = {
    {"Policia Militar\nPressione 'Y'", 			1581, 1, 0x0D05FC88, 237.9687, 73.2759, 1005.0390, 	PM}, // Policia Militar
    {"B.O.P.E\nPressione 'Y'", 					1581, 1, 0xD154C288, 1937.3502, 1179.7147, 22.2679, BOPE} // Bope
};
// --- Entradas dos HQ's e Locais Publicos
enum EntradaLocais {
	EntradaName[ 200 ],
	PickupModel,
	PickupStyle,
	TextColor,
	Float:posX,
	Float:posY,
	Float:posZ,
	Float:tarX,
	Float:tarY,
	Float:tarZ,
	intID
};

new PickupFixEntrada[][EntradaLocais] = {
	{ "{FFFFFF}Departamento Policia Militar\nAperte {FF0000}'F'{FFFFFF} para entrar", 1247, 1, 0xFFFFFF99, 1555.5023,-1675.5105,16.1953, 246.0527,63.7524,1003.6406,6}, /* Pickup fora da DP para entrada na DP*/
	{ "{FFFFFF}Departamento Policia Militar\nAperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, 0xFFFFFF99, 1568.59997559,-1689.90002441,5.90000010,246.39999390,88.19999695,1003.29998779,6},//Entrada para DP do estacionamento
	{ "{FFFFFF}Departamento {D154C2}B{FFFFFF}.{D154C2}O{FFFFFF}.{D154C2}P{FFFFFF}.{D154C2}E{FFFFFF}\nAperte {FF0000}'F'{FFFFFF} para entrar", 1247, 1, 0xFFFFFF99, 2703.93408, -2440.90869, 13.51787, 1947.1151, 1176.1817, 22.2679, 0},//Entrada Bope central
	{ "{FFFFFF}Departamento {D154C2}B{FFFFFF}.{D154C2}O{FFFFFF}.{D154C2}P{FFFFFF}.{D154C2}E{FFFFFF}\nAperte {FF0000}'F'{FFFFFF} para entrar", 1247, 1, 0xFFFFFF99, 2727.9357, -2386.7294, 13.6328, 1930.6531, 1139.1802, 21.7334, 0},//Entrada Bope de dentro
	{ "Prefeitura\nLos Santos\nDigite /entrar para entrar", 1318, 1, 0xFFFFFF99,1478.8682,-1814.0396,13.5400 ,389.7999878,173.6999969,1008.0000000,3},// Entrada Prefeitura
	{ "Cassino LS\nAperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, -1, 1022.6063, -1121.6380, 23.8721, 2016.2699, 1017.7790,996.8750, 10}, //Entrada Cassino Clandestino LS
	//{ "24/7\nAperte {FF0000}'F'{FFFFFF} para entrar", 1241, 1, 1352.4000, -1758.8000, 13.5, -31.0, -91.1999, 1003.5, 18 }, // Entrada Loja Ultilidades 24/7
	{ "Hospital Municipal\nLS\nAperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, -1, 1173.0272, -1323.4189, 15.3973, -204.5060, -1736.0486,675.7687, 3}, // Entrada Hospital principal de LS
	{ "HQ {C70E99}Comando Vermelho\n{FFFFFF}Aperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, -1, 2442.4050, -1981.6230, 13.5468, 318.5604, 1115.1761, 1083.8828, 5}, //Entrada HQ CV
	{ "HQ {0E777D}PCC\n{FFFFFF}Aperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, -1, 2154.7919, -875.3978, 92.9515, 2265.8711, -1578.2312, 1493.60788, 0} // Entrada HQ PCC

    //{ "{FFFFFF}1- Andar Detran\n2- Andar Imobiliaria\nAperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, 0xFFFFFF99, 593.487548,-1250.483276,18.236093, 1710.433715,-1669.379272,20.225049, 18},//Entrada

    //{ "{FFFFFF}Imobiliaria\nAperte {FF0000}'F'{FFFFFF} para entrar", 1318, 1, 0xFFFFFF99, 1708.703613,-1670.198120,27.195312, -2159.122802,641.517517,1052.381713, 1}//Entrada

};


enum Entradaempinfo {
	E_emp,
	E_pickup,
	E_icone,
	Float:E_entradax,
	Float:E_entraday,
	Float:E_entradaz,
	Float:E_saidax,
	Float:E_saiday,
	Float:E_saidaz,
	E_interior,
};

new PickupFixEntradaEmp[][Entradaempinfo] =
{
	{1,		1313,	 6,		 1367.7618, -1279.8623, 13.5467 ,315.6994, -143.8061, 999.6016, 					7}, //Ammu Nation
	{2,		1318,	 54,	 2229.5043, -1721.7099, 13.5655, 772.1119, -3.8986, 1000.7288, 						5}, //LS Academy
	{3,		1318,	 52,	 1631.9073, -1172.1661, 24.0781, 834.2000, 7.4000, 1003.7999, 						3}, //Loterica LS
	{4,		1318,	 45,	 2244.4238, -1665.5754, 15.4764, 207.7379, -109.0199, 1005.1328, 					15}, //Binco
	{5,		1318,	 45,	 1456.7442, -1137.8629, 23.9629, 161.3999, -96.6998, 1001.5999, 					18}, //Zip LS
	{6,		1318,	 10,	 811.5681, -1616.1339, 13.5467, 363.6000, -74.6998, 1001.2000, 						10}, //Burger Shot
	{7,		1318,	 19,	 1310.1468,  -1367.3382, 13.5293, -2039.542968,-134.145782,-50.914062,  			0}, // Auto escola
	{8, 	1318,	 52,	 1461.8657, -1022.5710, 23.7418, 2305.0410, -16.2169, 26.7420, 		 				0}, //Banco Central LS
	{22,	1241,	 12,	 1352.4000, -1758.8000, 13.5, -31.0, -91.1999, 1003.5, 								18}, // Entrada Loja Ultilidades 24/7
	{24,    1239,	 28,     1163.4276, -1694.1591, 14.1718, 207.0594, -139.8243, 1003.5078,                     3}, //Pawn Shop
	{25,    1239,	 29,     2104.2502,	-1806.3750,	13.5547, 1369.6666, -15.1592, 1001.0333,                     5} //Pizzaria
    //{21,    1318,    12,     1852.307250,-1092.836547,23.828125, 1696.727416,-1380.345458,3261.071289,            0} //conce
};

// saidas dos locais
enum SaidasLocais {
	SaidaName[ 100 ],
	SPcolor,
	Float:PX,
	Float:PY,
	Float:PZ,
	Float:TX,
	Float:TY,
	Float:TZ,
	Float:Ang,
	inteID
};

new PickupFixSaida[][SaidasLocais] = {

	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'", 		0xFFFFFF99, 	246.7989,62.7224,1003.6406, 1553.0452, -1675.5940, 16.0997, 0.0, 0},/* saida DP pickup dentro*/
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99,		246.3999, 88.1999, 1003.2999, 1568.5999, -1689.9000, 5.9000, 0.0, 0},//dentro dp para o estacionamento
    { "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99,		1947.1151, 1176.1817, 22.2679, 2703.93408, -2440.90869, 13.51787, 0.0, 0},//saida BOPE

    { "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99,	  -2026.9459,-103.9797,1035.1719, 593.487548,-1250.483276,18.236093, 0.0, 0},//Saida detran mobile
    { "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",      0xFFFFFF99,     1494.3098,1303.8673,1093.2891, 593.487548,-1250.483276,18.236093, 0.0, 0},//Saida imo mobile

	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99,		1930.6531, 1139.1802, 21.7334, 2727.9357, -2386.7294, 13.6328, 0.0, 0},//saida HQ bope ^^
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99, 	389.7999, 173.6999, 1008.0000, 1478.8682,-1814.0396,13.5400,0.0, 0},//Saida Prefeitura
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99, 	2145.6000, 1597.6999, 995.2000, 2315.4775, 0.3519, 26.7421, 0.0, 0},//saida dos Fundos do banco
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99, 	2019.0710, 1017.9572, 996.8750, 1022.5787, -1123.3984, 23.8704, 0.0, 0},//saida Cassino Clandestino LS
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99, 	-204.6752, -1735.5987, 675.7687,1173.0272, -1323.4189, 15.3973, 0.0, 0}, // Saida Hospital Municipal de LS,
    { "Pressione {FF0000}'F'{FFFFFF} para entrar",			0xFFFFFF99, 	2315.7443, -0.1338, 26.7421, 2145.6000,1597.6999, 995.2000, 0.0, 1}, //Entrada Fundo Banco
    { "Pressione {FF0000}'F'{FFFFFF} para sair",			0xFFFFFF99, 	220.8570, 139.8495, 1003.0234, 303.1887512207,-1533.0203857422, 24.921875, 0.0, 0}, //Entrada Fundo Banco
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99, 	318.5604, 1115.1761, 1083.8828, 2442.6423,-1980.1599,13.5469, 0.0, 0}, // Saida HQ CV
	{ "Digite /sair ou pressione '{FF0000}F{FFFFFF}'",		0xFFFFFF99, 	2262.9580, -1582.5327, 1493.5999, 2154.7919, -875.3978, 92.9515, 0.0, 0} // Saida HQ PCC
};

enum pickupWeaponsNames {
	Float: posX,
	Float: posY,
	Float: posZ,
	intID,
	pickIco,
	orgsID,
	pickText[64]
};

//===============================

enum vehprofs {
    veText[ 200 ],
    vePickup,
    Float:veX,
    Float:veY,
    Float:veZ,
    veMenu
};

new VehProf[][vehprofs] = {
    { "Motoristas\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1994.839599,-2196.794189,13.546875, 0}, /* Pickup para spawnar veiculos onibus*/
    { "Mecanicos\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1641.592407,-1901.539184,13.552103, 1},
    { "Carteiros\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1802.599243,-1690.458129,13.521447, 2},
    { "Taxistas\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1772.044799,-1904.763061,13.553632, 3},
    { "Paramedicos\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1174.406005,-1310.513549,13.990976, 4},
    { "Pizzaboy\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 2119.476562,-1787.117187,13.560846, 5},
    { "Policia Militar\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1566.258911,-1691.303833,5.890625, 6}, // pm cima
    { "Policia Militar\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 1575.960937,-1634.337158,13.555745, 6}, // pm estacionamento
    { "Lixeiro\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, -1892.032470,-1700.384643,21.750000, 7},
    { "BOPE\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 2718.746093,-2373.674072,13.632812, 8},
    { "BOPE\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 2777.189208,-2392.632568,17.191354, 9},
    { "BOPE\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, 2776.345458,-2361.345703,17.263511, 9},
    { "Petroleiros\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, -984.017272,-615.408264,32.007812, 10},
    { "Lenhadores\nAperte {FF0000}'Y'{FFFFFF} para spawnar", 19134, -448.622070,-56.304027,59.459362, 11}
};

enum carrosprof {
    caID,
    Float:caX,
    Float:caY,
    Float:caZ,
    Float:caA
};
    //Mecanicos LS
new ProfMecanico[][carrosprof] = {
    {525, 1670.0848, -1899.5202, 13.4222, 90.673},
    {525, 1670.0773, -1895.7713, 13.4290, 91.5275},
    {525, 1647.4836, -1886.1374, 13.4331, 178.8897},
    {525, 1669.9788, -1892.0682, 13.4279, 91.7685},
    {525, 1652.0632, -1886.1027, 13.4336, 179.6000},
    {525, 1656.2204, -1886.2055, 13.4335, 178.9178},
    {525, 1660.4345, -1901.7027, 13.4250, 1.8933}
};

    //Onibus Terminal
new ProfOnibus[][carrosprof] = {
    {431, 2057.5933, -2200.5095, 13.5382, 359.6473},
    {431, 2051.6821, -2200.4006, 13.5382, 358.9532},
    {431, 2045.5928, -2200.4253, 13.5382, 359.4221},
    {431, 2039.6639, -2200.3938, 13.5382, 359.8610},
    {431, 2033.7627, -2200.2520, 13.5382, 0.1744},
    {431, 2063.6851, -2200.4614, 13.5382, 358.7375},
    {431, 2069.4851, -2200.3904, 13.5382, -1.9800},
    {431, 2027.3630, -2200.7109, 13.5382, 0.1744},
    {431, 2021.8040, -2200.8413, 13.5382, 0.1744},
    {431, 2015.6404, -2200.8459, 13.5382, 0.1744},
    {431, 2009.6744, -2200.7349, 13.5382, 0.1744},
    {431, 2003.8748, -2200.8325, 13.5382, 0.1744}
};

new ProfCarteiro[][carrosprof] = {
    {509,1794.0000000,-1689.0000000,13.1000000,180.0000000},
    {509,1795.9003900,-1689.0000000,13.1000000,180.0000000},
    {509,1799.3000000,-1689.1000000,13.1000000,180.0000000},
    {509,1798.2998000,-1689.0996000,13.1000000,180.0000000},
    {509,1791.7000000,-1688.9000000,13.1000000,180.0000000},
    {509,1797.0996000,-1689.0996000,13.1000000,180.0000000},
    {509,1792.9004000,-1688.9004000,13.1000000,180.0000000},
    {509,1795.0000000,-1689.0000000,13.1000000,180.0000000},
    {509,1789.8000500,-1688.9000200,13.1000000,180.0000000},
    {509,1790.7002000,-1688.9004000,13.1000000,180.0000000},
    {509,1787.2000000,-1688.7000000,13.0000000,180.0000000},
    {509,1788.1000000,-1688.8000000,13.0000000,180.0000000},
    {509,1789.0000000,-1688.7998000,13.0000000,180.0000000}
};

new ProfTaxista[][carrosprof] = {
    {586, 1802.8437, -1904.7927, 12.9202, 91.6860},
    {586, 1803.0207, -1910.6328, 12.9169, 91.3734},
    {586, 1803.1904, -1916.0583, 12.9146, 91.6458},
    {586, 1803.3587, -1921.5024, 12.9119, 89.4185},
    {586, 1803.2717, -1926.5344, 12.9094, 91.6616},
    {586, 1803.3931, -1932.2932, 12.9066, 93.2052},
    {420, 1777.6707, -1932.0002, 13.1656, 271.9232},
    {438, 1777.6022, -1926.8236, 13.1660, 270.9193},
    {420, 1777.4096, -1921.2913, 13.1669, 270.0048},
    {438, 1777.4924, -1915.6713, 13.1673, 269.0732},
    {420, 1777.4196, -1910.3498, 13.1668, 268.5583},
    {438, 1777.6334, -1904.6772, 13.1654, 270.0178},
    {420, 1777.7360, -1899.0179, 13.1669, 269.8659},
    {438, 1777.6263, -1893.3776, 13.1661, 270.4101},
    {420, 1777.5437, -1888.3660, 13.1663, 271.4669}
};

new ProfParamedico[][carrosprof] = {
    {416, 1177.7225, -1340.1779, 14.0588, 269.7173},
    {416, 1177.2158, -1306.9061, 14.0503, 270.6003},
    {416, 1145.9785, -1315.2314, 13.7853, 89.7717},
    {416, 1145.7938, -1310.1660, 13.8097, 89.8111},
    {416, 1145.7553, -1304.7215, 13.8081, 90.2302},
    {416, 1145.7186, -1299.4613, 13.7952, 88.6061}
};

new ProfPizza[][carrosprof] = {
    {448, 2122.6016, -1782.5542, 12.8655, 88.1400},
    {448, 2122.5662, -1780.0728, 12.8655, 88.1400},
    {448, 2122.5671, -1777.9484, 12.8655, 88.1400},
    {448, 2122.5378, -1775.3413, 12.8655, 88.1400},
    {448, 2122.6287, -1773.2111, 12.8655, 88.1400},
    {448, 2122.5613, -1770.9414, 12.8655, 88.1400},
    {448, 2122.5693, -1768.3450, 12.8655, 88.1400},
    {448, 2122.6250, -1785.0018, 12.8655, 88.1400},
    {448, 2109.5217, -1784.8167, 12.8655, 0.2400},
    {448, 2107.3528, -1784.8899, 12.8655, 0.2400},
    {448, 2105.2622, -1784.8400, 12.8655, 0.2400},
    {448, 2103.2964, -1784.7222, 12.8655, -1.0800},
    {448, 2101.3457, -1784.6925, 12.8655, -2.8800},
    {448, 2099.3372, -1784.6464, 12.8655, -2.8800}
};

    // PM:
new ProfPM[][carrosprof] = {
    {596, 1565.5458, -1607.4979, 13.1032, 179.8854},
    {596, 1570.5535, -1607.3176, 13.1041, 179.5686},
    {596, 1575.5000, -1607.5603, 13.1040, 179.4566},
    {596, 1580.6198, -1607.5581, 13.1032, 177.8819},
    {523, 1605.5001, -1607.6021, 13.0963, 178.9158},
    {523, 1600.3615, -1607.5516, 13.0376, 177.5154},
    {427, 1583.1676, -1710.1108, 6.0224, 359.5102},
    {427, 1574.6049, -1710.1010, 6.0223, 0.8764},
    {427, 1601.3779, -1691.9031, 6.0225, 90.0106},
    {490, 1529.2211, -1683.7351, 6.0187, 270.4628},
    {490, 1558.6975, -1711.1911, 6.0178, 0.4873},
    {596, 1545.3798, -1672.3585, 5.6128, 89.9761},
    {596, 1545.6667, -1658.8964, 5.6120, 90.0200}
};

new ProfLix[][carrosprof] =
{
    {408,-1887.518310,-1744.849853,22.294317,34.097167},
    {408,-1891.814453,-1747.799560,22.305809,35.010543},
    {408,-1881.173339,-1742.294921,22.304349,24.849901},
    {408,-1901.339721,-1752.427978,22.299175,28.278709},
    {408,-1867.079711,-1733.328613,22.305637,26.303056},
    {408,-1903.778320,-1755.870483,22.295108,28.631917},
    {408,-1908.416381,-1757.805053,22.344583,24.574018},
    {408,-1912.140014,-1759.488891,22.723680,22.200019}
};

new ProfBOPE[][carrosprof] =
{
    {490,2714.790527,-2366.480712,13.760416,272.394836},
    {490,2713.354492,-2360.556640,13.761522,271.465850},
    {427,2713.585693,-2354.509033,13.764594,271.317199},
    {427,2713.395263,-2348.761962,13.764671,270.941284},
    {528,2714.099609,-2342.519531,13.674098,271.179138},
    {528,2713.532226,-2336.774658,13.676614,273.031127}
};

new ProfBOPE_H[][carrosprof] =
{
    {417,2791.033203,-2349.656982,17.924957,0.036481},
    {417,2791.033935,-2349.656250,17.925657,0.077362},
    {417,2791.472656,-2384.539306,17.860149,0.038769}
};

new ProfPetro[][carrosprof] =
{
    {515, -980.6624, -656.1876, 33.0279, 89.9805},
    {403, -980.5492, -664.5618, 33.0230, 88.2910},
    {514, -980.3480, -672.2421, 33.0262, 87.2280},
    {515, -980.5886, -679.9127, 33.0286, 88.6051},
    {403, -980.8106, -686.9880, 33.0330, 87.9618},
    {514, -980.9873, -648.6072, 33.0230, 88.5778},
    {515, -980.8787, -638.6844, 32.6143, 89.4084},
    {403, -980.4924, -630.6707, 32.6143, 90.1287},
    {514, -980.7259, -623.2789, 32.6140, 88.5842}
};

new ProfLen[][carrosprof] =
{
    {578,-553.700561,-74.781814,64.180419,181.726074},
    {578,-559.515808,-75.967964,64.613533,179.141860},
    {578,-565.892089,-75.004173,64.891716,180.560119},
    {578,-455.635894,-48.587947,60.513328,181.563415},
    {578,-461.023742,-48.062057,60.572864,177.644546},
    {578,-467.984222,-77.948326,60.806266,174.155990},
    {578,-469.550567,-93.302818,61.093906,174.114959},
    {578,-481.652282,-176.885528,78.836669,181.445785},
    {578,-562.660217,-199.312301,79.168556,5.548645}
};

/**
*	Sistema de Equipamentos
*/
new PickupEquipar[][pickupWeaponsNames] = {
	{254.3219, 78.7552, 1003.6406,-1,1242, PM,"Equipamentos PM"},
	{1929.8251, 1183.1912, 22.2679,-1, 1242, BOPE, "Equipamentos BOPE"},
	{323.2406, 1116.7639, 1083.8828, -1, 2061, CV, "Equipamentos CV"},
	{2270.9665, -1577.8359, 1493.5999, -1, 2061, PCC, "Equipamentos PCC"}
};

/**
*	Pickup de prender - Organizaçoes Policiais
*/
new pickupPrenderData[][pickupWeaponsNames] = {
	{1545.9385, -1609.2374, 13.3828, -1, 1247, PM, "Prender PM"},
	{2774.3616,-2436.9744,13.6369, -1, 1247, BOPE, "Prender BOPE"}
};

/**
*	Sistema de Gerenciamento de Organizaçoes
*/
new pickupInfoorgData[][pickupWeaponsNames] = {
	{231.00000000,72.19999695,1005.09997559, -1, 1239, PM,"Gerenciar Batalhao"},	// PM
	{1921.5908, 1176.1134, 22.2679, -1, 1239, BOPE, "Gerenciar Batalhao"},			// BOPE
	{325.7248, 1127.1899, 1083.8902, -1, 1239, CV, "Gerenciar Faccao"},	// Comando Vermelho
	{2269.1560, -1573.4449, 1493.6077, -1, 1239, PCC, "Gerenciar Faccao"}	// Primeiro Comando Capital

};

/**
*	Pickups do gerenciamento de jogadores procurados
*/
new pickupProcuradosData[][pickupWeaponsNames] = {
	{231.1974, 76.4117, 1005.0390, -1, 1247, PM,"Gerenciar Procurados PM"},
	{1926.6025, 1172.9940, 22.2679, -1, 1247, BOPE, "Gerenciar Procurados BOPE"}
};

enum pxCandidatos{
    Float:CanX,
	Float:CanY,
	Float:CanZ,
	OrgIDX
};

new PicksCandidatos[][pxCandidatos] = {
	{256.3388, 65.9583, 1003.6406, PM},
	{1942.2236, 1173.4073, 22.2679, BOPE},
	{2453.4338, -1987.3763, 13.5540, CV},
	{2268.6071, -1588.6582, 1494.1938, PCC}
};


enum Pickupscamenum
{
	PickupID,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	IntP,
	OrgID,
	PickupText[ 64 ],
};

new PickupsCam[][Pickupscamenum] = {
	{1239, 235.0, 79.5, 1004.9000, 6, PM, "Cameras Batalhao"},
	{1239, 1921.5330, 1178.3826, 22.2679, 0, BOPE, "Cameras Batalhao"},
	{1239, 309.2884, 1123.7772, 1083.8828, 5, CV, "Cameras HQ"},
	{1239, 2268.2619, -1577.6083, 1493.6077, 5, PCC, "Cameras HQ"}

};

new const SkVeh[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner",
	"Perennial","Sentinel","Dumper","Firetruck",
	"Trashmaster","Stretch","Manana","Infernus","Voodoo",
	"Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam",
	"Esperanto","Taxi","Washington","Bobcat","Mr Whoopee",
	"BF Injection","Hunter","Premier","Enforcer","Securicar",
	"Banshee","Predator","Bus","Rhino","Barracks","Hotknife",
	"Trailer","Previon","Coach","Cabbie","Stallion","Rumpo",
	"RC Bandit", "Romero","Packer","Monster","Admiral","Squalo",
	"Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder",
	"Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van",
	"Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider","Glendale",
	"Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy",
	"Hermes","Sabre","Rustler","ZR-350","Walton","Regina","Comet","BMX",
	"Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking",
	"Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin",
	"Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane",
	"Tanker","Road Train","Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR-900",
	"NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade",
	"Freight","Streak","Vortex","Vincent","Bullet","Clover","Sadler","Firetruck",
	"Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan",
	"Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight",
	"Trailer","Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley",
	"Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros","Hotdog","Club",
	"Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix",
	"Glendale","Sadler","Luggage Trailer A","Luggage Trailer B","Stair Trailer","Boxville",
	"Farm Plow","Utility Trailer"
};

stock CorPorID(colorid)
{
    new
		_skc[ 20 ]
	;
    switch(colorid)
    {
        case 0: _skc ="Black";
        case 1: _skc ="White";
        case 2: _skc ="Blue";
        case 3: _skc ="Red";
        case 4: _skc ="Grey-Green";
        case 5: _skc ="Purple";
        case 6: _skc ="Yellow";
        case 7: _skc ="Blue";
        case 8: _skc ="Silver";
        case 9: _skc ="Dark sGrey";
        case 10: _skc ="Midnight Blue";
        case 11: _skc ="Dark Grey";
        case 12: _skc ="Teal";
        case 13: _skc ="Dark Grey";
        case 14: _skc ="Light Grey";
        case 15: _skc ="Silver";
        case 16: _skc ="Dark Green";
        case 17: _skc ="Dark Red";
        case 18: _skc ="Dark Red";
        case 19: _skc ="Grey";
        case 20: _skc ="Royal Blue";
        case 21: _skc ="Rich Maroon";
        case 22: _skc ="Rich Maroon";
        case 23: _skc ="Grey";
        case 24: _skc ="Dark Grey";
        case 25: _skc ="Dark Grey";
        case 26: _skc ="Light Grey";
        case 27: _skc ="Grey";
        case 28: _skc ="Midnight Blue";
        case 29: _skc ="Light Grey";
        case 30: _skc ="Dark Maroon";
        case 31: _skc ="Red";
        case 32: _skc ="Baby Blue";
        case 33: _skc ="Grey";
        case 34: _skc ="Grey";
        case 35: _skc ="Dark Grey";
        case 36: _skc ="Dark Grey";
        case 37: _skc ="";
        case 38: _skc ="Tea Green";
        case 39: _skc ="Steel blue";
        case 40: _skc ="Black";
        case 41: _skc ="Light Brown";
        case 42: _skc ="Bright Maroon";
        case 43: _skc ="Maroon";
        case 44: _skc ="Myrtle Green";
        case 45: _skc ="Maroon";
        case 46: _skc ="Olive Green";
        case 47: _skc ="Olive";
        case 48: _skc ="Khaki Brown";
        case 49: _skc ="Light Grey";
        case 50: _skc ="Silver Grey";
        case 51: _skc ="Dark Green";
        case 52: _skc ="Dark Teal";
        case 53: _skc ="Navy Blue";
        case 54: _skc ="Navy Blue";
        case 55: _skc ="Brown";
        case 56: _skc ="Light Grey";
        case 57: _skc ="Beige";
        case 58: _skc ="Maroon";
        case 59: _skc ="Grey-Blue";
        case 60: _skc ="Grey";
        case 61: _skc ="Old Gold";
        case 62: _skc ="Maroon";
        case 63: _skc ="Grey";
        case 64: _skc ="Grey";
        case 65: _skc ="Old Gold";
        case 66: _skc ="Dark Brown";
        case 67: _skc ="Light Blue";
        case 68: _skc ="Light Khaki";
        case 69: _skc ="Light Pink";
        case 70: _skc ="Bright Maroon";
        case 71: _skc ="Light Blue";
        case 72: _skc ="Grey";
        case 73: _skc ="Tea Green";
        case 74: _skc ="Dark Maroon";
        case 75: _skc ="Dark Blue";
        case 76: _skc ="Light Brown";
        case 77: _skc ="Ecru Brown";
        case 78: _skc ="Maroon";
        case 79: _skc ="Royal Blue";
        case 80: _skc ="Rich Maroon";
        case 81: _skc ="Light Brown";
        case 82: _skc ="Bright Maroon";
        case 83: _skc ="Dark Teal Green";
        case 84: _skc ="Brown";
        case 85: _skc ="Rich Maroon";
        case 86: _skc ="Green";
        case 87: _skc ="Blue ";
        case 88: _skc ="Maroon";
        case 89: _skc ="Beige";
        case 90: _skc ="Grey";
        case 91: _skc ="Dark Blue";
        case 92: _skc ="Grey";
        case 93: _skc ="Sky Blue";
        case 94: _skc ="Blue";
        case 95: _skc ="Navy Blue";
        case 96: _skc ="Silver";
        case 97: _skc ="Light Blue";
        case 98: _skc ="Grey";
        case 99: _skc ="Light Brown ";
        case 100: _skc ="Blue";
        case 101: _skc ="Dark Blue";
        case 102: _skc ="Light Brown";
        case 103: _skc ="Blue";
        case 104: _skc ="Brown";
        case 105: _skc ="Dark Grey";
        case 106: _skc ="Blue";
        case 107: _skc ="Light Brown";
        case 108: _skc ="Yale Blue";
        case 109: _skc ="Dark Grey";
        case 110: _skc ="Brown";
        case 111: _skc ="Light Grey";
        case 112: _skc ="Blue";
        case 113: _skc ="Brown";
        case 114: _skc ="Dark Grey";
        case 115: _skc ="Dark Red";
        case 116: _skc ="Navy Blue";
        case 117: _skc ="Dark Maroon";
        case 118: _skc ="Light Blue";
        case 119: _skc ="Brown";
        case 120: _skc ="Light Brown";
        case 121: _skc ="Dark Maroon";
        case 122: _skc ="Grey";
        case 123: _skc ="Brown";
        case 124: _skc ="Rich Maroon";
        case 125: _skc ="Dark Blue";
        case 126: _skc ="Pink";
    }
    return _skc;
}

enum iI
{
	IncomingIP[16],
	IncomingVezes,
	IncomingTempo
}
new IncomingConnection[iI];

/*
	========================
		Sistema de Roubo
	========================
*/

#define MAX_LOCAIS_ROUBOS 10
#define ROUBO_TEMPO 30

new roubosNomes[MAX_LOCAIS_ROUBOS][32];
new roubosPortaoModel[MAX_LOCAIS_ROUBOS];
new roubosValorMin[MAX_LOCAIS_ROUBOS];
new roubosValorMax[MAX_LOCAIS_ROUBOS];
new roubosPortoes[MAX_LOCAIS_ROUBOS];
new roubosCofres[MAX_LOCAIS_ROUBOS];

/*
	=================================
		Sistema de Prisao
	=================================
*/

new
	PresoStatus[ MAX_PLAYERS ],
	TimerPID[ MAX_PLAYERS ],
	bool:ProcuradoStatus[ MAX_PLAYERS ],
	ProcuradoTemp[ MAX_PLAYERS ]
;

/*	areas dominaveis
===========================================================*/
enum gangZoneInfo {
	Float:gmix,
	Float:gmiy,
	Float:gmax,
	Float:gmay
};

//Gangzones
#define MAX_ZONES 6
new gangZones[MAX_ZONES];
new gangZonesOwners[MAX_ZONES];
new GZDominioTempo[MAX_ZONES];
new gangZonesStatus[MAX_ZONES];
new gangZoneLucro[MAX_ZONES];
new gangZoneMaterial[MAX_ZONES];
new gangZonesName[MAX_ZONES][32];
new gangZonesCoords[MAX_ZONES][gangZoneInfo];
new gangZoneCount = 0;

//Variveis Globais
new TimerX[2][MAX_PLAYERS];



/*
========================================

	Sistema de Inventario de Armas

========================================
*/
enum itensinv{
	itemId1,
	itemQuant1,
	itemId2,
	itemQuant2,
	itemId3,
	itemQuant3,
	itemId4,
	itemQuant4,
	itemId5,
	itemQuant5,
	itemId6,
	itemQuant6,
	itemId7,
	itemQuant7

}
new playerInventario[ MAX_PLAYERS ][ itensinv ];

/*========================================*/




/*
Lista de permissoes dos comandos
Configuraçoes de nivel de permissoes para poder
executar os comandos do servidor
*/


const comando_part = 1;
const comando_ausentarme = 1;
const comando_jetpack =	1;
const comando_calar = 1;
const comando_av = 1;
const comando_cv = 1;
const comando_veiculosid = 1;
const comando_deletcar = 1;
const comando_irsenha = 1; // irsenha e /proximo
const comando_fila = 1;
const comando_ir = 1;
const comando_irpara = 1;
const comando_trazer = 1;
const comando_setar = 1;
const comando_kita = 1;
const comando_administrar = 1;
const comando_setskin =	1;
const comando_tapa = 1;
const comando_kick = 1;
const comando_vida = 1;
const comando_colete = 1;
const comando_irportao = 1;
const comando_infoportaoid = 1;
const comando_a = 1;
const comando_irveiculo = 1;
const comando_infoaccount = 1;
const comando_reviver = 1;

const comando_radar = 2;
const comando_contar = 2;
const comando_avisar = 2;
const comando_versms = 2;
const comando_irbus = 2;
const comando_explodirp = 2;
const comando_votacao = 2;
const comando_lchat = 2;
const comando_ban = 6;
const comando_reparar = 2;
const comando_zerarfila = 2;
const comando_desbugar = 2;
const comando_matar = 2;
const comando_repararid = 4; // /reparar
const comando_cadeia = 2;
const comando_rcadeia =	2;
const comando_tempo =  2;
const comando_irprop = 2;
const comando_congelar = 2;
const comando_ip = 2;
const comando_blockchat = 2;
const comando_virar = 2;
const comando_espectate = 2;
const comando_vidacheck = 2;
const comando_savespawnveh = 2;

const comando_respawncarros = 3;
const comando_soltar = 3;
const comando_vercmds = 3;
const comando_ejetar = 3;
const comando_carona = 3;
const comando_ann = 3;
const comando_avisarban = 3;
const comando_darcomb = 3;
const comando_rpv = 3;
const comando_avoz = 3;
const comando_dargrana = 3; // setargrana /dargrana
const comando_darlevel = 3; // setlevel /darlevel
const comando_dareps = 4;
const comando_darexp = 3;
const comando_irpos = 3;
const comando_desban = 3;
const comando_atendimentos = 3;
const comando_criarcasa = 3; //Mudar Liberar
const map_teleport = 3;
const comando_setemprego = 3;
const comando_destruirveiculos = 3;
const comando_liberarempresa = 3;
const comando_portoes = 3;
const comando_mudarnome = 3;
const comando_sv = 3;
const comando_criarset = 3;

const comando_deletaracc = 4;
const comando_sethora = 4;
const comando_editarempresa = 4;
const comando_criar_portoes = 4;
const comando_editarid = 4;
const comando_portao = 4;
const comando_verchatglobal = 4;
const comando_lider = 6;
const comando_relider = 6;
const comando_gmx = 6;
const comando_darorg = 4;
const comando_paycmd = 4;
const comando_kickall = 4;
const comando_crashar = 4;
const comando_premiomega = 4;
const comando_egg = 6;

const comando_admin = 7;

const comando_serverpainel = 7;

const MAX_ADM_LEVEL = 8;

/**
*	moneySys - Sistema de Gerenciamento de Dinheiro nas Organizaçoes
*/

main()
{
	print("\n");
	print("|===========================================|");
	print("										   ");
	print(" 	Play Style RPG > Loaded!		   ");
    print("										   ");
    printf("   %s									   ", GetDate());
    print("|===========================================|");
    print("\n\n");
}

new Text:TSkinSelect1;
new Text:TSkinSelect2;
new Text:TSkinSelect0;

#include "../modulos/Objetos"
#include "../modulos/TextDraws"
//----------------02/09/2020_pqp
#include "../modulos/concessionaria_pqp.pwn"


public OnGameModeInit()
{

    ConnectNPC(BlueBusNPCName, "Bus");
    ConnectNPC(BlackBusNPCName, "Bus2");

    NPCBlueBus = CreateVehicle(431, 0.0, 0.0, 0.0, 0.0, 125, 125, 1);
    NPCBlackBus = CreateVehicle(431, 0.0, 0.0, 0.0, 0.0, 0, 0, 1);

    NPCTextBlue = Create3DTextLabel("Onibus Los Santos\nBlueBus", 0x6495EDFF, 0.0, 0.0, 0.0, 30.0,0, 0);
    NPCTextBlack = Create3DTextLabel("Onibus Los Santos\nBlackBus", 0x6495EDFF, 0.0, 0.0, 0.0, 30.0,0, 0);

    ConnectDB();

	if(MAX_PLAYERS != GetMaxPlayers())
	{
	    printf("\n|________________________________________________|\n");
	    printf("O Numero de players definido no topo do game mode");
	    printf("nao correponde ao numero total de Slots do servidor.\n\n");
	    printf("\n|________________________________________________|\n");
	    return SendRconCommand("exit");
    }

	// Caixas Eletronicos

	CriarCaixa(2122.28125, -1171.52661, 23.91330, 89.0000);
	CriarCaixa(685.9064, -2165.5420, 12.6254, 89.0000);//Ilha
	CriarCaixa(684.3090, -2165.5781, 12.6254, 89.0000);//Ilha2
	//CriarCaixa(1156700956, 3302927243, 1095999184, 89.0000); //pOSTO 2
	//CriarCaixa(1928.581054,-1785.732543,13.006875,84.545059); // posto
	//CriarCaixa(1503.5, -1749.9004, 13.2, 179.995);//Prefeitura
	CriarCaixa(1084, -1804.7, 13.3, 270);
	CriarCaixa(1348, -1759.2, 13.2, 179.995);
	CriarCaixa(810.5, -1614.6, 13.2, 90);
	CriarCaixa(316.79998779297, -141.80000305176, 999.20001220703, 270);
	CriarCaixa(2249.5, -1666.8, 15.1, 166);
	CriarCaixa(1314.2, -1367.9, 13.2, 0.0);
	CriarCaixa(1456.68945, -1009.95282, 26.43730, 0.0);

    // Sistema de Roubos

	//CriarLocalRoubo(nome[32], portaoModel, valormin, valormax, portaoid, cofreid)
	CriarLocalRoubo(
		"Prefeitura",
		2930,
		2000,
		5000,
		CreateObject(2930,350.8999939,161.1999969,1027.4000244,0.0000000,0.0000000,179.6420288),
		CreateObject(1829,343.1000061,160.0000000,1025.3000488,0.0000000,0.0000000,85.0469055)
	);
	CriarLocalRoubo(
		"Banco",
		2963,
		5000,
		10000,
		CreateObject(2963,2143.3999023,1627.1999512,994.7999878,0.0000000,0.0000000,89.4458923),
		CreateObject(1829,2144.0000000,1642.9000244,993.2000122,0.0000000,0.0000000,0.0000000)
	);
	CriarLocalRoubo(
		"Casa de Apostas",
		2963,
		2300,
		5000,
		CreateObject(2963,824.0999756,11.3000002,1004.2999878,0.0000000,180.3581543,0.7159729),
		CreateObject(1829,820.5000000,9.8000002,1003.7999878,0.0000000,0.0000000,0.0000000)
	);
	CriarLocalRoubo(
		"Burgue Shot",
		2963,
		1200,
		5000,
		CreateObject(2963,380.2999878,-68.0999985,1001.9000244,0.0000000,0.0000000,0.0000000),
		CreateObject(1829,382.2999878,-57.0000000,1001.0000000,0.0000000,0.0000000,0.0000000)
	);
	CriarLocalRoubo(
		"House Cassino",
		2963,
		2000,
		4000,
		CreateObject(2963,1140.4000244,7.1999998,1001.7000122,0.0000000,0.0000000,0.0000000),
		CreateObject(1829,1143.1999512,11.6999998,1000.0999756,0.0000000,0.0000000,0.0000000)
	);


	//	areas dominaveis
    CreateGangZone(1862.7947,	-1449.988281,	1975.9760, 	-1351.874511, 	"Pista de Skate", 		6800, 	5); //Pista de Skate
	CreateGangZone(1071.0585,	-1563.027832,	1189.1918, 	-1412.956054, 	"Shopping Central", 	10000, 	8); //Shopping Center
	CreateGangZone(201.3914, 	-1923.7216,		481.3914, 	-1708.7216, 	"Praia santa maria", 	7450, 	6); //Praia santa maria
	CreateGangZone(1870.1721,	-1284.2357,		2060.1721,	-1129.2357, 	"Praca do crack", 		5000, 	5); //Temple
	CreateGangZone(1954.4843,	-983.0553,		2264.4843,	-803.0553,      "Favela", 				15000,	10); //Favela LS

	//Cameras

	//PM
	AddCamera("Camera Teto", 0, PM, 1542.4802, -1643.9117, 40.6607, 0.0, 0);
    AddCamera("Camera Garagem PM", 1, PM, 1539.1956, -1622.0232, 19.7067, 0.0, 0);
    AddCamera("Estacionamento Interno PM", 2, PM, 1560.2397, -1721.4072, 9.7719, 0.0, 0);

	//Bope
    AddCamera("Frente HQ BOPE", 3, BOPE, 2701.8049, -2453.1929, 25.1560, 0.0, 0);
    AddCamera("Estacionamento HQ", 4, BOPE, 2762.5244, -2334.9177, 40.6725, 0.0, 0);
    AddCamera("Portao Central HQ", 5, BOPE, 2718.9805, -2508.4673, 22.1394, 0.0, 0);

	// Facccoes
	AddCamera("Comando Vermelho/HQ", 6, CV, 2312.9047, -1222.6253, 29, 0.0, 0);
	AddCamera("PCC/HQ", 7, PCC, 2155.1360, -878.1507, 95.7492, 0.0, 0);


	/*========== Lenhadores ======================================*/
	loadTreeCuttings();
	//============================================================


	/* ==================== Menu SA-MP ======================== */
    MenuTuning = 	CreateMenu("Tunagem", 1, 64.0, 120.0, 200.0, 200.0);
    MenuTRodas = 	CreateMenu("Rodas", 1, 64.0, 120.0, 150.0, 150.0);
    MenuTCores = 	CreateMenu("Menu", 1, 50.0, 180.0, 200.0, 200.0);


    AddMenuItem(MenuTCores, 0, "Ver cores");
    AddMenuItem(MenuTCores, 0, "Escolher pelo ID");

    AddMenuItem(MenuTuning, 0, "Cores");
    AddMenuItem(MenuTuning, 0, "Nitro");
    AddMenuItem(MenuTuning, 0, "Rodas");
    AddMenuItem(MenuTuning, 0, "Som");
    AddMenuItem(MenuTuning, 0, "Suspensao");
    AddMenuItem(MenuTuning, 0, "Alarme");
    AddMenuItem(MenuTuning, 0, "Neon");
    AddMenuItem(MenuTuning, 0, "Localizador GPS");

    AddMenuItem(MenuTRodas, 0, "Import");
    AddMenuItem(MenuTRodas, 0, "Atomic");
    AddMenuItem(MenuTRodas, 0, "Mega");
    AddMenuItem(MenuTRodas, 0, "Shadow");
    AddMenuItem(MenuTRodas, 0, "Grove");
    AddMenuItem(MenuTRodas, 0, "Dollar");
    AddMenuItem(MenuTRodas, 0, "Twist");
    AddMenuItem(MenuTRodas, 0, "Cutter");
    AddMenuItem(MenuTRodas, 0, "Rimshine");
    AddMenuItem(MenuTRodas, 0, "Wires");
    AddMenuItem(MenuTRodas, 0, "Classic");
    AddMenuItem(MenuTRodas, 0, "Switch");

    //Newbies Veiculos
	NewbieVehs[0] = CreateVehicle(481, 1083.0709, -1830.2243, 13.1246, 92.9523, -1, -1, 100);
	NewbieVehs[1] = CreateVehicle(509, 1083.1196, -1828.8868, 13.1239, 89.3593, -1, -1, 100);
	NewbieVehs[2] = CreateVehicle(481, 1083.1340, -1827.5427, 13.1424, 89.3586, -1, -1, 100);
	NewbieVehs[3] = CreateVehicle(509, 1083.1513, -1825.9941, 13.1423, 89.3587, -1, -1, 100);
	NewbieVehs[4] = CreateVehicle(481, 1083.1665, -1824.6340, 13.1422, 89.3586, -1, -1, 100);
	NewbieVehs[5] = CreateVehicle(509, 1083.2579, -1823.1586, 13.1219, 93.7160, -1, -1, 100);
	NewbieVehs[6] = CreateVehicle(481, 1083.1759, -1821.3819, 13.1240, 90.7149, -1, -1, 100);
	NewbieVehs[7] = CreateVehicle(509, 1083.1677, -1819.5426, 13.1243, 87.2968, -1, -1, 100);
	NewbieVehs[8] = CreateVehicle(481, 1083.1955, -1817.9006, 13.1238, 89.2547, -1, -1, 100);
	NewbieVehs[9] = CreateVehicle(509, 1083.2008, -1816.2391, 13.1242, 89.8107, -1, -1, 100);

	//Caminhoes
    CargasPetroleiros[0] = AddStaticVehicleEx(584,-1056.868530,-665.673645,32.619033,269.863616,-1,-1,600);
    CargasPetroleiros[1] = AddStaticVehicleEx(584,-1056.868530,-660.673645,32.618076,271.180541,-1,-1,600);
    CargasPetroleiros[2] = AddStaticVehicleEx(584,-1056.868530,-655.673645,32.614566,267.894897,-1,-1,600);
    CargasPetroleiros[3] = AddStaticVehicleEx(584,-1056.868530,-650.673645,32.615192,271.175720,-1,-1,600);
    CargasPetroleiros[4] = AddStaticVehicleEx(584,-1037.856079,-680.901062,32.618621,2.154222,-1,-1,600);
    CargasPetroleiros[5] = AddStaticVehicleEx(584,-1032.856079,-680.901062,32.614303,1.784435,-1,-1,600);
    CargasPetroleiros[6] = AddStaticVehicleEx(584,-1027.856079,-680.901062,32.614330,359.214416,-1,-1,600);
    CargasPetroleiros[7] = AddStaticVehicleEx(584,-983.777832,-708.640197,32.614028,3.437978,-1,-1,600);
    CargasPetroleiros[8] = AddStaticVehicleEx(584,-978.777832,-708.640197,32.613800,0.108352,-1,-1,600);


	//Auto Escola LS

	AutoVeiculosA[0] = CreateVehicle(521, -2088.1406, -106.1184, 34.9251, 177.4785, 6, 6, 10);
	AutoVeiculosA[1] = CreateVehicle(522, -2085.8757, -106.2313, 34.9251, 177.4785, 1, 6, 10);
	AutoVeiculosA[2] = CreateVehicle(521, -2083.3369, -106.1385, 34.9251, 177.4785, 6, 6, 10);
	AutoVeiculosA[3] = CreateVehicle(522, -2080.7678, -106.2653, 34.9251, 177.4785, 1, 6, 10);
	AutoVeiculosA[4] = CreateVehicle(521, -2078.7070, -106.2519, 34.9251, 177.7784, 6, 6, 10);
	AutoVeiculosA[5] = CreateVehicle(522, -2076.6045, -106.2409, 34.9251, 177.7784, 1, 6, 10);

	AutoVeiculosB[0] = CreateVehicle(589, 1281.4353, -1297.0328, 12.8640, 90.3000, -1, -1, 30);
	AutoVeiculosB[1] = CreateVehicle(589, 1281.3807, -1302.6360, 12.8640, 89.6401, -1, -1, 30);
	AutoVeiculosB[2] = CreateVehicle(589, 1281.4437, -1308.4022, 12.8640, 89.8201, -1, -1, 30);
	AutoVeiculosB[3] = CreateVehicle(589, 1281.4423, -1314.1792, 12.8640, 88.4401, -1, -1, 30);
	AutoVeiculosB[4] = CreateVehicle(589, 1281.4725, -1319.7344, 12.8640, 88.5601, -1, -1, 30);

    AutoVeiculosD[0] = CreateVehicle(431, 368.0320, -2040.7080, 7.7763, 359.5752, 3, 1, 30); //Sky iZ
	AutoVeiculosD[1] = CreateVehicle(431, 372.5953, -2040.5220, 7.7756, 359.9476, 3, 1, 30); //Sky iZ

	AutoVeiculosE[0] = CreateVehicle(514, -619.1863, -486.3589, 26.0651, 180.4200, -1, -1, 40);
	AutoVeiculosE[1] = CreateVehicle(514, -613.2462, -486.6178, 26.0651, 180.4200, -1, -1, 40);
	AutoVeiculosE[2] = CreateVehicle(514, -607.3066, -486.3644, 26.0651, 180.4200, -1, -1, 40);
	AutoVeiculosE[3] = CreateVehicle(514, -600.9870, -486.4036, 26.0651, 179.8201, -1, -1, 40);
	AutoVeiculosE[4] = CreateVehicle(514, -594.7120, -486.1049, 26.0651, 179.0401, -1, -1, 40);

	CreateVehicle(435, -619.0700, -473.5543, 26.4509, 180.7213, -1, -1, 40);
	CreateVehicle(435, -613.3442, -473.4906, 26.4509, 180.7813, -1, -1, 40);
	CreateVehicle(435, -607.3458, -473.5605, 26.4509, 179.5213, -1, -1, 40);
	CreateVehicle(435, -600.7040, -473.5992, 26.4509, 177.9013, -1, -1, 40);
	CreateVehicle(435, -594.3740, -473.7331, 26.4509, 177.9013, -1, -1, 40);

    Loop(a, sizeof(AutoVeiculosA))
    {
        combustivel[AutoVeiculosA[ a ]] = 100;
        SetVehicleEngineState(AutoVeiculosA[ a ], 0);
        SetVehicleParams(AutoVeiculosA[ a ], 3, 0);
    }

    Loop(a, sizeof(AutoVeiculosB))
    {
        combustivel[AutoVeiculosB[ a ]] = 100;
        SetVehicleEngineState(AutoVeiculosB[ a ], 0);
        SetVehicleParams(AutoVeiculosB[ a ], 3, 0);
    }

    Loop(a, sizeof(AutoVeiculosD))
    {
        combustivel[AutoVeiculosD[ a ]] = 100;
        SetVehicleEngineState(AutoVeiculosD[ a ], 0);
        SetVehicleParams(AutoVeiculosD[ a ], 3, 0);
    }

    Loop(a, sizeof(AutoVeiculosE))
    {
        combustivel[AutoVeiculosE[ a ]] = 100;
        SetVehicleEngineState(AutoVeiculosE[ a ], 0);
        SetVehicleParams(AutoVeiculosE[ a ], 3, 0);
    }


    //Timers
	SetTimer("Checking", TMinutos(1), true); // Verificaçoes do Sistema
	SetTimer("RandomMSGs", TMinutos(3), true); // Mensagens de Anuncios
    SetTimer("TempoServidor", TMinutos(10), true); // Sistema de Horario
	SetTimer("OnAtualizeVehiclesConce", 30000, true); //Atualizar Veiculo
	SetTimer("ReiniciarServidor", 1000, true); // Gmx Automatico

   // ManualVehicleEngineAndLights();

    print("\n\n\n\n======================= Carregando Servidor =======================\n");

	ServerName(""#SERVER_NAME"");
	SetGameModeText(""#GAMEMODE_NAME"");
	ServerWebsite(""#SV_SITE"");
	ServerLanguage(""#LANG"");
	ServerMaxNPC(MAX_NPC);

    AntiDeAMX();

	EnableStuntBonusForAll(0);
	UsePlayerPedAnims(); // Arrumando animaçao do personagem correndo
	DisableInteriorEnterExits(); //Desabilitando Interiores do GTA Comum
	//SetNameTagDrawDistance(40); //Distancia que se pode ver o nome dos outros jogadores
	ResetElevatorQueue();


	if(!DOF2_FileExists(PASTA_CONFIG)){
		DOF2_CreateFile(PASTA_CONFIG);
		DOF2_SetInt(PASTA_CONFIG, "Horario", 4);
 		DOF2_SetInt(PASTA_CONFIG, "Recorde", 2);
 		DOF2_SetInt(PASTA_CONFIG, "Ping", 10000);
 		DOF2_SetInt(PASTA_CONFIG, "LotoAcumulado", 25000);
 		DOF2_SaveFile();
	}
	else {
 		Hora_Servidor = DOF2_GetInt(PASTA_CONFIG, "Horario");
 		Record_Servidor = DOF2_GetInt(PASTA_CONFIG, "Recorde");
 		PingLimite_Servidor = DOF2_GetInt(PASTA_CONFIG, "Ping");
	}

	print("Configuraçoes:\n");
	printf("Hora ID: %i", 				Hora_Servidor);
 	printf("Recorde Onlines: %i", 		Record_Servidor);
 	printf("Limite de Ping: %i\n\n",	PingLimite_Servidor);

 	//LoadObjects
    CarregarObjetos("Objetos/Publicos.txt");
    CarregarObjetos("Objetos/Publicos2.txt");
    CarregarObjetos("Objetos/Casas.txt");

    CarregarObjetos("Objetos/Jobs/Mineiros.txt");
    CarregarObjetos("Objetos/Jobs/Carteiros.txt");
    CarregarObjetos("Objetos/Jobs/Mecanicos.txt");
    CarregarObjetos("Objetos/Jobs/Taxistas.txt");
    CarregarObjetos("Objetos/Jobs/Petroleiros.txt");
    CarregarObjetos("Objetos/Jobs/Lixeiros.txt");

    CarregarObjetos("Objetos/HQs/Bases.txt");
    CarregarObjetos("Objetos/HQs/Bope.txt");

    LoadTextDraws();
    CarregarRadares();
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
    //CarregarVeiculos("Veiculos/VeiculosSET.txt");

    CarregarEasterEggs();

    LoadOrgs();
	LoadOrgsInfos();
	LoadEmpresas();
    LoadHouses();
    LoadGates();
	//LoadVeiculos();
	LoadObjectsMaterial();
    LoadPortoesHQs();
    LoadPickupsFromMenus();
    LoadJobsLocations();
    LoadLoto();
    TempoServidor();
    CreateInts();
    CarregarActores();
    IniciarClima();
    Elevator_Initialize();

	print("\n======================= Informacoes carregadas =======================\n\n");

    return true;
}

public OnGameModeExit()
{
	/*

		Remoçao de textdraws no caso de reinicializaçao
		do servidor

	*/


	TextDrawHideForAll(Anuncios);
	TextDrawHideForAll(Objetivo[0]);
	TextDrawHideForAll(Objetivo[1]);
	TextDrawHideForAll(TextAreas);
	TextDrawHideForAll(TextParamedicos);

    TextDrawDestroy(TimerPH[ 0 ]);
    TextDrawDestroy(TimerPH[ 1 ]);
    TextDrawDestroy(TimerPH[ 2 ]);

	ForPlayers(i)
    {
		//Text Prisao e Hosp
		TextDrawDestroy(TimerPHIndividual[ i ]);

		//Text Menu Concessionaria
		TextDrawDestroy(ConceMenu[ i ][0]);
		TextDrawDestroy(ConceMenu[ i ][1]);
		TextDrawDestroy(ConceMenu[ i ][2]);
		TextDrawDestroy(ConceMenu[ i ][3]);
		TextDrawDestroy(ConceMenu[ i ][4]);
		TextDrawDestroy(ConceMenu[ i ][5]);
		TextDrawDestroy(ConceMenu[ i ][6]);
		TextDrawDestroy(ConceMenu[ i ][7]);
		TextDrawDestroy(ConceMenu[ i ][8]);

	}

	Loop(t, sizeof(TimerX))
    {
		KillTimer(t);
	}
	Loop(id, MAX_EMPRESAS)
    {
		DestroyDynamicMapIcon(MapIconEmp[id]);
	}

	KillTimer(LotoInfo[ LotoTimer ]);

	unloadGates();
    Elevator_Destroy();
    DOF2_Exit();
	return true;
}

new timerEntrada[MAX_PLAYERS];

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC( playerid )) return 1;

    if(PlayerInfo[playerid][Morreu] == true) return 0;

    if(PlayerInfo[ playerid ][ pLogger ] != 1)
    {
        TextDrawShowForPlayer(playerid, Carregando[playerid][0]);
        TextDrawShowForPlayer(playerid, Carregando[playerid][1]);
        TextDrawShowForPlayer(playerid, Carregando[playerid][2]);
        TextDrawShowForPlayer(playerid, Carregando[playerid][3]);
        TextDrawShowForPlayer(playerid, Carregando[playerid][4]);

        timerEntrada[playerid] = SetTimerEx("EntradaSV", 1000, false, "ii", playerid, 0);

    	SetSpawnInfo( playerid, NO_TEAM, 1, 1435.9372, -807.5147, 86.4926, 0, 0, 0, 0, 0, 0, 0 );
    	SpawnPlayer( playerid );
        SetPlayerVirtualWorld(playerid, 5);

        SetPlayerCameraPos(playerid, 1473.0574, -955.3399, 135.6309);
    	SetPlayerCameraLookAt(playerid, 1472.5208, -954.4946, 135.2087);

    	 	//InterpolateCameraPos(playerid, 1279.479125, -1979.899658, 124.135932, 1400.673095, -1779.224243, 73.364318, 18000);
            //InterpolateCameraLookAt(playerid, 1281.970214, -1975.786376, 122.766387, 1403.860717, -1775.644897, 71.940513, 0);

    	SetPlayerColor(playerid, Branco);
    	ClearChatbox(playerid, 25);

            //ShowWelcome(playerid);
            //OnVerificarRegistro( playerid );
            //SetTimerEx("OnVerificarRegistro", 3000, false, "i", playerid);
    }
	return 1;
}


Public:EntradaSV(playerid, contagem)
{

    if(contagem == 0)
    {
        TextDrawSetString(Carregando[playerid][3], "Aguarde");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 1);
    }
    else if(contagem == 1)
    {
        TextDrawSetString(Carregando[playerid][3], ". Aguarde .");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 2);

    }
    else if(contagem == 2)
    {
        TextDrawSetString(Carregando[playerid][3], ".. Aguarde ..");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 3);
    }
    else if(contagem == 3)
    {
        TextDrawSetString(Carregando[playerid][3], "... Aguarde ...");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 4);
    }
    else if(contagem == 4)
    {
        TextDrawSetString(Carregando[playerid][3], "Aguarde");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 5);
    }
    else if(contagem == 5)
    {
        TextDrawSetString(Carregando[playerid][3], ". Aguarde .");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 6);
    }
    else if(contagem == 6)
    {
        TextDrawSetString(Carregando[playerid][3], ".. Aguarde ..");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 7);
    }
    else if(contagem == 7)
    {
        TextDrawSetString(Carregando[playerid][3], "... Aguarde ...");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 2000, false, "ii", playerid, 8);
    }
    else if(contagem == 8)
    {
        TextDrawSetString(Carregando[playerid][3], "Aguarde");
        timerEntrada[playerid] = SetTimerEx("EntradaSV", 1000, false, "ii", playerid, 9);
    }
    else if(contagem >= 9)
    {
        TextDrawHideForPlayer(playerid, Carregando[playerid][0]);
        TextDrawHideForPlayer(playerid, Carregando[playerid][1]);
        TextDrawHideForPlayer(playerid, Carregando[playerid][2]);
        TextDrawHideForPlayer(playerid, Carregando[playerid][3]);
        TextDrawHideForPlayer(playerid, Carregando[playerid][4]);

        KillTimer(timerEntrada[playerid]);

        ShowWelcome(playerid);
    }
}

Public:ShowWelcome(playerid)
{
    new box[ 650 ];
    static str[ 100 ];

    strcat(box, "{FF6600}____________________________________________________\n\n");

    format( str, sizeof( str ), "{FFFFFF}Ola {F39514}%s{FFFFFF}, seja bem vindo ao \n\n", GetNameEx( playerid ));
    strcat(box, str);
    strcat(box, "{FCC0C0}"#SERVER_NAME2"\n\n\n");
    strcat(box, "{FFFFFF}E um privilegio contar com sua presenca em nosso servidor.\n");
    strcat(box, "Nos desejamos que tenha um otimo jogo, sinta-se em casa!\n\n\n");

    format( str, sizeof( str ), "\t\t{FFFFFF}Ha exatamente: {F39514}%i {FFFFFF}Players Online!\n\n\n\n", CountPlayers());
    strcat(box, "Antes de tudo precisamos saber qual plataforma esta logando: \n\n");
    strcat(box, "{FF0000}ATENCAO: {FFFFFF}Indique corretamente para nao haver bugs internos\n\n");


    strcat(box, "{FF6600}____________________________________________________\n\n");

    ShowPlayerDialog(playerid, DIALOG_PLATAFORMA, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" BEM VINDO", box, "ANDROID", "PC");

    return true;
}

forward OnVerificarRegistro(id);
public OnVerificarRegistro(id)
{
	// --- Database de caracteres nao permitidos ---
	new nickDB[][128] = {
		"@",
		"!",
		"|",
		"\\",
		"/",
		"~",
		" "
	};

	Loop(a, sizeof(nickDB))
	{
		if( strfind(GetName(id), nickDB[a]) != -1 )
		{
			nomeSugerido[id] = GetName(id);

			// --- Verificar nome sugerido ---
			for( new x = 0; x < sizeof(nickDB); x++) {
				new startpos;

				startpos = strfind( GetName(id), nickDB[x], true );

				while( startpos != -1 ) {
					strdel( nomeSugerido[id], startpos, startpos + 1 );
					startpos = strfind( nomeSugerido[id], nickDB[x], true );
				}
			}

			format( strx, sizeof(strx), "{ffffff}Desculpe, mas foi encontrado um caractere invalido no seu nome.\n\nCaractere encontrado: {ff0000}%s\n{ffffff}Nome sugerido: {3399cc}%s\n\n{ffffff}Voce deseja aceitar o nome sugerido? Caso\nnao, o jogo sera fechado para que voce possa trocar\nseu nome e depois logar novamente.", nickDB[a], nomeSugerido[id] );
			ShowPlayerDialog(id, DIALOG_AVISO_NICK, DIALOG_STYLE_MSGBOX, ""#SERVELOGO"", strx ,"Nao","Sim");
			return 0;
		}
	}

	if(DOF2_FileExists(CI(id)))
		callcmd::logar( id );
	else
		callcmd::registrar( id );
	return 1;
}


public OnIncomingConnection(playerid, ip_address[], port)
{
    if(IsPlayerNPC(playerid))
    {
        if(strcmp(ip_address, "127.0.0.1", true) != 0) {
            format(STRLOG, sizeof(STRLOG), "[%s] %s %s foi banido.", GetDateEx(), GetName( playerid ), ip_address);
			SLog("IConnection.log", STRLOG);

			Ban(playerid); // Ban is the safest thing here, as if you kick, they can still flood you with endless connections
            return 0;
        }

    }

	if(!strcmp(IncomingConnection[IncomingIP], ip_address, true) && IncomingConnection[IncomingTempo] > gettime()) {
		if(IncomingConnection[IncomingVezes] > 3){
			BlockIpAddress(ip_address, 0);
			printf("ip %s bloqueado!", ip_address);

			format(STRLOG, sizeof(STRLOG), "[%s] %s foi bloqueado.", GetDateEx(), ip_address);
			SLog("IConnection.log", STRLOG);
			return true;
		}
		IncomingConnection[IncomingVezes]++;
		return 1;
	}
	format(IncomingConnection[IncomingIP], 16, ip_address);
	IncomingConnection[IncomingVezes] = 0;
	IncomingConnection[IncomingTempo] = gettime()+2;
	return 1;
}

#if !defined varGet
#define varGet(%0)      getproperty(0,%0)
#endif

// http://forum.sa-mp.com/showthread.php?p=1925909

#if !defined varSet
#define varSet(%0,%1) setproperty(0, %0, %1)
#endif

stock botGetIP[24];

#define IsPlayerBot(%0)\
            GetPlayerPing(%0) == 65535 && (gettime() - varGet((GetPlayerIp(%0, botGetIP, sizeof botGetIP), botGetIP)) > 5)


public OnPlayerConnect(playerid)
{
	totalon++;
    CheckBan(playerid);
	ResetVarsFor( playerid );

	CarrosCriados[ playerid ] = INVALID_VEHICLE_ID;

    Loop(i, sizeof(NicksInvalidos))
	{
		if(strfind(GetName( playerid ), NicksInvalidos[ i ], true) != -1)
		{
			Kick(playerid);
			break;
		}
	}

	VidaADM[playerid] = 0;

    ClearChatbox(playerid, 30);
	PlayAudioStreamForPlayer(playerid, RandMusic[random(sizeof(RandMusic))]);
    format(PlayerInfo[ playerid ][pName], MAX_PLAYER_NAME, "%s", GetName( playerid ));

	if(!IsPlayerNPC( playerid ))
    {
     	for( new a = 0; a < sizeof(gangZones); a++ )
        {
    	    if(gangZonesOwners[a] != 0) GangZoneShowForPlayer(playerid, gangZones[a], orgsColorArea[gangZonesOwners[a]]);
         	else GangZoneShowForPlayer(playerid, gangZones[a], 0x333333AA);
		}

		ShowMapIconsFor();
		LoadPlayerTextDraws(playerid);
		RemoveObjectsFor( playerid );

        TimerX[0][playerid] = SetTimerEx("OnServerUpdate", TSegundos(1), true, "i", playerid); //  Atualizando dados
        TimerX[1][playerid]  = SetTimerEx("LucroGZs", TMinutos(35), true, "i", playerid); // Sistema de Lucro das GangZones Dominadas
	}

    if(playerid > Record_Servidor)
    {
        Record_Servidor = (playerid+4);

        static str[ 129 ];
        format(str, sizeof(str), "{FCFA7E}[ Recorde ] - O servidor acaba de quebrar seu antigo recorde de players online, novo recorde: {ffffff}%i!", Record_Servidor);
        SCMALL(str);
        DOF2_SetInt(PASTA_CONFIG, "Recorde", Record_Servidor);
        DOF2_SaveFile();
    }

	IPlog(playerid);

    Delete3DTextLabel(PlayerInfo[playerid][pEmpLabel]);
	PlayerInfo[playerid][pEmpLabel] = Text3D:INVALID_3DTEXT_ID;

    DestroyDynamic3DTextLabel(NPCLabel[ playerid ]);
	NPCLabel[ playerid ] = Text3D:INVALID_3DTEXT_ID;

    //Hospital LS
	new Hospital = CreatePlayerObject(playerid, 19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180);
	SetPlayerObjectMaterialText(playerid, Hospital, "HOSPITAL", 0, 140, "Cambria", 130, 1, -1, 0, 1);

	if(IsPlayerNPC(playerid))
	{
		PlayerInfo[playerid][pLogger] = 1;
		PlayerInfo[playerid][pTutorial] = 1;

		static ste_[50];
		format(ste_, sizeof ste_, "%s", Encriptar(SENHA_NPC));
		if(!DOF2_FileExists(CI(playerid)))
		{
			DOF2_CreateFile(CI(playerid));
			DOF2_SetString(CI(playerid), "Senha", ste_);
		}

		if(!strcmp(GetName(playerid), BlueBusNPCName, true))
        {
            SetPlayerColor(playerid, VerdeClaro);
            PutPlayerInVehicle(playerid, NPCBlueBus, 0);
            SetPlayerSkinEx(playerid, 255);
            ResetPlayerWeapons(playerid);
            Attach3DTextLabelToVehicle(NPCTextBlue, NPCBlueBus, 0.0, 0.0, 0.0);
            SetPlayerColor(playerid, VerdeClaro);
        }
        if(!strcmp(GetName(playerid), BlackBusNPCName, true))
        {
            SetPlayerColor(playerid, VerdeClaro);
            PutPlayerInVehicle(playerid, NPCBlackBus, 0);
            SetPlayerSkinEx(playerid, 255);
            ResetPlayerWeapons(playerid);
            Attach3DTextLabelToVehicle(NPCTextBlack, NPCBlackBus, 0.0, 0.0, 0.0);
            SetPlayerColor(playerid, VerdeClaro);
        }
        static vn[ 80 ];
		format(vn, sizeof( vn ), "%s {9D38A9}({FFFFFF}%i{9D38A9})", GetName( playerid ), playerid);
		NPCLabel[ playerid ] = CreateDynamic3DTextLabel( vn, 0xFFFFFFFF, 0.0, 0.0, 0.0, 30.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
	}



    if(IsPlayerNPC(playerid)) return false;

    static playerip[24];
    GetPlayerIp(playerid, playerip, 24);

    if(gettime() - varGet(playerip) < 2)
    {
        strcat(playerip, "di_S");

        if(gettime() - varGet(playerip) < 3)
        {
            return false;
        }

        printf("%d Entrou em menos de 2 segundos", playerid);

        GetPlayerIp(playerid, playerip, 20);

        varSet(playerip, gettime());

        strcat(playerip, "x");

        static timers ;
        timers = varGet(playerip);

        varSet(playerip, 1+ timers);

        if(timers > 2) {

            playerip[strlen(playerip) - 2] = 0;

            printf("BOT: ID -> %d IP -> %s", playerid, playerip);
            BanEx(playerid, "Bot Connect");
        }
    }

	return varSet(playerip, gettime());
}


public OnPlayerDisconnect(playerid, reason)
{
	totalon--;
    if(IsPlayerNPC(playerid)) return 1;

    if( PlayerInfo[playerid][pAWork] ) {

        if(PlayerInfo[playerid][pAdmin] == 8){

            ResetPlayerMoney(playerid);

            GivePlayerMoney(playerid, DinheiroAntesTrab[playerid]);

        }
    }

    if(reason == 2)
    {
        static playerip[20];

        GetPlayerIp(playerid, playerip, 20);
        strcat(playerip, "di_S");

        varSet(playerip, gettime());
    }

	UpdateStatsRank(playerid, 0); // offline
    saveWeapons(playerid);

    //DestruirVeiculosPlayer(playerid);

    KillTimer(PlayerInfo[playerid][pTimerCheat]);
    KillTimer(PlayerInfo[playerid][pTimerComb]);
    KillTimer(timerRoutePizzaJob[playerid]);
    KillTimer(TimerLocalizar[playerid]);

    KillTimer(TimerX[0][playerid] );
    KillTimer(TimerX[1][playerid] );


    if(!CNHTest[ playerid ])
    {
	    /*
			Em caso player nao esteja fazendo um teste de auto escola
			vai ser salva a ultima posiçao dele. Caso contrario
			sera setado como ultima pos, na frente da auto escola .
		*/
		GetPlayerPos(playerid,
			PlayerInfo[ playerid ][UltimaPosX],
			PlayerInfo[ playerid ][UltimaPosY],
			PlayerInfo[ playerid ][UltimaPosZ]
		);
		GetPlayerFacingAngle(playerid, PlayerInfo[ playerid ][UltimaPosA]);
		PlayerInfo[ playerid ][UInt] = GetPlayerInterior(playerid);
		PlayerInfo[ playerid ][UWorld] = GetPlayerVirtualWorld(playerid);
	}
	else {
	    //Posiçao frente auto escola
	    PlayerInfo[ playerid ][UltimaPosX] = 1310.0852;
		PlayerInfo[ playerid ][UltimaPosY] = -1372.8234;
		PlayerInfo[ playerid ][UltimaPosZ] = 14.0033;
		PlayerInfo[ playerid ][UltimaPosA] = 0.0;
		PlayerInfo[ playerid ][UInt] = 0;
		PlayerInfo[ playerid ][UWorld] = 0;
    }
    if(MenuConceType[ playerid ])
    {
        CancelSelectTextDraw( playerid );
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
        TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

		MenuConceType[playerid] = 0;
		CurrentVehicle[playerid] = 0;
		DestroyVehicle(VeiculoConce[playerid]);
		VeiculoConce[playerid] = INVALID_VEHICLE_ID;

       	PlayerInfo[playerid][UltimaPosX] = 2116.1855;
	    PlayerInfo[playerid][UltimaPosY] = -1171.6140;
    	PlayerInfo[playerid][UltimaPosZ] = 25.1052;
    	PlayerInfo[playerid][UltimaPosA] = 0.0;
    	PlayerInfo[playerid][UInt] = 0;
		PlayerInfo[playerid][UWorld] = 0;
	}
    if(EmpregoDuty[ playerid ] == Lenhador)
    {
		RemovePlayerWeapon(playerid, 9);
	}
    if(Mineirando[playerid])
    {
	    DestroyPlayerProgressBar(playerid, ProgressMineirador[playerid]);
		Mineirando[playerid] = 0;
	}
	if(ProgressoCurando[playerid])
	{
		DestroyPlayerProgressBar(playerid, ProgressCurando[playerid]);
        TextDrawHideForPlayer(playerid, TextParamedicos);
	}

	if(GetPVarInt(playerid, "Contrato"))
	{
	    SetPVarInt(GetPVarInt(playerid, "C_ID"), "E_Contrato", 0);
        SetPVarInt(playerid, "Contrato", 0);
		SetPVarInt(playerid, "C_ID", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "C_Imovel", -1);
		SetPVarInt(playerid, "C_Valor", -1);
	}

	if(GetPVarInt(playerid, "Contratoenviado"))
	{
	    SetPVarInt(GetPVarInt(playerid, "V_ID"), "VV_Contrato", 0);
        SetPVarInt(playerid, "Contratoenviado", 0);
		SetPVarInt(playerid, "V_ID", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "V_Veiculo", -1);
		SetPVarInt(playerid, "V_Valor", -1);
	}
   	if(InTaxi[ playerid ])
   	{
		static zString[ 129 ];
		format(zString, sizeof(zString), "* %s saiu do servidor e voce recebeu R$%s pelo seu servico.", GetNameEx(playerid), FormatNumber(PrecoTotalCorrida[playerid]));
		SCM(TaxiOwn[ playerid ], Purple, zString);

		ActionPlayerGrana(playerid, "-", PrecoTotalCorrida[playerid], 1);
		ActionPlayerGrana(TaxiOwn[ playerid ], "+", PrecoTotalCorrida[playerid], 1);

        PlayerTextDrawHide(playerid, TextTaximetro[ playerid ]);
		PlayerTextDrawHide(TaxiOwn[ playerid ], TextTaximetro[ playerid ]);

		InTaxi[ playerid ]=false;

        Cliente[TaxiOwn[ playerid ]] = INVALID_PLAYER_ID;
        PrecoTotalCorrida[playerid] = 0;
	    TaxiOwn[playerid] = INVALID_PLAYER_ID;
	}
	else OnSalvarDados(playerid);

    EncerrarTimerProfissao( playerid );

    if(PlayerInfo[ playerid ][ pBlockchat ] == true) KillTimer(TimerBlockChat[ playerid ]);

    if(PlayerInfo[ playerid ][ Morreu ])
    {
    	KillTimer(AnimeMorte[ playerid ]);
	    KillTimer(EsperandoA_Timer[ playerid ]);
	}
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pEmpLabel]))
    {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pEmpLabel]);
		PlayerInfo[playerid][pEmpLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if(playerBarreiraCount[playerid] )
    {
		for( new a = 0; a <= playerBarreiraCount[playerid]; a++ ) {
			DestroyObject(playerBarreira[playerid][a]);
		}
		playerBarreiraCount[playerid] = 0;
	}
	//Tirar os textos dos NPC
	if(IsPlayerNPC( playerid ))
    {
	    if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
        {
            DestroyDynamic3DTextLabel(NPCLabel[ playerid ]);
			NPCLabel[ playerid ] = Text3D:INVALID_3DTEXT_ID;
	    }
	}
	if( playerConeCount[playerid] )
	{
		for( new a = 0; a <= playerConeCount[playerid]; a++ ) {
			DestroyObject(playerCone[playerid][a]);
		}
		playerConeCount[playerid] = 0;
	}
	if(PlayerInfo[ playerid ][ pHospitalizado ])
    {
        PlayerInfo[ playerid ][ pHospitalizado ] = 0;
        TextDrawHideForPlayer(playerid, TimerPH[0]);
		TextDrawHideForPlayer(playerid, TimerPH[1]);
		TextDrawHideForPlayer(playerid, TimerPH[2]);
		TextDrawHideForPlayer(playerid, TimerPHIndividual[ playerid ]);
	}
	if(CarrosCriados[ playerid ] != INVALID_VEHICLE_ID)
    {
		DestroyVehicle(CarrosCriados[ playerid ]);
	}
    if(VeiculoVip[ playerid ] != INVALID_VEHICLE_ID)
    {
        DestroyVehicle(VeiculoVip[ playerid ]);
    }
	if(EstavaEspectando[ playerid ])
    {
        UPosEspec[ playerid ][0] = 0.0;
		UPosEspec[ playerid ][1] = 0.0;
		UPosEspec[ playerid ][2] = 0.0;
		UPosInt[ playerid ] = 0;
		UPosVirt[ playerid ] = 0;
		PlayerEspec[ playerid ] = INVALID_PLAYER_ID;
		EstavaEspectando[ playerid ] = false;
		Espectype[ playerid ] = 0;
	}
	if(TrashCheck[ playerid ] != 0){
		DestroyTrashObjects(playerid);
		TrashMoney[ playerid ] = 0;
		TrashCheck[ playerid ] = 0;
		TrashRoute[ playerid ] = 0;
		DisablePlayerCheckpoint( playerid );
	}
	if(OnibusRoute[ playerid ] != 0){
        CheckBus[playerid] = 0;
		TransportMoney[playerid] = 0;
        OnibusRoute[ playerid ] = 0;
        RotaBusFailed[ playerid ] = false;
		RotaBusFailedTemp[ playerid ] = 30;
		DisablePlayerCheckpoint( playerid );
	}
 	if(CameraAtual[ playerid ] != -1)
	{
        for(new tid=0; tid <= sizeof(CamsTextTwo); tid++) PlayerTextDrawHide(playerid, CamsTextTwo[ playerid ][ tid ]);
		KillTimer(KeyTimer[playerid]);
	}
    if(RotaFailed[ playerid ] || RotaBusFailed[ playerid ]){
		EmpregoDuty[ playerid ] = 0;
        TrashMoney[ playerid ] = 0;
        RotaFailed[ playerid ] = false;
		RotaFailedTemp[ playerid ] = 30;
		RotaBusFailed[ playerid ] = false;
		RotaBusFailedTemp[ playerid ] = 30;

		PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);
	}

    if(!IsPlayerInAnyVehicle(playerid))
    {
	    KillTimer(carVelocimetro[playerid]);
	}
	if(CNHTest[ playerid ])
    {
        SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
        ClearChatbox(playerid, 5);

		ExameQuestID[ playerid ] = 0;
		ExamePoints[ playerid ] = 0;
        AutoEscolaProgresso[ playerid ] = 0;
        AutoEscolaAviso[ playerid ] = 0;
        CNHTest[ playerid ] = 0;
	}
	if(PegouPacotes[playerid] == true)
    {
		EmpregoDuty[ playerid ] = 0;
		DisablePlayerCheckpoint( playerid );
		PegouPacotes[playerid] = false;
		RemovePlayerAttachedObject(playerid, 4);
	}
	if(Cacando{playerid})
    {
	    PegouCaca{playerid} = false;

 		DestroyObject( CacaObject{playerid} );
		CacaID{playerid} = 0;
		Cacando{playerid} = false;
		CacaProgress{playerid} = 0;
		CacandoTemp{playerid} = 0;

		//Textdraw & Progress bar
		TextDrawHideForPlayer( playerid, DistanceCaca);
		DestroyPlayerProgressBar(playerid, CacaDistance[playerid]);
	}
	if(EmpregoDuty[ playerid ] == PizzaJob)
    {
        PlayerTextDrawHide(playerid, textPizzaJobs[playerid][0]);
		PlayerTextDrawHide(playerid, textPizzaJobs[playerid][1]);
		PlayerTextDrawHide(playerid, textPizzaJobs[playerid][2]);
	}
    if(CelularInfo[playerid][Timer]) KillTimer(CelularInfo[playerid][Timer]);

	if(CelularInfo[playerid][LinhaAtiva] == true && CelularInfo[playerid][LinhaAtivaID] != INVALID_PLAYER_ID)
	{
        SCM(CelularInfo[playerid][LinhaAtivaID], Vermelho, "A Ligacao caiu ....");
        CelularInfo[CelularInfo[playerid][LinhaAtivaID]][LinhaAtiva] = false;
        CelularInfo[CelularInfo[playerid][LinhaAtivaID]][LinhaAtivaID] = INVALID_PLAYER_ID;
        SetPlayerSpecialActionEx(CelularInfo[playerid][LinhaAtivaID], SPECIAL_ACTION_STOPUSECELLPHONE);
	}

    ResetVarsFor( playerid );

	//Text Prisao e Hosp
	TextDrawDestroy(TimerPHIndividual[ playerid ]);

	//Text Menu Concessionaria
	TextDrawDestroy(ConceMenu[ playerid ][0]);
	TextDrawDestroy(ConceMenu[ playerid ][1]);
	TextDrawDestroy(ConceMenu[ playerid ][2]);
	TextDrawDestroy(ConceMenu[ playerid ][3]);
	TextDrawDestroy(ConceMenu[ playerid ][4]);
	TextDrawDestroy(ConceMenu[ playerid ][5]);
	TextDrawDestroy(ConceMenu[ playerid ][6]);
	TextDrawDestroy(ConceMenu[ playerid ][7]);
	TextDrawDestroy(ConceMenu[ playerid ][8]);

	return true;
}

public OnPlayerSpawn(playerid)
{
    /*if(!gPlayerAnimLibsPreloaded[playerid])
    {
        Loop(libi, MAX_ANIMS)
        {
            ApplyAnimation(playerid, AnimesListLoader[libi],"null",0.0,0,0,0,0,0);
        }
        gPlayerAnimLibsPreloaded[playerid] = 1;
        //printf("Os animes foram prÐ¹ carregados para %s.", PlayerInfo[ playerid ][ pName ]);
    }*/

   	PreloadAnims(playerid);

    if(PlayerInfo[ playerid ][ pLogger ])
    {
        SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);

        if(PrimeiroSpawn_{ playerid })
        {

            /*for(new i=0; i <= GetPlayerPoolSize(); i++){
                if(IsPlayerConnected(i)){
                    SetPlayerMarkerForPlayer(playerid, i, 0xFFFFFF00);
                    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
                }
            }

            deixar essa variavel para ser usada em algo mais pra frente
            */

            if(!playerInventario[ playerid ][ itemId1 ]) playerInventario[ playerid ][ itemId1 ] = -1;
            if(!playerInventario[ playerid ][ itemId2 ]) playerInventario[ playerid ][ itemId2 ] = -1;
            if(!playerInventario[ playerid ][ itemId3 ]) playerInventario[ playerid ][ itemId3 ] = -1;
            if(!playerInventario[ playerid ][ itemId4 ]) playerInventario[ playerid ][ itemId4 ] = -1;
            if(!playerInventario[ playerid ][ itemId5 ]) playerInventario[ playerid ][ itemId5 ] = -1;
            if(!playerInventario[ playerid ][ itemId6 ]) playerInventario[ playerid ][ itemId6 ] = -1;
            if(!playerInventario[ playerid ][ itemId7 ]) playerInventario[ playerid ][ itemId7 ] = -1;

            PrimeiroSpawn_{ playerid } = false;
        }

        CheckInfoOrg(playerid);

        PlaySoundForPlayer(playerid, 1068); // MÑsica de Spawn

        if(PlayerInfo[ playerid ][ PresoTempo ] > 0)
            SistemaPrisao(playerid, "ativarPena");

        if(PresoStatus[ playerid ])
        {
            SistemaPrisao(playerid, "cumprirPena");
            SetPlayerVirtualWorld(playerid, 0);
        }
		if(PlayerInfo[playerid][Morreu] == false)
        {
            if(EstavaEspectando[ playerid ])
            {
                SetPlayerPosEx(playerid, UPosEspec[ playerid ][0], UPosEspec[ playerid ][1], UPosEspec[ playerid ][2], 0.0, UPosInt[ playerid ], UPosVirt[ playerid ], 2);
                UPosEspec[ playerid ][0] = 0.0;
                UPosEspec[ playerid ][1] = 0.0;
                UPosEspec[ playerid ][2] = 0.0;
                UPosInt[ playerid ] = 0;
                UPosVirt[ playerid ] = 0;
                PlayerEspec[ playerid ] = INVALID_PLAYER_ID;
                EstavaEspectando[ playerid ] = false;

                } else {

                new id;

                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon1], PlayerInfo[playerid][pBullet1]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon2], PlayerInfo[playerid][pBullet2]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon3], PlayerInfo[playerid][pBullet3]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon4], PlayerInfo[playerid][pBullet4]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon5], PlayerInfo[playerid][pBullet5]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon6], PlayerInfo[playerid][pBullet6]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon7], PlayerInfo[playerid][pBullet7]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon8], PlayerInfo[playerid][pBullet8]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon9], PlayerInfo[playerid][pBullet9]);
                GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pWeapon10], PlayerInfo[playerid][pBullet10]);

                switch(PlayerInfo[playerid][pSpawnType])
                {
                    case 1:
                    {// Casa 1 Spawn
                        id = PlayerInfo[playerid][pHouse1];

                        PlayerInfo[playerid][pHouseEnter] = id;

                        SetPlayerPosEx(playerid, HouseInfo[id][hSpawnX], HouseInfo[id][hSpawnY], HouseInfo[id][hSpawnZ],HouseInfo[id][hSpawnA],HouseInfo[id][hInterior],HouseInfo[id][hWorld]);


                    }
                    case 2:{ // Casa 2 Spawn
                        id = PlayerInfo[playerid][pHouse2];

                        PlayerInfo[playerid][pHouseEnter] = id;

                        SetPlayerPosEx(playerid,
                                                HouseInfo[id][hSpawnX],
                                                HouseInfo[id][hSpawnY],
                                                HouseInfo[id][hSpawnZ],
                                                HouseInfo[id][hSpawnA],
                                                HouseInfo[id][hInterior],
                                                HouseInfo[id][hWorld]);
                    }
                    case 3:{ // Ultima PosiçÐ³o resigstrada

                        //Evitar Bugs Futuros
                        if(liderSpawnOrg[ playerid ] && !PlayerInfo[playerid][pOrg]) liderSpawnOrg[ playerid ] = false;

                        if(liderSpawnOrg[ playerid ]){
                            id = PlayerInfo[playerid][pOrg];
                            SetPlayerPosEx(playerid, orgsRespawnPoint[id][orpX], orgsRespawnPoint[id][orpY], orgsRespawnPoint[id][orpZ], orgsRespawnPoint[id][orpA], orgsRespawnPoint[id][orpInt], 0 , 2);
                            liderSpawnOrg[ playerid ] = false;
                        }
                        else if(PlayerInfo[ playerid ][UltimaPosX] != 0.0 && PlayerInfo[ playerid ][UltimaPosY] != 0.0 && PlayerInfo[ playerid ][UltimaPosZ] != 0.0){
                            SetPlayerPosEx(playerid, PlayerInfo[ playerid ][UltimaPosX], PlayerInfo[ playerid ][UltimaPosY], PlayerInfo[ playerid ][UltimaPosZ], PlayerInfo[ playerid ][UltimaPosA], PlayerInfo[ playerid ][UInt], PlayerInfo[ playerid ][UWorld], 2);
                        }
                        else SetPlayerPosEx(playerid, orgsRespawnPoint[0][orpX], orgsRespawnPoint[0][orpY], orgsRespawnPoint[0][orpZ], orgsRespawnPoint[0][orpA], orgsRespawnPoint[0][orpInt], 0 , 2);
                    }
                }
            }
        } else if(PlayerInfo[playerid][Morreu] == true)
        {
            if(IsAVip( playerid ))
            {
                //SetTimerEx("DesbugVIP", 5000, false, "i", playerid);
                PlayerInfo[playerid][Morreu] = false;

                SetPlayerPosEx(playerid, 1178.0551, -1324.0884, 14.1012, 267.9922, 0, 0, 2);
                //SpawnPlayer(playerid);

                PlayerInfo[ playerid ][ pHospitalizado ] = 0;

                SCM(playerid, -1, "{35CAFF}VocÐº saiu do hospital por conter uma conta VIP!");

                SetTimerEx( "tirarfade", 900, false, "d", playerid );

                SetPlayerVida(playerid, 20.0+float(random(50)));

                if(PlayerInfo[ playerid ][ pFome ] <= 10) PlayerInfo[ playerid ][ pFome ] = 30;
                if(PlayerInfo[ playerid ][ pSede ] <= 10) PlayerInfo[ playerid ][ pSede ] = 30;

                } else {

                PlayerInfo[playerid][Morreu] = false;

                if(CamaID <= (sizeof(CamasHospitalLS)-1)) CamaID++;
                else CamaID = 0;
                SetPlayerPosEx(playerid, CamasHospitalLS[CamaID][Cx], CamasHospitalLS[CamaID][Cy], CamasHospitalLS[CamaID][Cz], CamasHospitalLS[CamaID][Ca], CamasHospitalLS[CamaID][CInt], 0, 2);
                ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0);

                SetPlayerVida(playerid, 20.0+float(random(50)));

                SistemaHospital(playerid, "Ativar");

            }

        }

        FreezeEx(playerid, 1);

        // Parar mÑsicas
        if( PlayerInfo[playerid][pTutorial] > 0 )
            SetTimerEx( "pararMusica", 2500, 0, "d", playerid );
    }
    else if(!IsPlayerNPC(playerid)) Freeze( playerid );

    return true;
}

//Correçao para novos Crash
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{

	if(hittype == BULLET_HIT_TYPE_NONE)
    {
        if(!IsValidWeapon(weaponid)){
			if((fX <= -1000.0 || fX >= 1000.0) || (fY <= -1000.0 || fY >= 1000.0) || (fZ <= -1000.0 || fZ >= 1000.0) || ((hittype != BULLET_HIT_TYPE_PLAYER) && (hittype != BULLET_HIT_TYPE_VEHICLE) && (hittype != BULLET_HIT_TYPE_OBJECT) && (hittype != BULLET_HIT_TYPE_PLAYER_OBJECT)))
	        {
	            return 0;
			}
        }
    }

    if(hittype == BULLET_HIT_TYPE_OBJECT)
    {
		if(IsValidObject(hitid) && hitid == CacaObject{playerid})
        {
			if(Cacando{playerid}){
				if(GetPlayerWeapon( playerid ) == 33){
					new Float:_Rot[3], Float:CordZ;

                    GetObjectRot(CacaObject{playerid}, _Rot[0], _Rot[1], _Rot[2]);
                    GetPointZPos(CacaObjects[CacaID{playerid}][0], CacaObjects[CacaID{playerid}][1], CordZ);

                    MoveObject(CacaObject{playerid}, CacaObjects[CacaID{playerid}][0]+0.1, CacaObjects[CacaID{playerid}][1], CordZ+0.15, 0.4, 90, 0, _Rot[2]);

                    PegouCaca{playerid} = true;

		            SendClientMessage( playerid, -1, "Voce acertou o cervo va busca-lo!" );
				}
			}
        }
    }
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && weaponid == 24){

		fAutoC[playerid] ++;

		if(gettime() > GetPVarInt(playerid, "UmSegundo")){

			SetPVarInt(playerid, "UmSegundo", gettime() + 1);
			fAutoC[playerid] = 0;

		} else {
			if(fAutoC[playerid] > 4){

	        	SendClientMessage(playerid, 0xFF0000FF, "Voce esta usando Macro / Auto-CBUG.");
	        	SendAdminMessage(0xFF0000FF, "Alguem ta usando C-BUG");

				fAutoC[playerid] = 0;
			}
		}
	}

    if(hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid) && !IsPlayerNPC(hitid))
    {
        new Float:Shot[3], Float:Hit[3];
        GetPlayerLastShotVectors(playerid, Shot[0], Shot[1], Shot[2], Hit[0], Hit[1], Hit[2]);

        new playersurf = GetPlayerSurfingVehicleID(playerid);
        new hitsurf = GetPlayerSurfingVehicleID(hitid);
        new Float:targetpackets = NetStats_PacketLossPercent(hitid);
        new Float:playerpackets = NetStats_PacketLossPercent(playerid);

        if(~(playersurf) && ~(hitsurf) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(hitid))
        {
            if(!IsPlayerAimingAtPlayer(playerid, hitid) && !IsPlayerInRangeOfPoint(hitid, 5.0, Hit[0], Hit[1], Hit[2]))
            {
                new string[128], issuer[24];
                GetPlayerName(playerid, issuer, 24);
                AimbotWarnings[playerid] ++;

                format(string, sizeof(string), "{FC80E5}| ANTI CHEATER | - Player %s recebeu um aviso de aimbot ou lag! [Target PL: %f | Shooter PL:%f]!", issuer, targetpackets, playerpackets);
                SendAdminMessage(-1, string);

                if(AimbotWarnings[playerid] > 10)
                {
                    if(targetpackets < 1.2 && playerpackets < 1.2) return Kick(playerid);
                    else
                    {
                        format(string, sizeof(string), "{FC80E5}| ANTI CHEATER | - Player %s provavelmente esta usando Aim-Bot [Target PL: %f | Shooter PL:%f]!", issuer, targetpackets, playerpackets);
                        SendAdminMessage(-1, string);
                    }
                }
                return 0;
            }
            else return 1;
        }
        else return 1;
    }
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart) {

    if(IsPlayerConnected(playerid) && PlayerInfo[ playerid ][ pLogger ] > 0){
		AtualizarTextVida(playerid);

		new
			stri[ 100 ]
		;

        if(bodypart == BODY_PART_HEAD && issuerid != INVALID_PLAYER_ID)
    	{
     	   SetPlayerVida(playerid, (GetPlayerVida( playerid )-80));

     	   format(stri, sizeof( stri ), "| HEAD SHOT | -  %s te deu um Head Shot", GetNameEx( issuerid ));
     	   SendClientMessage(playerid, GetOrgColor(issuerid), stri);
     	   format(stri, sizeof( stri ), "| HEAD SHOT | - Voce deu um Head em %s", GetNameEx( playerid ));
     	   SendClientMessage(issuerid, GetOrgColor(issuerid), stri);
     	   GameTextForPlayer( issuerid , "~w~Head ~r~Shot", 3000, 1);
     	   GameTextForPlayer( playerid , "~w~Head ~g~Shot", 3000, 1);

     	   SetPVarInt(playerid, "ultimoShoot", issuerid);
    	}
		else
		{

            #if defined DamageUser
			// Realistic weapon damage by Th4_Evil

			new Float:pDamage,
				Float:health,
				Float:healthamount
			;

			GetPlayerHealth(playerid, health);
			healthamount = health + amount;

            if(GetPlayerColete(playerid) <= 0){
				if(weaponid == 0){
					pDamage = pD_MaxHealth / pD_Unarmed;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 1){
					pDamage = pD_MaxHealth / pD_brass;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 2 || weaponid == 3 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 15){
					pDamage = pD_MaxHealth / pD_golf;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 4){
					pDamage = pD_MaxHealth / pD_knife;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 8 || weaponid == 9){
					pDamage = pD_MaxHealth / pD_katana;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13){
					pDamage = pD_MaxHealth / pD_dildo;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 14){
					pDamage = pD_MaxHealth / pD_flowers;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 16){
					pDamage = pD_MaxHealth / pD_grenades;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 22){
					pDamage = pD_MaxHealth / pD_colt;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 23){
					pDamage = pD_MaxHealth / pD_silenced;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 24){
					pDamage = pD_MaxHealth / pD_deagle;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 25){
					pDamage = pD_MaxHealth / pD_shotgun;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 26){
					pDamage = pD_MaxHealth / pD_sawn;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 27){
					pDamage = pD_MaxHealth / pD_combat;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 28){
					pDamage = pD_MaxHealth / pD_SMG;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 29){
					pDamage = pD_MaxHealth / pD_MP5;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 30){
					pDamage = pD_MaxHealth / pD_AK47;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 31)
				{
					pDamage = pD_MaxHealth / pD_M4;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 32){
					pDamage = pD_MaxHealth / pD_TEC9;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 33 || weaponid == 34){
					pDamage = pD_MaxHealth / pD_rifle;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 35 || weaponid == 36){
					pDamage = pD_MaxHealth / pD_launchers;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 38){
					pDamage = pD_MaxHealth / pD_minigun;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
				if(weaponid == 41){
					pDamage = pD_MaxHealth / pD_spraycan;
					SetPlayerVida(playerid, healthamount - pDamage);
				}
			}
			#endif
		}

        PlayerTextDrawShow(playerid, TextVida[ 3 ][ playerid ]);

        if(GetPlayerColete(playerid) <= 0){
	        PlayerInfo[ playerid ][ pVida ] -= amount;
		}

		format(stri,sizeof( stri ),"-%.1f", amount);
		PlayerTextDrawSetString(playerid, TextVida[ 3 ][ playerid ], stri);

		SetTimerEx("HideTextDrawLife", TSegundos(3), false, "i", playerid);


    	if(issuerid != INVALID_PLAYER_ID){
			SetPVarInt(playerid, "ultimoShoot", issuerid);

			PlayerTextDrawShow(issuerid, TextVida[ 0 ][ issuerid ]);
			format(stri, sizeof( stri ),"~y~%s:~g~  -%.1f", GetName( playerid ), amount);
			PlayerTextDrawSetString(issuerid, TextVida[ 0 ][ issuerid ], stri);

			SetTimerEx("HideTextDrawLife", TSegundos(3), false, "i", issuerid);
		}
	}
	return true;
}

Public:HideTextDrawLife(playerid){
	PlayerTextDrawHide(playerid, TextVida[ 0 ][ playerid ]);
	PlayerTextDrawHide(playerid, TextVida[ 3 ][ playerid ]);
}


Public:SairCamera(id) return SetCameraBehindPlayer( id );

Public:HideTextAnuncio(id) return TextDrawHideForPlayer(id, Anuncios);

Public:HideTextObjetivo(id){
	TextDrawHideForPlayer(id, Objetivo[0]);
	TextDrawHideForPlayer(id, Objetivo[1]);
	UnFreeze( id );
	return 1;
}


stock AtualizarTextVida(playerid)
{
	new
		string[ 10 ],
		string2[ 10 ]
	;

	format(string, sizeof(string), "%.0f", GetPlayerVida( playerid ));
	format(string2, sizeof(string2), "%.0f", GetPlayerColete( playerid ));

	if(GetPlayerColete( playerid ) < 1)
	{
	    format(string2, sizeof(string2), " ");
	}
	PlayerTextDrawSetString(playerid, TextVida[ 1 ][ playerid ], string);
	PlayerTextDrawSetString(playerid, TextVida[ 2 ][ playerid ], string2);
	return true;
}

stock AtualizarRankLabels(playerid)
{
	static strL[100];

	if(!(IsPlayerNPC(playerid)))
    {
        if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pEmpLabel]))
        {
            if(PlayerInfo[ playerid ][ pAdmin ] > 0 && PlayerInfo[ playerid ][ pAWork ] != 0)
            {
        		format(strL, sizeof(strL), "%s", adminInfo[PlayerInfo[ playerid ][ pAdmin ]]);
				UpdateDynamic3DTextLabelText(PlayerInfo[playerid][pEmpLabel], Amarelo, strL);
			}
			else if(PlayerInfo[ playerid ][ pVIP ] > 0)
            {
        		format(strL, sizeof(strL), "%s", VIPLevel( playerid ));
				UpdateDynamic3DTextLabelText(PlayerInfo[playerid][pEmpLabel], 0xFFFF00AA, strL);
			}
			else DestroyDynamic3DTextLabel(PlayerInfo[playerid][pEmpLabel]);
		}
	}
	return true;
}

stock AtualizarTextFomeSede(playerid)
{
    //static strL[100];
	if(!(IsPlayerNPC(playerid))){
	    if(PlayerInfo[ playerid ][ pTutorial ] != 0){
        	//Atualizando TextDraw Fome
	        PlayerTextDrawTextSize(playerid, TextFome[ 2 ][ playerid ], (519.0 + ((85.0 * PlayerInfo[ playerid ][ pFome ]) / 100)), 0.0);

			if(PlayerInfo[ playerid ][ pFome ] <= 20 && PlayerInfo[ playerid ][ pFome ] >= 11){
				PlayerTextDrawBoxColor(playerid, TextFome[ 2 ][ playerid ], 0xEDF50AAA);
	  		}
	  		else if(PlayerInfo[ playerid ][ pFome ] < 11){
				PlayerTextDrawBoxColor(playerid, TextFome[ 2 ][ playerid ], -16776961);
	  		}
			else PlayerTextDrawBoxColor(playerid,TextFome[ 2 ][ playerid ], 16711935);
	        PlayerTextDrawShow(playerid, TextFome[ 2 ][ playerid ]);

	        //Atualizando TextDraw Sede
	        PlayerTextDrawTextSize(playerid, TextSede[ 2 ][ playerid ], (519.0 + ((85.0 * PlayerInfo[ playerid ][ pSede ]) / 100)), 0.0);

			if(PlayerInfo[ playerid ][ pSede ] <= 20 && PlayerInfo[ playerid ][ pSede ] >= 11){
				PlayerTextDrawBoxColor(playerid, TextSede[ 2 ][ playerid ], 0xEDF50AAA);
	  		}
	  		else if(PlayerInfo[ playerid ][ pSede ] <= 10){
				PlayerTextDrawBoxColor(playerid, TextSede[ 2 ][ playerid ], -16776961);
	  		}
			else PlayerTextDrawBoxColor(playerid,TextSede[ 2 ][ playerid ], 65535);
	        PlayerTextDrawShow(playerid, TextSede[ 2 ][ playerid ]);
   		}
	}
}

/* =============================================================================
						Encriptar Dados
================================================================================*/
stock Encriptar(pass[])
{
	static charset[] = "qwertyaQWERTYUIOPZXCVBNMLKJHGFDSAsdfghzxcvbnuiopjklm1324657809_",
		css = 63;

	new target[MAX_SENHA + 1],
		j = strlen(pass),
		sum = j,
		tmpp = 0,
		i,
		modw
	;
	for (i = 0; i < MAX_SENHA || i < j; i++)
	{
		modw = i % MAX_SENHA;
		tmpp = (i >= j) ? charset[(7 * i) % css] : pass[i];
		sum = (sum + chrfind2(tmpp, charset) + 1)  % css;
		target[modw] = charset[(sum + target[modw]) % css];
	}
	target[MAX_SENHA] = '\0';
	return target;
}

stock chrfind2(needle, haystack[], start = 0)
{
	while(haystack[start])
	{
		if(haystack[start++] == needle)
		{
			return start-1;
		}
	}
	return -1;
}


public OnPlayerDeath(playerid, killerid, reason)
{


    if(PlayerInfo[ playerid ][ CfgChatKill ] == true)
    {
        SendDeathMessage(killerid, playerid, reason);
    }

    PlayerInfo[playerid][PegouKIT] = false;

    static str[ 300 ];

    if(GetPVarInt(playerid, "CheckGPSVeh") == 1) {
        DeletePVar( playerid, "CheckGPSVeh");
        DisablePlayerCheckpoint( playerid );
    }

    if(IsPlayerCuffed(playerid)) SetPlayerCuffed(playerid, false);

    if(PlayerInfo[ playerid ][ Morreu ])
    {
        if(killerid != INVALID_PLAYER_ID)
        {
            format(str, sizeof(str), "| Servidor | - %s foi preso automaticamente, Motivo: Matar sem motivo !", GetNameEx( killerid ));
            SendClientMessageToAll(cadm, str);

            SistemaPrisao(killerid, "ativarpena");
            SistemaPrisao(killerid, "adicionarPena", 0, 3, 30);
            SistemaPrisao(killerid, "cumprirPena");
        }
    }
    if(CNHTest[ playerid ])
    {
        SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
        ClearChatbox(playerid, 5);

        ExameQuestID[ playerid ] = 0;
        ExamePoints[ playerid ] = 0;
        AutoEscolaProgresso[ playerid ] = 0;
        AutoEscolaAviso[ playerid ] = 0;
        CNHTest[ playerid ] = 0;

        DesativarRacesAETB( playerid );
        DesativarRacesAETD( playerid );
        DesativarRacesAETE( playerid );

        DeleteRaceChecksAETE(playerid);
        DeleteRaceChecksAETB(playerid);
        DeleteRaceChecksAETD(playerid);
        //DeletePlayerRaces(playerid);
    }

    if(EmpregoDuty[ playerid ] == Petroleiro)
    {
        if(GetPVarInt(playerid, "CheckPetrol") == 1) DisablePlayerCheckpoint( playerid );

        SetPVarInt(playerid, "CheckPetrol", 0);
        PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);
        TraillerAttach[ playerid ] = false;
        TraillerComb[ playerid ] = 0;
        PetroleiroMoney[ playerid ] = 0;
        _SecurityPetrol[ playerid ] = 0;
        TraillerCount[ playerid ] = 0;
    }

    PlayerSolicitou[ playerid ] = 0;

    if(killerid != INVALID_PLAYER_ID)
    {
        if(isPlayerCop(killerid) && EmRouboRecente[playerid])
         {

            ClearAnimations(playerid);
            StopLoopingAnim(playerid);

            ClearChatboxToAll(1);

            format(str, sizeof(str), "{A9C5E6}%s %s membro da {%s}%s{A9C5E6} foi ferido(a) por policiais da: {%s}%s{A9C5E6} em um assalto!",
            PlayerInfo[ playerid ][ pSex ] == 1 ? ("O criminoso"):("A criminosa"), GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[ killerid ][pOrg]], nomeOrgs[PlayerInfo[ killerid ][pOrg]]);
            JNNEWS( str );

            for(new p = 0; p <= sizeof( BombAssalt ); p++)  PlayerTextDrawHide(playerid, BombAssalt[ p ][ playerid ]);

        }
        else if(IsPlayerGang(killerid))
        {
            if(EmRouboRecente[ killerid ] && isPlayerCop( playerid )) {

                ClearChatboxToAll(1);
                format(str, sizeof(str), "{A9C5E6}%s %s membro da {%s}%s{A9C5E6} foi ferido(a) por criminosos da: {%s}%s{A9C5E6} em um assalto!",
                PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[ killerid ][pOrg]], nomeOrgs[PlayerInfo[ killerid ][pOrg]]);
                JNNEWS( str );
                AlterarNivelProcurado( killerid, 1, "+" );
            }
        }
        else {
            if(isPlayerCop(killerid)){
                format(str, sizeof(str), "{B4D5FA}%s: %s matou %s !", PlayerInfo[ killerid ][ pSex ] == 1 ? ("O policial"):("A policial"), GetName(killerid), GetName(playerid));
                MessageProxPlayer(killerid, -1, 60.0, str);
                SCM(killerid, -1, "{ACCBEF}NÐ³o cometa DM sem motivo, pois se reportado pode ser punido ou atÐ¹ mesmo banido!");
            }
            else {
                format(str, sizeof(str), "{B4D5FA}Cameras de Segurança: %s matou %s e estÐ± sendo procurado pela policia!", GetName(killerid), GetName(playerid));
                MessageProxPlayer(killerid, -1, 60.0, str);
                SCM(killerid, -1, "{ACCBEF}Esconda-se por 5 minutos que seus niveis de procurado diminuirÐ³o gradativamente!");
                AlterarNivelProcurado( killerid, 3, "+" );
            }
        }
    }

    Roubando[playerid] = 0;
    EmRouboRecente[playerid] = false;

    if(gPlayerUsingLoopingAnim[ playerid ]) gPlayerUsingLoopingAnim[ playerid ] = 0;
    if(InAnim[playerid] == 1) InAnim[playerid] = 0;

    //SetPVarInt(playerid, "ultimaDeath", gettime());


    if(killerid != INVALID_PLAYER_ID)
    {
        if(isPlayerCop(killerid) && PlayerInfo[playerid][pWanted] > 0 ) {

            SistemaPrisao(playerid, "adcionarPena");
            SistemaPrisao(playerid, "darRecompensa", killerid);
        }
    }

	/*if(!PlayerInfo[ playerid ][ Morreu ]){
    	PlayerInfo[ playerid ][ Morreu ] = true;
	}
	else {

	    KillTimer(AnimeMorte[ playerid ]);
	    KillTimer(EsperandoA_Timer[ playerid ]);
	    
	    PlayerInfo[ playerid ][ Morreu ] = false;
		SistemaHospital(playerid, "Setar");
	}

    SetSpawnInfo( playerid, NO_TEAM, PlayerInfo[playerid][pSkin], PlayerInfo[ playerid ][ DeathX ], PlayerInfo[ playerid ][ DeathY ], PlayerInfo[ playerid ][ DeathZ ], 0, 0, 0, 0, 0, 0, 0 );
	*/
    
	if(PlayerInfo[ playerid ][ Morreu ] == false)
    {
        PlayerInfo[ playerid ][ pHospitalizado ] = 1;
        PlayerInfo[ playerid ][ pHospTemp ] = 120;//RandomEx(40, 75);

        PlayerInfo[ playerid ][ Morreu ] = true;

        fadeIn(playerid, 3000);
    }

	//Sistema de Morte Refurm
	/*if(PlayerInfo[ playerid ][ Morreu ] == false)
    {
        //timeOfDeath[playerid] = gettime();
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);
		//PedMorto[playerid] = 1;
		//TextDrawShowForPlayer(playerid, MorteTD);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 1, 1, -1);
		SendClientMessage(playerid, -1, "{FF0000}[192] {FFFFFF}VocÐº estÐ± ferido! Acione os paramÐ¹dicos!");
    }*/

    return true;
}
/*
Public:OnAtualizeVehiclesConce(){

	for(new vehicleid = 0; vehicleid < sizeof( VeiculoInfo ); vehicleid++) {
	    if(!VeiculoInfo[ vehicleid ][vIsValid]) continue;

	    new Float:cvida;
		GetVehicleHealth(VeiculoInfo[ vehicleid ][ vVeiculo ], cvida);

        VeiculoInfo[ vehicleid ][ vDamage ] = cvida;
	    VeiculoInfo[ vehicleid ][ vCombustivel ] = combustivel[VeiculoInfo[ vehicleid ][ vVeiculo ]];
	}
	return true;
}*/


Public:DesbugMobile(vehicleid)
{
	SetVehicleEngineState(vehicleid, 0);
	SetVehicleFarolState(vehicleid, 0);
    //SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
    //SetVehicleFarolState(GetPlayerVehicleID(playerid), 0);
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
    SetTimerEx("DesbugMobile", 1000, false, "i", vehicleid);

	SetVehicleEngineState(GetPlayerVehicleID(vehicleid), 0);
    SetVehicleFarolState(GetPlayerVehicleID(vehicleid), 0);

    DestroyObject(NeonVeicular1[vehicleid]);
	DestroyObject(NeonVeicular2[vehicleid]);

	/*Loop(vid, sizeof( VeiculoInfo ))
    {
	    if (VeiculoInfo[ vid ][ vVeiculo ] == vehicleid )
        {
	        if(VeiculoInfo[ vid ][vIsValid] == true)
            {
                if(VeiculoInfo[ vid ][vDoors] == true) SetVehicleParams(VeiculoInfo[ vid ][vVeiculo], 3, 0);
    			else SetVehicleParams(VeiculoInfo[ vid ][vVeiculo], 3, 1);

	            //Componentes
				SetVehicleNumberPlate(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vPlaca]);

				SetVehiclePos(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vLocalX], VeiculoInfo[ vid ][vLocalY], VeiculoInfo[ vid ][vLocalZ]);
				SetVehicleZAngle(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vLocalA]);

				ChangeVehicleColor(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vCor1], VeiculoInfo[ vid ][vCor2]);

				if(VeiculoInfo[ vid ][vNeon] == true && VeiculoInfo[ vid ][vNeonStatus] == true ){
					ChangeVehicleNeon(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vNeonColor]);
				}
				if(VeiculoInfo[ vid ][vNitro] != 0) AddVehicleComponent(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vNitro]);
		    	if(VeiculoInfo[ vid ][vRodas] != 0) AddVehicleComponent(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vRodas]);
		    	if(VeiculoInfo[ vid ][vSuspensao] != 0) AddVehicleComponent(VeiculoInfo[ vid ][vVeiculo], VeiculoInfo[ vid ][vSuspensao]);
                break;
			}
		}
	}
*/
	//blindagem[vehicleid] = 100;
	return true;
}

public OnVehicleDeath(vehicleid, killerid)
{
    DestroyObject(NeonVeicular1[vehicleid]);
	DestroyObject(NeonVeicular2[vehicleid]);

    /*Loop(vid, sizeof( VeiculoInfo )) {
	    if (VeiculoInfo[ vid ][ vVeiculo ] == vehicleid ) {

	        if(VeiculoInfo[ vid ][vIsValid] == true){
	            VeiculoInfo[ vid  ][ vDamage ] = 100;
			}
		}
	}*/
    return true;
}

public OnPlayerText(playerid, text[])
{
	new
	    textstr[ 180 ]
	;

    Loop(p, sizeof ChatAttack) if(strfind(text, ChatAttack[p], true) == 0) return Kick( playerid ), 0;

    if( !PlayerInfo[playerid][pLogger] ) return SendClientMessage(playerid, -1, "{FF0000}Logue Antes."), 0;

	if(IsPlayerConnected(playerid))
	{
		//LowerString(text);

        if(strlen(text) >= 90) return SendClientMessage(playerid, -1, "{FFFFFF}Texto Muito Longo Maximo {FF0000}90 {FFFFFF}Caracteres."), 0;

		if( PlayerInfo[ playerid ][ pBlockchat ] == true ) return SendClientMessage(playerid, -1, "Seu Chat esta temporariamente BLOQUEADO!"), 0;

		if(text[0] == '!' && PlayerInfo[ playerid ][ pAdmin ] >= 1)
		{
			text[0] = ' ';
			format( textstr, sizeof( textstr ), "{FF0000}({FFFFFF}Chat Admin{FF0000}) {FFFFFF}%s {EDBEED}diz:{FFFFFF}%s", GetName( playerid ), text);
      		SendAdminMessage(-1, textstr);
			return 0;
		}
		/*if(text[0] == '!' && PlayerInfo[ playerid ][ pEmprego ] < 1) return ErroMSG(playerid, "Voce nao tem um emprego !");
		{
			text[0] = ' ';

			format(textstr, sizeof(textstr), "{FFFF00}( {FFFFFF}Chat-Emprego {FFFF00}) {FFFFFF}%s {C2A2DA}%s: {FFFFFF}%s", EmpregoNome[PlayerInfo[ playerid ][ pEmprego ]], GetName( playerid ), text);
			SendEmpregoMSG(PlayerInfo[ playerid ][ pEmprego ], -1, textstr);
			return 0;
		}
		if(text[0] == '@' && PlayerInfo[ playerid ][ pEmprego ] < 1) return ErroMSG(playerid, "Voce nao tem um emprego !");
		{
			new texT[129];
			new string[ 129 ];
			texT[0] = ' ';

			if(PlayerInfo[ playerid ][ pEmprego ] < 1) return ErroMSG(playerid, "Voce nao tem um emprego !");

			LowerString(texT);
			format(string, sizeof(string), "{FFFF00}( {FFFFFF}Chat-Emprego {FFFF00}) {FFFFFF}%s {C2A2DA}%s: {FFFFFF}%s", EmpregoNome[PlayerInfo[ playerid ][ pEmprego ]], GetName( playerid ), texT);
			SendEmpregoMSG(PlayerInfo[ playerid ][ pEmprego ], -1, string);
			return 0;
		}*/
		if(Votacao[iniciada] && !Votou[playerid])
		{
            if(strfind(text, "sim", true) == 0){
				Votacao[sim]++;
				Votacao[total]++;
				Votou[ playerid ] = true;

				SendClientMessage(playerid, Verde, "Voce concorda, seu voto foi computado com sucesso.");
				return 0;
			}
			else if(strfind(text, "nao", true) == 0 || strfind(text, "nao", true) == 0){
				Votacao[nao]++;
				Votacao[total]++;
				Votou[ playerid ] = true;

				SendClientMessage(playerid, Verde, "Voce descorda, seu voto foi computado com sucesso.");
				return 0;
			}
		}
		else if(CelularInfo[ playerid ][ LinhaAtiva ] == true)
        {
			format( textstr, sizeof( textstr ), "{0FF23C}({FFFFFF}Celular{0FF23C}) {FFFFFF}%s: %s", GetName(playerid), text);
			SCM(CelularInfo[ playerid ][ LinhaAtivaID ], -1, textstr);
			SCM(playerid, -1, textstr);

			new sky[70];
			format(sky, sizeof(sky), "%s falou algo no celular!", GetNameEx( playerid ));
			MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
			SetPlayerChatBubble(playerid, text, 0xFFFFFFAA, 20.0, 10000);

			format( STRLOG, sizeof( STRLOG ), "(Celular) %s/%s : %s", GetName( playerid ), GetName( CelularInfo[ playerid ][ LinhaAtivaID ] ), text);
			SLog("Celular.log", STRLOG);
			return 0;
		}
		else
		{
            new plataforma[10], cargo[20];
            if(PlayerInfo[playerid][Mobile] == true)
            {
                format(plataforma, 10, "MOB");

                } else {

                format(plataforma, 10, "PC");
            }

            if(PlayerInfo[playerid][pVIP] == 1) format(cargo, 10, "VIP");
            if(PlayerInfo[playerid][pVIP] == 2) format(cargo, 10, "VIP+");
            if(PlayerInfo[playerid][pVIP] == 3) format(cargo, 10, "VIP Plus");
            if(PlayerInfo[playerid][pVIP] == 4) format(cargo, 10, "Socio");

            if(PlayerInfo[playerid][pAdmin] > 0) format(cargo, 20, adminInfo[PlayerInfo[playerid][pAdmin]]);


            if(PlayerInfo[playerid][pVIP] == 0 && PlayerInfo[playerid][pAdmin] == 0)
            {
                format( textstr, sizeof( textstr ), "{A4A4A4}[%s][%d] %s: %s", plataforma, playerid, GetName( playerid ), text);

            } else if(PlayerInfo[playerid][pVIP] > 0)
            {
                format( textstr, sizeof( textstr ), "{A4A4A4}[%s]{81F781}[%s]{A4A4A4}[%d] %s: %s", plataforma, cargo, playerid, GetName( playerid ), text);

            } else if(PlayerInfo[playerid][pAdmin] > 0)
            {
			    format( textstr, sizeof( textstr ), "{A4A4A4}[%s]{81DAF5}[%s]{A4A4A4}[%d] %s: %s", plataforma, cargo, playerid, GetName( playerid ), text);
            }

            //SendClientMessageToAll(GetPlayerColor(playerid), textstr);

			//CHAT GLOBAL ALTERAR
			ChatProximo(20.0, playerid, textstr, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
			SetPlayerChatBubble(playerid, text, 0xFFFFFFAA, 20.0, 10000);

			format( textstr, sizeof( textstr ), "[%s] %s diz: %s", GetDateEx(), GetName( playerid ), text);
			SLog("Chat.log", textstr);
	  	}
		if(!IsPlayerInAnyVehicle(playerid))
        {
		    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
            {
				if(gPlayerUsingLoopingAnim[playerid] != 1)
                {
				    if(GetPlayerWeapon(playerid) == 0)
                    {
						if(InAnim[ playerid ] != 1)	ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 1, false, false, false, strlen(text)*100, 1);
					}
				}
			}
		}
	}
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(!PlayerInfo[playerid][pLogger] ) return false;
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	static pcmd[100];
    if(result == -1)
    {
		format( pcmd, sizeof( pcmd ), "{97DABE}Comando: /%s invalido. para ajuda digite: /ajuda", cmd);
		SCM(playerid, -1, pcmd);
		return false;
	}

	if(PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL)
	{
		format( pcmd, sizeof( pcmd ), "[%i] %s digitou o comando /%s", playerid, GetNameEx(playerid), cmd);
		SAMCMD(cadm, pcmd);
		return false;
	}
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(CNHTest[ playerid ] > 0)
    {
        static strConteudo[ 900 ];

        format(strConteudo, sizeof(strConteudo), "{DFECE3}Saudacoes !\n\n    Voce acaba de entrar no veiculo para dar inicio a segunda e ultima etapa do seu exame!\n\
        para ajuda-lo iremos dar algumas dicas importantes para que faca uma boa prova.\n\n  Dicas:\n\n\
          {1DFA5F}>{DFECE3} - Nao ultrapasse a velocidade de 150 Km/h, este e o limite estabelecido para sua seguranca!\n{1DFA5F}>{DFECE3} - Nao danifique o veiculo, pois o teste pode ser cancelado se houver um grande dano!\n");
        format(strConteudo, sizeof(strConteudo), "%s{1DFA5F}>{DFECE3} - Muita atencao ao mini mapa localizado no canto inferior esquerdo da sua interface!\n{1DFA5F}>{DFECE3} - Agora que entrou no veiculo nao saia, se sair o teste sera cancelado!\n\nClique em iniciar e ja pode ligar seu veiculo, Boa Sorte!", strConteudo);
        ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Observacoes", strConteudo, "Iniciar", "");

        if(CNHTest[ playerid ] == 1)
        {
            AutoEscolaProgresso[ playerid ] = 0;
            SetPlayerCheckpoint( playerid, MotoPistaTest[0][0], MotoPistaTest[0][1], MotoPistaTest[0][2], 5.0);
        }
        if(CNHTest[ playerid ] == 2) SetTimerEx("DestravarRaceCP", 1000, false, "ii", playerid, RaceChecksAutoEscolaTipoB[playerid][0]);
        if(CNHTest[ playerid ] == 3) SetTimerEx("DestravarRaceCP", 1000, false, "ii", playerid, RaceChecksAutoEscolaTipoD[playerid][0]);
        if(CNHTest[ playerid ] == 4)
        {
            SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Pegue um trailer para iniciar o exame!");
        }
    }

    if(EmpregoDuty[playerid] > 0 || Equipado[ playerid ] > 0)
    {
        KillTimer(TimerRespawn[playerid]);
        return 1;
    }

	if(PlayerInfo[playerid][ pLogger ] != 1)
    {
	    format(strx, sizeof( strx ), "{CABC3D}| Aviso | %s foi kickado por mover-se sem logar!", GetNameEx( playerid ));
		SCMALL(strx);

		format(STRLOG, sizeof STRLOG, "[%s] %s foi kickado, Motivo: Se moveu Sem Logar!", GetDateEx(), GetName(playerid));
		SLog("Kick.log", STRLOG);
  		SendClientMessage(playerid, Laranja, "[ Play Style ] - Voce foi kickado Automaticamente, Motivo: Se moveu Sem Logar!");
        Kick(playerid);
        return true;
 	}
 	return true;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(CNHTest[ playerid ] > 0)
    {
        SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
        ClearChatbox(playerid, 5);
        SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Voce falhou na segunda etapa do exame por sair do veiculo!");
        GameTextForPlayer(playerid, "~r~Falhou", 1000, 1);

        ExameQuestID[ playerid ] = 0;
        ExamePoints[ playerid ] = 0;
        AutoEscolaProgresso[ playerid ] = 0;
        AutoEscolaAviso[ playerid ] = 0;
        CNHTest[ playerid ] = 0;

        PlaySoundForPlayer(playerid, 1055);

        SetCameraBehindPlayer(playerid);
        SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
        SetPlayerVirtualWorld(playerid, 0);
        //SetPlayerInterior(playerid, 3);

        UnFreeze( playerid );

        DesativarRacesAETB( playerid );
        DesativarRacesAETD( playerid );
        DesativarRacesAETE( playerid );

        DeleteRaceChecksAETE(playerid);
        DeleteRaceChecksAETB(playerid);
        DeleteRaceChecksAETD(playerid);
    }

    if(EmpregoDuty[playerid] > 0 || Equipado[ playerid ] > 0)
    {
        Loop(vhx, sizeof(VehCarteiros))
        {
            if(vehicleid == VehCarteiros[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }

        Loop(vhx, sizeof(Trukers))
        {
            if(vehicleid == Trukers[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }

        Loop(vhx, sizeof(TruckersLenhadores))
        {
            if(vehicleid == TruckersLenhadores[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(pizzaBikes))
        {
            if(vehicleid == pizzaBikes[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(MecanicVehs))
        {
            if(vehicleid == MecanicVehs[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(Onibus))
        {
            if(vehicleid == Onibus[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(TrukersLixeiros))
        {
            if(vehicleid == TrukersLixeiros[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(CarrosTaxistas))
        {
            if(vehicleid == CarrosTaxistas[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(VehParamedics))
        {
            if(vehicleid == VehParamedics[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(CarrosPM))
        {
            if(vehicleid == CarrosPM[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "i", vehicleid);
                return true;
            }
        }
        Loop(vhx, sizeof(VehBOPE))
        {
            if(vehicleid == VehBOPE[vhx])
            {
                TimerRespawn[playerid] = SetTimerEx("DestruirCarro", 120000, false, "ii", playerid, vehicleid);
                return true;
            }
        }
    }

	return true;
}

Public:DestruirCarro(playerid, id)
{
    DestroyVehicle(id);
    KillTimer(TimerRespawn[playerid]);
    return 1;
}

//parei aqui stn

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC( playerid )) return 1;
	new
	    str[ 129 ],
	    Veh = GetPlayerVehicleID(playerid),
	    model = GetVehicleModel(Veh)
	;

	/*if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER){
	    if(IsPlaneVehicle(playerid)) SetPVarInt(playerid, "checkParaquedasBug", 1);
	}*/

	if( newstate == PLAYER_STATE_PASSENGER )
    {
		if(IsTaxiCar( playerid ))
        {
		    PediuTaxi[ playerid ] = false;
			ForPlayers(i)
            {
				if(PlayerInfo[ i ][ pEmprego ] == Taxista)
                {
				    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
		}

	    ForPlayers( i )
        {
	        if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)) && GetPlayerState( i ) == 2 && EmpregoDuty[ i ] == MOnibus)
         	{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 431){

			        if(GetPlayerGrana( playerid ) < 10)
	                {
						SendClientMessage(playerid, AzulClaro, "Voce precisa de R$10,00 para entrar.");
						RemovePlayerFromVehicleEx(playerid);
	                }
	                else
	                {
	                    if(EmpregoDuty[ i ] == MOnibus)
		                {
	                        SendClientMessage(playerid, AzulClaro, "(>) - Pagou R$10,00 para o Motorista De Onibus.");

							format( str, sizeof( str ), "(>) - Passageiro %s entrou no Onibus.", GetName( playerid ));
							SendClientMessage(i, AzulClaro,  str);
						}
						ActionPlayerGrana(playerid, "-", 10, 1);
						TransportMoney[ i ] += 10;
					}
				}
			}
		}
		if(GetPlayerVehicleID(playerid) == NPCBlueBus)
        {
			if(GetPlayerGrana( playerid ) < 10) {
			    ErroMSG(playerid, "Voce nao possui dinheiro suficiente para pagar passagem. R$ 10,00");
				RemovePlayerFromVehicle(playerid);
				return true;
			}
			InBus[ playerid ] = 1;
	  		GameTextForPlayer(playerid, "~w~Onibus Azul", 3000, 1);
	  		ActionPlayerGrana(playerid, "-", 10, 1);
        }
        else if(GetPlayerVehicleID(playerid) == NPCBlackBus)
        {
            if(GetPlayerGrana( playerid ) < 20) {
			    ErroMSG(playerid, "Voce nao possui dinheiro suficiente para pagar passagem. R$ 10,00");
				RemovePlayerFromVehicle(playerid);
				return true;
			}
			InBus[ playerid ] = 1;
			GameTextForPlayer(playerid, "~w~Onibus Preto", 3000, 1);
			ActionPlayerGrana(playerid, "-", 10, 1);
        }
	}

	/*	Funçao ao entrar no carro
	===========================================================*/
	if(newstate == PLAYER_STATE_DRIVER)
    { //O novo estado do player e de motorista.

        TimerComb[playerid] = SetTimerEx("VerificarComb", 100, false, "i", playerid);

        if(IsAMoto(playerid))
        {
            if(PlayerInfo[ playerid ][ UsandoCapacete ] != true)
            {
                format(str, sizeof(str), "[ Play Style ] - Voce esta sem capacete Veiculo: %s. Cuidado com os Policiais!", GetVehicleName(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, AzulClaro, str);
            }
        }
		if(PlayerInfo[ playerid ][ CfgVelocimetro ] == true)
		{
			for(new TextId = 0; TextId < sizeof(PlayerTD); TextId++) PlayerTextDrawShow(playerid, PlayerTD[TextId][playerid]);
			carVelocimetro[playerid] = SetTimerEx( "atualizarDados", 300, true, "d", playerid );
		}

		if( oldstate == PLAYER_STATE_ONFOOT )
		{
			if(IsABike(playerid))
			{
			 	SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
			}
			else {
			    if(!GetVehicleParameters(GetPlayerVehicleID(playerid), 0)){
		            SCM(playerid, -1, "{FF7F50}| VEICULO | Para ligar o seu veiculo, pressione 'Y' ou digite /motor!");
				}
			}

			if(CNHTest[ playerid ] == 0)
			{
				if(VehicleCategory[model-400] == CAT_B && PlayerInfo[ playerid ][ pHabB ] != 1) SendClientMessage(playerid, AzulClaro, "[Play Style] - Voce esta dirigindo sem carteira B, cuidado com os policiais!");
	            if(VehicleCategory[model-400] == CAT_A && PlayerInfo[ playerid ][ pHabA ] != 1) SendClientMessage(playerid, AzulClaro, "[Play Style] - Voce esta pilotando sem carteira A, cuidado com os policiais!");

				if(VehicleCategory[model-400] == CAT_D && PlayerInfo[ playerid ][ pHabD ] != 1
				|| VehicleCategory[model-400] == CAT_E && PlayerInfo[ playerid ][ pHabE ] != 1) SendClientMessage(playerid, AzulClaro, "[Play Style] - Voce esta dirigindo um veiculo de grande porte sem carteira, cuidado com os policiais!");

				if(VehicleCategory[model-400] == CAT_AR && PlayerInfo[ playerid ][ pHabAR ] != 1
				|| VehicleCategory[model-400] == CAT_N && PlayerInfo[ playerid ][ pHabN ] != 1
				|| VehicleCategory[model-400] == CAT_ES && PlayerInfo[ playerid ][ pHabES ] != 1)
                {
				    SendClientMessage(playerid, AzulClaro, "[Play Style] - Voce nao possui um licensa especial para utilizar este veiculo!");
				    RemovePlayerFromVehicle( playerid );
				    return true;
				}
			}

			/*static sgtext[ 80 ];
            format( sgtext, sizeof( sgtext ), "~g~%s", GetVehicleName(GetPlayerVehicleID(playerid)));
			GameTextForPlayer(playerid, sgtext, 6000, 1);*/

			/*Loop(vid, sizeof(VeiculoInfo))
            {
			    if(Veh != VeiculoInfo[vid][vVeiculo] || VeiculoInfo[vid][vIsValid] != true) return 0;

				if(Veh == VeiculoInfo[vid][vVeiculo])
                {
	                if(vid == PlayerInfo[playerid][pVehKey1]
					|| vid == PlayerInfo[playerid][pVehKey2]
					|| vid == PlayerInfo[playerid][pVehKey3]
					|| vid == PlayerInfo[playerid][pVehKey4]
					|| vid == PlayerInfo[playerid][pVehKey5])
					{
					    SCM(playerid, -1, "{62F6B8}- Voce possui a chave deste veiculo, tenha um otimo dia!");

					}
					else
					{
					    if(VeiculoInfo[vid][vAlarme] == true)
                        {
					        SetVehicleParams(VeiculoInfo[vid][vVeiculo], 2, 1);
					        SetTimerEx("DesligarAlarmeCar", 80000, false, "i", VeiculoInfo[vid][vVeiculo]);

							format(str, sizeof(str), " - ALARME: Este carro e de %s e voce nao tem a chave.", VeiculoInfo[vid][vDono]);
							SCM(playerid, Vermelho, str);
                            return 1;
						}
						else {
                            format(str, sizeof(str), "{A1E3F2}Este e o veiculo de: %s, e voce nao tem a chave.", VeiculoInfo[vid][vDono]);
							SCM(playerid, -1, str);
                            SetVehicleEngineState(VeiculoInfo[vid][vVeiculo], 0);
                            return 1;
						}
					}
				}
			}*/
		}


		if(model == 408)
        {
			if(PlayerInfo[ playerid ][ pEmprego ] != Lixeiro && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL)
            {
			    RemovePlayerFromVehicle(playerid);
			    ErroMSG(playerid, "Voce nao e um Lixeiro, portanto nao pode entrar neste veiculo!");
			}
			else
			{
			    if(!TrashCheck[ playerid ]){
					SCM(playerid, -1, "Para iniciar uma rota digite '/iniciarrota'");
				}
			}
		}

		if(model == 431)
        {
			for(new veiculo = 0; veiculo < sizeof(Onibus); veiculo++){
				if(GetPlayerVehicleID(playerid) == Onibus[veiculo]){
					if(PlayerInfo[ playerid ][ pEmprego ] != MOnibus){
			            RemovePlayerFromVehicle(playerid);
						ErroMSG(playerid, "Voce nao e um Motorista de Onibus, portanto nao pode entrar neste veiculo!");
					}
					else if(!OnibusRoute[ playerid ]) SCM(playerid, -1, "Para iniciar uma rota digite '/iniciarrota'");
				}
			}
		}

        if(model == 525)
        {
			if(PlayerInfo[ playerid ][ pEmprego ] != Mecanico && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
		        RemovePlayerFromVehicle(playerid);
				ErroMSG(playerid, "Voce nao e um Mecanico, portanto nao pode entrar neste veiculo!");
			}
		}

        if(model == 416){
			if(PlayerInfo[ playerid ][ pEmprego ] != Paramedico && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
			    RemovePlayerFromVehicle(playerid);
			    ErroMSG(playerid, "Voce nao e um Paramedico, portanto nao pode entrar neste veiculo!");
			}
		}
		if(model == 578){
			if(EmpregoDuty[playerid] != Lenhador && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
            	RemovePlayerFromVehicle(playerid);
				ErroMSG(playerid, "Voce nao e um Lenhador ou nao esta em servico, portanto nao pode entrar neste veiculo!");
				return true;
			}
			else {
			    if(parceiroLenhador[playerid] != INVALID_PLAYER_ID) SCM(playerid, -1, "| Lenhador(a) | - Para iniciar o trabalho, espere por um parceiro(a) para lhe ajudar.");
			}
		}

		/*Loop(v, sizeof(VehCarteiros))
        {
			if(GetPlayerVehicleID(playerid) == VehCarteiros[v] && PlayerInfo[ playerid ][ pEmprego ] != Carteiro && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL)
            {
	            RemovePlayerFromVehicle(playerid);
				ErroMSG(playerid, "Voce nao e um Carteiro, portanto nao pode entrar neste veiculo!");
				return true;
			}
		}

		if(IsTaxiCar(playerid))
        {
            if(PlayerInfo[ playerid ][ pEmprego ] != Taxista && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL)
            {
                if(EmpregoDuty[playerid] != Taxista)
                {
		        	RemovePlayerFromVehicle(playerid);
					ErroMSG(playerid, "Voce nao e um Taxista, portanto nao pode entrar neste veiculo!");
					return true;
				}
			}
		}*/

		// Veiculos das Orgs
		// ==========================================

		if(model == 596 || model == 597 || model == 598 || model == 599 || model == 427 || model == 490 || model == 497 || model == 523 || model == 528 || model == 601){
			if(PlayerInfo[ playerid ][ pOrg ] != PM && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
	            RemovePlayerFromVehicle(playerid);
				ErroMSG(playerid, "Este veiculo e de uso exclusivo da policia, portanto nao pode pegar esse veiculo.");
				return true;
			}
		}

		// ===========================================================
		Loop(id, sizeof(AutoVeiculosA)){
        	if(Veh == AutoVeiculosA[id]){
			    if(CNHTest[ playerid ] != 1 && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
	                RemovePlayerFromVehicle(playerid);
	                ErroMSG(playerid, "Voce nao esta em um exame da auto escola, portanto nao pode entrar neste veiculo!");
				}
			}
		}

		Loop(id, sizeof(AutoVeiculosB)){
			if(Veh == AutoVeiculosB[id]){
			    if(CNHTest[ playerid ] != 2 && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
	                RemovePlayerFromVehicle(playerid);
	                ErroMSG(playerid, "Voce nao esta em um exame da auto escola, portanto nao pode entrar neste veiculo!");
				}
			}
		}
		Loop(id, sizeof(AutoVeiculosD)){
			if(Veh == AutoVeiculosD[id]){
			    if(CNHTest[ playerid ] != 3 && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
	                RemovePlayerFromVehicle(playerid);
	                ErroMSG(playerid, "Voce nao esta em um exame da auto escola, portanto nao pode entrar neste veiculo!");
				}
			}
		}
		Loop(id, sizeof(AutoVeiculosE)){
			if(Veh == AutoVeiculosE[id]){
			    if(CNHTest[ playerid ] != 4 && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL){
	                RemovePlayerFromVehicle(playerid);
	                ErroMSG(playerid, "Voce nao esta em um exame da auto escola, portanto nao pode entrar neste veiculo!");
				}
			}
		}
	}

	/*	Funcao ao mudar o status para A Pe
	===========================================================*/

	if( newstate == PLAYER_STATE_ONFOOT )
    {
		InBus[ playerid ] = 0;

	    /*ForPlayers(i)
		{
			if(GetPlayerState(i) != PLAYER_STATE_SPECTATING) continue;

			if(Espectype[i] == ADMIN_SPEC_TYPE_VEHICLE && PlayerEspec[i] == playerid){
				PlayerSpectatePlayer(i, playerid);
				Espectype[i] = ADMIN_SPEC_TYPE_PLAYER;
			}
		}*/

        for(new TextId = 0; TextId < sizeof(PlayerTD); TextId++) PlayerTextDrawHide(playerid, PlayerTD[TextId][playerid]);
		KillTimer(carVelocimetro[playerid]);

		if(oldstate == PLAYER_STATE_DRIVER)
        {
			if(EmpregoDuty[ playerid ])
            {
				if(PlayerInfo[ playerid ][ pEmprego ] == MOnibus  && OnibusRoute[ playerid ] != 0)
                {
					RotaBusFailed[ playerid ] = true;
					RotaBusFailedTemp[ playerid ] = 30;
				}
				else if(PlayerInfo[ playerid ][ pEmprego ] == Lixeiro && TrashRoute[ playerid ] != 0){
					RotaFailed[ playerid ] = true;
					RotaFailedTemp[ playerid ] = 30;
				}
			}
		}
		if( oldstate == PLAYER_STATE_PASSENGER) {
		    if(InTaxi[ playerid ]){

       		    static zString[ 80 ];
				format(zString, sizeof(zString), "* Voce saiu do taxi e pagou $%s ao taxista.", FormatNumber(PrecoTotalCorrida[playerid]));
				SCM(playerid, Purple, zString);

				format(zString, sizeof(zString), "* %s pagou R$%s pelo seu servico.", GetNameEx(playerid), FormatNumber(PrecoTotalCorrida[playerid]));
				SCM(TaxiOwn[ playerid ], Purple, zString);

 				ActionPlayerGrana(playerid, "-", PrecoTotalCorrida[playerid], 1);
 				ActionPlayerGrana(TaxiOwn[ playerid ], "+", PrecoTotalCorrida[playerid], 1);

 				PlayerTextDrawHide(playerid, TextTaximetro[ playerid ]);
 				PlayerTextDrawHide(TaxiOwn[ playerid ], TextTaximetro[ playerid ]);

 				InTaxi[ playerid ]=false;

                Cliente[TaxiOwn[ playerid ]] = INVALID_PLAYER_ID;
                PrecoTotalCorrida[playerid] = 0;
			    TaxiOwn[playerid] = INVALID_PLAYER_ID;
			}
		}
	}
	return 1;
}

//Km por litro de cada veiculo
new KmLitro[] = {
    10,
    15,
    11,
    15,
    20,
    16,
    15,
    15,
    16,
    14,
    18,
    12,
    17,
    14,
    11,
    14,
    13,
    10,
    22,
    15,
    15,
    19,
    15,
    13,
    100, //( hunter)
    17,
    16,
    15,
    13,
    18,
    15,
    100,// ( Rhino)
    11,
    14,
    100,// ( trailer
    17,
    16,
    14,
    15,
    18,
    100,// ( RC Bandit)
    16,
    18,
    15,
    17,
    13,
    100,// ( seasparrow, helicoptero que atira)
    18,
    100, // ( trem)
    100, // ( trailer
    12,
    16,
    18,
    17,
    19,
    20,
    20,
    16,
    16,
    14,
    25,
    35,
    30,
    100,  //( rc baron)
    100,  //( rc raider)
    17,
    17,
    26,
    17,
    13,
    15,
    17,
    21,
    19,
    17,
    100,// ( rustler, aviao qeu atira
    12,
    23,
    16,
    14,
    100,// ( bike, nao tem gasolina
    17,
    16,
    22,
    20,
    19,
    17,
    17,
    15,
    18,
    19,
    16,
    21,
    12,
    14,
    15,
    18,
    20,
    21,
    16,
    100,// ( rc golbin)
    11,
    12,
    14,
    18,
    11,
    16,
    12,
    100,// ( bike, nao tem gasolina)
    100,// ( bike, nao tem gasolina)
    21,
    19,
    13,
    17,
    16,
    16,
    16,
    15,
    12,
    100,// ( hydra )
    24,
    20,
    22,
    20,
    19,
    14,
    17,
    20,
    18,
    22,
    23,
    22,
    15,
    16,
    13,
    14,
    100,// ( trem)
    200, // ( trem )
    100, // ( trem)
    16,
    14,
    18,
    17,
    18,
    18,
    19,
    16,
    18,
    14,
    15,
    17,
    19,
    20,
    16,
    15,
    19,
    19,
    16,
    14,
    13,
    16,
    14,
    23,
    100, // ( rc tiger)
    16,
    17,
    13,
    15,
    10, //( trailer)
    100, // ( trem)
    22,
    20,
    21,
    24,
    16,
    14,
    21,
    20,
    15,
    17,
    29,
    18,
    23,
    29,
    22,
    30,
    16,
    30,
    17,
    100, // ( trailer)
    100, // ( trailer)
    21,
    24,
    100,  //( rc cam)
    25,
    20,
    20,
    29,
    22,
    15,
    24,
    17,
    16,
    13,
    12,
    17,
    15,
    100, // ( trailer)
    100, // ( trailer)
    30,  // ( escada )
    25,
    100, //( carroça)
    100 // ( trailer)
};

new Float:velokm[3];
new
    Retirada[ MAX_PLAYERS ],
    bool:Avisado[ MAX_PLAYERS ]
;

Public:VerificarComb(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    //if(IsVehSchool(playerid)) return 1;

    //if(IsPlayerInAnyVehicle(playerid) return


    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(!IsABike(playerid))
        {
            new carid = GetPlayerVehicleID(playerid); 
            combustivel[carid] = 1;

          /*  new Float:cvida;
            GetVehicleHealth(carid, cvida);
            if(cvida < 280.0)
            {
                //SetPVarInt( playerid, "AvisadoMF", 1);
                SetVehicleHealth(carid, 280.0);

                SCM(playerid, -1, "{FA9494}Motor fundido, chame um mecanico!");
                SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
            }
*/
            GetVehicleVelocity(carid, velokm[0], velokm[1], velokm[2]);
            if(floatround(((floatsqroot(((velokm[0] * velokm[0]) + (velokm[1] * velokm[1]) + (velokm[2] * velokm[2]))) * (170.0))) * 1) > 5)
            {
                if(combustivel[carid] == 0 && Avisado[playerid] == false)
                {
                    ErroMSG( playerid, "Seu combustivel acabou. Use um galao de gasolina ou chame um reboque!");
                    Avisado[playerid] = true;
                }
                if(combustivel[carid] > 0)
                {
                    Retirada[playerid]++;
                    if(Retirada[playerid] >= (KmLitro[(GetVehicleModel(carid)-400)]*13)) //13
                    {
                        combustivel[carid]--;
                        Retirada[playerid] = 0;
                        Avisado[playerid] = false;
                    }
                }
                else
                {
                    SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
                }
            }

            VerificarRadar(playerid);
            TimerComb[playerid] = SetTimerEx("VerificarComb", 200, false, "i", playerid);
        }

    } else {

        KillTimer(TimerComb[playerid]);
    }
    return 1;
}

forward DestravarRaceCP(playerid, raceid);
public DestravarRaceCP(playerid, raceid) {
	TogglePlayerDynamicRaceCP(playerid, raceid, true);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	return true;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	if(CNHTest[ playerid ] == 2)
    {
	    PlaySoundForPlayer(playerid, 1056);

		if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][0]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][0], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][1], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][1]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][1], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][2], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][2]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][2], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][3], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][3]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][3], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][4], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][4]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][4], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][5], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][5]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][5], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][6], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][6]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][6], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][7], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][7]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][7], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][8], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][8]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][8], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][9], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][9]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][9], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][10], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][10]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][10], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][11], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][11]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][11], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][12], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][12]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][12], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][13], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][13]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][13], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][14], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][14]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][14], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][15], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][15]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][15], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][16], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][16]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][16], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][17], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][17]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][17], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][18], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoB[playerid][18]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][18], false);

	        SCM(playerid, -1, "{A4EDEA}[ Auto Escola ] - Para finalizar seu exame estacione seu veiculo no local indicado!");

	    	if(GetPlayerVehicleID( playerid ) == AutoVeiculosB[0]) SetPlayerCheckpoint(playerid, 1281.4353, -1297.0328, 12.8640, 3.0);
            else if(GetPlayerVehicleID( playerid ) == AutoVeiculosB[1]) SetPlayerCheckpoint(playerid, 1281.3807, -1302.6360, 12.8640, 3.0);
            else if(GetPlayerVehicleID( playerid ) == AutoVeiculosB[2]) SetPlayerCheckpoint(playerid, 1281.4437, -1308.4022, 12.8640, 3.0);
			else if(GetPlayerVehicleID( playerid ) == AutoVeiculosB[3]) SetPlayerCheckpoint(playerid, 1281.4423, -1314.1792, 12.8640, 3.0);
			else if(GetPlayerVehicleID( playerid ) == AutoVeiculosB[4]) SetPlayerCheckpoint(playerid, 1281.4725, -1319.7344, 12.8640, 3.0);

		}
	}
	else if(CNHTest[ playerid ] == 3){
	    PlaySoundForPlayer(playerid, 1056);

		if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][0]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][0], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][1], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][1]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][1], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][2], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][2]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][2], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][3], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][3]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][3], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][4], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][4]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][4], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][5], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][5]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][5], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][6], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][6]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][6], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][7], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][7]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][7], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][8], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][8]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][8], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][9], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][9]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][9], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][10], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][10]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][10], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][11], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][11]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][11], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][12], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][12]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][12], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][13], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][13]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][13], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][14], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][14]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][14], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][15], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][15]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][15], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][16], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoD[playerid][16]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][16], false);

            new Float:cvida;
			GetVehicleHealth(GetPlayerVehicleID( playerid ), cvida);
			if(cvida < 900.0){
				CNHTest[ playerid ] = 0;
        	    ClearChatbox(playerid, 5);
        	    SCM(playerid, -1, "{A4EDEA}[ Auto Escola ] - Voce falhou no seu exame pratico motivo: veiculo danificado!");
				DesativarRacesAETD( playerid );
				SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
				SetCameraBehindPlayer(playerid);
                SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);
			}
			else {

			    CNHTest[ playerid ] = 0;

				PlayerInfo[ playerid ][ pHabD ] = 1;
				OnSalvarDados( playerid );


                SetVehicleToRespawn(GetPlayerVehicleID( playerid ));

		        ClearChatbox(playerid, 5);
			    SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Parabens pela nova categoria em sua CNH, aproveite!");
				GameTextForPlayer(playerid, "~g~Parabens", 1000, 1);

                SetCameraBehindPlayer(playerid);
                SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);

				new strcmd[600];
				strcat(strcmd, "{FFFFFF}Voce concluiu o teste de transito!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Agora sua CNH foi aprimorada!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Licenca: para veiculos de grande porte (passageiros) 'D'!\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, ".::|___ Auto Escola ___|::.", strcmd, "Confirmar", "");
                DesativarRacesAETD( playerid );
   				//DeletePlayerRaces(playerid);
			}
		}
	}
	else if(CNHTest[ playerid ] == 4){
	    PlaySoundForPlayer(playerid, 1056);

		if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][0]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][0], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][1], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][1]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][1], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][2], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][2]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][2], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][3], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][3]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][3], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][4], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][4]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][4], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][5], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][5]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][5], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][6], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][6]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][6], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][7], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][7]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][7], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][8], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][8]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][8], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][9], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][9]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][9], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][10], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][10]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][10], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][11], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][11]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][11], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][12], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][12]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][12], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][13], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][13]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][13], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][14], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][14]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][14], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][15], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][15]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][15], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][16], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][16]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][16], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][17], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][17]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][17], false);
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][18], true);
		}
		else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][18]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][18], false);
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][19], true);
	    }
	    else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][19]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][19], false);
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][20], true);
	    }

	    else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][20]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][20], false);
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][21], true);
	    }
	    else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][21]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][21], false);
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][22], true);
	    }
	    else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][22]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][22], false);
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][23], true);
	    }
	    else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][23]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][23], false);
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][24], true);
	    }
	    else if(checkpointid == RaceChecksAutoEscolaTipoE[playerid][24]) {
	        TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][24], false);

			new Float:cvida;
			GetVehicleHealth(GetPlayerVehicleID( playerid ), cvida);
			if(cvida < 900.0){
				CNHTest[ playerid ] = 0;
        	    ClearChatbox(playerid, 5);
        	    SCM(playerid, -1, "{A4EDEA}[ Auto Escola ] - Voce falhou no seu exame pratico motivo: veiculo danificado!");
                SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
				SetCameraBehindPlayer(playerid);
                SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);
                DesativarRacesAETE( playerid );
			}
			else {

			    CNHTest[ playerid ] = 0;

				PlayerInfo[ playerid ][ pHabE ] = 1;
				OnSalvarDados( playerid );


                SetVehicleToRespawn(GetPlayerVehicleID( playerid ));

		        ClearChatbox(playerid, 5);
			    SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Parabens pela nova categoria em sua CNH, aproveite!");
				GameTextForPlayer(playerid, "~g~Parabens", 1000, 1);

                SetCameraBehindPlayer(playerid);
                SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);
                DesativarRacesAETE( playerid );

				new strcmd[600];
				strcat(strcmd, "{FFFFFF}Voce concluiu o teste de transito!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Agora sua CNH foi aprimorada!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Licenca: para caminhoes/carretas de grande porte (passageiros) 'E'!\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, ".::|___ Auto Escola ___|::.", strcmd, "Confirmar", "");

   				//DeletePlayerRaces(playerid);
			}
	    }
	}
	return 1;
}


public OnPlayerEnterCheckpoint(playerid)
{
	if(Localizado[ playerid ] == true){
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, LocalizadoPos[playerid][0], LocalizadoPos[playerid][1], LocalizadoPos[playerid][2])){
		    DisablePlayerCheckpoint(playerid);
		    return true;
		}
	}
	if(PegouCervo{playerid}){
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, -1639.9047, -2233.8567, 31.4766)){
            DisablePlayerCheckpoint(playerid);
            return true;
		}
	}


	if(PlayerInfo[ playerid ][ pEmprego ] == PizzaJob && EmpregoDuty[playerid])
    {
        if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Saia do veiculo e utilize /pegarpizza proximo a moto para pegar uma pizza para a entrega!");

        if(IsPlayerAttachedObjectSlotUsed(playerid, PIZZA_INDEX))
        {
            static str[129], pay, payBonus;
            payBonus=0;

			//Pagamento
			pay = (random(50)+PAY_PIZZAJOB);

			if(routeTimer[playerid] < 30)
				payBonus = random(20);
			else
				payBonus = 0;

            //Mensagens Enviadas
            format(str,sizeof(str),"{FFFFFF}Voce ganhou {F7DC75}R$%s{FFFFFF} por realizar esta entrega.", FormatNumber(pay));
            SCM(playerid, -1, str);

            if(payBonus){
	            format(str,sizeof(str),"{FFFFFF}Bonus Salarial: {F7DC75}R$%s{FFFFFF}.", FormatNumber(payBonus));
	            SCM(playerid, -1, str);
	            PlayerInfo[playerid][pSalario] += payBonus;
			}
			ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1, 1);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, PIZZA_INDEX);
            DisablePlayerCheckpoint(playerid);
            ClearAnimations(playerid);

            DestroyDynamicActor(actorPizzaJob[playerid]);
            ClearAnimations(playerid);

            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			ActionPlayerGrana(playerid, "+", pay, 1);

			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);

        	ProxRoute(playerid);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        }
        else InfoMSG(playerid, "Pegue a pizza na moto para realizar a entrega /pegarpizza");
    }
	if(GetPVarInt(playerid, "CheckConceLS") == 1){
		DisablePlayerCheckpoint(playerid);
        DeletePVar( playerid, "CheckConceLS");
	}
    if(GetPVarInt(playerid, "CheckGPSVeh") == 1) {
        GameTextForPlayer(playerid, "~y~GPS ~r~Desligado", 2000, 1);
	    DeletePVar( playerid, "CheckGPSVeh");
		DisablePlayerCheckpoint( playerid );
	}
	if(PlayerInfo[ playerid ][ pCheckGPS ]){
        GameTextForPlayer(playerid, "~y~GPS ~r~Desligado", 2000, 1);
        DisablePlayerCheckpoint(playerid);
        PlayerInfo[ playerid ][ pCheckGPS ] = 0;
	}

    if(PlayerInfo[ playerid ][ pCheck ])
    {
        DisablePlayerCheckpoint(playerid);
        PlayerInfo[ playerid ][ pCheck ] = 0;
    }
	if(GetPVarInt(playerid, "CheckPetrol") == 1){
	    GameTextForPlayer(playerid, "~y~/descarregar ~r~caminhao", 1000, 1);
	}
	// ===== Carteiros ============
	if(PlayerInfo[ playerid ][ pEmprego ] == Carteiro){
		if(EmpregoDuty[ playerid ] == Carteiro){
		    if(CartCheck[ playerid ]){
			   	if(IsPlayerInRangeOfPoint( playerid, 10.0, CarteiroLS[RotaSelecionada[playerid]][0], CarteiroLS[RotaSelecionada[playerid]][1], CarteiroLS[RotaSelecionada[playerid]][2])){
                    GameTextForPlayer(playerid, "~y~/entregar", 1000, 1);
				}
			}
		}
	}
	// ===========================
	if(CNHTest[ playerid ]){
	    if(CNHTest[ playerid ] == 1){
			// debug - printf("CNHtest: %d | %d - %s", CNHTest[ playerid ], AutoEscolaProgresso[ playerid ], GetName(playerid));
		    PlaySoundForPlayer(playerid, 1057);
            DisablePlayerCheckpoint( playerid );

			if(AutoEscolaProgresso[ playerid ] >= 34){
                AutoEscolaProgresso[ playerid ] = 0;
				CNHTest[ playerid ] = 0;

				PlayerInfo[ playerid ][ pHabA ] = 1;
				OnSalvarDados( playerid );

				SetVehicleToRespawn(GetPlayerVehicleID( playerid ));

				if(PlayerInfo[ playerid ][ pHabB ]) SetPlayerComplet(playerid, Motorista);

		        ClearChatbox(playerid, 5);
			    SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Parabens pela nova categoria em sua CNH, aproveite!");
				GameTextForPlayer(playerid, "~g~Parabens", 1000, 1);


                SetCameraBehindPlayer(playerid);
                SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);

				new strcmd[600];
				strcat(strcmd, "{FFFFFF}Voce concluiu o teste de transito!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Agora sua CNH foi aprimorada!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Licenca: para motos e triciclos 'A'!\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, ".::|___ Auto Escola ___|::.", strcmd, "Confirmar", "");

				return true;
			}

			AutoEscolaProgresso[ playerid ]++;
	    	switch(AutoEscolaProgresso[ playerid ]){

                case 0..5: SetPlayerCheckpoint(playerid, MotoPistaTest[AutoEscolaProgresso[ playerid ]][0], MotoPistaTest[AutoEscolaProgresso[ playerid ]][1], MotoPistaTest[AutoEscolaProgresso[ playerid ]][2], 4.0);
				case 6..27: SetPlayerCheckpoint(playerid, MotoPistaTest[AutoEscolaProgresso[ playerid ]][0], MotoPistaTest[AutoEscolaProgresso[ playerid ]][1], MotoPistaTest[AutoEscolaProgresso[ playerid ]][2], 2.0);
                case 28..34: SetPlayerCheckpoint(playerid, MotoPistaTest[AutoEscolaProgresso[ playerid ]][0], MotoPistaTest[AutoEscolaProgresso[ playerid ]][1], MotoPistaTest[AutoEscolaProgresso[ playerid ]][2], 4.0);
			}
		}
		else if(CNHTest[ playerid ] == 2){
			new Float:cvida;

			GetVehicleHealth(GetPlayerVehicleID( playerid ), cvida);

			if(cvida < 900.0){
	            ClearChatbox(playerid, 5);
	            SCM(playerid, -1, "{A4EDEA}[ Auto Escola ] - Voce falhou no seu exame pratico motivo: veiculo danificado!");
				DisablePlayerCheckpoint(playerid);

				SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
				SetCameraBehindPlayer(playerid);
                SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);
			}
			else {
			    PlaySoundForPlayer(playerid, 1057);
			    SetVehicleToRespawn(GetPlayerVehicleID( playerid ));
				SetCameraBehindPlayer(playerid);

		        ClearChatbox(playerid, 5);

				PlayerInfo[ playerid ][ pHabB ] = 1;

				if(PlayerInfo[ playerid ][ pHabA ]) SetPlayerComplet(playerid, Motorista);

				OnSalvarDados( playerid );

				new strcmd[600];
				strcat(strcmd, "{FFFFFF}Voce concluiu o teste de transito!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Agora voce e um motorista legal!\n", sizeof(strcmd));
				strcat(strcmd, "{FFFFFF}Licenca: para veiculos de pequeno porte B!\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, ".::|___ Auto Escola ___|::.", strcmd, "Confirmar", "");

				DisablePlayerCheckpoint(playerid);

				//DeletePlayerRaces(playerid);
			}
			CNHTest[ playerid ] = 0;
		}
	}
	if(PlayerInfo[ playerid ][ pEmprego ] == MOnibus){
		if(EmpregoDuty[ playerid ]){
			ProximoCheckBus( playerid );
		}
	}
	if(TrashCheck[ playerid ] > 0){
		if(TrashRoute[ playerid ] == 100){
			if(TrashCheck[ playerid ] != 15){
				GameTextForPlayer(playerid, "~r~/~w~pegarlixo", 2000, 5);
			}
			else {
			    GameTextForPlayer(playerid, "~r~/~w~descarregar ~y~lixo", 2000, 5);
			}
		}
		else if(TrashRoute[ playerid ] == 200){
			if(TrashCheck[ playerid ] != 12){
				GameTextForPlayer(playerid, "~r~/~w~pegarlixo", 2000, 5);
			}
			else {
			    GameTextForPlayer(playerid, "~r~/~w~descarregar ~y~lixo", 2000, 5);
			}
		}
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

/*public OnPlayerRequestSpawn(playerid)
{
    if(IsPlayerNPC( playerid )) return 1;
    return 1;
}*/

public OnObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para usar o elevador", 0xCCCCCCAA, 1784.9822, -1302.0426, z - 0.9, 25);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}

	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid) {

	return 1;
}

public OnVehicleDamageStatusUpdate( vehicleid, playerid ) {
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid) {
    if(GetPVarInt(playerid, "Taser") == 1)
	{
	    if(weaponid == 0 || weaponid == 23)
	    {
		    ApplyAnimation(damagedid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
		    return true;
		}
    }
	return 0;
}

public OnVehicleMod(playerid,vehicleid,componentid)
{
	/*if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1649.7916, -1838.3610, 13.5452)){
	    static str[ 100 ];
		format(str, sizeof(str), "| Anti Cheater | - %s foi kickado por uso de Cheater", PlayerInfo[ playerid ][ pName ]);
		SendAdminMessage(cadm, str);
        Kick(playerid);
    }*/
	updateMoney(playerid);
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid){
    updateMoney(playerid);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    /*if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1649.7916, -1838.3610, 13.5452)){
	    static str[ 100 ];
		format(str, sizeof(str), "| Anti Cheater | - %s foi kickado por uso de Cheater", PlayerInfo[ playerid ][ pName ]);
		SendAdminMessage(cadm, str);
        Kick(playerid);
    }*/
    updateMoney(playerid);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	if(GetPlayerMenu(playerid) == MenuTCores)
    {
	    switch(row)
        {
	    	case 0:
            {
	    	    ErroMSG(playerid, "Sistema temporariamente indisponivel!");
	    	    ShowMenuForPlayer(MenuTCores, playerid);
	    	    /*SetPlayerCameraPos(playerid, 1655.4886, -1812.8424, 15.9743);
				SetPlayerCameraLookAt(playerid, 1655.5623, -1811.8424, 15.6491);

				SetPlayerPosEx( playerid, 1654.93494, -1816.42883, 12.55911, 0.0, 0, (playerid+1));
                Freeze( playerid );

   				SetVehiclePosEx(TuningVehicleID[ playerid ], 1656.3052, -1804.4642, 13.3283, 207.7799, 0, (playerid+1));

                PlayerTextDrawShow(playerid, TuningCores[ 0 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 1 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 2 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 3 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 4 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 5 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 6 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 7 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 8 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 9 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 10 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 11 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 12 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 13 ][ playerid ]);
                PlayerTextDrawShow(playerid, TuningCores[ 14 ][ playerid ]);

                SelectTextDraw(playerid, 0x306BFFFF);

				*/
			}
	        case 1:
            {
                SetPlayerCameraPos(playerid, 1655.4886, -1812.8424, 15.9743);
				SetPlayerCameraLookAt(playerid, 1655.5623, -1811.8424, 15.6491);

				SetPlayerPosEx( playerid, 1654.93494, -1816.42883, 12.55911, 0.0, 0, (playerid+1));
                Freeze( playerid );

   				SetVehiclePosEx(TuningVehicleID[ playerid ], 1656.3052, -1804.4642, 13.3283, 207.7799, 0, (playerid+1));


				ShowPlayerDialog( playerid, DIALOG_TUNING_CORES, DIALOG_STYLE_INPUT, "{F2F4F3}..:: Cores Veicular ::..", "{F2F4F3}Digite os ID's que voce deseja adicionar ao veiculo,\na funilaria tem preco fixo de {51FE8B}R$500,00 {F2F4F3}pela pintura,\ncoloque os ID's das cores escolhidas, lembrando que os id's alternam entre 0-255\nvoce pode consultar a lista de cores a qualquer momento acessando nosso forum\n"#SV_SITE" ou Wiki SA-MP\n\n\nCor ID:", "Confirmar", "Cancelar" );

			}
	    }
	    return true;
	}
	if(GetPlayerMenu(playerid) == MenuTuning) {

        switch(row){
            //Cores
            case 0: {

                ShowMenuForPlayer(MenuTCores, playerid);
            }
            //Nitro
            case 1: {
                if(IsAMotoEx(TuningVehicleID[ playerid ])) {
				    ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
					ShowMenuForPlayer(MenuTuning, playerid);
					return true;
				}
				else if(GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_NITRO) != 0){
					ErroMSG(playerid, "Este veiculo ja possui nitro instalado!");
					ShowMenuForPlayer(MenuTuning, playerid);
					return true;
				}

                TuningCompraID[ playerid ] = COMPRA_NITRO;
                ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um nitro em um veiculo e de {59FC85}R$ 2,600\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
			}
            //Rodas
            case 2: {
                if(IsAMotoEx(TuningVehicleID[ playerid ])) {
				    ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
					ShowMenuForPlayer(MenuTuning, playerid);
					return true;
				}
				else {
	                SetPlayerCameraPos(playerid, 1655.6394, -1824.6425, 14.5684);
					SetPlayerCameraLookAt(playerid, 1655.7416, -1825.6398, 14.5532);

					SetPlayerPosEx( playerid, 1654.97778, -1821.43469, 12.56003, 0.0, 0, (playerid+1));

   					SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

	                ShowMenuForPlayer(MenuTRodas, playerid);
				}
            }
            //Som
            case 3:{
            /*    Loop(Vid, sizeof(VeiculoInfo)) {
					if(GetPlayerVehicleID( playerid ) == VeiculoInfo[Vid][vVeiculo]){
						if(VeiculoInfo[Vid][vRadio] == true){
						    ErroMSG(playerid, "Este veiculo ja possui um radio!");
							ShowMenuForPlayer(MenuTuning, playerid);
							return true;
						}
						else {

							TuningCompraID[ playerid ] = COMPRA_RADIO;
*/
                	   ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um radio veicular e de {59FC85}R$ 900\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
						//}
					//}
				//}
			}
            //Suspensao
            /*case 4: {
                if(IsAMotoEx(TuningVehicleID[ playerid ])) {
				    ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
					ShowMenuForPlayer(MenuTuning, playerid);
					return true;
				}
				else if(GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_HYDRAULICS) != 0){
					ErroMSG(playerid, "Este veiculo ja possui suspensao hidraulica instalada!");
					ShowMenuForPlayer(MenuTuning, playerid);
					return true;
				}

                TuningCompraID[ playerid ] = COMPRA_SUSPENSAO;

                ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de uma suspensao hidraulica no veiculo e de {59FC85}R$ 4,300\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
			}*/
            //Alarme
           /* case 5:{
                Loop(Vid, sizeof(VeiculoInfo)) {
					if(GetPlayerVehicleID( playerid ) == VeiculoInfo[Vid][vVeiculo]){
						if(VeiculoInfo[Vid][vAlarme] == true){
						    ErroMSG(playerid, "Este veiculo ja possui um alarme instalado!");
							ShowMenuForPlayer(MenuTuning, playerid);
							return true;
						}
						else {

							TuningCompraID[ playerid ] = COMPRA_ALARME;

                			ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um alarme veicular e de {59FC85}R$ 3,900\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
						}
					}
				}
            }*/
            //Neon
            /*case 6: {
                if(IsAMotoEx(TuningVehicleID[ playerid ])) {
				    ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
					ShowMenuForPlayer(MenuTuning, playerid);
					return true;
				}
                ErroMSG(playerid, "Temporariamente desativado!");
				ShowMenuForPlayer(MenuTuning, playerid);*/

				/*SetPlayerCameraPos(playerid, 1655.6394, -1824.6425, 14.5684);
				SetPlayerCameraLookAt(playerid, 1655.7416, -1825.6398, 14.5532);

				SetPlayerPosEx( playerid, 1654.97778, -1821.43469, 12.56003, 0.0, 0, (playerid+1));

   				SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                TuningCompraID[ playerid ] = COMPRA_NEON;
                ShowPlayerDialog(playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_LIST, "Neons -  R$ 3200", "{FF0000}Vermelho\n{00FFFF}Azul\n{00D700}Verde\n{FFFF00}Amarelo\n{9955DE}Rosa\n{FFFFFF}Branco\n{660000}Remover Neom", "Instalar", "Voltar");

				return true;
			}*/
            //Localizador GPS
            /*case 7:{
                Loop(Vid, sizeof(VeiculoInfo)) {
					if(GetPlayerVehicleID( playerid ) == VeiculoInfo[Vid][vVeiculo]){
						if(VeiculoInfo[Vid][vGPS] == true){
						    ErroMSG(playerid, "Este veiculo ja possui um localizador gps instalado!");
							ShowMenuForPlayer(MenuTuning, playerid);
							return true;
						}
						else {

							TuningCompraID[ playerid ] = COMPRA_GPS;

                			ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um Localizador-GPS e de {59FC85}R$ 5,000\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
						}
					}
				}
			}
      */  }
        return true;
	}
	if(GetPlayerMenu(playerid) == MenuTRodas){
        TuningCompraID[ playerid ] = COMPRA_RODAS;

	    switch(row) {
			case 0: { //Import 1082
				AddVehicleComponent(TuningVehicleID[ playerid ], 1082);
				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 1: { //Atomic 1085
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1085);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 2: { //Mega 1074
                AddVehicleComponent(TuningVehicleID[ playerid ], 1074);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 3: { //Shadow 1073
                AddVehicleComponent(TuningVehicleID[ playerid ], 1073);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 4: { //Grove 1081
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1081);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 5: { //Dollar 1083
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1083);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 6: { //Twist 1078
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1078);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 7: { //Cutter 1079
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1079);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 8: { // Rimshine 1075
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1075);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 9: { // Wires 1076
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1076);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 10: { // Classic 1077
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1077);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
			case 11: { // Switch 1078
			    AddVehicleComponent(TuningVehicleID[ playerid ], 1078);

				ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
			}
		}
		return true;
	}
    return 1;
}

new tuningposid;
public OnPlayerExitedMenu(playerid)
{
    if(GetPlayerMenu(playerid) == MenuTRodas)
    {
        HideMenuForPlayer(MenuTRodas, playerid);

        SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
		SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

		SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));

        ShowMenuForPlayer( MenuTuning, playerid);

        TuningCompraID[ playerid ] = 0;
	    return true;
	}
	else if(GetPlayerMenu(playerid) == MenuTCores)
    {
	    SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
		SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

		SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
		SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

        Freeze( playerid );

	    HideMenuForPlayer(MenuTCores, playerid);
	    ShowMenuForPlayer(MenuTuning, playerid);
	}
	else if(GetPlayerMenu( playerid ) == MenuTuning){

	    HideMenuForPlayer(MenuTuning, playerid);

        fadeIn( playerid, 900);
		SetTimerEx("SairMenuTuning", 1000, false, "i", playerid);

		SendClientMessage(playerid, -1, "{EEA8E8}Voce saiu do menu!");
		return true;
	}
	UnFreeze( playerid );
    SendClientMessage(playerid, -1, "{EEA8E8}Voce saiu do menu!");
    return true;
}

Public:SairMenuTuning( playerid ){

    SetTimerEx("Fader", 1000, false, "i", playerid);

	if(tuningposid == 0){
    	SetVehiclePosEx(TuningVehicleID[ playerid ], 1647.5485, -1829.9293, 13.3176, 89.9400, 0, 0);
    	tuningposid++;
	}
	else if(tuningposid == 1){
    	SetVehiclePosEx(TuningVehicleID[ playerid ], 1646.1450, -1838.1821, 13.3176, 87.6600, 0, 0);
    	tuningposid++;
	}
	else if(tuningposid == 2){
    	SetVehiclePosEx(TuningVehicleID[ playerid ], 1651.6382, -1824.4523, 13.3176, 121.2600, 0, 0);
    	tuningposid++;
	}
	else if(tuningposid == 3){
    	SetVehiclePosEx(TuningVehicleID[ playerid ], 1656.3052, -1804.4642, 13.3283, 207.7799, 0, 0);
    	tuningposid = 0;
	}
    SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, 0);
	SetCameraBehindPlayer( playerid );
	PutPlayerInVehicle(playerid, TuningVehicleID[ playerid ], 0);
    TuningCompraID[ playerid ] = 0;

    UnFreeze( playerid );

	return true;
}

Public:Fader(id) return fadeOut( id, 2000);

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    ForPlayers(i){
		if(GetPlayerState(i) != PLAYER_STATE_SPECTATING) continue;

		if(Espectype[i] == ADMIN_SPEC_TYPE_PLAYER && PlayerEspec[i] == playerid){
			SetPlayerInterior(i, newinteriorid);
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if ( newkeys == KEY_SUBMISSION )
    {
		printf("O PLAYER %d apertou a tecla de submission", playerid);
	}
   	if ( newkeys == KEY_CROUCH && IsPlayerInAnyVehicle(playerid))
    {
		callcmd::abastecer(playerid);
	}

/*	if(IsPlayerInAnyVehicle(playerid))
	{
	   	if(!VoziloJeBicikla(GetVehicleModel(GetPlayerVehicleID(playerid))))
	   	{
			new Float: ST[3];
			GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
			new keys, ud, lr;
		  	GetPlayerKeys(playerid, keys, ud, lr);
		  	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		  	{
		   		if(keys == KEY_JUMP)
		   		{
				   	PlayerTextDrawSetString(playerid, PlayerTD[13][playerid], "~r~R");
				   	PlayerTextDrawSetString(playerid, PlayerTD[12][playerid], "~w~D");
				   	PlayerTextDrawSetString(playerid, PlayerTD[14][playerid], "~w~N");
				}
				else if(keys == KEY_SPRINT)
		   		{
				   	PlayerTextDrawSetString(playerid, PlayerTD[13][playerid], "~w~R");
				   	PlayerTextDrawSetString(playerid, PlayerTD[12][playerid], "~r~D");
				   	PlayerTextDrawSetString(playerid, PlayerTD[14][playerid], "~w~N");
				}
		   		if(Pos[0] == 0.0 && Pos[1] == 0.0 && Pos[2] == 0.0)
		   		{
				   	PlayerTextDrawSetString(playerid, PlayerTD[13][playerid], "~w~R");
				   	PlayerTextDrawSetString(playerid, PlayerTD[12][playerid], "~w~D");
				   	PlayerTextDrawSetString(playerid, PlayerTD[14][playerid], "~r~N");
				}
		   	}
	   	}
	}*/

	if(PRESSED(KEY_FIRE))
    {
        if(GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_SMOKE_CIGGY && gettime() > GetPVarInt(playerid, "TempoDrug")){

            if(UsandoDrogas[ playerid ]){
				if(GetPVarInt(playerid, "UsouDorgas") >= 2){
					//randomizar a possibilidade de adiquirir uma overdose ao usar droga!
					static rand;
					rand = random(5);

					if(rand > 2){

					    if(GetPlayerVida(playerid) > 10.0) SetPlayerVida(playerid, (GetPlayerVida(playerid)-10));

					    SetPlayerWeather(playerid, -66);
	                	SetPlayerDrunkLevel(playerid, 10000);
	                	SetPlayerTime(playerid,12,00);

                        SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_NONE);
	                	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

	                	GameTextForPlayer(playerid, "~r~Seu organismo nao suportou e voce entrou em overdose!",3500,5);
	                	SetTimerEx("P_Efeito", TSegundos(50), false, "d", playerid);


	                	DrogasUP[ playerid ] = 0;
						UsandoDrogas[ playerid ] = false;

						return true;
					}
				}

                if(GetPlayerVida(playerid)+1 > 100)
					SetPlayerColete(playerid, (GetPlayerColete(playerid)+1.5));
               	else SetPlayerVida(playerid, (GetPlayerVida(playerid)+1.5));

				DrogasUP[ playerid ]++;

				if(DrogasUP[ playerid ] >= 5){

					SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_NONE);

					DrogasUP[ playerid ] = 0;
					UsandoDrogas[ playerid ] = false;
					SetPVarInt(playerid, "UsouDorgas", (GetPVarInt(playerid, "UsouDorgas")+1));
				}
				SetPVarInt(playerid, "TempoDrug", gettime() + 1);
			}
		}
		/*======================== Lenhadores ==================================*/
		else if(GetPlayerWeapon( playerid ) == 9)
        {
			if(!PodeClicar[playerid] && EmpregoDuty[ playerid ] == Lenhador && playerCutting[playerid]){

				 Loop(tid, MAX_TREE){
					if(IsPlayerInRangeOfPoint(playerid, 5.0, treeLumb[tid][t_posx], treeLumb[tid][t_posy], treeLumb[tid][t_posz])){
						ProgressoCorte[ playerid ]+=5;
						PodeClicar[ playerid ] = true;
						SetPlayerProgressBarValue(playerid, ProgressCorte[ playerid ], ProgressoCorte[playerid]);

		                if(ProgressoCorte[ playerid ] >= 60){

							CortandoArvore{ playerid } = 0;

							static Float:p_Pos[3];
							GetPlayerPos(playerid, p_Pos[0], p_Pos[1], p_Pos[2]);

							DestroyPlayerProgressBar(playerid, ProgressCorte[playerid]);
		                    PlayerTextDrawHide(playerid, TextLenhadores[playerid]);

							KillTimer(TimerCorte[ playerid ]);

							DestroyDynamicObject(treeCuttingId[tid]);
                            treeCuttingId[tid] = CreateDynamicObject(848, treeLumb[tid][t_posx], treeLumb[tid][t_posy], (treeLumb[tid][t_posz]+0.500), 0.0, 0.0, 0.0);

                            PosSlices[playerid][ 0 ] = p_Pos[0] = (p_Pos[0]+2.0);// Madeiras irem para o lado do player
                            PosSlices[playerid][ 1 ] = p_Pos[1] = (p_Pos[1]-3.0);// Madeiras irem para o lado do player
                            PosSlices[playerid][ 2 ] = p_Pos[2] = (p_Pos[2]-0.7); //Madeiras ficarem no chao cortadas
                            cuttingTreeId[playerid] = tid;

                            DestroyPlayerProgressBar(playerid, ProgressCorte[playerid]);

							objTreeSlices[tid][0] = CreateDynamicObject(1463, p_Pos[0], p_Pos[1], p_Pos[2], 0.0, 0.0, 0.0);
							objTreeSlices[tid][1] = CreateDynamicObject(1463, p_Pos[0], p_Pos[1], (p_Pos[2]+0.600), 0.0, 0.0, 0.0);
							objTreeSlices[tid][2] = CreateDynamicObject(1463, p_Pos[0], p_Pos[1], (p_Pos[2]+1.200), 0.0, 0.0, 0.0);
							objTreeSlices[tid][3] = CreateDynamicObject(1463, p_Pos[0], p_Pos[1], (p_Pos[2]+1.800), 0.0, 0.0, 0.0);

                            SCM(playerid, -1, "{96D76E}[ {E8EEF0}Emprego {96D76E}] - {F5F6EC}Madeiras cortadas, va ate as madeiras e aperte a tecla ALT-Esquerdo ou /pegarmadeiras.");

							//Madeiras no chao
							QuantSlices[playerid] = 4;

                            DestroyPlayerProgressBar(playerid, ProgressCorte[playerid]);

                            retrieveTreeTemp[tid] = 20;
                            Retrievetree(tid);
							retrieveTreeTimer[tid] = SetTimerEx("Retrievetree", TMinutos(1), true, "d", tid);
						}
					}
				}
			}
		}
        return 1;
		//======================================================================
	}

	if(newkeys == KEY_WALK)
    {

	    /*print("\n\n\n================= DEBUG ========================\n\n");
	    printf("Nome: 				%s", GetName(playerid));
	    printf("EmpregoDuty: 		%d", EmpregoDuty[ playerid ]);
	    printf("QuantSlices: 		%d", QuantSlices[ playerid ]);
		printf("VehiclePolSize: 	%d", GetVehiclePoolSize());
		printf("Special Action: 	%d", GetPlayerSpecialAction(playerid));
		printf("playercutting:		%b", playerCutting[playerid]);*/


		if(EmpregoDuty[ playerid ] == Lenhador)
        {
		    //if(playerCutting[playerid] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
            if(playerCutting[playerid] == true) //&& GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
            {   
                /*new vid;
                Loop(vid, (GetVehiclePoolSize()+1))
                {
					if(GetVehicleModel(vid) != 578) continue;

					new Float:vPos[3];
					GetVehiclePos(vid, vPos[0], vPos[1], vPos[2]);

					if(IsPlayerInRangeOfPoint(playerid, 3.0, vPos[0], vPos[1], vPos[2]))
                    {
                        QuantSlices[playerid]--;

						ApplyAnimationEx(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
					    RemovePlayerAttachedObject(playerid, SlotTrabalhadores);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						AttachSliceToVehicle(playerid, vid);

						if(QuantSlices[ playerid ] < 1){
							playerCutting[playerid] = false;
						}
					}
				}*/
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, PosSlices[ playerid ][ 0 ], PosSlices[ playerid ][ 1 ], PosSlices[ playerid ][ 2 ])){

				SetPlayerAttachedObject(playerid, SlotTrabalhadores, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);

				ApplyAnimationEx(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				//StopLoopingAnim(playerid)  << para cancelar o anime

				/*switch(QuantSlices[ playerid ]){
					case 0: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][3]), QuantSlices[ playerid ]++;
					case 1: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][2]), QuantSlices[ playerid ]++;
					case 2: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][1]), QuantSlices[ playerid ]++;
					case 3: {
						DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][0]);
						QuantSlices[ playerid ]=0;
						PosSlices[ playerid ][ 0 ] = PosSlices[ playerid ][ 1 ] = PosSlices[ playerid ][ 2 ] = 0.0;
					}
				}*/
				switch(QuantSlices[ playerid ]){
					case 4: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][3]);
					case 3: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][2]);
					case 2: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][1]);
					case 1: {
						DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][0]);
						PosSlices[ playerid ][ 0 ] = PosSlices[ playerid ][ 1 ] = PosSlices[ playerid ][ 2 ] = 0.0;
					}
				}
				if(QuantSlices[ playerid ] > 3)
                {
                    SCM(playerid, -1, "{96D76E}[ {E8EEF0}Emprego {96D76E}] - {F5F6EC}Leve a madeira ate o caminhao e Aperte o ALT-Esquerdo ou /colocarmadeiras!");
			        SCM(playerid, -1, "{96D76E}[ {E8EEF0}Emprego {96D76E}] - {F5F6EC}Depois de carregar o caminhao, venda no checkpoint marcado no mapa.");
                    SetPlayerCheckpoint(playerid, -2028.781982,-2396.301513,30.625000, 5.0);
                }
            }
			return true;
		}
	    //================ Lenhadores ==============================


	    //==========================================================
   		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return true;

		new
			Float:xPos[3]
		;

		GetPlayerPos( playerid, xPos[0], xPos[1], xPos[2]);

		Loop(wid, MAX_WEAPONS){

			if(WeaponData[wid][w_Ativa] == false) continue;

			if(!IsPlayerInRangeOfPoint(playerid, 1.0, WeaponData[wid][w_PosX], WeaponData[wid][w_PosY], WeaponData[wid][w_PosZ])) continue;

			static str[ 500 ];
			format(str, sizeof str, "Deseja guardar um(a) %s com %i balas?", ItensDrop[WeaponData[wid][w_ArmaID]][i_Name], WeaponData[wid][w_Balas]);
            ShowPlayerDialog( playerid, CRAFT_MENU, DIALOG_STYLE_MSGBOX, "Item", str, "Pegar", "Deixar");

            SetPVarInt(playerid, "CraftLoop", wid);
		    break;
		}
        return 1;
	}
    new tmp[128];

    if(newkeys == KEY_CROUCH)
    {
		new
		    string[ 129 ]
		;

		fAutoC[playerid] = 0;

		if(IsPlayerNPC(playerid))
        {
            new npcvehicle = GetPlayerVehicleID(playerid);
            if(npcvehicle == NPCBlueBus)
            {
                if(IsPlayerInRangeOfPoint(playerid, 100, 2868.9033,-1416.4062,11.0131))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Easter Beach.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 2636.3242,-1693.125,10.9544))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Stadium LS.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 2243.8457,-1725.9121,13.5960))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Academia LS.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 1948.3310,-1454.3525,13.5960))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Hospital (1) LS.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 1571.0644,-2188.0107,13.6260))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Aeroporto Internacional de Los Santos.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 1712.9423,-1818.7148,13.6260))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Taxi");
                }
                new
					Float:busx,
					Float:busy,
					Float:busz
				;
                GetVehiclePos(NPCBlueBus, busx, busy, busz);

				ForPlayers(i){
					if(IsPlayerInRangeOfPoint(i, 10, busx, busy, busz))
	                {
                        SendClientMessage(i, OffBranco, string);
                        PlayerPlaySound(i, 1147, 0.0, 0.0, 0.0);
                    }
				}
            }
            else if(npcvehicle == NPCBlackBus)
            {
                if(IsPlayerInRangeOfPoint(playerid, 100, 1567.0966,-1725.4755,13.6260))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Departamento de policia.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 1503.9716,-1027.7617,23.7701))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Banco LS.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 1188.8359,-1354.6279,13.6483))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: All Saints Hospital.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 861.7125,-1313.3009,13.6260))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Market Stacao de trem.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 393.6944,-1766.2702,5.6197))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Santa Maria Beach.");
                }
                else if(IsPlayerInRangeOfPoint(playerid, 100, 1705.5898,-1805.8476,13.5300))
                {
                    format(string, sizeof(string), "[BPS Bus] Parada: Taxi.");
                }

                new
					Float:busx,
					Float:busy,
					Float:busz
				;
                GetVehiclePos(NPCBlackBus, busx, busy, busz);

				ForPlayers(i){
					if(IsPlayerInRangeOfPoint(i, 10, busx, busy, busz))
	                {
                        SendClientMessage(i, OffBranco, string);
                        PlayerPlaySound(i, 1147, 0.0, 0.0, 0.0);
                    }
				}
			}
        }
        return 1;
    }

    if(PRESSED(KEY_NO))
    {
        /*if(GetPlayerState( playerid ) == PLAYER_STATE_DRIVER)
        {
	        callcmd::farol(playerid);
	        return true;
		}*/

        callcmd::painelveiculo( playerid );
        return 1;
	}


    if((newkeys == KEY_YES) )
    {
        if(GetPlayerState( playerid ) == PLAYER_STATE_DRIVER)
		{
			callcmd::motor(playerid);
			return true;
		}

		new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)
		{
	        ShowElevatorDialog(playerid);
	        return true;
		}
		else
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~w~Elevador Chamado", 3500, 4);
					return true;
				}
		    }
		}


       	//Caixas Eletronicos
		Loop(i, sizeof(caixaEletronico)){
			if(IsPlayerInRangeOfPoint( playerid, 3.0, caixaEletronico[i][cx], caixaEletronico[i][cy], caixaEletronico[i][cz] )) {
				ShowPlayerDialog(playerid, DIALOG_CAIXA_HOME, DIALOG_STYLE_LIST, "Caixa Eletronico", "{F5D310}>{FFFFFF} Saldo da Conta Corrente\n{FF0000}>{FFFFFF} Deposito em Conta Corrente\n{12A402}>{FFFFFF} Saque", "Escolher", "Fechar");
                SCM(playerid, Verde, "Voce esta vendo o menu do Caixa Eletronico !");
                PlaySoundForPlayer(playerid, 1052);
				return true;
			}
		}
		Loop(i, sizeof(PickupFix) ) {
			if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupFix[i][Px], PickupFix[i][Py], PickupFix[i][Pz])){
			    if(PickupFix[i][MenuID] == 3){
					OpenPlayerMenu(playerid, PickupFix[i][MenuID]);
					SCM(playerid, Verde, "Voce esta vendo o menu do Caixa Eletronico !");
     				return true;
				}
			}
		}
		Loop(i, sizeof(PickupEmprego) ) {
            if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupEmprego[i][Px], PickupEmprego[i][Py], PickupEmprego[i][Pz])){
                if(PickupEmprego[i][MenuID] == PlayerInfo[ playerid ][ pEmprego ])
                {
					callcmd::trabalhar( playerid );
					return true;
				}
			}
		}
		Loop(i, sizeof(PickupOrg) ) {
            if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupOrg[i][Px], PickupOrg[i][Py], PickupOrg[i][Pz])){
                if(PickupOrg[i][MenuID] == PlayerInfo[ playerid ][ pOrg ]){
					callcmd::batercartao( playerid );
					return true;
				}
			}
		}

        Loop(i, sizeof(VehProf) )
        {
            if(IsPlayerInRangeOfPoint( playerid, 3.0, VehProf[i][veX], VehProf[i][veY], VehProf[i][veZ]))
            {
                SpawnVehProf(playerid, VehProf[i][veMenu]);
                return 1;
            }
        }

        callcmd::inventario(playerid);
        return 1;
	}

	if((newkeys == KEY_SECONDARY_ATTACK) ) {
        Loop(i, sizeof(PickupFix) ) {
			if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupFix[i][Px], PickupFix[i][Py], PickupFix[i][Pz])){
				OpenPlayerMenu(playerid, PickupFix[i][MenuID]);
				return true;
			}
		}

		// ==============

		/* ========================================================
		Sistema de entradas Pickup
		-----------------------------------------------------------*/

        /*if(IsPlayerInRangeOfPoint(playerid, 2.0, 593.487548,-1250.483276,18.236093))
        {
            ShowPlayerDialog(playerid, DIALOG_MENU_ANDAR, DIALOG_STYLE_TABLIST, "Acesso ao andar", "1- Andar\tDetran\n2- Andar\tImobiliaria", "Confirmar", "Voltar" );
            return 1;
        }*/

		//=========================================================================
		//      				> CASSINO <
		//==============================================================

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1964.2100, 1025.1600, 992.6600) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 1959.4950, 1025.2075, 992.5411) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 1963.6646, 1009.1615, 992.6628) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 1959.3324, 1009.1357, 992.5411)){
    			ShowPlayerDialog(playerid, DIALOG_MENU_CASSINO, DIALOG_STYLE_INPUT, "Cassino", "Digite um numero e a quantidade de fichas que deseja apostar nesse numero. Ex: 21  50 \nOnde 21 e o numero escolhido e 50 e a quantidade de fichas apostadas\nCaso ganhe, seu premio sera multiplicado vezes o numero de fichas apostadas", "Confirmar", "Voltar" );
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1963.7776, 1015.5802, 992.7337) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 1958.7339, 1015.6523, 992.8322) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 1959.1542, 1020.1597, 992.7113) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, 1963.5472, 1020.1309, 992.7909)){
				ShowPlayerDialog(playerid, DIALOG_ROLAR_DADOS, DIALOG_STYLE_INPUT, "Cassino", "Digite os dois lados que ficarao para cima apos os dados serem rolados.\nEx: 2  3 \nOnde 2 indica o lado de um lado e 3 indica o lado do outro dado\nRequer no minimo 5 fichas e o premio proposto e $100000", "Confirmar", "Voltar" );
		}

		Loop(i, sizeof(PickupFixEntrada)) {
			if(IsPlayerInRangeOfPoint( playerid, 2.0, PickupFixEntrada[i][posX], PickupFixEntrada[i][posY], PickupFixEntrada[i][posZ] )) {
				SetPlayerPosEx(playerid, PickupFixEntrada[i][tarX], PickupFixEntrada[i][tarY], PickupFixEntrada[i][tarZ], 0.0, PickupFixEntrada[i][intID]);
				FreezeEx(playerid, 1);
				Freeze( playerid ); //debugmobile
				return true;
			}
		}

		Loop(i, sizeof( PickupFixEntradaEmp )){
		    if(IsPlayerInRangeOfPoint( playerid, 2.0, PickupFixEntradaEmp[i][E_entradax], PickupFixEntradaEmp[i][E_entraday], PickupFixEntradaEmp[i][E_entradaz] )) {
				callcmd::entrar( playerid );
				return true;
			}
			else if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupFixEntradaEmp[i][E_saidax], PickupFixEntradaEmp[i][E_saiday], PickupFixEntradaEmp[i][E_saidaz] )) {
			    callcmd::sair( playerid );
				return true;
			}
		}

        Loop(i, MAX_HOUSES ){

			if(!HouseExist(i))continue;

		    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && GetPlayerVirtualWorld( playerid ) == HouseInfo[i][hWorld]) {
				callcmd::sair( playerid );
				return true;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ])){
				callcmd::entrar( playerid );
				return true;
			}
		}

		// Pickups Saida
		for( new i = 0; i < sizeof(PickupFixSaida); i++ ) {
			if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupFixSaida[i][PX], PickupFixSaida[i][PY], PickupFixSaida[i][PZ] )) {
				SetPlayerPosEx(playerid, PickupFixSaida[i][TX], PickupFixSaida[i][TY], PickupFixSaida[i][TZ], PickupFixSaida[i][Ang], PickupFixSaida[i][inteID]);
				FreezeEx(playerid, 1);
				Freeze( playerid ); //debugmobile
				return true;
			}
		}

		//Sistema de InfoOrg
		for( new i = 0; i < sizeof(pickupInfoorgData); i++ ) {
			if( IsPlayerInRangeOfPoint( playerid, 2.0, pickupInfoorgData[i][posX], pickupInfoorgData[i][posY], pickupInfoorgData[i][posZ] ))
			{
				if(PlayerInfo[playerid][pOrg] == pickupInfoorgData[i][orgsID] && PlayerInfo[playerid][pCargo] >= 5 )
				{
					ShowPlayerDialog(playerid, DIALOG_MANAGERORG_HOME, DIALOG_STYLE_LIST, "Gerenciar Organizacao", "Gerenciar Membros\nGerenciar Materiais\nGerenciar Dinheiro em Caixa", "Gerenciar", "Fechar");
					return true;
				}
			}
		}

		// Gerenciar procurados

		for( new i = 0; i < sizeof(pickupProcuradosData); i++ ) {
			if( IsPlayerInRangeOfPoint( playerid, 2.0, pickupProcuradosData[i][posX], pickupProcuradosData[i][posY], pickupProcuradosData[i][posZ] ) && PlayerInfo[playerid][pOrg] == pickupInfoorgData[i][orgsID] ) {
				ShowPlayerDialog( playerid, DIALOG_LIMPAR_FICHA, DIALOG_STYLE_INPUT, "Limpar Ficha", "{ffffff}Digite o ID do jogador no qual\nvoce deseja limpar a ficha", "Limpar", "Cancelar" );
				return true;
			}
		}
		Loop(i, sizeof(PicksCandidatos)){
		    if( IsPlayerInRangeOfPoint( playerid, 2.0, PicksCandidatos[i][CanX], PicksCandidatos[i][CanY], PicksCandidatos[i][CanZ] )){
		        SetPVarInt(playerid, "MenuOrg", PicksCandidatos[i][OrgIDX]);

				format(tmp, sizeof(tmp), "Menu {%s}%s", OrgColorHex[PicksCandidatos[i][OrgIDX]], nomeOrgs[PicksCandidatos[i][OrgIDX]]);
				ShowPlayerDialog(playerid, DIALOG_ORG_MENU, DIALOG_STYLE_LIST, tmp, "Lista de Cargos\nSalarios\nMe Candidatar", "Confirmar", "Fechar");
				return true;
			}
		}

		//Mineradores
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 637.5589, 831.0137, -42.9609)){
	        if(PlayerInfo[playerid][pEmprego] != Minerador && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL) return ErroMSG(playerid, "Voce nao tem autorizacao para entrar neste local!");
			SetPlayerPosEx(playerid, -2686.8804, 3950.6746, 251.1671, 269.6858, 0, 0, 2);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2686.2673, 3950.9407, 251.1671)){
	        if(PlayerInfo[playerid][pEmprego] != Minerador && PlayerInfo[ playerid ][ pAdmin ] < MAX_ADM_LEVEL) return ErroMSG(playerid, "Voce nao tem autorizacao para entrar neste local!");
			SetPlayerPosEx(playerid, 637.5589, 831.0137, -42.9609, 0.0, 0, 0, 2);
		}

		//Bots
 		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1074.8849,-1790.4553,13.6585)){
			ShowPlayerSugestion(playerid);
		}

	    //Portoes com Key Pads
        else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1539.24, -1632.25, 13.84))
		{
			LoopingAnim(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
			ClearAnimationsEx(playerid, TSegundos(2));
			//callcmd::lspdab1( playerid, "" );
	   	}

        else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1584.36, -1637.89, 13.76))
		{
      		LoopingAnim(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
			ClearAnimationsEx(playerid, TSegundos(2));
			//callcmd::lspdab2( playerid, "" );
	   	}
        //====  BOPE =================
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 1933.96338, 1165.13770, 18.59304)
			|| IsPlayerInRangeOfPoint(playerid, 1.0, 1931.96057, 1165.28320, 18.59304))
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
			AbrirGBope(playerid, 1);
	   	}

	   	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1938.73877, 1177.08313, 22.66257)
			|| IsPlayerInRangeOfPoint(playerid, 1.0, 1938.70239, 1175.11584, 22.68305))
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
			AbrirGBope(playerid, 0);
	   	}
	   	// ==============

        else if(IsPlayerInRangeOfPoint(playerid, 1.0, 247.57325744629, 71.889938354492, 1003.640625 )
			|| IsPlayerInRangeOfPoint(playerid, 1.0, 245.46057128906, 73.528121948242, 1003.640625))
		{
      		LoopingAnim(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
			ClearAnimationsEx(playerid, TSegundos(2));
			AbrirGPM(playerid, 0);
	   	}

		// ===========================
	}

	if((newkeys == KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
        {
            callcmd::adp(playerid);

            callcmd::adp2(playerid);
		// Abrir Portoes da PM
        /*
		if(IsPlayerInRangeOfPoint(playerid, 15.0, 1588.5999, -1638.3000, 14.699))
        {
			AbrirGPM(playerid, 1);
            return 1;
		}

 		if(IsPlayerInRangeOfPoint(playerid, 15.0, 1540.09313964, -1627.93298339, 15.18280601))
        {
			AbrirGPM(playerid, 2);
            return 1;
		}
		// Bope
 		if(IsPlayerInRangeOfPoint(playerid, 15.0, 2720.15845, -2503.78516, 16.69063))
        {
			AbrirGBope(playerid, 2);
            return 1;
		}*/
        }
	}

	if(gPlayerUsingLoopingAnim[playerid] && InAnim[playerid] != 1)
	{
		if(IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys)){
			ClearAnimations(playerid);
			StopLoopingAnim(playerid);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(success){
        ForPlayers( i ){
            if(!strcmp(ip, GetIPX( i ), true)){
                if(PlayerInfo[i][pAdmin] == MAX_ADM_LEVEL ||
				strcmp(PlayerInfo[i][pName], SERVER_OWNER1, true)== 0 ||
				strcmp(PlayerInfo[i][pName], SERVER_OWNER3, true) == 0) return true;

				ClearChatbox(i, 10);
	        	SendClientMessage(i, -1, ""#SERVELOGO" - Este servidor nao ultiliza o sistema de administracao 'RCON' ..");
		    	SendClientMessage(i, -1, ""#SERVELOGO" - Banido Permanete!");

				getdate(ano, mes, dia);
				gettime(hora, minuto);

				static str[ 129 ];
				format(str,sizeof(str), "[Play Style] - %s foi banido por logar-se na Rcon [%d/%d/%d - %d:%d]", GetName(i), dia, mes, ano, hora, minuto);
	    		SLog("Ban.log", str );

	        	BanPlayer(i, -1, "Logou-se na rcon (Anti-Attack)\n");
				break;
			}
        }
    }
    return 1;
}

new AvisoAdminEnviado[MAX_PLAYERS];

/*
public OnPlayerControllingCheat(playerid, cheatid) {
	if(IsPlayerNPC( playerid )) return true;
    if(AvisoAdminEnviado[ playerid ] != 1){
        static str[ 100 ];
		switch(cheatid) {

	    	case PLAYER_ONSTATE_HACK: {

				format(str, sizeof(str), "| Anti Cheater | - %s kickado por uso de Cheater. ", PlayerInfo[ playerid ][ pName ]);
				SendClientMessageToAll(cadm, str);
				Kick(playerid);

				AvisoAdminEnviado[ playerid ] = 1;
	        	SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
			}
			case PLAYER_ONFLY_HACK: {

				format(str, sizeof(str), "| Anti Cheater | - %s kickado por uso de Cheater. ", PlayerInfo[ playerid ][ pName ]);
				SendClientMessageToAll(cadm, str);
				Kick(playerid);

				AvisoAdminEnviado[ playerid ] = 1;
	        	SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
			}
			case PLAYER_ONSPEED_HACK: {
			    if(!IsPlayerInPlace(playerid, 1170.5677, -616.3215, 1340.5677, -216.3215)) {
					format(str, sizeof(str), "| Anti Cheater | - %s foi kickado por uso de Cheater. ", PlayerInfo[ playerid ][ pName ]);
					SendClientMessageToAll(cadm, str);
					Kick(playerid);

					AvisoAdminEnviado[ playerid ] = 1;
			        SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
				}
			}
		}
	}
	return true;
}*/

public OnPlayerAirbreak(playerid)
{
	/*static str[ 100 ];
	format(str, sizeof(str), "| Anti Cheater | - %s foi kickado por uso de Cheater", PlayerInfo[ playerid ][ pName ]);
	SendClientMessageToAll(cadm, str);
	Kick( playerid );*/
    return 1;
}


Public:DestravarAvisos(playerid) return AvisoAdminEnviado[ playerid ] = 0;




Public:OnPlayerCombustivel(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;

    //if(IsVehSchool(playerid)) return 1;
    //if(CNHTest[ playerid ] > 0) return 1;

    new carid = GetPlayerVehicleID(playerid);

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(!IsABike(playerid))
        {
            GetVehicleVelocity(carid, velokm[0], velokm[1], velokm[2]);
            if(floatround(((floatsqroot(((velokm[0] * velokm[0]) + (velokm[1] * velokm[1]) + (velokm[2] * velokm[2]))) * (170.0))) * 1) > 5)
            {
                if(combustivel[carid] == 0 && Avisado[playerid] == false)
                {
                    ErroMSG( playerid, "Seu combustivel acabou. Use um galao de gasolina ou chame um reboque!");
                    Avisado[playerid] = true;
                }
                if(combustivel[carid] > 0)
                {
                    Retirada[playerid]++;
                    if(Retirada[playerid] >= (KmLitro[(GetVehicleModel(carid)-400)]*13)) //13
                    {
                        combustivel[carid]--;
                        Retirada[playerid] = 0;
                        Avisado[playerid] = false;
                    }
                }
                else
                {
                    SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
                }
            }
        }
    }

    // Arma-Colada
    #if defined ArmaColada
    if(PlayerInfo[ playerid ][ CfgColdreAtivo ] == true){
        if(!IsPlayerInAnyVehicle(playerid))
        {
            if(SacolaRoubo[playerid] != 1){
                GetPlayerWeaponData(playerid, 5, ArmasColadas[playerid], BalasColadas[playerid]);
                if(ArmasColadas[playerid] == 30 && BalasColadas[playerid] >= 1)
                {
                    if(GetPlayerWeapon(playerid) == 30) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
                    else SetPlayerAttachedObject(playerid, SlotAKeFUZIL, 355, 1, -0.060921, -0.141673, 0.000000, 0.000000, 35.362735, 0.000000);
                }
                else if(ArmasColadas[playerid] == 31 && BalasColadas[playerid] >= 1)
                {
                    if(GetPlayerWeapon(playerid) == 31) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
                    else SetPlayerAttachedObject(playerid, SlotAKeFUZIL, 356, 1, 0.221171, -0.157310, 0.142212, 357.721954, 158.905090, 5.610232, 1.000000, 1.000000, 1.000000);
                }
                else
                {
                    RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
                }
            }
        }
        else
        {
            if(SacolaRoubo[playerid] != 1){
                GetPlayerWeaponData(playerid, 5, ArmasColadas[playerid], BalasColadas[playerid]);
                if(ArmasColadas[playerid] == 30 && BalasColadas[playerid] >= 1)
                {
                    if(GetPlayerWeapon(playerid) == 30) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
                }
                else if(ArmasColadas[playerid] == 31 && BalasColadas[playerid] >= 1)
                {
                    if(GetPlayerWeapon(playerid) == 31) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
                }
                else
                {
                    RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
                }
            }
        }
    }
    #endif
    return 1;
}


public OnPlayerUpdate(playerid)
{
	return 1;
}

Public:IniciarClima()
{
	Tempo = RandomClima[ random(4) ];

 	static str[129];
	format(str, sizeof( str ), "{AFDCDE}Previsao do tempo: %s", GetWeather(Tempo));
	SCMALL(str);

	if(Tempo == 8){
	    SetTimer("IniciarClima", TMinutos(6), false);
	}
	else {
	    SetTimer("IniciarClima", TMinutos(30), false);
	}
	SetTimer("AlterarClima", TSegundos(50), false);

	return 1;
}

Public:AlterarClima() return SetWeather(Tempo);

//GetWeather()
GetWeather(temp) {
	new
		_sk@ [ 100 ]
	;
	switch(temp){
	    case 2,13:_sk@ = "Ceu limpo, minima de 25Â° e maxima de 30Â°C.";
		case 3, 24:_sk@ = "Clima seco, minima de 28Â° e maxima de 36Â°C.";
		case 28:_sk@ = "Poucas nuvens no ceu, maxima de 32Â°C.";
		case 29:_sk@ = "Um bom clima para pescas, maxima de 27Â°C.";
		case 1, 15:_sk@ = "Clima ensolarado, a umidade do ar parece estavel minima de 26Â° e maxima de 29Â°C.";
		case 4, 25:_sk@ = "Muito frio na regiao norte, minima de 21Â° e maxima de 26Â°C.";
		case 7, 38:_sk@ = "Frio bem leve na regiao sul, minima de 23Â° e maxima de 27Â°C.";
		case 8:_sk@ = "Nublado c/ muita chuva, minima de 24Â°C e maxima de 28Â°C";
		case 30, 35:_sk@ = "Nublado sem previsoes de chuva, minima de 21Â°C e maxima de 26Â°C";
		case 20,31:_sk@ = "Nublado c/ possiveis pancadas de chuva, minima de 24Â°C e maxima de 30Â°C.";
		case 40:_sk@ = "Clima fresco, sol nao ameaca interromper esse clima maravilhoso, minima de 24Â°C";
	}
	return _sk@ ;
}

Public:TempoServidor(){
	if((Hora_Servidor+1) > sizeof(Horarios)) Hora_Servidor = 0;
	SetWorldTimeEx(Horarios[Hora_Servidor]);

	if(!DOF2_FileExists(PASTA_CONFIG)) {
		DOF2_CreateFile(PASTA_CONFIG);
	}
	DOF2_SetInt(PASTA_CONFIG, "Horario", Hora_Servidor);
	DOF2_SaveFile();
	return Hora_Servidor++;
}

SetWorldTimeEx(tmp){
	return SetWorldTime(tmp);
}

AntiDeAMX()
{
    new a[][] = { "Unarmed (Fist)", "Brass K" };
    #pragma unused a
}

new Float:posClickMap_x, Float:posClickMap_y, Float:posClickMap_z;
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ) {

    if(PlayerInfo[playerid][pAdmin] >= map_teleport){

		if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL){
	    	ErroMSG(playerid, "Voce nao esta em modo administrativo.");
		}
		else {

	    	ShowPlayerDialog( playerid, DIALOG_CLICK_MAP, DIALOG_STYLE_MSGBOX, "Teleporte", "Voce deseja ser teletransportado para\no ultimo ponto marcado por\avoce no mapa?", "SIM", "NAO" );
			posClickMap_x = fX;
			posClickMap_y = fY;
			posClickMap_z = GetPointZPos(fX, fY);
		}
	}
}

forward OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ) {
    new str[110];
    format(str, sizeof str, "[Acessorios]{FFFFFF} Voce terminou de editar seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1);
    SendClientMessage(playerid, 0xBAEE71FF, str);
    SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,1,1,1);
    //printf("edited: %d,%f,%f,%f,%f,%f,%f", boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ);

    PlayerToys[playerid][index][ptModelID] = modelid;
    PlayerToys[playerid][index][ptBoneID] = boneid;
    PlayerToys[playerid][index][ptOffsetX] = fOffsetX;
    PlayerToys[playerid][index][ptOffsetY] = fOffsetY;
    PlayerToys[playerid][index][ptOffsetZ] = fOffsetZ;
    PlayerToys[playerid][index][ptRotX] = fRotX;
    PlayerToys[playerid][index][ptRotY] = fRotY;
    PlayerToys[playerid][index][ptRotZ] = fRotZ;
    PlayerToys[playerid][index][ptWearing] = true;
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz){
    if(objectid == GetPVarInt( playerid, "GateEdit2") )
    {
		new _obj;
		if(response == EDIT_RESPONSE_FINAL)
		{
			SendClientMessage( playerid,-1,"{A8DE90}| Portao | - Cordenada Salva!");
			DestroyDynamicObject( GetPVarInt( playerid, "GateEdit2") );
			_obj = CreateDynamicObject( GateID[ playerid ], x, y, z, rx, ry, rz, -1, -1, -1, 200.0);
			SetPVarInt( playerid, "GateEdit2", _obj);
			SetTimerEx("ShowIndexFor", 2000, false, "d", playerid);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			SendClientMessage( playerid,-1,"{A8DE90}| Portao | - Edicao Cancelada!");
			ShowIndexFor( playerid ),
			AtualizeObject( playerid );
		}
    }
}

stock getFreeToySlot(playerid) {
    new total_slots_available, slot = -1;

    if (IsAVip(playerid))
		total_slots_available = MAX_VIP_TOYS;
	else
	    total_slots_available = MAX_FREE_TOYS;

    for (new i; i < total_slots_available; i++) {
		if (PlayerToys[playerid][i][ptModelID] == 0) {
			slot = i;
			break;
		}
    }

    return slot;
}

GetNameAllWeapon(weaponz)
{
	new sk_		[50]
	;

    switch(weaponz)
    {
        case 0: sk_ = "Nenhum";
        case 1: sk_ = "Soco Ingles";
        case 2: sk_ = "Taco de Golfe";
        case 3: sk_ = "Cassetete";
        case 4: sk_ = "Faca";
        case 5: sk_ = "Bastao de Baseball";
        case 6: sk_ = "Pa";
        case 7: sk_ = "Taco de Bilhar";
        case 8: sk_ = "Katana";
        case 9: sk_ = "Serra Eletrica";
        case 10: sk_ = "Pinto de borracha duplo";
        case 11: sk_ = "Pinto de borracha";
        case 12: sk_ = "Vibrador";
        case 13: sk_ = "Vibrador";
        case 14: sk_ = "Buque de Flores";
        case 15: sk_ = "Bengala";
        case 16: sk_ = "Granada";
        case 17: sk_ = "Bomba de Gas";
        case 18: sk_ = "Coqtel Molotov";
        case 22: sk_ = "9mm";
        case 23: sk_ = "9mm Silenciadora";
        case 24: sk_ = "Desert Eagle";
        case 25: sk_ = "Shotgun";
        case 26: sk_ = "Sawn Off";
        case 27: sk_ = "Combat Shotgun";
        case 28: sk_ = "Micro Uzi";
        case 29: sk_ = "MP5";
        case 30: sk_ = "AK-47";
        case 31: sk_ = "M4";
        case 32: sk_ = "Tec-9";
        case 33: sk_ = "Rifle";
        case 34: sk_ = "Sniper Rifle";
        case 35: sk_ = "Bazooka";
        case 36: sk_ = "Bazooka Teleguiada";
        case 37: sk_ = "Lanca Chamas";
        case 38: sk_ = "Minigun";
        case 39: sk_ = "Bombas Armadas";
        case 40: sk_ = "Detonador";
        case 41: sk_ = "Spray";
        case 42: sk_ = "Extintor de Incendios";

    }
    return sk_;
}

Public:VerificarMesVip(playerid, reqnivel, precovip)
{
    new valorvip[20];
    if(reqnivel == 1) format(valorvip, 20, "{D8D8D8}VIP");
    if(reqnivel == 2) format(valorvip, 20, "{B87F29}VIP +");
    if(reqnivel == 3) format(valorvip, 20, "{ffff00}VIP Plus");

    PlayerInfo[playerid][VIPescolhido] = reqnivel;
    PlayerInfo[playerid][VIPvalor] = precovip;

    new strdialog[120];
    format(strdialog, sizeof(strdialog), "%s\n{ffffff}Coloque a quantidade de meses que voce deseja adquirir:\n{FFFF00}Lembrando que cada mes custa %d", valorvip, precovip);
    ShowPlayerDialog( playerid, DIALOG_COMPRAR_VIP, DIALOG_STYLE_INPUT, ""#SERVELOGO" - LOJA VIP", strdialog, "Ok", "Voltar");
    return 1;
}

Public:VerificarMesSocio(playerid, reqnivel, precosocio)
{
    new valorsocio[30];
    if(reqnivel == 1) format(valorsocio, 30, "{D8D8D8}SOCIO");
    if(reqnivel == 2) format(valorsocio, 30, "{B87F29}SOCIO +");
    if(reqnivel == 3) format(valorsocio, 30, "{ffff00}SOCIO Plus");

    PlayerInfo[playerid][SOCIOescolhido] = reqnivel;
    PlayerInfo[playerid][SOCIOvalor] = precosocio;

    new strdialog[120];
    format(strdialog, sizeof(strdialog), "%s\n{ffffff}Coloque a quantidade de meses que voce deseja adquirir:\n{FFFF00}Lembrando que cada mes custa %d", valorsocio, precosocio);
    ShowPlayerDialog( playerid, DIALOG_COMPRAR_SOCIO, DIALOG_STYLE_INPUT, ""#SERVELOGO" - LOJA SOCIO", strdialog, "Ok", "Voltar");
    return 1;
}

Public:VerificarCompraDinheiro(playerid, valor, cash)
{
    if(cash <= PlayerInfo[playerid][Cash])
    {
        PlayerInfo[playerid][Cash] -= cash;
        ActionPlayerGrana(playerid, "+", valor);

        new zString[100];
        format(zString, sizeof(zString), "[ Play Style ] Voce comprou %d,00 de dinheiro por %d cash.", valor, cash);
        SCM(playerid, 0x13A81FAA, zString);

        format(STRLOG, sizeof(STRLOG), "[%s] %s comprou %d de dinheiro.", GetDateEx(), GetName(playerid), valor);
        SLog("Cash.log", STRLOG);

    } else ErroMSG(playerid, "Cash insuficiente");
    return 1;
}

new Armazenar[MAX_PLAYERS];

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new	STRX[ 129 ];

	switch( dialogid )
	{
        case DIALOG_ADMINS:
        {
            if(response) return 1;
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_ADMIN_PM, DIALOG_STYLE_INPUT, ""#SERVELOGO" - PARTICULAR ADMIN", "Digite a mensagem que deseja enviar", "Enviar", "Voltar");

                foreach(Player, i)
                {
                    if(strfind(inputtext, GetName(i), true) != -1)
                    {
                        Armazenar[playerid] = i;
                    }
                }
            }
            return 1;
        }

        case DIALOG_ADMIN_PM:
        {
            if(!response) return callcmd::admins(playerid);

            if(!strlen(inputtext))
            {
                ShowPlayerDialog(playerid, DIALOG_ADMIN_PM, DIALOG_STYLE_INPUT, ""#SERVELOGO" - PARTICULAR ADMIN", "Digite a mensagem que deseja enviar", "Enviar", "Voltar");
                ErroMSG(playerid, "Digite algo!");
                return 1;
            }

            new string[128];
            format(string, sizeof(string), "* {FACC2E}PM de %s: %s", GetName(playerid), inputtext);
            SendClientMessage(Armazenar[playerid], 0xFFFF00FF, string);

            SendClientMessage(playerid, 0xFFFF00FF, "* {FACC2E}PM enviada!");

            return 1;
        }


        case DIALOG_COMPRARCASH:
        {
            if(!response) return 1;

            ShowPlayerDialog(playerid, DIALOG_CONTATO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - CASH - CONTATO", "\
            {FFFFFF}Para informacoes e compras de cash:\n\n\
            {FFFF00}WhatsApp Atendimento: +1(365) 650 6637\n\
            {FFFF00}WhatsApp Financeiro: +1(365) 400 0660\n\
            Email: contatolifevirtual@gmail.com\n\n\
            {FF0000}ACEITAMOS TODOS OS TIPOS DE PAGAMENTO\n\n\
            {FFFFFF}Entre em contato e tire todas suas duvidas.\n\
            Estamos a sua disposicao.\n\
            ", "VOLTAR", "");
            return 1;
        }

        case DIALOG_RADIOS:
        {
            if(!response) return 1;

            static st_[ 100 ];
            PlayAudioStreamForPlayer( playerid, RadioInfo[listitem][rLink]);
            format(st_, sizeof(st_), "Radio Ligado, voce esta ouvindo: %s", RadioInfo[listitem][rName]);
            SCM(playerid, -1, st_);
            return 1;
        }
		case DIALOG_MP3:
        {
            if(!response) return 1;

            static st_[ 100 ];
            PlayAudioStreamForPlayer( playerid, CdsInfo[listitem][rLink]);
            format(st_, sizeof(st_), "Voce esta ouvindo: %s", CdsInfo[listitem][rName]);
            SCM(playerid, -1, st_);
            return 1;
        }

        case DIALOG_CONTATO:
        {
            if(response) return callcmd::comprarcash(playerid);
            return 1;
        }

        case DIALOG_MENU_ANDAR:
        {
            if(!response) return 1;

            switch( listitem )
            {
                case 0:
                {
                    SCM(playerid, -1, "Bem vindo ao Detran");

                    SetPlayerPos(playerid, -2026.9459,-103.9797,1035.1719);
                    SetPlayerInterior(playerid, 3);
                    return 1;

                }
                case 1:
                {
                    SCM(playerid, -1, "Bem vindo a imobiliaria.");

                    SetPlayerPos(playerid, 1494.3098,1303.8673,1093.2891);
                    SetPlayerInterior(playerid, 3);
                }
            }
            return 1;
        }

        case DIALOG_INFO_:
        {
            if(!response) return 1;
            switch( listitem )
            {
                case 0: return callcmd::beneficiosvip(playerid);
                case 1: return callcmd::beneficiosvipmais(playerid);
                case 2: return callcmd::beneficiosvipplus(playerid);
                case 3: return callcmd::beneficiossocio(playerid);
            }
            return 1;
        }

        case DIALOG_INFO_VIP:
        {
            if(response)
            {
                return callcmd::beneficios(playerid);
            }
            return 1;
        }

        case DIALOG_COMPRAR_CASA_VIP:
        {
            if(!response) return 1;

            if(GetPlayerGrana(playerid) < PlayerInfo[playerid][VALORcomprar]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

            new id = PlayerInfo[playerid][IDcomprar];

            ActionPlayerGrana(playerid, "-", HouseInfo[id][hPrice], 1);


            HouseInfo[id][hOwned] = 1;
            strmid(HouseInfo[id][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);

            DestroyDynamicPickup(HousePickup[id]);
            Delete3DTextLabel(HouseLabel[id]);
            //DestroyDynamicMapIcon(HouseIcon[id]);
            LoadHouseID(id);

            SendClientMessage(playerid, Verde, "Parabens por sua nova residencia!");

            if(PlayerInfo[playerid][pHouse1] != 999)
                PlayerInfo[playerid][pHouse2] = id;
            else
                PlayerInfo[playerid][pHouse1] = id;

            SaveHouse(id);
            OnSalvarDados( playerid );

            new strxx[120];
            PlaySoundForPlayer(playerid, 1149);
            format(strxx, sizeof(strxx), "[Play Style] - %s comprou a propriedade [Casa] NÂ° %i.", GetName(playerid), id);
            SendClientMessageToAll(AzulClaro, strxx);
            format(strxx, sizeof(strxx), "[%s] %s comprou a propriedade [Casa] NÂ° %i.", GetDateEx(), GetName(playerid), id);
            SLog("Casas.log", strxx);

            PlayerInfo[playerid][IDcomprar] = -1;
            PlayerInfo[playerid][VALORcomprar] = -1;
            return 1;
        }

        case DIALOG_COMPRAR_EMPRESA_VIP:
        {
            if(!response) return 1;

            if(GetPlayerGrana(playerid) < PlayerInfo[playerid][VALORcomprar]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

            new id = PlayerInfo[playerid][IDcomprar];

            EmpInfo[id][EEstado] = 1;
            EmpInfo[id][EGrana] = 0;

            ActionPlayerGrana(playerid, "-", PlayerInfo[playerid][VALORcomprar]);

            strmid(EmpInfo[id][EDono], GetName(playerid), 0, strlen(GetName(playerid)), 255);
            SendClientMessage(playerid, Verde, "Parabens por sua nova Empresa!");

            UpdateEmpresaLabel(id);
            SaveEmpresa(id);

            PlayerInfo[playerid][pEmpKey] = id;

            new str[100];
            format(str, sizeof(str), "[Play Style] - %s comprou a propriedade [Empresa] NÂ° %i.", GetName(playerid), id);
            ChatProximo(100.0, playerid, str, 0x707070FF,0x707070FF,0x707070FF,0x707070FF,0x707070FF);

            format(STRLOG, sizeof(STRLOG), "[%s] %s comprou a propriedade [Empresa] NÂ° %i.", GetDateEx(), GetName(playerid), id);
            SLog("Empresas.log", STRLOG);

            PlayerInfo[playerid][IDcomprar] = -1;
            PlayerInfo[playerid][VALORcomprar] = -1;
            return 1;
        }

        case DIALOG_LOJACASH:
        {
            if(!response) return 1;
            switch( listitem )
            {
                case 0: // vip
                {
                    new strdialog[140];
                    format(strdialog, sizeof(strdialog), "Item\tCash\n\
                    {FFFFFF}VIP\t{FFFF00}%d/mes\n\
                    {FFFFFF}VIP +\t{FFFF00}%d/mes\n\
                    {FFFFFF}VIP Plus\t{FFFF00}%d/mes\n", PRECO_VIP1, PRECO_VIP2, PRECO_VIP3);
                    ShowPlayerDialog(playerid, DIALOG_LOJACASH_VIP, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - LOJA VIP", strdialog, "Ir", "Voltar");
                }

                case 1: //socio
                {
                    new strdialog[140];
                    format(strdialog, sizeof(strdialog), "Item\tCash\n\
                    {FFFFFF}Socio\t{FFFF00}%d/mes", PRECO_SOCIO1);
                    ShowPlayerDialog(playerid, DIALOG_LOJACASH_SOCIO, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - LOJA SOCIO", strdialog, "Ir", "Voltar");
                }

                case 2: //level
                {
                   new strdialog[120];
                   format(strdialog, sizeof(strdialog), "Digite abaixo a quantidade de Level:\nO valor de cada level e {FFFF00}%d", PRECO_LEVEL);
                   ShowPlayerDialog(playerid, DIALOG_LOJACASH_LEVEL, DIALOG_STYLE_INPUT, ""#SERVELOGO" - LOJA LEVEL", strdialog, "Ir", "Voltar");
                }

                case 3: //dinheiro
                {
                    ShowPlayerDialog(playerid, DIALOG_LOJACASH_DIN, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - LOJA DINHEIRO", "Item\tCash\n\
                    {FFFFFF}R$80000\t{FFFF00}500\n\
                    {FFFFFF}R$200000\t{FFFF00}1000\n\
                    {FFFFFF}R$500000\t{FFFF00}2500\n\
                    {FFFFFF}R$800000\t{FFFF00}3500\n\
                    {FFFFFF}R$1000000\t{FFFF00}5000\n\
                    {FFFFFF}R$3000000\t{FFFF00}7000\n\
                    {FFFFFF}R$5000000\t{FFFF00}8000\n", "Ir", "Voltar");
                }

                case 4: //escolher casa
                {
                    if(PlayerInfo[playerid][CasaCash] == 1) return ErroMSG(playerid, "Voce ja possue esse item. Para comprar use /casacash");
                    if(PRECO_ECS <= PlayerInfo[playerid][Cash])
                    {
                        ShowPlayerDialog(playerid, DIALOG_LOJACASH_INFO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - LOJA CASAS", "Voce comprou o direito de comprar uma casa no servidor\nPara comprar va ate uma casa desocupada e use o comando\n{FFFF00}/casacash", "Ok", "");
                        PlayerInfo[playerid][CasaCash] = 1;
                        PlayerInfo[playerid][Cash] -= PRECO_ECS;
                        OnSalvarDados( playerid );

                    } else ErroMSG(playerid, "Cash insuficiente");
                }

                case 5: //escolher veiculo
                {
                    if(PlayerInfo[playerid][VeiculoCash] == 1) return ErroMSG(playerid, "Voce ja possue esse item. Para usar va ate a conce e o carro no preco final estara a 0");
                    if(PRECO_EVE <= PlayerInfo[playerid][Cash])
                    {
                        ShowPlayerDialog(playerid, DIALOG_LOJACASH_INFO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - LOJA VEICULO", "Voce comprou o direito de comprar um veiculo no servidor\nPara comprar va ate a concessionaria\nE o veiculo saira com preco final : R$ 0,00 ", "Ok", "");
                        PlayerInfo[playerid][VeiculoCash] = 1;
                        PlayerInfo[playerid][Cash] -= PRECO_EVE;
                        OnSalvarDados( playerid );

                    } else ErroMSG(playerid, "Cash insuficiente");
                }

                case 6: //escolher empresa
                {
                    if(PlayerInfo[playerid][EmpresaCash] == 1) return ErroMSG(playerid, "Voce ja possue esse item. Para comprar use /empresacash");
                    if(PRECO_EEMP <= PlayerInfo[playerid][Cash])
                    {
                        ShowPlayerDialog(playerid, DIALOG_LOJACASH_INFO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - LOJA EMPRESA", "Voce comprou o direito de comprar uma empresa no servidor\nPara comprar va ate uma empresa desocupada e use o comando\n{FFFF00}/empresacash", "Ok", "");
                        PlayerInfo[playerid][EmpresaCash] = 1;
                        PlayerInfo[playerid][Cash] -= PRECO_EEMP;
                        OnSalvarDados( playerid );

                    } else ErroMSG(playerid, "Cash insuficiente");
                }

                case 7: //add casa
                {
                    if(PlayerInfo[playerid][CriarCasaCash] == 1) return ErroMSG(playerid, "Voce ja possue esse item. Para comprar use /criarcasacash");
                    if(PRECO_ACS <= PlayerInfo[playerid][Cash])
                    {
                        ShowPlayerDialog(playerid, DIALOG_LOJACASH_INFO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - LOJA CASAS", "Voce comprou o direito de criar uma casa no servidor\nPara criar va ate uma casa que nao esteja setada\nescolha a porta e use o comando: (Na duvida peca ajuda a um Admin)\n{FFFF00}/criarcasacash", "Ok", "");
                        PlayerInfo[playerid][CriarCasaCash] = 1;
                        PlayerInfo[playerid][Cash] -= PRECO_ACS;
                        OnSalvarDados( playerid );

                    } else ErroMSG(playerid, "Cash insuficiente");
                }

                case 8: //add carro
                {
                    if(PlayerInfo[playerid][CriarSetCash] == 1) return ErroMSG(playerid, "Voce ja possue esse item. Para comprar use /criarsetcash");

                    if(PRECO_AVE <= PlayerInfo[playerid][Cash])
                    {
                        ShowPlayerDialog(playerid, DIALOG_LOJACASH_INFO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - LOJA SET", "Voce comprou o direito de criar um veiculo set no servidor\nPara criar va ate um veiculo estacione no local desejado\ne uso o seguinte comando para setar o veiculo no local: \n(Na duvida peca ajuda a um Admin)\n{FFFF00}/criarsetcash", "Ok", "");
                        PlayerInfo[playerid][CriarSetCash] = 1;
                        PlayerInfo[playerid][Cash] -= PRECO_AVE;
                        OnSalvarDados( playerid );

                    } else ErroMSG(playerid, "Cash insuficiente");
                }
            }
            return 1;
        }

        case DIALOG_LOJACASH_VIP:
        {
            if(!response) return ShowDialogLojaCash(playerid);
            switch( listitem )
            {
                case 0: VerificarMesVip(playerid, 1, PRECO_VIP1);
                case 1: VerificarMesVip(playerid, 2, PRECO_VIP2);
                case 2: VerificarMesVip(playerid, 3, PRECO_VIP3);
            }
            return 1;
        }

        case DIALOG_LOJACASH_SOCIO:
        {
            if(!response) return ShowDialogLojaCash(playerid);
            switch( listitem )
            {
                case 0: VerificarMesSocio(playerid, 4, PRECO_SOCIO1);
                case 1: VerificarMesSocio(playerid, 5, PRECO_SOCIO2);
                case 2: VerificarMesSocio(playerid, 6, PRECO_SOCIO3);
            }
            return 1;
        }

        case DIALOG_LOJACASH_LEVEL:
        {
            if(!response) return ShowDialogLojaCash(playerid);
            if(!IsNumeric( inputtext )) return ShowDialogLojaCash(playerid);

            new Preco = strval(inputtext) * PRECO_LEVEL;
            if(Preco <= PlayerInfo[playerid][Cash])
            {
                PlayerInfo[playerid][Cash] -= Preco;
                PlayerInfo[playerid][ pLevel ] += strval(inputtext);
                //SetPlayerScore(playerid, PlayerInfo[playerid][ pLevel ]);

                new zString[100];
                format(zString, sizeof(zString), "[ Play Style ] Voce comprou %d de level por %d cash.", strval(inputtext), Preco);
                SCM(playerid, 0x13A81FAA, zString);
                OnSalvarDados( playerid );

                format(STRLOG, sizeof(STRLOG), "[%s] %s comprou %d de level.", GetDateEx(), GetName(playerid), strval(inputtext));
                SLog("Cash.log", STRLOG);

            } else ErroMSG(playerid, "Cash insuficiente");
            return 1;
        }

        case DIALOG_LOJACASH_DIN:
        {
            if(!response) return ShowDialogLojaCash(playerid);

            switch( listitem )
            {
                case 0: VerificarCompraDinheiro(playerid, 80000, 500);
                case 1: VerificarCompraDinheiro(playerid, 200000, 1000);
                case 2: VerificarCompraDinheiro(playerid, 500000, 2500);
                case 3: VerificarCompraDinheiro(playerid, 800000, 3500);
                case 4: VerificarCompraDinheiro(playerid, 1000000, 5000);
                case 5: VerificarCompraDinheiro(playerid, 3000000, 7000);
                case 6: VerificarCompraDinheiro(playerid, 5000000, 8000);
            }
            return 1;
        }

        case DIALOG_COMPRAR_VIP:
        {
            if(!response) return ShowDialogLojaCash(playerid);
            if(IsNumeric( inputtext ))
            {
                new PrecoEps = strval(inputtext) * PlayerInfo[playerid][VIPvalor];
                if(PrecoEps <= PlayerInfo[playerid][Cash])
                {
                    PlayerInfo[playerid][Cash] -= PrecoEps;
                    PlayerInfo[playerid][ pVIP ] = PlayerInfo[playerid][VIPescolhido];
                    PlayerInfo[playerid][TemBeneficio] = 1;
                    PlayerInfo[playerid][ pVIPTEMP ] = (2592000*strval(inputtext))+gettime();

                    new valorvip[20];
                    if(PlayerInfo[playerid][VIPescolhido] == 1) format(valorvip, 20, "{D8D8D8}VIP");
                    if(PlayerInfo[playerid][VIPescolhido] == 2) format(valorvip, 20, "{B87F29}VIP +");
                    if(PlayerInfo[playerid][VIPescolhido] == 3) format(valorvip, 20, "{ffff00}VIP Plus");

                    new zString[100];
                    format(zString, sizeof(zString), "[ Play Style ] Voce comprou plano %s {13A81F}com duraçao de %d mes(es).", valorvip, strval(inputtext));
                    SCM(playerid, 0x13A81FAA, zString);
                    OnSalvarDados( playerid );

                    SCM(playerid, 0x13A81FAA, "Para acessar os comandos e o painel use /vip");

                    PlayerInfo[playerid][VIPescolhido] = 0;
                    PlayerInfo[playerid][VIPvalor] = 0;

                    format(STRLOG, sizeof(STRLOG), "[%s] %s comprou plano %s com %d dias.", GetDateEx(), GetName(playerid), valorvip, strval(inputtext));
                    SLog("Cash.log", STRLOG);

                } else ErroMSG(playerid, "Cash insuficiente");

            } else {

                ErroMSG(playerid, "Use somente numeros");
                VerificarMesVip(playerid, PlayerInfo[playerid][VIPescolhido], PlayerInfo[playerid][VIPvalor]);
            }
            return 1;
        }

        case DIALOG_COMPRAR_SOCIO:
        {
            if(!response) return ShowDialogLojaCash(playerid);

            if(IsNumeric( inputtext ))
            {
                new PrecoEps = strval(inputtext) * PlayerInfo[playerid][SOCIOvalor];
                if(PrecoEps <= PlayerInfo[playerid][Cash])
                {
                    PlayerInfo[playerid][Cash] -= PrecoEps;
                    PlayerInfo[playerid][ pVIP ] = PlayerInfo[playerid][SOCIOescolhido];
                    PlayerInfo[playerid][ pVIPTEMP ] = (2592000*strval(inputtext))+gettime();
                    PlayerInfo[playerid][TemBeneficio] = 1;

                    new valorvip[20];
                    if(PlayerInfo[playerid][SOCIOescolhido] == 1) format(valorvip, 20, "{D8D8D8}SOCIO");
                    if(PlayerInfo[playerid][SOCIOescolhido] == 2) format(valorvip, 20, "{B87F29}SOCIO +");
                    if(PlayerInfo[playerid][SOCIOescolhido] == 3) format(valorvip, 20, "{ffff00}SOCIO Plus");

                    new zString[100];
                    format(zString, sizeof(zString), "[ Play Style ] Voce comprou plano %s {13A81F}com duraçao de %d mes(es).", valorvip, strval(inputtext));
                    SCM(playerid, 0x13A81FAA, zString);
                    OnSalvarDados( playerid );

                    PlayerInfo[playerid][SOCIOescolhido] = 0;
                    PlayerInfo[playerid][SOCIOvalor] = 0;

                    format(STRLOG, sizeof(STRLOG), "[%s] %s comprou plano %s com %d dias.", GetDateEx(), GetName(playerid), valorvip, strval(inputtext));
                    SLog("Cash.log", STRLOG);

                } else ErroMSG(playerid, "Cash insuficiente");

            } else {

                ErroMSG(playerid, "Use somente numeros");
                VerificarMesSocio(playerid, PlayerInfo[playerid][SOCIOescolhido], PlayerInfo[playerid][SOCIOvalor]);
            }
            return 1;
        }

        case DIALOG_VIP_INFO:
        {
            if(response) return 1;
            callcmd::vip(playerid);
            return 1;
        }

        case DIALOG_VIP_BENEFICIOS:
        {
            if(!response) return callcmd::vip(playerid);

            if(PlayerInfo[playerid][pVIP] == 1)
            {
                SCM(playerid, COR_VIP, "Parabens, voce sacou seu beneficio VIP. Obrigado por ajudar ao Servidor.");
                ActionPlayerGrana(playerid, "+", GRANA_VIP1);
                PlayerInfo[playerid][pLevel] += LEVEL_VIP1;
                PlayerInfo[playerid][TemBeneficio] = 0;
                OnSalvarDados(playerid);
            }

            if(PlayerInfo[playerid][pVIP] == 2)
            {
                SCM(playerid, COR_VIP, "Parabens, voce sacou seu beneficio VIP+. Obrigado por ajudar ao Servidor.");
                ActionPlayerGrana(playerid, "+", GRANA_VIP2);
                PlayerInfo[playerid][pLevel] += LEVEL_VIP2;
                PlayerInfo[playerid][TemBeneficio] = 0;
                OnSalvarDados(playerid);
            }

            if(PlayerInfo[playerid][pVIP] == 3)
            {
                SCM(playerid, COR_VIP, "Parabens, voce sacou seu beneficio VIP Plus. Obrigado por ajudar ao Servidor.");
                ActionPlayerGrana(playerid, "+", GRANA_VIP3);
                PlayerInfo[playerid][pLevel] += LEVEL_VIP3;
                PlayerInfo[playerid][TemBeneficio] = 0;
                OnSalvarDados(playerid);
            }

            if(PlayerInfo[playerid][pVIP] > 3)
            {
                SCM(playerid, COR_VIP, "Parabens, voce sacou seu beneficio Socio. Obrigado por ajudar ao Servidor.");
                ActionPlayerGrana(playerid, "+", GRANA_SOCIO1);
                PlayerInfo[playerid][pLevel] += LEVEL_SOCIO1;
                PlayerInfo[playerid][TemBeneficio] = 0;
                OnSalvarDados(playerid);
            }
            return 1;
        }

        case DIALOG_VIP:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    new String[250];
                    strcat(String, "{8B5A2B} /v {FFFFFF}- Falar no chat VIP\n");
                    strcat(String, "{8B5A2B} /vip {FFFFFF}- Ver a dialog de VIP\n");
                    strcat(String, "{8B5A2B} /vkit {FFFFFF}- Pegar o seu KIT VIP\n");
                    strcat(String, "{8B5A2B} /venc {FFFFFF}- Ver vencimento do seu VIP\n\n\n");
                    ShowPlayerDialog(playerid, DIALOG_VIP_INFO, DIALOG_STYLE_MSGBOX, "PLAYER VIP - COMANDOS", String, "Fechar", "Voltar");
                }

                case 1:
                {
                    callcmd::venc(playerid);
                    return 1;
                }

                case 2:
                {
                    callcmd::vkit(playerid);
                    return 1;
                }

                case 3:
                {
                    if(PlayerInfo[playerid][TemBeneficio] == 0) return ErroMSG(playerid, "Voce ja sacou esse beneficio");

                    new dialog[100];
                    format(dialog, sizeof(dialog), "Pacote de beneficios VIP\n\nLevel:{ffff00}%d\n{ffffff}Dinheiro:{ffff00}%d\n\n{ffffff}Deseja sacar agora ?", LEVEL_VIP1, GRANA_VIP1);
                    ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER VIP - BENEFICIOS", dialog, "Sacar", "Voltar");
                    return 1;
                }
            }
            return 1;
        }

        case DIALOG_VIPMAIS:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    new String[290];
                    strcat(String, "{8B5A2B} /v {FFFFFF}- Falar no chat VIP\n");
                    strcat(String, "{8B5A2B} /vip {FFFFFF}- Ver a dialog de VIP\n");
                    strcat(String, "{8B5A2B} /vkit {FFFFFF}- Pegar o seu KIT VIP\n");
                    strcat(String, "{8B5A2B} /vcompletar {FFFFFF}- Completar seu tanque\n");
                    strcat(String, "{8B5A2B} /venc {FFFFFF}- Ver vencimento do seu VIP\n\n\n");
                    ShowPlayerDialog(playerid, DIALOG_VIP_INFO, DIALOG_STYLE_MSGBOX, "PLAYER VIP - COMANDOS", String, "Fechar", "Voltar");
                }

                case 1:
                {
                    callcmd::venc(playerid);
                    return 1;
                }

                case 2:
                {
                    callcmd::vkit(playerid);
                    return 1;
                }

                case 3:
                {
                    callcmd::vcompletar(playerid);
                    return 1;
                }

                case 4:
                {
                    if(PlayerInfo[playerid][TemBeneficio] == 0) return ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER VIP - BENEFICIOS", "{FF0000}Voce ja sacou esse beneficio", #, "Voltar");

                    new dialog[100];
                    format(dialog, sizeof(dialog), "Pacote de beneficios VIP\n\nLevel:%d\nDinheiro:%d\n\nDeseja sacar agora ?", LEVEL_VIP2, GRANA_VIP2);
                    ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER VIP - BENEFICIOS", dialog, "Sacar", "Voltar");
                    return 1;
                }
            }
            return 1;
        }

        case DIALOG_VIPPLUS:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    new String[350];
                    strcat(String, "{8B5A2B} /v {FFFFFF}- Falar no chat VIP\n");
                    strcat(String, "{8B5A2B} /vip {FFFFFF}- Ver a dialog de VIP\n");
                    strcat(String, "{8B5A2B} /vmoto {FFFFFF}- Pegar uma moto VIP\n");
                    strcat(String, "{8B5A2B} /vcarro {FFFFFF}- Pegar um carro VIP\n");
                    strcat(String, "{8B5A2B} /vkit {FFFFFF}- Pegar o seu KIT VIP\n");
                    strcat(String, "{8B5A2B} /vcompletar {FFFFFF}- Completar seu tanque\n");
                    strcat(String, "{8B5A2B} /venc {FFFFFF}- Ver vencimento do seu VIP\n\n\n");
                    ShowPlayerDialog(playerid, DIALOG_VIP_INFO, DIALOG_STYLE_MSGBOX, "PLAYER VIP - COMANDOS", String, "Fechar", "Voltar");
                }

                case 1:
                {
                    callcmd::venc(playerid);
                    return 1;
                }

                case 2:
                {
                    callcmd::vkit(playerid);
                    return 1;
                }

                case 3:
                {
                    callcmd::vmoto(playerid);
                    return 1;
                }

                case 4:
                {
                    callcmd::vcarro(playerid);
                    return 1;
                }

                case 5:
                {
                    callcmd::vcompletar(playerid);
                    return 1;
                }

                case 6:
                {
                    if(PlayerInfo[playerid][TemBeneficio] == 0) return ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER VIP - BENEFICIOS", "{FF0000}Voce ja sacou esse beneficio", #, "Voltar");

                    new dialog[100];
                    format(dialog, sizeof(dialog), "Pacote de beneficios VIP\n\nLevel:%d\nDinheiro:%d\n\nDeseja sacar agora ?", LEVEL_VIP3, GRANA_VIP3);
                    ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER VIP - BENEFICIOS", dialog, "Sacar", "Voltar");
                    return 1;
                }

            }
            return 1;
        }

        case DIALOG_SOCIO:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    new String[350];
                    strcat(String, "{8B5A2B} /v {FFFFFF}- Falar no chat VIP/SOCIO\n");
                    strcat(String, "{8B5A2B} /socio {FFFFFF}- Ver a dialog de VIP\n");
                    strcat(String, "{8B5A2B} /vcriar {FFFFFF}- Criar qualquer veiculo\n");
                    strcat(String, "{8B5A2B} /vkit {FFFFFF}- Pegar um KIT VIP\n");
                    strcat(String, "{8B5A2B} /vjet {FFFFFF}- Criar uma jetpack\n");
                    strcat(String, "{8B5A2B} /vcompletar {FFFFFF}- Completar seu tanque\n");
                    strcat(String, "{8B5A2B} /venc {FFFFFF}- Ver vencimento do seu VIP/SOCIO\n\n\n");
                    ShowPlayerDialog(playerid, DIALOG_VIP_INFO, DIALOG_STYLE_MSGBOX, "PLAYER SOCIO - COMANDOS", String, "Fechar", "Voltar");
                }

                case 1:
                {
                    callcmd::venc(playerid);
                    return 1;
                }

                case 2:
                {
                    callcmd::vkit(playerid);
                    return 1;
                }

                case 3:
                {
                    callcmd::vjet(playerid);
                    return 1;
                }

                case 4:
                {
                    callcmd::vcompletar(playerid);
                    return 1;
                }

                case 5:
                {
                    if(PlayerInfo[playerid][TemBeneficio] == 0) return ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER VIP - BENEFICIOS", "{FF0000}Voce ja sacou esse beneficio", #, "Voltar");

                    new dialog[100];
                    format(dialog, sizeof(dialog), "Pacote de beneficios SOCIO\n\nLevel:%d\nDinheiro:%d\n\nDeseja sacar agora ?", LEVEL_SOCIO1, GRANA_SOCIO1);
                    ShowPlayerDialog(playerid, DIALOG_VIP_BENEFICIOS, DIALOG_STYLE_MSGBOX, "PLAYER SOCIO - BENEFICIOS", dialog, "Sacar", "Voltar");
                    return 1;
                }

            }
            return 1;
        }


        case DIALOG_SKINMOBILE:
        {
            if(!response) return 1;
            if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Digite uma id valida de 0 a 299");
            if(strval(inputtext) < 0 || strval(inputtext) > 299) return ErroMSG(playerid, "Digite uma id valida de 0 a 299");

            if(GetPlayerGrana( playerid ) >= 150)
            {
                ActionPlayerGrana(playerid, "-", 150);
                InfoMSG(playerid, "Skin Comprada!");
                GameTextForPlayer(playerid, "~w~-~h~~r~$150", 3000, 1);
                PlayerInfo[playerid][pSkin] = strval(inputtext);
                SetPlayerSkinEx(playerid, strval(inputtext));
            }
            else ErroMSG(playerid, "Voce nao possui dinheiro o suficiente (R$ 150)");
            return 1;
        }

        case DIALOG_LOJA_CONCE:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0: IniciarCompraVeiculoTerrestre( playerid );
                case 1: IniciarCompraBike( playerid );
                case 2: OpenPlayerMenu( playerid, 10);
            }
            return 1;
        }

        case DIALOG_LOJA_ARMAS:
        {
            if(!response) return 1;

            static _str@[ 500 ];
            TogglePlayerControllable(playerid, true);

            if(!GetPlayerFreeSlotWeapon( playerid ) && !(strcmp(ItemsAmmuNation[listitem][ItemNome], "Coldre", true)== 0)) return ErroMSG(playerid, "Voce nao possui slot's livres para mais armas!");
            if(GetWeaponInPlayer(playerid, ItemsAmmuNation[listitem][ItemArm]) == 1) return ErroMSG(playerid, "Voce ja possui uma arma que ocupa este slot!.");
            if(ItemsAmmuNation[listitem][ItemVip] == 1 && !PlayerInfo[playerid][pVIP]) return ErroMSG(playerid, "Voce nao e um player vip ou socio!.");

            if(ItemsAmmuNation[listitem][ItemBPrice] == -1){
                format( _str@, sizeof( _str@ ), "{FFFFFF}Voce tem certeza que deseja comprar um(a) {307800}%s?\n\n{ffffff}Caso clique em confirmar, a arma sera adicionada ao seu slot.\n\n{F20A0A}Informacoes:\n\n{ffffff}Preco: {307800}R$%d.\n{ffffff}Preco por bala: {307800}N/A.\n{ffffff}Capacidade Maxima: {307800}%d.\n\n{ffffff}Digite abaixo a quantia de municao desejada para sua nova arma:",
                ItemsAmmuNation[listitem][ItemNome], ItemsAmmuNation[listitem][ItemValor], ItemsAmmuNation[listitem][ItemBMax]);
            }
            else {
                format( _str@, sizeof( _str@ ), "{FFFFFF}Voce tem certeza que deseja comprar um(a) {307800}%s?\n\n{ffffff}Caso clique em confirmar, a arma sera adicionada ao seu slot.\n\n{F20A0A}Informacoes:\n\n{ffffff}Preco: {307800}R$%d.\n{ffffff}Preco por bala: {307800}R$%d.\n{ffffff}Capacidade Maxima: {307800}%d.\n\n{ffffff}Digite abaixo a quantia de municao desejada para sua nova arma:",
                ItemsAmmuNation[listitem][ItemNome], ItemsAmmuNation[listitem][ItemValor], ItemsAmmuNation[listitem][ItemBPrice], ItemsAmmuNation[listitem][ItemBMax]);
            }
            ShowPlayerDialog(playerid, DIALOG_CONFIRMAR, DIALOG_STYLE_INPUT, "Confirmar compra", _str@, "Confirmar", "Cancelar");
            ComprandoArma[ playerid ] = listitem;
            return 1;
        }

        case DIALOG_TUNAR:
        {
            if(!response)
            {
                fadeIn( playerid, 900);
                SetTimerEx("SairMenuTuning", 1000, false, "i", playerid);

                SendClientMessage(playerid, -1, "{EEA8E8}Voce saiu do menu!");
                return true;
            }

            switch(listitem)
            {
                //Cores
                case 0:
                {
                    SetPlayerCameraPos(playerid, 1655.4886, -1812.8424, 15.9743);
                    SetPlayerCameraLookAt(playerid, 1655.5623, -1811.8424, 15.6491);

                    SetPlayerPosEx( playerid, 1654.93494, -1816.42883, 12.55911, 0.0, 0, (playerid+1));
                    Freeze( playerid );

                    SetVehiclePosEx(TuningVehicleID[ playerid ], 1656.3052, -1804.4642, 13.3283, 207.7799, 0, (playerid+1));

                    ShowPlayerDialog( playerid, DIALOG_TUNING_CORES, DIALOG_STYLE_INPUT, "{F2F4F3}..:: Cores Veicular ::..", "{F2F4F3}Digite os ID's que voce deseja adicionar ao veiculo,\na funilaria tem preco fixo de {51FE8B}R$500,00 {F2F4F3}pela pintura,\ncoloque os ID's das cores escolhidas, lembrando que os id's alternam entre 0-255\nvoce pode consultar a lista de cores a qualquer momento acessando nosso forum\n"#SV_SITE" ou Wiki SA-MP\n\n\nCor ID:", "Confirmar", "Cancelar" );
                }
                //Nitro
                case 1:
                {
                    if(IsAMotoEx(TuningVehicleID[ playerid ]))
                    {
                        ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
                        ShowDialogTunar(playerid);
                        return true;
                    }
                    else if(GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_NITRO) != 0)
                    {
                        ErroMSG(playerid, "Este veiculo ja possui nitro instalado!");
                        ShowDialogTunar(playerid);
                        return true;
                    }

                    TuningCompraID[ playerid ] = COMPRA_NITRO;
                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um nitro em um veiculo e de {59FC85}R$ 2,600\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
                }
                //Rodas
                case 2:
                {
                    if(IsAMotoEx(TuningVehicleID[ playerid ]))
                    {
                        ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
                        ShowDialogTunar(playerid);
                        return true;

                        } else {

                        SetPlayerCameraPos(playerid, 1655.6394, -1824.6425, 14.5684);
                        SetPlayerCameraLookAt(playerid, 1655.7416, -1825.6398, 14.5532);

                        SetPlayerPosEx( playerid, 1654.97778, -1821.43469, 12.56003, 0.0, 0, (playerid+1));

                        SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                        TuningCompraID[ playerid ] = COMPRA_RODAS;

                        ShowDialogTunarRodas(playerid);
                    }
                }
                //Som
                case 3:
                {
                   /* Loop(Vid, sizeof(VeiculoInfo))
                    {
                        if(GetPlayerVehicleID( playerid ) == VeiculoInfo[Vid][vVeiculo])
                        {
                            if(VeiculoInfo[Vid][vRadio] == true)
                            {
                                ErroMSG(playerid, "Este veiculo ja possui um radio!");
                                ShowDialogTunar(playerid);
                                return true;

                                } else {

                                TuningCompraID[ playerid ] = COMPRA_RADIO;

                                ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um radio veicular e de {59FC85}R$ 900\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
                            }
                        }
                    }*/              }
                //Suspensao
                case 4:
                {
                    if(IsAMotoEx(TuningVehicleID[ playerid ]))
                    {
                        ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
                        ShowDialogTunar(playerid);
                        return true;
                    }
                    else if(GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_HYDRAULICS) != 0){
                        ErroMSG(playerid, "Este veiculo ja possui suspensao hidraulica instalada!");
                        ShowDialogTunar(playerid);
                        return true;
                    }

                    TuningCompraID[ playerid ] = COMPRA_SUSPENSAO;

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de uma suspensao hidraulica no veiculo e de {59FC85}R$ 4,300\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
                }
                //Alarme
                case 5:
                {
                   /* Loop(Vid, sizeof(VeiculoInfo))
                    {
                        if(GetPlayerVehicleID( playerid ) == VeiculoInfo[Vid][vVeiculo])
                        {
                            if(VeiculoInfo[Vid][vAlarme] == true)
                            {
                                ErroMSG(playerid, "Este veiculo ja possui um alarme instalado!");
                                ShowDialogTunar(playerid);
                                return true;

                                } else {

                                TuningCompraID[ playerid ] = COMPRA_ALARME;

                                ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um alarme veicular e de {59FC85}R$ 3,900\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
                            }
                        }
                    }*/
                }
                //Neon
                case 6:
                {
                    if(IsAMotoEx(TuningVehicleID[ playerid ]))
                    {
                        ErroMSG(playerid, "Este veiculo nao pode ser equipado com este item!");
                        ShowDialogTunar(playerid);
                        return true;
                    }
                    /*ErroMSG(playerid, "Temporariamente desativado!");
                    ShowMenuForPlayer(MenuTuning, playerid);*/

                    SetPlayerCameraPos(playerid, 1655.6394, -1824.6425, 14.5684);
                    SetPlayerCameraLookAt(playerid, 1655.7416, -1825.6398, 14.5532);

                    SetPlayerPosEx( playerid, 1654.97778, -1821.43469, 12.56003, 0.0, 0, (playerid+1));

                    SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                    TuningCompraID[ playerid ] = COMPRA_NEON;
                    ShowPlayerDialog(playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_LIST, "Neons -  R$ 3200", "{FF0000}Vermelho\n{00FFFF}Azul\n{00D700}Verde\n{FFFF00}Amarelo\n{9955DE}Rosa\n{FFFFFF}Branco\n{660000}Remover Neom", "Instalar", "Voltar");

                    return true;
                }
                //Localizador GPS
                /*case 7:
                {
                   Loop(Vid, sizeof(VeiculoInfo))
                    {
                        if(GetPlayerVehicleID( playerid ) == VeiculoInfo[Vid][vVeiculo])
                        {
                            if(VeiculoInfo[Vid][vGPS] == true)
                            {
                                ErroMSG(playerid, "Este veiculo ja possui um localizador gps instalado!");
                                ShowDialogTunar(playerid);
                                return true;

                                } else {

                                TuningCompraID[ playerid ] = COMPRA_GPS;

                                ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "{FFFFFF}..:: Confirmacao ::..", "{FFFFFF}O preco para instalacao de um Localizador-GPS e de {59FC85}R$ 5,000\n{FFFFFF}deseja confirmar a compra?", "Confirmar", "Voltar" );
                            }
                        }
                    }
                }*/
            }
            return 1;
        }

        case DIALOG_TUNAR_RODAS:
        {
            if(!response)
            {
                SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
                SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

                SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
                ShowDialogTunar(playerid);
                return 1;
            }

            switch(listitem)
            {
                case 0:
                { //Import 1082
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1082);
                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 1: { //Atomic 1085
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1085);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 2: { //Mega 1074
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1074);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 3: { //Shadow 1073
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1073);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 4: { //Grove 1081
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1081);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 5: { //Dollar 1083
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1083);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 6: { //Twist 1078
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1078);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 7: { //Cutter 1079
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1079);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 8: { // Rimshine 1075
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1075);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 9: { // Wires 1076
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1076);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 10: { // Classic 1077
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1077);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
                case 11: { // Switch 1078
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1078);

                    ShowPlayerDialog( playerid, DIALOG_CONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "Confirmacao", "O modelo escolhido foi adicionado ao veiculo\ndeseja confirmar a compra?\n\nCusto: $1.000", "Confirmar", "Voltar" );
                }
            }
            return 1;
        }

		case DIALOG_RANKS:
		{
			if(!response) return 1;

			switch(listitem)
			{
            	case 0: return RankLevel(playerid);
                case 1: return RankMoney(playerid);
			}
            return 1;
		}

		case DIALOG_LISTA_RANKS:
		{
			if(!response) return ShowPlayerDialog(playerid, DIALOG_RANKS, DIALOG_STYLE_LIST, ""#SERVELOGO" - RANKS", "{A9F5F2}>{F2F2F2}Maior score\n{81F781}>{F2F2F2}Maior saldo bancario", "Ir", "Sair");
            if(response) return 1;
		}

		case DIALOG_mp3tt:
		{
			 new string[256];
		     if(response)
			 {

		              StopAudioStreamForAll(); //funçao de parar nosso audio .
		              PlayAudioStreamForAll(inputtext); // Funçao de dar Play ao nosso Audio!
		              new string2[256];
		              format(string2, sizeof(string2), "~y~DJ ~w~%s", GetName(playerid));
			          GameTextForAll(string2, 6000, 1);
		              for(new i = 0; i < MAX_PLAYERS; i++)
					  {
						if(IsPlayerConnected(i))
						{
							PlayerPlaySound(i, 1057, 0, 0, 0);
						}
					  }
                      if(PlayerInfo[playerid][musica] == 1)
			          {
		              format(string, sizeof(string), "{FFA500}O Radialista {FF0000}%s {FFA500}iniciou uma musíca para a radio {FF0000}[PLAY STYLE] {FFA500}caso nao queira escutar /pararmusica ", GetName(playerid));
		              SendClientMessageToAll(AzulClaro, string);
		              }
			  }
        }

		case DIALOG_PLATAFORMA:
		{
			if(response)
			{
                PlayerInfo[playerid][Mobile] = true;
                OnVerificarRegistro( playerid );

                } else {

                PlayerInfo[playerid][Mobile] = false;
                OnVerificarRegistro( playerid );
            }
            return 1;
		}

        case EmailCfg:
        {
			if(response)
			{
                if(ValidEmail(inputtext)){
					TutorialStatus[playerid]++;

					format( PlayerInfo[playerid][pEmail], 50, inputtext );
					OnEntrarTutorial(playerid);
					SendClientMessage(playerid, Verde, "Email Configurado Com sucesso!");
				}
				else
				{
					ErroMSG(playerid, "Email Invalido!");
					OnEntrarTutorial(playerid);
				}
			}
			else
			{
				TutorialStatus[playerid]--;
				OnEntrarTutorial(playerid);
			}
            return 1;
		}

        case CfgIdade:
        {
		    if(response){
		        if(IsNumeric( inputtext ))
		        {
		            if(strval( inputtext ) >= 1 && 100 > strval( inputtext )){
		            	SendClientMessage(playerid, Verde, "[ Play Style ] Idade Configurada com sucesso.");
					    PlayerInfo[ playerid ] [ pIdade ] = strval( inputtext );

                        TutorialStatus[playerid]++;
                        OnEntrarTutorial(playerid);
					}
					else
					{
						SendClientMessage(playerid, -1, ""#SERVELOGO" Desculpe mas sua idade e inadequada para se registrar.");
						Kick( playerid );
					}
				}
				else OnEntrarTutorial(playerid);
			}
			else {
			    TutorialStatus[playerid]--;
				OnEntrarTutorial(playerid);
			}
			return true;
		}

		case REmail:
		{
            #if defined MailerUser
			if(response){
				new
					emailstr[ 500 ],
					_ste[21],
					RandEmail = (random(2000)*random(5))
				;
				format(_ste, 20, "%i", RandEmail);

				format( emailstr, sizeof( emailstr ),"Ola, Saudacoes !\n\nHoje: %s, foi solicitado um pedido de codigo de recuperacao de senha com seu email\n\nSegue os dados abaixo:\n\nNome/Nick: %s\n\nCodigo de recuperacao: %s ( codigo para entrada e redefinicao da sua senha. )\n\nMensagem automatica, favor nao responde-la :)", GetDate(), GetName( playerid ), Encriptar(_ste) );
				SendMail(PlayerInfo[ playerid ][ pEmail ], EmailSent, "..:: LifeVirtual :..", SentEmail, emailstr);

                SetSenha2Ativa(playerid, 1);
                DOF2_SetString(CI(playerid), "CodigoRecuperacao", Encriptar(_ste));
				DOF2_SaveFile();

				SendClientMessage(playerid, -1, "O Email enviado com sucesso..");
                SendClientMessage(playerid, -1, "Voce recebera um E-mail contendo o codigo de recuperacao da para recuperacao da conta, Aguarde...");
                SendClientMessage(playerid, -1, "O mesmo pode demorar de 5 a 10 minutos, nao esqueca de verificar sua caixa de 'Spam'");
				Kick( playerid );
			}
			else
			{
	 			SendClientMessage(playerid, -1, ""#SERVELOGO" Voce nao quis Enviar o Email e foi kickado :)");
			    Kick(playerid);
			}
			#endif
			return true;
		}

		case ConfConta:
		{
            if( response )
            {
                switch(listitem)
                {
					case 0:
					{
						if(PlayerInfo[playerid][Cash] < PRECO_NICK) return ErroMSG(playerid, "Voce nao tem cash suficiente para completar essa acao!");

						ShowPlayerDialog(playerid, ConfNick, DIALOG_STYLE_INPUT, "Mudanca de nick/nome", "{ffffff}Digite seu novo nick abaixo, mas lembre-se\ndo limite de {00FF40}3{ffffff} e {00FF40}20{ffffff} caracteres, sem caracteres especiais {00FF40}@*'{ffffff}..etc\ne nao ultilizar espaco entre caracteres do nick.", "Mudar", "Voltar");
					}
					//Conf Senha
					case 1: ShowPlayerDialog(playerid, ConfSenha, DIALOG_STYLE_PASSWORD, "SEGURANcA DA CONTA", "{ffffff}Para realizar a modificacao da senha e preciso\nque nos forneca a atual para sua propria seguranca\n\nDigite sua senha atual abaixo:!", "Confirmar", " Cancelar");

                    //Conf plataforma
                    case 2: ShowPlayerDialog(playerid, ConfPlataforma, DIALOG_STYLE_LIST, "Plataforma", "{53A6DA}PC\n{FF7FE6}Mobile", "Confirmar", " Cancelar");

					//Conf Sexo
					case 3: ShowPlayerDialog(playerid, ConfSex, DIALOG_STYLE_LIST, "Sexo", "{53A6DA}Masculino\n{FF7FE6}Feminino", "Confirmar", " Cancelar");

					case 4: { //Conf Email
					    static str[200];
						format(str, sizeof(str), "{ffffff}Para realizar a modificacao do seu email\ndigite o novo email abaixo\n\nEmail Atual: {58FAF4}%s", PlayerInfo[ playerid ][ pEmail ]);
						ShowPlayerDialog(playerid, ConfEmail, DIALOG_STYLE_INPUT, "Alterando/Email", str, "Confirmar", " Cancelar");
					}
					case 5:{ //Conf Celular
                        if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao possui um celular!");

						static str[200];
						format(str, sizeof(str), "{FFFFFF}Ligacoes: %s\n{FFFFFF}SMS: %s", CelularInfo[ playerid ][ pBlockCall ] == 1 ? ("{FF0000}Bloqueado"):("{01DF01}Permitido"), CelularInfo[playerid][ pBlockSMS ] == 1 ? ("{FF0000}Bloqueado"):("{01DF01}Permitido"));
						ShowPlayerDialog(playerid, ConfCell, DIALOG_STYLE_LIST, "CFG Celular", str, "Escolher", " Cancelar");
         			}
				    case 6:{ //Confgs do Chat
				        if(PlayerInfo[ playerid ][ pBlockchat ] == true){
					        static str[ 129 ];
					        format(str, sizeof(str), "{AC58FA}Seu chat esta temporariamente bloqueado, tempo restante para desbloqueio: %s", Convert(PlayerInfo[ playerid ][ pBlockTemp ], 1));
					        SCM(playerid, -1, str);
							return true;
						}
						else {
                            static str[150];
							format(str, sizeof(str), "{FFFFFF}Anuncios do servidor: %s\nAnuncios de conexao: %s\nChat Ajuda: %s\nLimpar Chat\n{DBB4FE}Construindo..", PlayerInfo[ playerid ][ pChatABlock ] == true ? ("{01DF01}Permitido"):("{FF0000}Bloqueado"), PlayerInfo[ playerid ][ pTextABlock ] == true ? ("{01DF01}Permitido"):("{FF0000}Bloqueado"), PlayerInfo[ playerid ][ pChatCA ] == true ? ("{01DF01}Permitido"):("{FF0000}Bloqueado"));
							ShowPlayerDialog(playerid, ConfChat, DIALOG_STYLE_LIST, "Config Chat", str, "Modificar", "Voltar");
						}
					}
					case 7:{
					    new
							str1[ 20 ],
					    	str2[ 50 ],
					    	str3[ 100 ]
						;

					    if(PlayerInfo[ playerid ][ pSpawnType ] == 1) str1 = "Casa 1";
					    else if(PlayerInfo[ playerid ][ pSpawnType ] == 2) str1 = "Casa 2";
					    else if(PlayerInfo[ playerid ][ pSpawnType ] == 3) str1 = "Onde parou";
				        format(str2, sizeof(str2), "{CBF750}Atual: {FFFFFF}%s", str1);

				        format(str3, sizeof(str3), "{A4FFDD}> %s\n{A4FFDD}> %s\n{A4FFDD}> {FFFFFF}Onde parou",
						PlayerInfo[ playerid ][ pHouse1 ] == 999 ? ("{A0A4A3}Casa 1"):("{FFFFFF}Casa 1"),
                        PlayerInfo[ playerid ][ pHouse2 ] == 999 ? ("{A0A4A3}Casa 2"):("{FFFFFF}Casa 2"));
						ShowPlayerDialog(playerid, ConfSpawn, DIALOG_STYLE_LIST, str2, str3, "Escolher", " Voltar");
					}
					case 8:{ //Definicoes Gerais
                        static str[250];
						format(str, sizeof(str), "{12A402}> {FFFFFF}Coldre %s\n{12A402}> {FFFFFF}Velocimetro %s\n{12A402}> {FFFFFF}Relogio UP: %s\n{12A402}> {FFFFFF}Chat Kill: %s", PlayerInfo[ playerid ][ CfgColdreAtivo ] == true ? ("{12A402}Ativo"):("{FF0000}Desativado"), PlayerInfo[ playerid ][ CfgVelocimetro ] == true ? ("{12A402}Mostrar"):("{FF0000}Nao Mostrar"), PlayerInfo[ playerid ][ CfgRelogioUP ] == true ? ("{12A402}Mostrar"):("{FF0000}Nao Mostrar"), PlayerInfo[ playerid ][ CfgChatKill ] == true ? ("{12A402}Ativo"):("{FF0000}Desativado"));
                        ShowPlayerDialog(playerid, Conta_Defines, DIALOG_STYLE_LIST, "Definicoes Gerais", str, "Modificar", " Voltar");

					}
                }
			}
            return 1;
		}

		case ConfChat: {
		    if(!response) return callcmd::minhaconta( playerid );
			if(listitem == 0) {

			    if(PlayerInfo[ playerid ][ pChatABlock ] == false ){
			        PlayerInfo[ playerid ][ pChatABlock ] = true;
			    }
				else PlayerInfo[ playerid ][ pChatABlock ] = false;

				OnDialogResponse(playerid, ConfConta, 1, 5, "");
			    InfoMSG(playerid, "Configuracoes modificadas!");
			}
			if(listitem == 1){
			    if(PlayerInfo[ playerid ][ pTextABlock ] == false ){
			        PlayerInfo[ playerid ][ pTextABlock ] = true;
			    }
				else PlayerInfo[ playerid ][ pTextABlock ] = false;

				OnDialogResponse(playerid, ConfConta, 1, 5, "");
			    InfoMSG(playerid, "Configuracoes modificadas!");
			}
			if(listitem == 2){
			    if(PlayerInfo[ playerid ][ pChatCA ] == false ){
			        PlayerInfo[ playerid ][ pChatCA ] = true;
			    }
				else PlayerInfo[ playerid ][ pChatCA ] = false;

				OnDialogResponse(playerid, ConfConta, 1, 5, "");
			    InfoMSG(playerid, "Configuracoes modificadas!");
			}
			if(listitem == 3) return callcmd::lc( playerid );
            return 1;

		}

		case ConfSpawn:
        {
		    if(!response) return callcmd::minhaconta( playerid );

			if(listitem == 0){
				if(PlayerInfo[ playerid ][ pHouse1 ] == 999) return ErroMSG(playerid, "Voce nao tem Nenhuma casa");
			    SCM(playerid, VerdeClaro, "Voce mudou seu spawn de login para sua Casa 1.");
				PlayerInfo[ playerid ][ pSpawnType ] = 1;
			}
			else if(listitem == 1){
				if(PlayerInfo[ playerid ][ pHouse2 ] == 999) return ErroMSG(playerid, "Voce nao tem 2 Casas");
			    SCM(playerid, VerdeClaro, "Voce mudou seu spawn de login para sua Casa 2.");
				PlayerInfo[ playerid ][ pSpawnType ] = 2;
			}
			else if(listitem == 2){
			    if(PlayerInfo[playerid][pOrg] > 0){
			    	SCM(playerid, VerdeClaro, "Voce mudou seu spawn de login para 'Ultimo Local'.");
				}
				else SCM(playerid, VerdeClaro, "Voce mudou spawn de login para Local Civil.");

				PlayerInfo[ playerid ][ pSpawnType ] = 3;
			}
			OnSalvarDados(playerid);
            return 1;
		}

        case Conta_Defines:
        {
            if(!response) return callcmd::minhaconta( playerid );

            if(listitem == 0){
                if(PlayerInfo[ playerid ][ pColdre ] != 1) return ErroMSG(playerid, "Voce nao tem um Coldre, compre um em um loja de armas");

                if(PlayerInfo[ playerid ][ CfgColdreAtivo ] == true){

                    RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);

                	PlayerInfo[ playerid ][ CfgColdreAtivo ] = false;
                    SCM(playerid, -1, "{A9B1AC}Voce Desativou seu Coldre.");
                }
                else
                {
                    #if defined ArmaColada
	                	PlayerInfo[ playerid ][ CfgColdreAtivo ] = true;
	                    SCM(playerid, -1, "{A9B1AC}Voce Ativou seu Coldre.");
					#else
					    SCM(playerid, 0xFF0000AA, "Sistema de Coldre Desativado.");
   					#endif

                }
            }
            if(listitem == 1)
            {
                if(PlayerInfo[ playerid ][ CfgVelocimetro ] == true)
                {
					PlayerInfo[ playerid ][ CfgVelocimetro ] = false;
                    SCM(playerid, -1, "{A9B1AC}Voce desativou seu Velocimetro.");

                    for(new TextId = 0; TextId < sizeof(PlayerTD); TextId++) PlayerTextDrawHide(playerid, PlayerTD[TextId][playerid]);
                    KillTimer(carVelocimetro[playerid]);

				}
				else {
					PlayerInfo[ playerid ][ CfgVelocimetro ] = true;
					SCM(playerid, -1, "{A9B1AC}Voce ativou seu Velocimetro.");

                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                        {
                            if(!IsABike(playerid))
                            {
                                for(new TextId = 0; TextId < sizeof(PlayerTD); TextId++) PlayerTextDrawShow(playerid, PlayerTD[TextId][playerid]);
                                carVelocimetro[playerid] = SetTimerEx( "atualizarDados", 300, true, "d", playerid );

                            }
                        }
                    }
				}
			}
			if(listitem == 2){
                if(PlayerInfo[ playerid ][ CfgRelogioUP ] == true){
					PlayerInfo[ playerid ][ CfgRelogioUP ] = false;
                    SCM(playerid, -1, "{A9B1AC}Voce desativou seu Relogio UP.");
                    PlayerTextDrawHide(playerid, UPText[ playerid ][ 0 ]);
				}
				else {
					PlayerInfo[ playerid ][ CfgRelogioUP ] = true;
					SCM(playerid, -1, "{A9B1AC}Voce ativou seu Relogio UP.");
					PlayerTextDrawShow(playerid, UPText[ playerid ][ 0 ]);
				}
			}
            if(listitem == 3){
                if(PlayerInfo[ playerid ][ CfgChatKill ] == true){
                    PlayerInfo[ playerid ][ CfgChatKill ] = false;
                    SCM(playerid, -1, "{A9B1AC}Voce desativou o ChatKill.");
                }
                else {
                    PlayerInfo[ playerid ][ CfgChatKill ] = true;
                    SCM(playerid, -1, "{A9B1AC}Voce ativou seu ChatKill.");
                }
            }
            return 1;
        }

		case ConfNick:
        {
            if( response ){

                static str[ 129 ], cFile[ 50 ], cFile2[ 50 ];

                format(cFile2, sizeof(cFile2), "%s", PlayerInfo[ playerid ][ pName ]);
				format(cFile, sizeof(cFile), PASTA_CONTAS, inputtext);

	            if(GetPlayerGrana( playerid ) < PRECO_NICK) return ErroMSG(playerid, "Voce nao tem grana o suficiente para completar esta acao.");
				if(strlen(inputtext) > 20 || strlen(inputtext) < 3) {
					ErroMSG(playerid, "Seu novo nick e muito grande ou pequeno demais !");
					ShowPlayerDialog(playerid, ConfNick, DIALOG_STYLE_INPUT, "Mudanca de nick/nome", "{ffffff}Digite seu novo nick abaixo, mas lembre-se\ndo limite de {00FF40}3{ffffff} e {00FF40}20{ffffff} caracteres, sem caracteres especiais {00FF40}*',{ffffff}..etc\ne nao ultilizar espaço entre caracteres do nick.", "Mudar", "Voltar");
					return true;
				}
				Loop(i, sizeof(NicksInvalidos)){
					if(strfind(inputtext, NicksInvalidos[ i ], true) != -1){
					    ErroMSG(playerid, "Seu novo nick e invalido em nosso servidor !");
						ShowPlayerDialog(playerid, ConfNick, DIALOG_STYLE_INPUT, "Mudança de nick/nome", "{ffffff}Digite seu novo nick abaixo, mas lembre-se\ndo limite de caracteres {00FF40}20{ffffff}, sem caracteres especiais {00FF40}@*'{ffffff}..etc\ne nao ultilizar espaço entre caracteres do nick.", "Mudar", "Voltar");
						return true;
					}
				}
				Loop(texto, strlen(inputtext)){
					if(inputtext[texto] == ' '){
					    ErroMSG(playerid, "e proibido uso de 'ESPAÐO' entre os caracteres do seu novo nick.");
						ShowPlayerDialog(playerid, ConfNick, DIALOG_STYLE_INPUT, "Mudança de nick/nome", "{ffffff}Digite seu novo nick abaixo, mas lembre-se\ndo limite de caracteres {00FF40}20{ffffff}, sem caracteres especiais {00FF40}@*'{ffffff}..etc\ne nao ultilizar espaço entre caracteres do nick.", "Mudar", "Voltar");
						return true;
					}
				}
				if(DOF2_FileExists(cFile)){
				 	ErroMSG(playerid, "Este nick ja esta em uso.");
					ShowPlayerDialog(playerid, ConfNick, DIALOG_STYLE_INPUT, "Mudança de nick/nome", "{ffffff}Digite seu novo nick abaixo, mas lembre-se\ndo limite de caracteres {00FF40}20{ffffff}, sem caracteres especiais {00FF40}@*'{ffffff}..etc\ne nao ultilizar espaço entre caracteres do nick.", "Mudar", "Voltar");
					return true;
				}

				static ToyFile[128];
	 	 	 	format(ToyFile, sizeof ToyFile, PASTA_ACESSORIOS, cFile2);
	 	 	 	if(DOF2_FileExists(ToyFile)){
	 	 	 	    DOF2_RenameFile(ToyFile, cFile);
				}

				DOF2_RenameFile(CI( playerid ), cFile);

				format(PlayerInfo[playerid][pName], MAX_PLAYER_NAME, "%s", inputtext);
				SetPlayerName(playerid, inputtext);

                if(PlayerInfo[ playerid ][ pHouse1 ] != 999){
					strmid(HouseInfo[PlayerInfo[ playerid ][ pHouse1 ]][hOwner], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
                    SaveHouse(PlayerInfo[ playerid ][ pHouse1 ]);
				}
				if(PlayerInfo[ playerid ][ pHouse2 ] != 999){
					strmid(HouseInfo[PlayerInfo[ playerid ][ pHouse2 ]][hOwner], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
				    SaveHouse(PlayerInfo[ playerid ][ pHouse2 ]);
				}
                if(PlayerInfo[ playerid ][ pEmpKey ] != 999){
					strmid(EmpInfo[PlayerInfo[ playerid ][ pEmpKey ]][EDono], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
                    SaveEmpresa(PlayerInfo[ playerid ][ pEmpKey ]);
				}
				
				new i = PlayerInfo[ playerid ][ pOrg ];
				if(i != 0){
				    if(strcmp(cFile2, InfoOrg[i][Lider], true) == 0){
         				strmid(InfoOrg[i][Lider], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
                        DOF2_SetString(FileOrg(i), "Lider", InfoOrg[i][Lider]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][SubLider], true ) == 0){
						strmid(InfoOrg[i][SubLider], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
                        DOF2_SetString(FileOrg(i), "SubLider1", InfoOrg[i][SubLider]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][SubLider2],true ) == 0){
						strmid(InfoOrg[i][SubLider2], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "SubLider2", InfoOrg[i][SubLider2]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2,InfoOrg[i][Membro1], true ) == 0){
						strmid(InfoOrg[i][Membro1], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro1", InfoOrg[i][Membro1]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro2], true) == 0){
						strmid(InfoOrg[i][Membro2], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro2", InfoOrg[i][Membro2]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro3], true) == 0){
					    strmid(InfoOrg[i][Membro3], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro3", InfoOrg[i][Membro3]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro4], true) == 0){
						strmid(InfoOrg[i][Membro4], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro4", InfoOrg[i][Membro4]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro5], true) == 0){
						strmid(InfoOrg[i][Membro5], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro5", InfoOrg[i][Membro5]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro6], true) == 0){
                    	strmid(InfoOrg[i][Membro6], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro6", InfoOrg[i][Membro6]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro7], true) == 0){
						strmid(InfoOrg[i][Membro7], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
                        DOF2_SetString(FileOrg(i), "Membro7", InfoOrg[i][Membro7]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro8], true) == 0){
						strmid(InfoOrg[i][Membro8], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro8", InfoOrg[i][Membro8]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro9], true) == 0){
						strmid(InfoOrg[i][Membro1], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro9", InfoOrg[i][Membro9]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro10], true) == 0){
						strmid(InfoOrg[i][Membro10], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro10", InfoOrg[i][Membro10]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro11], true) == 0){
						strmid(InfoOrg[i][Membro11], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro11", InfoOrg[i][Membro11]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro12], true) == 0){
						strmid(InfoOrg[i][Membro12], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro12", InfoOrg[i][Membro12]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro13], true) == 0){
						strmid(InfoOrg[i][Membro13], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro13", InfoOrg[i][Membro13]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro14], true) == 0){
						strmid(InfoOrg[i][Membro14], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro14", InfoOrg[i][Membro14]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro15], true) == 0){
						strmid(InfoOrg[i][Membro15], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro15", InfoOrg[i][Membro15]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro16], true) == 0){
						strmid(InfoOrg[i][Membro16], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro16", InfoOrg[i][Membro16]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro17], true) == 0){
						strmid(InfoOrg[i][Membro17], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro17", InfoOrg[i][Membro17]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro18], true) == 0){
						strmid(InfoOrg[i][Membro18], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro18", InfoOrg[i][Membro18]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro19], true) == 0){
						strmid(InfoOrg[i][Membro19], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro19", InfoOrg[i][Membro19]);
   						DOF2_SaveFile();
					}
					else if(strcmp(cFile2, InfoOrg[i][Membro20], true) == 0){
						strmid(InfoOrg[i][Membro20], PlayerInfo[playerid][pName], 0, strlen(PlayerInfo[playerid][pName]), 255);
						DOF2_SetString(FileOrg(i), "Membro20", InfoOrg[i][Membro20]);
   						DOF2_SaveFile();
					}
		    	}

				ActionPlayerGrana(playerid, "-", PRECO_NICK, 1);
                OnSalvarDados( playerid );

				format(str, sizeof( str ), "Voce alterou seu nome de usuario para: %s", PlayerInfo[ playerid ][ pName ]);
				InfoMSG(playerid, str);

				format(str, sizeof( str ), "{F7F387}| Servidor | - %s mudou seu nick para: %s - (%s)", cFile2, PlayerInfo[ playerid ][ pName ], GetDateEx());
				SCMALL( str );

				format(STRLOG, sizeof(STRLOG), "[%s] %s mudou seu nick para: %s.", GetDateEx(), cFile2, PlayerInfo[ playerid ][ pName ]);
				SLog("Nick.log", STRLOG);

				GameTextForPlayer(playerid, "~w~Modificado com~n~sucesso", 3000, 1);
				PlaySoundForPlayer(playerid, 1057);

				DeletePlayerRank(cFile2), CreatePlayerRank(playerid), UpdatePlayerRank(playerid), UpdateStatsRank(playerid, 1);
			}
            return 1;
		}

		case DIALOG_AJUDA:
		{
            if(!response) return 1;

			new strajuda[450];
			switch(listitem)//"
			{
				case 0:
				{
					strcat(strajuda, "{FF6600}|_{FFFFFF} Player {FF6600}\n\n");
				    strcat(strajuda, "{BDBDBD}/gps /me, /rg, /andar /transferir /comprarcash /loja /duvida /inventario /ranks\n");
				    strcat(strajuda, "(/g)ritar, (/s)ussurar, /senha, /meugalao, /sairfila, /fila, /capacete /meugalao\n");
				    strcat(strajuda, "/entrar, /sair, /minhaconta /lc /reportar /meubilhete /solicitar \n");
			        strcat(strajuda, "/levelprofissoes (/lprofs), /sairemprego /servidor /mostrarrg /animes\n");
				    strcat(strajuda, "{FF0000}Construindo ...."); //#Construindo ....);
				}
				case 1:
				{
				    strcat(strajuda, "{FF6600}|_{FFFFFF} Armas {FF6600}\n\n");
			        strcat(strajuda, "{FFFFFF}Para ter uma arma, voce precisa de ter nivel igual ou superior a 2.\n");
			        strcat(strajuda, "Voce pode adiquirir armas simples na loja de armas Ammu Nation (/gps).\n");
			        strcat(strajuda, "Ou comprar de um vendedor de armas!.\n");
			        strcat(strajuda, "{BDBDBD}Comandos uteis: {E4E754}/inventario /guardarinv /dropar.\n");
					strcat(strajuda, "{FF0000}Construindo ...."); //#Construindo ....);
				}

				case 2:
				{
			        if(PlayerInfo[playerid][pCargo] >= 6)
			    	{
						strcat(strajuda, "{FF6600}|_{FFFFFF} Lider {FF6600}\n\n");
						strcat(strajuda, "{FFFFFF}Todos seus poderes de lider so podem ser excercidos dentro de sua HQ!");
					}
				}

				case 3: ShowPlayerAjudaOrg(playerid);

			    case 4:
			    {
			        if(!isPlayerCop(playerid))
			        {
						ShowAjudaEmprego(playerid, PlayerInfo[ playerid ][ pEmprego ]);
					}
					else ShowPlayerAjudaOrg(playerid);
			 	}

				case 5:
				{
			    	strcat(strajuda, "{FF6600}|_{FFFFFF} Casas {FF6600}\n\n");
					strcat(strajuda, "{FFFFFF}Para que? R: Voce precisa de uma casa para ter um local de descanso e tambem se alimentar..\n");
					strcat(strajuda, "Onde Comprar?: R: Va ate uma imobiliaria mais proxima e confira os preços e locais.. /gps\n");
					strcat(strajuda, "Nao tem dinheiro? R: opite pelo aluguel de uma suite no Hotel de LS /gps\n");
					strcat(strajuda, "{BDBDBD}Comandos uteis: /casa /gps");
				}

				case 6:
				{
			    	strcat(strajuda, "{FF6600}|_{FFFFFF} Empresas {FF6600}\n\n");
					strcat(strajuda, "{ffffff}Para que? R: As empresas servem como meio de negocio e uma forma de 'lucro extra'\n");
					strcat(strajuda, "em sua conta, Empresas costumam ter um valor alto, porem redem Lucros aos 'Proprietarios'\n");
					strcat(strajuda, "dependendo do negocio.\n");
					strcat(strajuda, "uma empresa contem: um Dono apenas que usurfrui do lucro\n");
					strcat(strajuda, "Onde Comprar?: R: Va ate uma imobiliaria mais proxima e confira os preços e locais.. /gps\n");
					strcat(strajuda, "{BDBDBD}Comandos uteis: /empresa /gps");
				}
				case 7:
				{
			    	strcat(strajuda, "{FF6600}|_{FFFFFF} Veiculos {FF6600}\n\n");
					strcat(strajuda, "{ffffff}Onde Comprar?: R: Va ate uma concessionaria mais proxima e confira os preços e Modelos.. /gps\n");
					strcat(strajuda, "Nao tem dinheiro? R: opite pelo emprestimo em um banco...\n");
					strcat(strajuda, "{BDBDBD}Comandos Veiculares: /motor (Y), /farol (N), /radios\n");
					strcat(strajuda, "/vportas, /vcapo, /vpmalas /infoveiculo (/painelveiculo /meucarro /meuveiculo)\n");
				}
				case 8:
				{
				   	strcat(strajuda, "{FF6600}|_{FFFFFF} Portao {FF6600}\n\n");
					strcat(strajuda, "{BDBDBD}/infoportao");
					strcat(strajuda, "/darcopia [id] [portao-id]");
					strcat(strajuda, "/tomarchave [nick] [portao-id]");
				}
				case 9:
				{
				    strcat(strajuda, "{FF6600}|_{FFFFFF} Animes {FF6600}\n\n");
				    strcat(strajuda, "{BDBDBD}/sentar /deitar [1-3] /handsup /dance [1-4] /strip [1-3]\n");
				    strcat(strajuda, "/punheta /mijar /taichi /cruzarb [1-2] /assalto\n");
				    strcat(strajuda, "Para sair do anime pressione 'Espaço'");
				}
				case 10:
				{
				    strcat(strajuda, "{FF6600}|_{FFFFFF} Caca {FF6600}\n\n");
					strcat(strajuda, "Para realizar uma caça e preciso um rifle que pode ser encontrado na ammu nation\n");
				    strcat(strajuda, "e voce vai ate o local de caça usando seu /gps, segue abaixo os comandos uteis de caça:\n");
				    strcat(strajuda, "{BDBDBD}/cacar /vendercaca /pegarcervo");
				}
				case 11:
				{
				    switch(CelularInfo[ playerid ][ pCell ])
				    {
						case 1:
						{
							strcat(strajuda, "{FF6600}|_{FFFFFF} Celular PrePago {FF6600}\n\n");
							strcat(strajuda, "{FFFFFF}Voce possui um celular {FF0000}Pre{FFFFFF}-{FF0000}pago{FFFFFF}, isso significa que voce tem que {FFFF00}'Recarrega-lo'\n");
							strcat(strajuda, "adicionando {FFFF00}creditos {FFFFFF}que voce pode encontrar em uma loja de ultilidades '{FFFF00}/gps{FFFFFF}'\n");
							strcat(strajuda, "A cada chamada sera cobrado o preço de: {3C982E}R$ 0,25 {FFFFFF}Centavos por minuto, e a cada SMS o preço de: {3C982E}R$ 0,10 {FFFFFF}Centavos\n");
							strcat(strajuda, "Acabando seu saldo de creditos voce nao vai mais consseguir ligar ou mandar sms ate que recarregue seu celular .\n");
			                strcat(strajuda, "{BDBDBD}Comandos uteis: /ligar, (/des)ligar, /sms, /agenda, /blockcell");
						}
						default:
						{
						    strcat(strajuda, "{FF6600}|_{FFFFFF} Celular {FF6600}\n\n");
							strcat(strajuda, "{FFFFFF}Voce nao tem um celular compre um em qualquer Loja de ultilidades !\n");
							strcat(strajuda, "Voce pode optar por comprar um Celular {FF0000}Pre{FFFFFF} ou {FF0000}Pos{FFFFFF}{FF0000}pago{FFFFFF}\n");
							strcat(strajuda, "Ao comprar um celular com algum dos dois planos este menu ira se modificar ....\n");
							strcat(strajuda, "use: /gps e va ate a loja de ultilidades ..");
						}

					}
				}
				case 12:
				{
					return callcmd::senha( playerid );
				}

			}
			ShowPlayerDialog(playerid, DIALOG_AJUDA1, DIALOG_STYLE_MSGBOX, "AJUDA", strajuda, "Ok", "");
            return 1;
		}

		case ConfSenha: {
            if( response ){
				static
					string[ 50 ]
				;
				format(string, sizeof string, "%s", Encriptar(inputtext));

			 	if(strcmp(PlayerInfo[playerid][pSenha], string, true) == 0){
			 	    ShowPlayerDialog(playerid, ConfSenha2, DIALOG_STYLE_INPUT, "Nova Senha de acesso", "{ffffff}Para finalizar, digite abaixo sua {00FFBF}nova senha {ffffff}de acesso\n\n\nA senha deve conter entre "#MIN_SENHA" e "#MAX_SENHA" caracteres!", "Confirmar", " Cancelar");
				}
				else
				{
					ErroMSG(playerid, "Senha incorreta, tente novamente!");
					ShowPlayerDialog(playerid, ConfSenha, DIALOG_STYLE_PASSWORD, "SEGURANÇA DA CONTA", "{ffffff}Para realizar a modificaçao da senha e preciso\nque nos forneça a atual para sua propria segurança\n\nDigite sua senha atual abaixo:!", "Confirmar", " Cancelar");
					//Senha incorreta

				}
            }
            return 1;
		}

		case ConfSenha2: {
            if( response ){
                if(strlen(inputtext) < MIN_SENHA || strlen(inputtext) > MAX_SENHA){
				    ErroMSG(playerid, "Sua senha tem algum caractere invalido ou quebra os limites minimo ou maximo do servidor.");
					ShowPlayerDialog(playerid, ConfSenha2, DIALOG_STYLE_INPUT, "Nova Senha de acesso", "{ffffff}Para finalizar, digite abaixo sua {00FFBF}nova senha {ffffff}de acesso\n\n\nA senha deve conter entre "#MIN_SENHA" e "#MAX_SENHA" caracteres!", "Confirmar", " Cancelar");
				}
				else
				{
					InfoMSG(playerid, "Senha modificada com sucesso !");

			    	strmid(PlayerInfo[playerid][pSenha], Encriptar(inputtext), 0, strlen( PlayerInfo[playerid][pSenha] ), 255);
					OnSalvarDados( playerid );
				}
			}
            return 1;
		}

		case ConfCell: {
            if( response ){
                if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao possui um celular!");
				if(listitem == 0){
					if(CelularInfo[ playerid ][ pBlockCall ] == 1){
						CelularInfo[ playerid ][ pBlockCall ] = 0;
						InfoMSG(playerid, "Voce desbloqueou as chamadas para seu Celular");
						OnSalvarDados( playerid );
					}
					else
					{
						CelularInfo[ playerid ][ pBlockCall ] = 1;
						InfoMSG(playerid, "Voce bloqueou as chamadas para seu Celular");
						OnSalvarDados( playerid );
					}
				}
				if(listitem == 1){
				    if(CelularInfo[ playerid ][ pBlockSMS ] == 1){
					    CelularInfo[ playerid ][ pBlockSMS ] = 0;
					    InfoMSG(playerid, "Voce desbloqueou os envios de SMS para seu Celular");
					    OnSalvarDados( playerid );
					}
					else
					{
					    CelularInfo[ playerid ][ pBlockSMS ] = 1;
					    InfoMSG(playerid, "Voce bloqueou os envios de SMS para seu Celular");
					    OnSalvarDados( playerid );
					}
				}
            }
            return 1;
        }

		case ConfEmail: {
            if( response ){
				if(ValidEmail(inputtext)){
					static str[ 129 ];
					strmid(PlayerInfo[playerid][pEmail], inputtext, 0, strlen( PlayerInfo[playerid][pEmail] ), 255);
					OnSalvarDados( playerid );
					format(str, sizeof(str), "{819FF7}[ Play Style ] - Voce alterou seu Email para: %s", PlayerInfo[playerid][pEmail]);
					SCM(playerid, -1, str);
				}
				else ErroMSG(playerid, "Email invalido, caso seja exatamente este seu email reporte como bug !");
			}
            return 1;
		}

		case ConfSex:
        {
            if(response)
			{
				if(listitem == 0){

					SendClientMessage(playerid, 0x12878DFF, #Voce mudou seu Genero para Masculino.);
					PlayerInfo[ playerid ][ pSex ] = 1;
					OnSalvarDados( playerid );
				}
				if(listitem == 1){
					SendClientMessage(playerid, 0x12878DFF, #Voce mudou seu genero para Feminino.);
					PlayerInfo[ playerid ][ pSex ] = 2;
					OnSalvarDados( playerid );
				}
			}
			else callcmd::minhaconta( playerid );
            return 1;
		}

        case ConfPlataforma: {
            if(response)
            {
                if(listitem == 0){

                    SendClientMessage(playerid, 0x12878DFF, #Voce definiu sua plataforma como PC.);
                    PlayerInfo[ playerid ][ Mobile ] = false;
                }
                if(listitem == 1){
                    SendClientMessage(playerid, 0x12878DFF, #Voce definiu sua plataforma como MOBILE.);
                    PlayerInfo[ playerid ][ Mobile ] = true;
                }
            }
            else callcmd::minhaconta( playerid );
            return 1;
        }

		case DIALOG_LUTAS:
        {
		    if(!response) return true;

			if(GetPlayerGrana( playerid ) < ArrayMenuLutas[listitem][mlsPrice]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para aprender este estilo");

			static str[ 129 ];
			format(str, 129, "{72EEEA}[{FFFFFF} Academia {72EEEA}]{FFFFFF} - Voce aprendeu {72EEEA}%s{FFFFFF} por R$ {72EEEA}%s{FFFFFF} !", ArrayMenuLutas[listitem][mlsNome], FormatNumber(ArrayMenuLutas[listitem][mlsPrice]));
            SCM(playerid, -1, str);

            PlayerInfo[playerid][pLutas] = ArrayMenuLutas[listitem][mlsStyle];
            SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pLutas]);
            SetPlayerFightingStyle(playerid, ArrayMenuLutas[listitem][mlsStyle]);

            ActionPlayerGrana(playerid, "-", ArrayMenuLutas[listitem][mlsPrice], 1);
            ActionEmpresaMoneyEx(EMP_ACADEMIALS, "+", ArrayMenuLutas[listitem][mlsPrice]);
            return 1;
		}

      	case Novatos: {

			new strcmd[ 900 ];

		    if(!response) return true;

		    switch(listitem)
			{
				case 0:
				{
   					strcat(strcmd, "\n\t{FF0048}Empregos\n\n{ffffff}Empregos sao os principais meios de sustento do player, eles sao\nresponsaveis por fazer com que o player seja recompesado cumprindo seus deveres,\n e claro, sem perder a diversao.\n\n", sizeof(strcmd));
   					strcat(strcmd, "Para escolher seu emprego ideal, va ate a prefeitura, e veja no menu, o emprego\nque seja permitido de acordo com seu nivel e habilitaçoes.\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"Empregos", strcmd, "Voltar", "Cancelar");
				}
				case 1:
				{
   					strcat(strcmd, "\n\t{FF0048}GPS\n\n{ffffff}O GPS e a sua principal ferramenta quando novato no servidor, nele voce\npode localizar pontos importantes da cidade e hq de seus empregos.\nPara adquirir, basta ir na 24/7, marcada por um '{FF00D9}C{ffffff}' no seu mapa.\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"GPS", strcmd, "Voltar", "Cancelar");
				}
				case 2: {
   					strcat(strcmd, "\n\t{FF0048}Veiculos\n\n{ffffff}Carros ou Motocicletas podem ser adquiridos na concessionaria da cidade, para\nlocalizar, use seu GPS.\n\nCada veiculo tem seu valor unico e restriçao, sendo assim, certos tipos de\nveiculos so podem ser adquiridos por jogadores com plano vip.\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"Veiculos", strcmd, "Voltar", "Cancelar");
				}
			    case 3: {
   					strcat(strcmd, "\n\t{FF0048}Armas\n\n{ffffff}Muitas das armas presente no jogo, podem ser compradas na Loja de Armas\n da cidade, para localizar, use seu GPS.\n\nCada arma tem seu valor unico e restriçao, sendo assim, certos tipos de\narmas so podem ser adquiridas por jogadores com plano vip.\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"Armas", strcmd, "Voltar", "Cancelar");
				}
			    case 4: {
   					strcat(strcmd, "\n\t{FF0048}Organizaçoes\n\n{ffffff}O servidor contem 7 organizaçoes, sendo elas 4 policiais e 3 criminosas.\nToda organizaçao tem seus deveres, policias devem tirar das ruas quem as leis quebram,\nenquanto as criminosas praticam seus atos de roubo, formaçao de quadrilha entre outros\n\nUtilize o comando /orgs para ficar ciente de quem sao os lideres.\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"Organizaçoes", strcmd, "Voltar", "Cancelar");
				}
			    case 5: {
   					strcat(strcmd, "\n\t{FF0048}Fome/Sede\n\n{ffffff}Voce deve cuidar da sua fome e sede, caso contrario, sera levado ao hospital, e o\nprocesso de recuperaçao ira demorar cerca de 2 minutos.\nPara se alimentar, voce deve procurar pela Burguer Shot, facilmente localizada pelo GPS,\n\ne sempre lembrando que quanto maior for seu level, mais devagar ira precisar de abastecer.\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"Fome/Sede", strcmd, "Voltar", "Cancelar");
				}
			    case 6: {
   					strcat(strcmd, "\n\t{FF0048}Forum\n\n{ffffff}Acesse nosso forum: "#SV_SITE"/forum\n\n", sizeof(strcmd));

	        		ShowPlayerDialog( playerid, Respostas, DIALOG_STYLE_MSGBOX,	"Forum", strcmd, "Voltar", "Cancelar");
				}
			}
            return 1;
		}

       	case Respostas: {
		    if(!response) return true;

			ShowPlayerDialog( playerid, Novatos, DIALOG_STYLE_LIST,	""#SERVELOGO" - Duvidas", "{FFFFFF}Selecione a categoria no qual voce tem duvida:\nEmprego\nGPS\nVeiculos\nArmas\nOrganizaçoes\nFome/Sede\nForum", "Selecionar", "Cancelar");
		    return 1;
        }

      	case DIALOG_CONFIRMAR:
        {
			if( !response ) return 1;

			if(!IsNumeric( inputtext )) return ErroMSG(playerid, "Ultilize apenas numeros!");
			if(strval( inputtext ) < 1) return ErroMSG(playerid, "Quantia invalida!");

			static str[ 129 ];

			new ValorTotal, row;

			row = ComprandoArma[playerid];

			if(ItemsAmmuNation[row][ItemBPrice] == -1) ValorTotal = ItemsAmmuNation[row][ItemValor];
			else ValorTotal = (ItemsAmmuNation[row][ItemValor]+(ItemsAmmuNation[row][ItemBPrice]*strval(inputtext)));

   			if(strval( inputtext ) > ItemsAmmuNation[row][ItemBMax]){
   			    format(str, sizeof(str), "{FF7AF9}Ammu Nation - Esta arma possui um limite de {FFFFFF}%i {FF7AF9}balas!", ItemsAmmuNation[row][ItemBMax]);
				SCM(playerid, -1, str);
				return true;
			}

			if( GetPlayerGrana( playerid ) <  ValorTotal) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente, verifique a quantia de muniçao informada!");


			if(ItemsAmmuNation[row][ItemArm] != -1){
				SetPlayerArma(playerid, ItemsAmmuNation[row][ItemArm], strval(inputtext));
				format(str, sizeof(str), "{67F4A6}Ammu Nation - Arma adiquirida com sucesso, Arma: {FFFFFF}%s {67F4A6}Balas: {FFFFFF}%i{67F4A6}!", ItemsAmmuNation[row][ItemNome], strval(inputtext));
				SCM(playerid, -1, str);
			}
			else {
			    PlayerInfo[ playerid ][ pColdre ] = 1;
                format(str, sizeof(str), "{67F4A6}Ammu Nation - item adiquirido com sucesso, Item: {FFFFFF}%s {67F4A6}!", ItemsAmmuNation[row][ItemNome]);
				SCM(playerid, -1, str);
			}

			ActionPlayerGrana(playerid, "-", ValorTotal, 1);

			ActionEmpresaMoneyEx(EMP_AMMULS, "+", ValorTotal);

			ComprandoArma[playerid] = -1;
            return 1;

		}

        case DIALOG_CLICK_MAP: {
			if( response ) {
				return SetPlayerPosFindZ(playerid, posClickMap_x, posClickMap_y, (posClickMap_z+50));
			}
            return 1;
		}
		case DIALOG_BURGERSHOT: {
			if( response ) {
				if(listitem == 0) ShowPlayerDialog(playerid, BURGER_LANCHES, DIALOG_STYLE_LIST, "Item/preço", "Hamburger $7,00\nDuplo Hambuger $13,00\nPizza $21,00\nXTudo $15,00\nXeggs $8,00", "Comprar", "Voltar");
				if(listitem == 1) ShowPlayerDialog(playerid, BURGER_BEBIDAS, DIALOG_STYLE_LIST, "Item/preço", "Agua (500ml) $2,00\nRefrigerante Comum (500ml) $3,00\nCoca-Cola (1L) $5,00\nSprite (500ml)$6,00", "Comprar", "Voltar");
			}
            return 1;
		}
		case BURGER_LANCHES: {
			if( response ){
			    new Money;
			    Money = GetPlayerGrana( playerid );

				if(listitem == 0){ //Hamburger
				    if(Money <= 6) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pFome ]+20 > 100) PlayerInfo[ playerid ][ pFome ] = 100;
				    else PlayerInfo[ playerid ][ pFome ]+=20;

                    ActionPlayerGrana(playerid, "-", 7, 1);
					ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 7);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta comendo Hamburger.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				}
				if(listitem == 1){ //Duplo Hamburger
				    if(Money <= 12) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pFome ]+40 > 100) PlayerInfo[ playerid ][ pFome ] = 100;
				    else PlayerInfo[ playerid ][ pFome ]+=40;

                    ActionPlayerGrana(playerid, "-", 13, 1);
                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 13);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta comendo Hamburger.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				}
				if(listitem == 2){ //Pizza $21,00
				    if(Money <= 20) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pFome ]+75 > 100) PlayerInfo[ playerid ][ pFome ] = 100;
				    else PlayerInfo[ playerid ][ pFome ]+=75;

                    ActionPlayerGrana(playerid, "-", 21, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 21);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta comendo Hamburger.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				}
				if(listitem == 3){ //XTudo $15,00
				    if(Money <= 14) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pFome ]+50 > 100) PlayerInfo[ playerid ][ pFome ] = 100;
				    else PlayerInfo[ playerid ][ pFome ]+=50;

                    ActionPlayerGrana(playerid, "-", 15, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 15);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta comendo Hamburger.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				}
				if(listitem == 4){ //Xeggs $8,00


				    if(Money <= 7) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pFome ]+25 > 100) PlayerInfo[ playerid ][ pFome ] = 100;
				    else PlayerInfo[ playerid ][ pFome ]+=25;

                    ActionPlayerGrana(playerid, "-", 8, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 8);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta comendo Hamburger.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				}
			}
            return 1;
		}

        case BURGER_BEBIDAS: {
			if( response ){
			    new Money;
			    Money = GetPlayerGrana( playerid );

				if(listitem == 0){ //Agua (500ml) $2,00
				    if(Money <= 1) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pSede ]+20 > 100) PlayerInfo[ playerid ][ pSede ] = 100;
				    else PlayerInfo[ playerid ][ pSede ]+=20;

                    ActionPlayerGrana(playerid, "-", 2, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 2);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta bebendo agua.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				}
				if(listitem == 1){ //Refrigerante Comum (500ml) $3,00
				    if(Money <= 2) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pSede ]+25 > 100) PlayerInfo[ playerid ][ pSede ] = 100;
				    else PlayerInfo[ playerid ][ pSede ]+=25;

                    ActionPlayerGrana(playerid, "-", 3, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 3);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta bebendo rerigerante.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				}
				if(listitem == 2){ //Coca-Cola (1L) $5,00
				    if(Money <= 4) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pSede ]+45 > 100) PlayerInfo[ playerid ][ pSede ] = 100;
				    else PlayerInfo[ playerid ][ pSede ]+=45;

                    ActionPlayerGrana(playerid, "-", 5, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 5);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta bebendo Coca-Cola.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				}
				if(listitem == 3){ //Sprite (500ml)$6,00
				    if(Money <= 5) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

				    if(PlayerInfo[ playerid ][ pSede ]+50 > 100) PlayerInfo[ playerid ][ pSede ] = 100;
				    else PlayerInfo[ playerid ][ pSede ]+=50;

                    ActionPlayerGrana(playerid, "-", 6, 1);

                    ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", 6);

   					SendClientMessage(playerid, 0xff5555ff, "Voce esta bebendo Sprite.");

					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				}
			}
            return 1;
		}
        case DIALOG_BANCO_HOME:
        {
		    if(!response) return true;

		    switch(listitem)
		    {
                case 0:
                {
			        PlaySoundForPlayer(playerid, 1052);
			        format(strx, sizeof(strx), "{ffffff}Nome do Titular: {3399cc}%s{ffffff}\nSaldo Atual: {3399cc}$%s", GetNameEx(playerid), FormatNumber(PlayerInfo[playerid][pBanco]));
					ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Saldo de sua conta", strx, "Fechar", "");
				}
				case 1:
				{
					PlaySoundForPlayer(playerid, 1052);
                    if( ContaInfo[ playerid ][ cBlock ] == false ) {
						ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "Deposito em sua conta", "{ffffff}Digite o valor no qual deseja depositar:", "Depositar", "Fechar");
					} else {
						ErroMSG(playerid, "Voce nao pode completar essa açao pois sua conta se encontra bloqueada.");
					}
				}
				case 2: {
					PlaySoundForPlayer(playerid, 1052);
                    if( ContaInfo[ playerid ][ cBlock ] == false ) {
                     	ShowPlayerDialog(playerid, DIALOG_BANCO_SACAR, DIALOG_STYLE_INPUT, "Saque em sua conta", "{ffffff}Digite o valor no qual deseja sacar:", "Sacar", "Fechar");
					} else {
						ErroMSG(playerid, "Voce nao pode completar essa açao pois sua conta se encontra bloqueada.");
					}
				}
			    case 3: {
					PlaySoundForPlayer(playerid, 1052);
                    if( ContaInfo[ playerid ][ cBlock ] == false ) {
						ShowPlayerDialog(playerid, DIALOG_BANCO_TRANS, DIALOG_STYLE_INPUT, "Banco - Transferencia", "Digite o Id do player para o qual\nvoce deseja realizar a transferencia:", "Pronto", "Voltar");
					} else {
						ErroMSG(playerid, "Voce nao pode completar essa açao pois sua conta se encontra bloqueada.");
					}
				}
			}
            return 1;
		}
		case DIALOG_BANCO_SACAR:
		{
			if(!response) return true;
			if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Caracteres invalidos foram encontrados!");
			if(strval(inputtext) > PlayerInfo[playerid][pBanco]) return ShowPlayerDialog(playerid, DIALOG_CAIXA_SACAR, DIALOG_STYLE_INPUT, "Saque em sua conta", "{ff0000}Voce nao possui essa quantidade de dinheiro\n\n{ffffff}Digite o valor no qual deseja sacar:", "Sacar", "Fechar");
            if(strval(inputtext) <= 0) return ShowPlayerDialog(playerid, DIALOG_CAIXA_SACAR, DIALOG_STYLE_INPUT, "Saque", "{ff0000}Voce digitou um valor invalido\n\n{ffffff}digite o valor no qual deseja sacar:", "sacar", "Fechar");

			ActionPlayerBank(playerid, "-", strval(inputtext));
			ActionPlayerGrana(playerid, "+", strval(inputtext), 1);

			static str[ 100 ];
			format(str, 100, "{A5E1F2}| Banco | - Saque de R$ %s efetuado com sucesso!", FormatNumber(strval(inputtext)));
			SCM(playerid, -1, str);
            return 1;
		}
		case DIALOG_BANCO_DEPOSITAR:
		{
			if(!response) return true;
			if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Caracteres invalidos foram encontrados!");
			if(strval(inputtext) > PlayerInfo[playerid][pDinheiro]) return ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "Deposito em sua conta", "{ff0000}Voce nao possui essa quantidade de dinheiro\n\n{ffffff}Digite o valor no qual deseja depositar:", "Depositar", "Fechar");
			if(strval(inputtext) <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "Deposito em sua conta", "{ff0000}Voce digitou um valor invalido\n\n{ffffff}Digite o valor no qual deseja depositar:", "Depositar", "Fechar");

			ActionPlayerBank(playerid, "+", strval(inputtext));
			ActionPlayerGrana(playerid, "-", strval(inputtext), 1);

			static str[ 100 ];
			format(str, 100, "{A5E1F2}| Banco | - Deposito de R$ %s efetuado com sucesso!", FormatNumber(strval(inputtext)));
			SCM(playerid, -1, str);
            return 1;
		}

		case DIALOG_BANCO_TRANS:
		{
		    if(TransferenciaID[ playerid ] != INVALID_PLAYER_ID){

				if(!response){
					TransferenciaID[ playerid ] = INVALID_PLAYER_ID;
					callcmd::menu( playerid, "banco"  );
					return true;
			    }

				if(!IsNumeric(inputtext)){
			        TransferenciaID[ playerid ] = INVALID_PLAYER_ID;
					ErroMSG(playerid, "Ultilize apenas numeros!");
					return true;
			    }

                if(strval(inputtext) <= 0 || strval(inputtext) > 15000000){
					TransferenciaID[ playerid ] = INVALID_PLAYER_ID;
					ErroMSG(playerid, "Valor invalido!");
					return true;
				}

			    if(strval(inputtext) > PlayerInfo[ playerid ][pBanco]){
			        TransferenciaID[ playerid ] = INVALID_PLAYER_ID;
					ErroMSG(playerid, "Sua conta nao possui esta quantia!");
					return true;
				}
				if(PlayerInfo[ TransferenciaID[ playerid ] ][ pLogger ] != 1 || !IsPlayerConnected( TransferenciaID[ playerid ] )) return ErroMSG(playerid, "O Player id selecionado nao encontra-se online!"), TransferenciaID[ playerid ] = INVALID_PLAYER_ID;

                static str[150];

				if(strval(inputtext) >= 1000000){
                    format(str, 150, "{A5E1F2}| ATENÐaO | - O Jogador(a) %s efetuou uma transferencia muito alta de dinheiro para %s, atençao pois podem estar desfrutando de algum bug!", GetNameEx(playerid), GetNameEx(TransferenciaID[ playerid ]));
				    SendAdminMessage(-1, str);

				    format(STRLOG, sizeof(STRLOG), "[%s] %s transferiu para %s o valor de R$ %d", GetDateEx(), GetNameEx(playerid), GetNameEx(TransferenciaID[ playerid ]), strval(inputtext));
					SLog("BUGGrana.log", STRLOG);
				}
				ActionPlayerBank(playerid, "-", strval(inputtext));
				ActionPlayerBank(TransferenciaID[ playerid ], "+", strval(inputtext));


				PlaySoundForPlayer(playerid, 1052);
				PlaySoundForPlayer(TransferenciaID[ playerid ], 1052);
				format(str, 150, "{A5E1F2}| Banco | - Voce transferiu a quantia de R$ %s para o jogador(a) %s, obrigado por ultilizar nossos serviços!", FormatNumber(strval(inputtext)), GetNameEx(TransferenciaID[ playerid ]));
				SCM(playerid, -1, str);

				format(str, 150, "{A5E1F2}| Banco | - Voce recebeu a importancia de R$ %s do(a) o jogador(a) %s, obrigado por ultilizar nossos serviços!", FormatNumber(strval(inputtext)), GetNameEx( playerid ));
				SCM(TransferenciaID[ playerid ], -1, str);

				format(STRLOG, sizeof(STRLOG), "[%s] %s transferiu para %s o valor de %s", GetDateEx(), GetNameEx(playerid), GetNameEx(TransferenciaID[ playerid ]), inputtext);
				SLog("TransBancarias.log", STRLOG);

			    TransferenciaID[ playerid ] = INVALID_PLAYER_ID;
			    return true;
			}

			if(!response) return callcmd::menu( playerid, "banco"  );
            if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Apenas numeros!");
            if(PlayerInfo[ strval(inputtext) ][ pLogger ] != 1 || !IsPlayerConnected( strval(inputtext) )) return ErroMSG(playerid, "O Player id selecionado nao encontra-se online!");
            if(IsPlayerNPC( strval(inputtext)) ) return ErroMSG(playerid, "O Player id invalido!");

			TransferenciaID[ playerid ] = strval(inputtext);
            ShowPlayerDialog(playerid, DIALOG_BANCO_TRANS, DIALOG_STYLE_INPUT, "Banco - Transferencia", "Agora digite a quantia na qual voce deseja transferir:", "Transferir", "Voltar");
		    return 1;
        }

		/* ==================================
				Sistema de Caixa Eletrônico
		=====================================*/
		case DIALOG_CAIXA_SACAR:
		{
			if(!response) return true;
			if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Caracteres invalidos foram encontrados!");
			if(strval(inputtext) > PlayerInfo[playerid][pBanco]) return ShowPlayerDialog(playerid, DIALOG_CAIXA_SACAR, DIALOG_STYLE_INPUT, "Saque em sua conta", "{ff0000}Voce nao possui essa quantidade de dinheiro\n\n{ffffff}Digite o valor no qual deseja sacar:", "Sacar", "Fechar");
            if(strval(inputtext) <= 0) return ShowPlayerDialog(playerid, DIALOG_CAIXA_SACAR, DIALOG_STYLE_INPUT, "Saque", "{ff0000}Voce digitou um valor invalido\n\n{ffffff}digite o valor no qual deseja sacar:", "sacar", "Fechar");

			if(strval(inputtext) > 10000) return SCM(playerid, -1, "{9EF201}| Caixa Eletronico | - Para efeturar saques com valor acima de R$10.000 dirija-se ao banco!");

			ActionPlayerBank(playerid, "-", strval(inputtext));
			ActionPlayerGrana(playerid, "+", strval(inputtext), 1);

			static str[ 100 ];
			format(str, 100, "{A5E1F2}| Caixa Eletronico | - Saque de R$ %s efetuado com sucesso!", FormatNumber(strval(inputtext)));
			SCM(playerid, -1, str);
            return 1;
		}
		case DIALOG_CAIXA_DEPOSITAR:
		{
			if(response == 0) return 1;
			if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Caracteres invalidos foram encontrados!");
			if(strval(inputtext) > PlayerInfo[playerid][pDinheiro]) return ShowPlayerDialog(playerid, DIALOG_CAIXA_DEPOSITAR, DIALOG_STYLE_INPUT, "Deposito em sua conta", "{ff0000}Voce nao possui essa quantidade de dinheiro\n\n{ffffff}Digite o valor no qual deseja depositar:", "Depositar", "Fechar");
			if(strval(inputtext) <= 0) return ShowPlayerDialog(playerid, DIALOG_CAIXA_DEPOSITAR, DIALOG_STYLE_INPUT, "Deposito em sua conta", "{ff0000}Voce digitou um valor invalido\n\n{ffffff}Digite o valor no qual deseja depositar:", "Depositar", "Fechar");

            if(strval(inputtext) > 10000) return SCM(playerid, -1, "{9EF201}| Caixa Eletronico | - Para efeturar depositos com valor acima de R$10.000 dirija-se ao banco!");

			ActionPlayerBank(playerid, "+", strval(inputtext));
			ActionPlayerGrana(playerid, "-", strval(inputtext), 1);

			static str[ 100 ];
			format(str, 100, "{A5E1F2}| Caixa Eletronico | - Deposito de R$ %s efetuado com sucesso!", FormatNumber(strval(inputtext)));
			SCM(playerid, -1, str);
            return 1;
		}
		case DIALOG_CAIXA_HOME:
        {
			if(!response) return 1;
			switch(listitem)
            {

			    case 0: {
			        PlaySoundForPlayer(playerid, 1052);
			        format(strx, sizeof(strx), "{ffffff}Nome do Titular: {3399cc}%s{ffffff}\nSaldo Atual: {3399cc}$%s", GetNameEx(playerid), FormatNumber(PlayerInfo[playerid][pBanco]));
					ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Saldo de sua conta", strx, "Fechar", "");
				}
				case 1: PlaySoundForPlayer(playerid, 1052), ShowPlayerDialog(playerid, DIALOG_CAIXA_DEPOSITAR, DIALOG_STYLE_INPUT, "Deposito em sua conta", "{ffffff}Digite o valor no qual deseja depositar:", "Depositar", "Fechar");
				case 2: PlaySoundForPlayer(playerid, 1052), ShowPlayerDialog(playerid, DIALOG_CAIXA_SACAR, DIALOG_STYLE_INPUT, "Saque em sua conta", "{ffffff}Digite o valor no qual deseja sacar:", "Sacar", "Fechar");
			}
            return 1;
		}

		case DIALOG_LOTERICA:
		{
		    static str[200];
			if(!response) return 1;
		    if(listitem == 0)
            {//PAGAR DIVIDAS
		        new Juros;

				if(ContaInfo[ playerid ][ cAvisado ] <= 1) Juros = 0;
				else
				Juros = (ContaInfo[ playerid ][ cBanco ]/ContaInfo[ playerid ][ cAvisado ]);

				ContaInfo[ playerid ][ cTotal ] = ContaInfo[ playerid ][ cBanco ];
		        format(str, sizeof(str), "{DBE007}Dividas a Pagar:\n\n{FFFFFF}Banco: {079704}R$%i\n{FFFFFF}Juros: {079704}R$%i\n{FFFFFF}Total: {079704}R$%s\n\n",
				ContaInfo[ playerid ][ cBanco ], Juros, FormatNumber(ContaInfo[ playerid ][ cTotal ]+Juros));
		        ShowPlayerDialog(playerid, DIALOG_LOT_PDIV, DIALOG_STYLE_MSGBOX, "Pagando Dividas", str, "Pagar", "Voltar");
			}
            if(listitem == 1)
            {//PAGAR multas
                format(str, sizeof(str), "{DBE007}Multas a Pagar:\n\n{FFFFFF}Multas: {079704}R$%i\n\n",
                PlayerInfo[ playerid ][ pMultas ]);
                ShowPlayerDialog(playerid, DIALOG_LOT_PMULT, DIALOG_STYLE_MSGBOX, "Pagando Multas", str, "Pagar", "Voltar");
            }
		    if(listitem == 2){ //Raspadinha
		        if(GetPlayerGrana(playerid) < 20)return ErroMSG(playerid, "Voce nao tem dinheiro o suficiente.");
		        ShowPlayerDialog(playerid, DIALOG_RASPADINHA, DIALOG_STYLE_MSGBOX, "Raspadinha", "{ffffff}Clique em confirmar para adquirir um bilhete\n\nQuem sabe nao e seu dia de sorte?", "Confirmar", "Cancelar");
			}
		    if(listitem == 3){
		        if(GetPlayerGrana(playerid) < 50)return ErroMSG(playerid, "Voce nao tem dinheiro o suficiente.");
		        ShowPlayerDialog(playerid, DIALOG_MEGA_SENA, DIALOG_STYLE_INPUT, "Mega Sena", "{ffffff}Digite um numero entre {2EFEC8}1{ffffff} e {2EFEC8}100{ffffff}\ndepois que escolher seu numero basta aguardar o sorteio..\n\n{2EFEC8}Boa Sorte !!", "Confirmar", "Cancelar");
		    }
            return 1;
		}
		case DIALOG_LOT_PMULT:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_LOTERICA, DIALOG_STYLE_LIST, "Loterica", "{FFFFFF}Pagar Dividas Banco{FF0000}( {FFFFFF}Verificacao {FF0000}) \n{FFFFFF}Pagar Dividas Multas{FF0000}( {FFFFFF}Verificacao {FF0000}) \n{FFFFFF}Raspadinha | {0F9700}R$ 20\n{FFFFFF}Mega-Sena | {0F9700}R$ 50", "Escolher", "Fechar");

			if(GetPlayerGrana(playerid) < PlayerInfo[ playerid ][ pMultas ]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente .. ");

			ActionPlayerGrana(playerid, "-", PlayerInfo[ playerid ][ pMultas ], 1);

            static str[100];
            format(str, sizeof(str), "Voce pagou R$%s de multas,", PlayerInfo[ playerid ][ pMultas ]);
            SCM(playerid, Verde, str);
            SCM(playerid, Verde, "dividas pagas!");
            PlayerInfo[ playerid ][ pMultas ] = 0;
            return 1;
		}

        case DIALOG_LOT_PDIV:
        {
            static str[200];
            new Juros;

            if(ContaInfo[ playerid ][ cAvisado ] <= 1) Juros = 0;
                else
            Juros = (ContaInfo[ playerid ][ cBanco ]/ContaInfo[ playerid ][ cAvisado ]);
            if(!response) return ShowPlayerDialog(playerid, DIALOG_LOTERICA, DIALOG_STYLE_LIST, "Loterica", "{FFFFFF}Pagar Dividas Banco{FF0000}( {FFFFFF}Verificacao {FF0000}) \n{FFFFFF}Pagar Dividas Multas{FF0000}( {FFFFFF}Verificacao {FF0000}) \n{FFFFFF}Raspadinha | {0F9700}R$ 20\n{FFFFFF}Mega-Sena | {0F9700}R$ 50", "Escolher", "Fechar");

            if(GetPlayerGrana(playerid) < (ContaInfo[ playerid ][ cTotal ]+Juros)) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente .. ");

            ActionPlayerGrana(playerid, "-", (ContaInfo[ playerid ][ cTotal ]+Juros), 1);

            format(str, sizeof(str), "Voce pagou R$%s ao banco,", FormatNumber((ContaInfo[ playerid ][ cTotal ]+Juros)));
            SCM(playerid, Verde, str);
            SCM(playerid, Verde, "dividas pagas!");

            if(ProcuradoDividas[ playerid ] > 0){
                if(PlayerInfo[ playerid ][ pWanted ] > 0){
                    format(str, sizeof(str), "{1C4EAB}| Policia | - Por quitar suas dividas com o banco, {FFFFFF}%i{1C4EAB}/{FFFFFF}%i {1C4EAB}de seu nivel de procurado foram removidos!", ProcuradoDividas[ playerid ], PlayerInfo[ playerid ][ pWanted ]);
                    AlterarNivelProcurado( playerid, ProcuradoDividas[ playerid ], "-" );
                }
                else {
                    format(str, sizeof(str), "{1C4EAB}| Policia | - Por quitar suas dividas com o banco, {FFFFFF}%i{1C4EAB}/{FFFFFF}%i {1C4EAB}de seu nivel de procurado foram removidos!", ProcuradoDividas[ playerid ], ProcuradoDividas[ playerid ]);
                    AlterarNivelProcurado( playerid, 0, "n" );
                }
                SCM(playerid, Verde, str);
            }
            ProcuradoDividas[ playerid ] = 0;

            ContaInfo[ playerid ][ cCell ] = 0.0;
            ContaInfo[ playerid ][ cBanco ] = 0;
            ContaInfo[ playerid ][ cTotal ] = 0;
            ContaInfo[ playerid ][ cAvisado ] = 0;
            ContaInfo[ playerid ][ cBlock ] = false;

            OnSalvarDados(playerid);
            return 1;
        }
        case DIALOG_MEGA_SENA:{
			if(response){
			    if(strval(inputtext) < 0 || strval(inputtext) > 100) return ErroMSG(playerid, "Use apenas numeros entre 1 e 100 :)");
				if(PlayerInfo[ playerid ][ pBilheteMega ] != 0) return ErroMSG(playerid, "Voce ja possui um bilhete!");

				PlayerInfo[ playerid ][ pBilheteMega ] = strval(inputtext);

                ActionPlayerGrana(playerid, "-", 50, 1);

                LotoInfo[ LotoArrec ] += RandomEx(10, 35);

				static str[ 129 ];
				format(str, 129, "{F781F3}| Loteria | - Voce apostou no numero %i na Mega Sena, Boa Sorte", strval(inputtext));
				SCM(playerid, -1, str);
				OnSalvarDados(playerid);
			}
            return 1;
		}

        case DIALOG_RASPADINHA:{
			if(response){
				SCM(playerid, -1, "{0B6C96}Raspando...");
                ActionPlayerGrana(playerid, "-", 20, 1);
  				SetTimerEx("Raspadinha", TSegundos(3), false, "i", playerid); // Chamando Call da Raspadinha
			}
            return 1;
		}

		/* ==================================================================================

					Sistema de Gerenciamento de Organizaçao

		====================================================================================*/

		case DIALOG_ORG_MONEY_DEPOSITAR:
		{
			if(response == 0) return 1;
			if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Caracteres invalidos foram encontrados!");
			if(!strval(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ORG_MONEY_DEPOSITAR, DIALOG_STYLE_INPUT, "Depositar Dinheiro", "{ff0000}Valor invalido\n\n{ffffff}Digite a quantia de dinheiro: (Minimo 1)", "Depositar", "Fechar");
			if(GetPlayerGrana(playerid) < strval(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ORG_MONEY_DEPOSITAR, DIALOG_STYLE_INPUT, "Depositar Dinheiro", "{ff0000}Voce nao possui essa quantidade de dinheiro\n\n{ffffff}Digite a quantia de dinheiro: (Minimo 1)", "Depositar", "Fechar");

			ActionPlayerGrana(playerid, "-", strval(inputtext));

			ActionGranaOrg(GetPlayerOrg(playerid), "+", strval(inputtext));

			return ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Depositar Dinheiro", "{ffffff}Dinheiro depositado com sucesso", "Fechar", "");
		}
		case DIALOG_MANAGERORG_DINHEIRO: {
			if(listitem == 0)
			{
				format(strx, sizeof(strx), "{ffffff}Organizaçao: {%s}%s{ffffff}\n\nDinheiro em caixa: {3399cc}$%s", GetOrgColorHex(playerid), GetOrgName(playerid), FormatNumber(CofreOrg[GetPlayerOrg(playerid)][Dinheiro]));
				return ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Saldo de Dinheiro em Caixa", strx, "Fechar", "");
			}
			if(listitem == 1) return ShowPlayerDialog(playerid, DIALOG_ORG_MONEY_DEPOSITAR, DIALOG_STYLE_INPUT, "Depositar Dinheiro", "{ffffff}Digite a quantia de dinheiro: (Minimo 1)", "Depositar", "Fechar");
		    return 1;
        }

		case DIALOG_ORG_MAT_PEGAR:
        {
			if(response == 0) return true;
			if(strval(inputtext) <= 0 || strval(inputtext) > 1000) return ShowPlayerDialog(playerid, DIALOG_ORG_MAT_PEGAR, DIALOG_STYLE_INPUT, "Pegar Materiais", "{ff0000}Digite um valor valido\n\n{ffffff}Digite a quantidade de materiais: (1 a 1000)", "Pegar","Fechar");
			if(strval(inputtext) > CofreOrg[PlayerInfo[playerid][pOrg]][Materiais]) return ShowPlayerDialog(playerid, DIALOG_ORG_MAT_PEGAR, DIALOG_STYLE_INPUT, "Pegar Materiais", "{ff0000}Sua organizaçao nao possui essa quantidade de materiais\n\n{ffffff}Digite a quantidade de materiais: (1 a 1000)", "Pegar","Fechar");
			PlayerInfo[playerid][pMateriais] += strval(inputtext);
			CofreOrg[PlayerInfo[playerid][pOrg]][Materiais] -= strval(inputtext);
			SaveCofreOrg(PlayerInfo[playerid][pOrg]);

			static str[129];
			format(str, sizeof(str), "{A8F8F4}(>) - Voce pegou %i materiais no cofre de sua organizaçao!", strval(inputtext));
			SCM(playerid, -1, str);
            return 1;
		}

		case DIALOG_ORG_MAT_DEPOSITAR: {
			if(!response) return true;

			if(strval(inputtext) <= 0 || strval(inputtext) > 1000) return ShowPlayerDialog(playerid, DIALOG_ORG_MAT_DEPOSITAR, DIALOG_STYLE_INPUT, "Depositar Materiais", "{ff0000}Digite um valor valido\n\n{ffffff}Digite a quantidade de materiais: (1 a 1000)", "Depositar","Fechar");
			if(strval(inputtext) > PlayerInfo[playerid][pMateriais]) return ShowPlayerDialog(playerid, DIALOG_ORG_MAT_DEPOSITAR, DIALOG_STYLE_INPUT, "Depositar Materiais", "{ff0000}Voce nao possui essa quantidade de materiais\n\n{ffffff}Digite a quantidade de materiais: (1 a 1000)", "Depositar","Fechar");

            PlayerInfo[playerid][pMateriais] -= strval(inputtext);
			CofreOrg[PlayerInfo[playerid][pOrg]][Materiais] += strval(inputtext);
			SaveCofreOrg(PlayerInfo[playerid][pOrg]);

			static str[129];
			format(str, sizeof(str), "{A8F8F4}(>) - Voce depositou %i materiais no cofre de sua organizaçao!", strval(inputtext));
			SCM(playerid, -1, str);
            return 1;

		}
		case DIALOG_MATERIAIS_GANG: {
			if(!response) return true;

			static str[500], OrdID;

			OrdID = GetPlayerOrg( playerid );
			if(listitem == 0){ //saldo

				format(str, sizeof(str),
				"{FFFFFF}Sua organizaçao possui em estoque:\n\
				\n{2DFEE6}{FFFFFF}Armas:\n{DAFFFC}%i{FFFFFF} Eagle's\n{DAFFFC}%i{FFFFFF} Tec's\n{DAFFFC}%i{FFFFFF} AK's 47\n{DAFFFC}%i{FFFFFF} Garrafa's\n{DAFFFC}%i{FFFFFF} Shotgun/Doze's\n\n\
				{2DFEE6}{FFFFFF}Drogas:\n{DAFFFC}%i{FFFFFF} Crack\n{DAFFFC}%i{FFFFFF} Cocaina\n{DAFFFC}%i{FFFFFF} Maconha\n\n\
				{2DFEE6}{FFFFFF}Materiais: {DAFFFC}%i{FFFFFF} peças\n\n",
				CofreOrg[OrdID][WEagle], CofreOrg[OrdID][WMP5], CofreOrg[OrdID][WAK47],CofreOrg[OrdID][WGranada], CofreOrg[OrdID][WShot],
				CofreOrg[OrdID][Crack], CofreOrg[OrdID][Cocaina], CofreOrg[OrdID][Maconha], CofreOrg[OrdID][Materiais]);
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Saldo de Materiais", str, "Fechar", "");
			}
			if(listitem == 1){ //Drogas
				ShowPlayerDialog(playerid, DIALOG_DROGAS_GANG, DIALOG_STYLE_INPUT, "Depositar Drogas", "{ffffff}Digite a quantidade de cada item que deseja depositar\nseguindo a ordem no pequeno exemplo abaixo\n| Crack | Cocaina | Maconha |\n Exemplo: 3 2 4 \n\
				(3 Crack) (2 Cocaina) (4 Maconha)", "Depositar","Fechar");
			}
			if(listitem == 2){
                ShowPlayerDialog(playerid, DIALOG_MANAG_MATERIAIS, DIALOG_STYLE_LIST, "Materiais", "Depositar\nPegar", "Confirmar","Cancelar");
   			}
            return 1;
		}
        case DIALOG_MANAG_MATERIAIS: {
            if(!response) return true;

			if(listitem == 0){
				ShowPlayerDialog(playerid, DIALOG_ORG_MAT_DEPOSITAR, DIALOG_STYLE_INPUT, "Depositar Materiais", "{ffffff}Digite a quantidade de materiais:", "Depositar","Fechar");
			}
			if(listitem == 1){
				ShowPlayerDialog(playerid, DIALOG_ORG_MAT_PEGAR, DIALOG_STYLE_INPUT, "Pegar Materiais", "{ffffff}Digite a quantidade de materiais:", "Pegar", "Fechar");
			}
            return 1;
		}
		case DIALOG_DROGAS_GANG: {
			if(!response) return true;
			new
				Mac,
				Coc,
				Cra,
				Org = GetPlayerOrg( playerid )
			;
		    if( sscanf( inputtext, "ddd", Mac, Coc, Cra) ) return ErroMSG(playerid, "Precisa colocar a quantidade de cada item!");

			if(Mac < 0 || 0 > Coc || 0 > Cra) return ErroMSG(playerid, "Valor invalido!");

			if(Mac > PlayerInfo[ playerid ][ pMaconha ]) return ErroMSG(playerid, "Voce nao possui essa quantidade de maconha!");
		    if(Coc > PlayerInfo[ playerid ][ pCocaina ]) return ErroMSG(playerid, "Voce nao possui essa quantidade de Cocaina!");
		    if(Cra > PlayerInfo[ playerid ][ pCrack ]) return ErroMSG(playerid, "Voce nao possui essa quantidade de Crack!");

            PlayerInfo[ playerid ][ pCrack ] -= Cra;
            PlayerInfo[ playerid ][ pCocaina ] -= Coc;
            PlayerInfo[ playerid ][ pMaconha ] -= Mac;
            OnSalvarDados(playerid);

			static str[ 200 ];
		    SCM(playerid, -1, "Voce depositou em sua organizaçao:");
		    format(str, sizeof(str), "%i capsula's de cocaina", Coc);
		    SCM(playerid, -1, str);
		    format(str, sizeof(str), "%i pedra's de crack", Cra);
		    SCM(playerid, -1, str);
		    format(str, sizeof(str), "%i bazeado's de maconha", Mac);
		    SCM(playerid, -1, str);

		    CofreOrg[Org][Crack] += Cra;
			CofreOrg[Org][Cocaina] += Coc;
			CofreOrg[Org][Maconha] += Mac;
		    SaveCofreOrg(Org);
            return 1;
		}
		case DIALOG_MATERIAIS_COP:{
			if(!response) return true;

			static str[200], Oid;
			Oid = GetPlayerOrg(playerid);

			if(listitem == 0){
				format(str, sizeof(str), "{2DFEE6}{FFFFFF}Armas:\n\nEagle: %i\nMP5: %i\nM4: %i\nRifle: %i\nGranada: %i\nShotGun: %i\n\n{2DFEE6}{FFFFFF}Materiais: {DAFFFC}%i{FFFFFF} peças\n\n", CofreOrg[Oid][WEagle], CofreOrg[Oid][WMP5], CofreOrg[Oid][WM4], CofreOrg[Oid][WRifle], CofreOrg[Oid][WGranada], CofreOrg[Oid][WShot], CofreOrg[Oid][Materiais]);
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Estoques", str, "Fechar", "");
			}
			if(listitem == 1){
                ShowPlayerDialog(playerid, DIALOG_MANAG_MATERIAIS, DIALOG_STYLE_LIST, "Materiais", "Depositar\nPegar", "Confirmar","Cancelar");
   			}
            return 1;
		}
		case DIALOG_MANAGERORG_HOME:
        {
			if(!response) return true;

			if(listitem == 0)
            {
	            ShowPlayerDialog(playerid, DIALOG_MANAGERORG_MEMBROS, DIALOG_STYLE_LIST, "Gerenciar Membros", "Ver Membros\nConvidar\nPromover\nDemitir\nDefinir Salarios\nDefinir Nome dos Cargos\nCandidatos", "Escolher", "Fechar");
			}
			if(listitem == 1)
            {
                switch(GetPlayerOrg(playerid))
                {
					case PM, BOPE: ShowPlayerDialog(playerid, DIALOG_MATERIAIS_COP, DIALOG_STYLE_LIST, "Gerenciar Materiais", "Saldo\nMateriais", "Escolher", "Fechar");
					case CV, PCC: ShowPlayerDialog(playerid, DIALOG_MATERIAIS_GANG, DIALOG_STYLE_LIST, "Gerenciar Materiais", "Saldo\nDrogas\nMateriais", "Escolher", "Fechar");
				}
			}
			if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_MANAGERORG_DINHEIRO, DIALOG_STYLE_LIST, "Gerenciar Dinheiro em Caixa", "Ver Saldo\nDepositar Dinheiro", "Escolher", "Fechar");
		    return 1;
        }

		case DIALOG_MANAGERORG_MEMBROS:
        {
			if(!response) return ShowPlayerDialog(playerid, DIALOG_MANAGERORG_HOME, DIALOG_STYLE_LIST, "Gerenciar Organizaçao", "Gerenciar Membros\nGerenciar Materiais\nGerenciar Dinheiro em Caixa", "Gerenciar", "Fechar");
			new str[200], Oid;
			Oid = GetPlayerOrg(playerid);
			switch(listitem)
			{
			    case 0: OpenInfoOrg(playerid, PlayerInfo[playerid][pOrg], 1);
				case 1: {
                    if( PlayerInfo[playerid][pCargo] < 5 ) return ErroMSG(playerid, "Seu cargo nao pode completar essa açao");
					ShowPlayerDialog(playerid, DIALOG_ORG_CONVIDAR, DIALOG_STYLE_INPUT, "Convidando Membros", "Para Convidar Alguem a sua organizaçao, Digite abaixo o ID do\njogador, e lhe sera enviado um convite com sua proposta\n\nDigite Aqui:", "Confirmar", "Voltar");
				}
				case 2: {
                    if( PlayerInfo[playerid][pCargo] < 6 ) return ErroMSG(playerid, "Seu cargo nao pode completar essa açao");
					ShowPlayerDialog(playerid, DIALOG_ORG_PROMOVER, DIALOG_STYLE_INPUT, "Promovendo Membros", "Para promover Algum dos Membros de sua organizaçao, Digite abaixo o ID do\njogador seguido do numero do cargo\nLembrando q! para promover a SubLider1 use 10 como numero do cargo! sublider2 use 20 como numero do cargo\n(Exemplo: ID: 1 Promocao: 3 Use: 1 3)\n\nDigite Aqui:", "Confirmar", "Voltar");
				}
				case 3:  {
                    if( PlayerInfo[playerid][pCargo] < 5 ) return ErroMSG(playerid, "Seu cargo nao pode completar essa açao");
					ShowPlayerDialog(playerid, DIALOG_ORG_DEMITIR, DIALOG_STYLE_INPUT, "Demitindo Membros", "Para Expulsar Algum dos Membros de sua organizaçao, Digite abaixo o ID da VAGA em que o jogador se encontra\nPara saber o id da vaga em que algum membro se encontra va ate a lista de membros de sua Organizaçao\nObs: no caso de demissao de SubLideres use 100 Para expulsar o Sub1 e 200 para expulsar o Sub2\n\nDigite Aqui:", "Confirmar", "Voltar");
				}
				case 4: {
				    if( PlayerInfo[playerid][pCargo] < 6 ) return ErroMSG(playerid, "Seu cargo nao pode completar essa açao");
				    format(str, sizeof(str), "%s Salario: %i\n%s Salario: %i\n%s Salario: %i\n%s Salario: %i\n%s Salario: %i\n%s Salario: %i", InfoOrg[Oid][PatenteName1], CofreOrg[Oid][salarioc1], InfoOrg[Oid][PatenteName2], CofreOrg[Oid][salarioc2], InfoOrg[Oid][PatenteName3],
					CofreOrg[Oid][salarioc3], InfoOrg[Oid][PatenteName4], CofreOrg[Oid][salarioc4], InfoOrg[Oid][PatenteName5], CofreOrg[Oid][salarioc5], InfoOrg[Oid][PatenteName6], CofreOrg[Oid][salariolider]);
					ShowPlayerDialog(playerid, DIALOG_ORG_SALARIOS, DIALOG_STYLE_LIST, "Definindo Salarios", str, "Confirmar", "Voltar");
				}
				case 5: {
				    if( PlayerInfo[playerid][pCargo] < 6 ) return ErroMSG(playerid, "Seu cargo nao pode completar essa açao");
				    format(str, sizeof(str), "%s Cargo: 1\n%s Cargo: 2\n%s Cargo: 3\n%s Cargo: 4\n%s Cargo: 5\n%s Cargo: 6", InfoOrg[Oid][PatenteName1], InfoOrg[Oid][PatenteName2], InfoOrg[Oid][PatenteName3], InfoOrg[Oid][PatenteName4], InfoOrg[Oid][PatenteName5], InfoOrg[Oid][PatenteName6]);
					ShowPlayerDialog(playerid, DIALOG_ORG_PATENTES, DIALOG_STYLE_LIST, "Definindo Cargos", str, "Confirmar", "Voltar");
				}
				case 6:{
				    if( PlayerInfo[playerid][pCargo] < 5 )
				    	MostrarCandidatos(playerid, Oid, 0);
				    else
				    	MostrarCandidatos(playerid, Oid, 1);
				}
			}
            return 1;
		}
		case DIALOG_ORG_CONVIDAR:{
			if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_HOME, 1, 0, "");

			new
				id,
				title[50],
				string[256]
			;

			if( sscanf( inputtext, "u", id ) ) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 1, "");

			if( !PlayerInfo[id][pLogger] ) return ErroMSG(playerid, "Voce informou um ID de um jogador Offiline" );

			if(isPlayerCop(playerid) && PlayerInfo[ id ][pEmprego ] != 0) return ErroMSG(playerid, "O jogador convidado ja esta em um emprego!" );
			if( PlayerInfo[id][pOrg] > 0 ) return ErroMSG(playerid, "O jogador convidado ja esta em uma organizaçao" );

			if(Vagas(GetPlayerOrg(playerid))){
				orgsInvitedID[id] = PlayerInfo[playerid][pOrg];
				orgsInvitedPID[id] = playerid;

				format(strx, sizeof(strx), "[%s] Voce acaba de enviar uma solicitaçao de ingresso em sua organizaçao para %s", nomeOrgs[PlayerInfo[playerid][pOrg]], GetName(id));
				SendClientMessage(playerid, GetOrgColor(playerid), strx );

				format( title, sizeof(title), "Convite para a organizaçao %s", nomeOrgs[PlayerInfo[playerid][pOrg]] );
				format( string, sizeof(string), "{FFFFFF}Voce esta sendo convidado pelo\n%s {%s}%s{ffffff} a entrar\nna organizaçao {%s}%s\n\n{FFFFFF}Caso queira aceitar o convite, click\nem {02FAD9}ACEITAR{ffffff}, caso contrario clicm em {02FAD9}RECUSAR", GetPlayerOrgCargo(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]] );
				ShowPlayerDialog(id, DIALOG_CONVITE_ORG, DIALOG_STYLE_MSGBOX, title, string,"Aceitar","Recusar");
			}
			else ErroMSG(playerid, "Nao ha vagas disponiveis em sua organizaçao!");
            return 1;
		}
		case DIALOG_ORG_PROMOVER:{
			if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_HOME, 1, 0, "");
			new	id,
				cargo;

			if( sscanf( inputtext, "ud", id, cargo) ) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 2, "");

			if( !PlayerInfo[id][pLogger] ) return ErroMSG(playerid, "Voce informou um ID de um jogador Offiline" );

			if( PlayerInfo[id][pOrg] != PlayerInfo[playerid][pOrg] ) return ErroMSG(playerid, "Voce nao pode promover alguem de oura organizaçao" );
			if( id == playerid ) return ErroMSG(playerid, "Voce nao pode promover voce mesmo" );
            if( PlayerInfo[id][pCargo] >= 6) return ErroMSG(playerid, "Voce nao pode promover um lider" );


			if(cargo <= 4){
			    if(strcmp(InfoOrg[PlayerInfo[playerid][pOrg]][SubLider], GetName(id), true)==0
				|| strcmp(InfoOrg[PlayerInfo[playerid][pOrg]][SubLider2], GetName(id), true)==0)
				{
					DemitirInfoOrg(id);
				    ConviteInfoOrg(GetName(id), PlayerInfo[playerid][pOrg], 1);
     			}
				if(cargo > GetPlayerCargo(id)){

				    format(strx, sizeof(strx), ""#SERVELOGO" O %s %s te promoveu a %s %s", GetPlayerOrgCargo(playerid), GetNameEx( playerid ), GetPatentNome(GetPlayerOrg(playerid), cargo), nomeOrgs[PlayerInfo[playerid][pOrg]]);
					SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], strx );
					format(strx, sizeof(strx), "[%s] Voce acaba de Promover %s para %s ", nomeOrgs[PlayerInfo[playerid][pOrg]], GetName(id), GetPatentNome(GetPlayerOrg(playerid), cargo));
					SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], strx );
					PlayerInfo[id][pCargo] = cargo;
				}
				else
				{
			    	format(strx, sizeof(strx), ""#SERVELOGO" O %s %s te rebaixou a %s %s", GetPlayerOrgCargo(playerid), GetNameEx( playerid ), GetPatentNome(GetPlayerOrg(playerid), cargo), nomeOrgs[PlayerInfo[playerid][pOrg]]);
					SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], strx );
					format(strx, sizeof(strx), "[%s] Voce acaba de rabaixar %s para %s ", nomeOrgs[PlayerInfo[playerid][pOrg]], GetName(id), GetPatentNome(GetPlayerOrg(playerid), cargo));
					SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], strx );
					PlayerInfo[id][pCargo] = cargo;

				}
			}
			else if((cargo == 10 || cargo == 20) && GetPlayerCargo(playerid) > 5)
			{
                if(cargo == 10)
				{
		    		if(strcmp(InfoOrg[PlayerInfo[playerid][pOrg]][SubLider],"Ninguem",true)==0)
					{
			    		DemitirInfoOrg(id);
			    		ConviteInfoOrg(GetName(id), PlayerInfo[playerid][pOrg], 100);
					}
					else
					{
			   			DemitirInfoOrg(id);
			    		DemitirInfoOrg(InfoOrg[PlayerInfo[playerid][pOrg]][SubLider]);
			    		ConviteInfoOrg(GetName(id), PlayerInfo[playerid][pOrg], 100);
					}
				}
				else if(cargo == 20)
				{
		    		if(strcmp(InfoOrg[PlayerInfo[playerid][pOrg]][SubLider2],"Ninguem",true)==0)
					{
	                    DemitirInfoOrg(id);
			    		ConviteInfoOrg(GetName(id), PlayerInfo[playerid][pOrg], 200);

					}
					else
					{
		   				DemitirInfoOrg(id);
						DemitirInfoOrg(InfoOrg[PlayerInfo[playerid][pOrg]][SubLider2]);
			    		ConviteInfoOrg(GetName(id), PlayerInfo[playerid][pOrg], 200);
					}
				}


				format(strx, sizeof(strx), ""#SERVELOGO" O %s %s te promoveu a %s %s", GetPlayerOrgCargo(playerid), GetNameEx( playerid ), GetPatentNome(GetPlayerOrg(playerid), cargo), nomeOrgs[PlayerInfo[playerid][pOrg]]);
				SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], strx );
				format(strx, sizeof(strx), "[%s] Voce acaba de Promover %s para %s ", nomeOrgs[PlayerInfo[playerid][pOrg]], GetName(id), GetPatentNome(GetPlayerOrg(playerid), cargo));
				SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], strx );
				if(cargo == 10 || cargo == 20){
					PlayerInfo[id][pCargo] = 5;
				}
				else PlayerInfo[id][pCargo] = cargo;
			}
			else return ErroMSG(playerid, "Cargo Invalido");
		}
		case DIALOG_ORG_DEMITIR: {
			if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_HOME, 1, 0, "");

			new Vid,
			    str[200], Motivo[64];

			if( sscanf( inputtext, "ds[64]", Vid, Motivo ) ) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 3, ""), ErroMSG(playerid, "USE: id e Motivo" );

            if( Vid > 20 && Vid != 100 && Vid != 200 ) return ErroMSG(playerid, "Voce informou uma vaga ID Inexistente" );

			if(Vid == 100 || Vid == 200){
			    if(PlayerInfo[playerid][pCargo] >= 6){
			        if(Vid == 100){
			            if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider]) != -1){

				            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s te expulsou da Organizaçao: %s %s, {FFFFFF}Motivo: %s",
							GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
							SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider]), -1, str);
							PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider])][pCargo] = 0;
							PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider])][pOrg] = 0;
							DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider]));
						}
						else
						{

                            format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de {%s} %s %s {FFFFFF}Motivo: %s",
							GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), 10), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
							SCM(playerid, -1, str);

							strmid(InfoOrg[GetPlayerOrg(playerid)][SubLider], "Ninguem", 0, strlen("Ninguem"), 255);
			    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "SubLider", "Ninguem");
			    			DOF2_SaveFile();
				        }
					}
					else
					{
                        if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider2]) != -1){

				            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s te expulsou da Organizaçao: %s %s, Motivo: %s",
							GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
							SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider2]), -1, str);
							PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider2])][pCargo] = 0;
							PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider2])][pOrg] = 0;
							DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][SubLider2]));
						}
						else
						{

                            format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de {%s} %s %s {FFFFFF}Motivo: %s",
							GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), 20), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
							SCM(playerid, -1, str);

							strmid(InfoOrg[GetPlayerOrg(playerid)][SubLider2], "Ninguem", 0, strlen("Ninguem"), 255);
			    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "SubLider2", "Ninguem");
			    			DOF2_SaveFile();
						}
					}
			    }
			    else ErroMSG(playerid, "Voce nao pode demitir um SubLider!");
			}
			else if(Vid == 1){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro1]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro1]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro1])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro1])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro1]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s} %i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro1], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro1", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 2){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro2]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro2]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro2])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro2])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro2]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro2], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro2", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 3){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro3]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro3]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro3])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro3])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro3]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro3], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro3", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 4){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro4]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro4]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro4])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro4])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro4]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro4], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro4", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 5){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro5]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro5]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro5])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro5])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro5]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro5], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro5", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 6){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro6]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro6]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro6])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro6])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro6]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro6], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro6", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 7){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro7]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro7]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro7])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro7])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro7]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro7], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro7", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 8){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro8]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro8]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro8])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro8])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro8]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro8], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro8", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 9){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro9]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro9]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro9])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro9])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro9]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro9], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro9", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 10){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro10]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro10]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro10])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro10])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro10]));
				}
				else
				{
					format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro10], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro10", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 11){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro11]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro11]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro11])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro11])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro11]));

				}
				else
				{
                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro11], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro11", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 12){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro12]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro12]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro12])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro12])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro12]));
				}
				else
				{
                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro12], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro12", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 13){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro13]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro13]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro13])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro13])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro13]));
				}
				else
				{
                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro13], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro13", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 14){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro14]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro14]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro14])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro14])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro14]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro14], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro14", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 15){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro15]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro15]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro15])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro15])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro15]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro15], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro15", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 16){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro16]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro16]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro16])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro16])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro16]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro15], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro15", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 17){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro17]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro17]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro17])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro17])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro17]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro17], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro17", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 18){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro18]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro18]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro18])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro18])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro18]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro18], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro18", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 19){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro19]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro19]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro19])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro19])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro19]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro19], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro19", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else if(Vid == 20){
                if(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro20]) != -1){
		            format(str, sizeof(str), ""#SERVELOGO" O {%s} %s %s {FFFFFF}te expulsou da Organizaçao: {%s} %s{FFFFFF}, Motivo: %s",
					GetOrgColorHex(playerid), GetPatentNome(GetPlayerOrg(playerid), GetPlayerCargo(playerid)), GetNameEx( playerid ), GetOrgColorHex(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro20]), -1, str);
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro20])][pCargo] = 0;
					PlayerInfo[GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro20])][pOrg] = 0;
					DemitirInfoOrg(GetPlayerID(InfoOrg[GetPlayerOrg(playerid)][Membro20]));
				}
				else
				{

                    format(str, sizeof(str), ""#SERVELOGO" Voce limpou a vaga de iD: {%s}%i %s Motivo: %s",
					GetOrgColorHex(playerid), Vid, nomeOrgs[PlayerInfo[playerid][pOrg]], Motivo);
					SCM(playerid, -1, str);

					strmid(InfoOrg[GetPlayerOrg(playerid)][Membro20], "Ninguem", 0, strlen("Ninguem"), 255);
	    			DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Membro20", "Ninguem");
	    			DOF2_SaveFile();
				}
			}
			else return ErroMSG(playerid, "Vaga ID Invalida!");
		}
		case DIALOG_ORG_PATENTES:
		{
            if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_HOME, 1, 0, "");
			static str[129];
			switch(listitem)
			{
			    case 0:{
					format(str, sizeof(str), "Digite o Novo Nome do Cargo N: 1 Abaixo!\nNome Atual: %s", InfoOrg[GetPlayerOrg(playerid)][PatenteName1]);
					ShowPlayerDialog( playerid, DIALOG_PATENTES_CONF, DIALOG_STYLE_INPUT, "Alterando Nome", str, "Confirmar", "Voltar" );
				}
				case 1:{
					format(str, sizeof(str), "Digite o Novo Nome do Cargo N: 2 Abaixo!\nNome Atual: %s", InfoOrg[GetPlayerOrg(playerid)][PatenteName2]);
					ShowPlayerDialog( playerid, DIALOG_PATENTES_CONF, DIALOG_STYLE_INPUT, "Alterando Nome", str, "Confirmar", "Voltar" );
				}
				case 2:{
					format(str, sizeof(str), "Digite o Novo Nome do Cargo N: 3 Abaixo!\nNome Atual: %s", InfoOrg[GetPlayerOrg(playerid)][PatenteName3]);
					ShowPlayerDialog( playerid, DIALOG_PATENTES_CONF, DIALOG_STYLE_INPUT, "Alterando Nome", str, "Confirmar", "Voltar" );
				}
				case 3:{
					format(str, sizeof(str), "Digite o Novo Nome do Cargo N: 4 Abaixo!\nNome Atual: %s", InfoOrg[GetPlayerOrg(playerid)][PatenteName4]);
					ShowPlayerDialog( playerid, DIALOG_PATENTES_CONF, DIALOG_STYLE_INPUT, "Alterando Nome", str, "Confirmar", "Voltar" );
				}
				case 4:{
					format(str, sizeof(str), "Digite o Novo Nome do Cargo N: 5 Abaixo!\nNome Atual: %s", InfoOrg[GetPlayerOrg(playerid)][PatenteName5]);
					ShowPlayerDialog( playerid, DIALOG_PATENTES_CONF, DIALOG_STYLE_INPUT, "Alterando Nome", str, "Confirmar", "Voltar" );
				}
				case 5:{
					format(str, sizeof(str), "Digite o Novo Nome do Cargo N: 6 Abaixo!\nNome Atual: %s", InfoOrg[GetPlayerOrg(playerid)][PatenteName6]);
					ShowPlayerDialog( playerid, DIALOG_PATENTES_CONF, DIALOG_STYLE_INPUT, "Alterando Nome", str, "Confirmar", "Voltar" );
				}
			}

			SetPVarInt(playerid, "EditandoPatente", (listitem+1));
            return 1;

		}
		case DIALOG_PATENTES_CONF:
		{
            if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 5, "");

			new Nome[16];
		    if( sscanf( inputtext, "s[15]", Nome ) ) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 5, "");

		    if(strlen(inputtext) > 15) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 5, ""), ErroMSG(playerid, "Nomes menores como 'Capitao' 'Fogueteiro'");

			switch(GetPVarInt(playerid, "EditandoPatente"))
			{
			    case 1: strmid(InfoOrg[GetPlayerOrg(playerid)][PatenteName1], Nome, 0, strlen(Nome), MAX_PLAYER_NAME), DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Patente1", Nome);
			    case 2: strmid(InfoOrg[GetPlayerOrg(playerid)][PatenteName2], Nome, 0, strlen(Nome), MAX_PLAYER_NAME), DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Patente2", Nome);
			    case 3: strmid(InfoOrg[GetPlayerOrg(playerid)][PatenteName3], Nome, 0, strlen(Nome), MAX_PLAYER_NAME), DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Patente3", Nome);
			    case 4: strmid(InfoOrg[GetPlayerOrg(playerid)][PatenteName4], Nome, 0, strlen(Nome), MAX_PLAYER_NAME), DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Patente4", Nome);
			    case 5: strmid(InfoOrg[GetPlayerOrg(playerid)][PatenteName5], Nome, 0, strlen(Nome), MAX_PLAYER_NAME), DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Patente5", Nome);
			    case 6: strmid(InfoOrg[GetPlayerOrg(playerid)][PatenteName6], Nome, 0, strlen(Nome), MAX_PLAYER_NAME), DOF2_SetString(FileOrg(GetPlayerOrg(playerid)), "Patente6", Nome);
			}

			DeletePVar(playerid, "EditandoPatente");
	        DOF2_SaveFile();
            return 1;
		}
		case DIALOG_ORG_SALARIOS:
		{
            if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_HOME, 1, 0, "");
			static str[129], Oid;
			Oid = GetPlayerOrg(playerid);
			switch(listitem)
			{
			    case 0:{
					format(str, sizeof(str), "Digite o Novo Salario do Cargo: %s Abaixo!\nSalario Atual: %i", InfoOrg[Oid][PatenteName1], CofreOrg[Oid][salarioc1]);
					ShowPlayerDialog( playerid, DIALOG_SALARIOS_CONF, DIALOG_STYLE_INPUT, "Alterando Salario", str, "Confirmar", "Voltar" );
				}
				case 1:{
					format(str, sizeof(str), "Digite o Novo Salario do Cargo: %s Abaixo!\nSalario Atual: %i", InfoOrg[Oid][PatenteName2], CofreOrg[Oid][salarioc2]);
					ShowPlayerDialog( playerid, DIALOG_SALARIOS_CONF, DIALOG_STYLE_INPUT, "Alterando Salario", str, "Confirmar", "Voltar" );
				}
				case 2:{
					format(str, sizeof(str), "Digite o Novo Salario do Cargo: %s Abaixo!\nSalario Atual: %i", InfoOrg[Oid][PatenteName3], CofreOrg[Oid][salarioc3]);
					ShowPlayerDialog( playerid, DIALOG_SALARIOS_CONF, DIALOG_STYLE_INPUT, "Alterando Salario", str, "Confirmar", "Voltar" );
				}
				case 3:{
					format(str, sizeof(str), "Digite o Novo Salario do Cargo: %s Abaixo!\nSalario Atual: %i", InfoOrg[Oid][PatenteName4], CofreOrg[Oid][salarioc4]);
					ShowPlayerDialog( playerid, DIALOG_SALARIOS_CONF, DIALOG_STYLE_INPUT, "Alterando Salario", str, "Confirmar", "Voltar" );
				}
				case 4:{
					format(str, sizeof(str), "Digite o Novo Salario do Cargo: %s Abaixo!\nSalario Atual: %i", InfoOrg[Oid][PatenteName5], CofreOrg[Oid][salarioc5]);
					ShowPlayerDialog( playerid, DIALOG_SALARIOS_CONF, DIALOG_STYLE_INPUT, "Alterando Salario", str, "Confirmar", "Voltar" );
				}
				case 5:{
					format(str, sizeof(str), "Digite o Novo Salario do Cargo: %s Abaixo!\nSalario Atual: %i", InfoOrg[Oid][PatenteName6], CofreOrg[Oid][salariolider]);
					ShowPlayerDialog( playerid, DIALOG_SALARIOS_CONF, DIALOG_STYLE_INPUT, "Alterando Salario", str, "Confirmar", "Voltar" );
				}
			}

			SetPVarInt(playerid, "EditandoSalario", (listitem+1));
            return 1;

		}
		case DIALOG_SALARIOS_CONF:
		{
            if(!response) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 4, "");

			static Salario;

		    if( sscanf( inputtext, "d", Salario ) ) return OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 4, "");

			switch(GetPVarInt(playerid, "EditandoSalario"))
			{
			    case 1: CofreOrg[GetPlayerOrg(playerid)][salarioc1] = Salario;
				case 2: CofreOrg[GetPlayerOrg(playerid)][salarioc2] = Salario;
			    case 3: CofreOrg[GetPlayerOrg(playerid)][salarioc3] = Salario;
			    case 4: CofreOrg[GetPlayerOrg(playerid)][salarioc4] = Salario;
			    case 5: CofreOrg[GetPlayerOrg(playerid)][salarioc5] = Salario;
			    case 6: CofreOrg[GetPlayerOrg(playerid)][salariolider] = Salario;
			}
			SaveCofreOrg(GetPlayerOrg(playerid));
			OnDialogResponse(playerid, DIALOG_MANAGERORG_MEMBROS, 1, 4, "");
			SCM(playerid, Verde, "Salario modificado com sucesso!");
			DeletePVar(playerid, "EditandoSalario");
            return 1;
		}
		case DIALOG_LISTA_ORG:
		{
			if(response) return true;
			if(!response) return ShowPlayerDialog(playerid, DIALOG_MANAGERORG_HOME, DIALOG_STYLE_LIST, "Gerenciar Organizaçao", "Gerenciar Membros\nGerenciar Materiais\nGerenciar Dinheiro em Caixa", "Gerenciar", "Fechar");
		    return 1;
        }
		case DIALOG_ORG_MENU:
		{
			if(!response) return DeletePVar(playerid, "MenuOrg"), true;

			new
				Oid = GetPVarInt(playerid, "MenuOrg"),
				str[400]
			;

			switch(listitem){
			    case 0: {
                    format(str, sizeof(str), "{%s}%s {FFFFFF}| Cargo: 1\n{%s}%s {FFFFFF}| Cargo: 2\n{%s}%s {FFFFFF}| Cargo: 3\n{%s}%s {FFFFFF}| Cargo: 4\n{%s}%s {FFFFFF}| Cargo: SubLider\n{%s}%s {FFFFFF}| Cargo: Lider",
					OrgColorHex[Oid], InfoOrg[Oid][PatenteName1], OrgColorHex[Oid], InfoOrg[Oid][PatenteName2], OrgColorHex[Oid],InfoOrg[Oid][PatenteName3], OrgColorHex[Oid],InfoOrg[Oid][PatenteName4], OrgColorHex[Oid],InfoOrg[Oid][PatenteName5], OrgColorHex[Oid],InfoOrg[Oid][PatenteName6]);
					ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Cargos", str, "Fechar", "");
				}
			    case 1: {
			    	format(str, sizeof(str), "{%s}%s {FFFFFF}| Salario: %i\n{%s}%s {FFFFFF}| Salario: %i\n{%s}%s {FFFFFF}| Salario: %i\n{%s}%s {FFFFFF}| Salario: %i\n{%s}%s {FFFFFF}| Salario: %i\n{%s}%s {FFFFFF}| Salario: %i",  OrgColorHex[Oid],
					InfoOrg[Oid][PatenteName1], CofreOrg[Oid][salarioc1], OrgColorHex[Oid], InfoOrg[Oid][PatenteName2], CofreOrg[Oid][salarioc2], OrgColorHex[Oid],InfoOrg[Oid][PatenteName3],
					CofreOrg[Oid][salarioc3], OrgColorHex[Oid],InfoOrg[Oid][PatenteName4], CofreOrg[Oid][salarioc4], OrgColorHex[Oid],InfoOrg[Oid][PatenteName5], CofreOrg[Oid][salarioc5], OrgColorHex[Oid],InfoOrg[Oid][PatenteName6], CofreOrg[Oid][salariolider]);
                    ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Salarios", str, "Fachar", "");
				}
			    case 2: {
			        if(PlayerInfo[ playerid ][ pOrg ] != 0) return ErroMSG(playerid, "Voce ja esta em uma organizaçao!");

					if(VerificarCandidato(GetName(playerid), Oid) == 1) return ErroMSG(playerid, "Seu pedido ja foi enviado, aguarde uma resposta!");

					AddCandidatoOrg(GetName(playerid), Oid);
					format(str, sizeof(str), "ATENÐaO: %s esta pedindo para entrar na organizaçao",GetNameEx(playerid));
					SendMessageToOrg(Oid, str);

					SendClientMessage(playerid, AzulClaro, "Voce pediu para entrar na organizaçao, aguarde uma resposta dos lideres");
				}
			}
            return 1;
		}

		case DIALOG_LIMPAR_CANDIDATOS:{
		    if(!response) return true;

			switch(listitem){
				case 0: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 1);
				case 1: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 2);
				case 2: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 3);
				case 3: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 4);
				case 4: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 5);
				case 5: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 6);
				case 6: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 7);
				case 7: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 8);
				case 8: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 9);
				case 9: LimparCandidatoOrg(playerid, GetPlayerOrg(playerid), 10);
			}
            return 1;
		}
		/* ========================================================
		            Sistema de Sugestoes
		-----------------------------------------------------------*/
		/* ========================================================
		Combustivel
		-----------------------------------------------------------*/
		case DIALOG_ABASTECIMENTO_ESCOLHA: {
			if(!response){
                PostoID[ playerid ] = 0;
				return true;
			}
			new tmp = (100 - combustivel[GetPlayerVehicleID(playerid)]);
			if(!strval(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ABASTECIMENTO_ESCOLHA, DIALOG_STYLE_INPUT, "Posto", "{ff0000}Digite um valor valido: (1 a 100)", "Abastecer", "Fechar");
			if(strval(inputtext) > tmp) return ShowPlayerDialog(playerid, DIALOG_ABASTECIMENTO_ESCOLHA, DIALOG_STYLE_INPUT, "Posto", "{ff0000}Sua tanque nao suporta essa quantidade{ffffff}\n\nDigite a quantidade de Litros: (1 a 100)", "Abastecer", "Fechar");
			if(PlayerInfo[playerid][pDinheiro] < (strval(inputtext) * COMBUSTIVEL_PRECO)) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Posto", "{ff0000}Desculpe, mas voce nao possui dinheiro suficiente", "Fechar", "");
			abastecendo[playerid] = 1;

			ActionPlayerGrana(playerid, "-", (strval(inputtext) * COMBUSTIVEL_PRECO), 1);

			ActionEmpresaMoneyEx(PostoID[ playerid ], "+", (strval(inputtext) * COMBUSTIVEL_PRECO));

			Freeze( playerid );

			InfoMSG(playerid, "- Aguarde um momento !");
			SetTimerEx("OnAbastecer", 5000, false, "ddd", playerid, GetPlayerVehicleID(playerid), (combustivel[GetPlayerVehicleID(playerid)] + strval(inputtext)));
		    return 1;
        }

		case DIALOG_ABASTECIMENTO_INICIAL:
        {
			if(!response)
            {
                PostoID[ playerid ] = 0;
				return true;
			}

			if(listitem == 0)
            {
				new tmp;
				tmp = (100 - combustivel[GetPlayerVehicleID(playerid)]);
				if(PlayerInfo[playerid][pDinheiro] < (tmp * COMBUSTIVEL_PRECO)) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Posto", "{ff0000}Desculpe, mas voce nao possui dinheiro suficiente", "Fechar", "");
				abastecendo[playerid] = 1;

				ActionPlayerGrana(playerid, "-", (tmp * COMBUSTIVEL_PRECO), 1);
				Freeze( playerid );

				ActionEmpresaMoneyEx(PostoID[ playerid ], "+", (tmp * COMBUSTIVEL_PRECO));

				InfoMSG(playerid, "- Aguarde um momento !");
				SetTimerEx("OnAbastecer", 5000, false, "ddd", playerid, GetPlayerVehicleID(playerid), 100);
			} else if(listitem == 1) return ShowPlayerDialog(playerid, DIALOG_ABASTECIMENTO_ESCOLHA, DIALOG_STYLE_INPUT, "Posto", "Digite a quantidade de Litros: (1 a 100)", "Abastecer", "Fechar");

        }
		case DIALOG_ABASTECIMENTO_GALAO:
        {
			if(!response){
                PostoID[ playerid ] = 0;
				return true;
			}
			if(listitem == 0) {
				new Total = (GalaoInfo[ playerid ][ pMax ]-GalaoInfo[ playerid ][ pLitros ]);
				if(GetPlayerGrana( playerid ) < (Total * COMBUSTIVEL_PRECO)) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente.");

				GalaoInfo[ playerid ][ pLitros ] = GalaoInfo[ playerid ][ pMax ];
				ActionPlayerGrana(playerid, "-", (Total * COMBUSTIVEL_PRECO));

                abastecendo[playerid] = 1;

				ActionEmpresaMoneyEx(PostoID[ playerid ], "+", (Total * COMBUSTIVEL_PRECO));

				Freeze( playerid );
				InfoMSG(playerid, "- Aguarde um momento !");
                SetTimerEx("OnAbastecerGalao", TSegundos(4), false, "dd", playerid, Total);
			}
			if(listitem == 1) {
				ShowPlayerDialog(playerid, DIALOG_GALAO_ESCOLHA, DIALOG_STYLE_INPUT, "Posto", "Digite a quantidade de litros que deseja adicionar ao seu galao:", "Confirmar", "Fechar");
			}
            return 1;
		}
		case DIALOG_GALAO_ESCOLHA:{
            if(!response){
                PostoID[ playerid ] = 0;
				return true;
			}
			if(!strval(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GALAO_ESCOLHA, DIALOG_STYLE_INPUT, "Posto", "{ff0000}Digite um valor valido: (1 a 100)", "Confirmar", "Fechar");
			if(strval(inputtext) > GalaoInfo[ playerid ][ pMax ] || (strval(inputtext)+GalaoInfo[ playerid ][ pLitros ]) > GalaoInfo[ playerid ][ pMax ]) return ShowPlayerDialog(playerid, DIALOG_ABASTECIMENTO_ESCOLHA, DIALOG_STYLE_INPUT, "Posto", "{ff0000}Seu galao nao suporta essa quantidade{ffffff}\n\nDigite a quantidade de litros:", "Confirmar", "Fechar");

			if(GetPlayerGrana( playerid ) < (strval(inputtext) * COMBUSTIVEL_PRECO)) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Posto", "{ff0000}Desculpe, mas voce nao possui dinheiro suficiente", "Fechar", "");

			abastecendo[playerid] = 1;

			ActionPlayerGrana(playerid, "-", (strval(inputtext) * COMBUSTIVEL_PRECO));

			ActionEmpresaMoneyEx(PostoID[ playerid ], "+", (strval(inputtext) * COMBUSTIVEL_PRECO));

			Freeze( playerid );
			InfoMSG(playerid, "- Aguarde um momento !");
			SetTimerEx("OnAbastecerGalao", TSegundos(4), false, "dd", playerid, (strval(inputtext) * COMBUSTIVEL_PRECO));
            return 1;
		}
		case DIALOG_GALAOUSAR: {
			if(response){
			    if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Use apenas numeros!");
			    if(GalaoInfo[ playerid ][ pLitros ] >= strval(inputtext)){
				    static Total, str[129];

					Total = (combustivel[GetPlayerVehicleID(playerid)]+strval(inputtext));
					if(Total >= 100){
			            GalaoInfo[playerid][pLitros] = (Total-100);
						combustivel[GetPlayerVehicleID(playerid)] = 100;
						SCM(playerid, -1, "{FF0000}[ {FFFFFF}Play Style{FF0000}] {FFFFFF}- Voce completou o tanque do seu veiculo");
					}
					else{
						GalaoInfo[playerid][pLitros] -= strval(inputtext);
						combustivel[GetPlayerVehicleID(playerid)] += strval(inputtext);

						format(str, 128, "{FF0000}[ {FFFFFF}Play Style{FF0000}] {FFFFFF}- Voce usou {00FF7F}%i {FFFFFF}litros do seu galao", strval(inputtext));
						SCM(playerid, -1, str);
					}
				}
			}
            return 1;
		}

		/* ========================================================
		Limpar ficha
		-----------------------------------------------------------*/
		case DIALOG_LIMPAR_FICHA:
        {
            if(!response) return 1;

			new id = strval(inputtext);
			if( !PlayerInfo[id][pLogger] )
            {
				ShowPlayerDialog( playerid, DIALOG_LIMPAR_FICHA, DIALOG_STYLE_INPUT, "Limpar Ficha", "{ff0000}Voce digitou um ID invalido\n\n{ffffff}Digite o ID do jogador no qual\nvoce deseja limpar a ficha", "Limpar", "Cancelar" );

            } else if( !PlayerInfo[id][pWanted] )
            {
				ShowPlayerDialog( playerid, DIALOG_LIMPAR_FICHA, DIALOG_STYLE_INPUT, "Limpar Ficha", "{ff0000}Este jogador nao esta procurado\n\n{ffffff}Digite o ID do jogador no qual\nvoce deseja limpar a ficha", "Limpar", "Cancelar" );

                } else {

				PlayerInfo[id][pWanted] = 0;
				ProcuradoDividas[ playerid ] = 0;
				SetPlayerWantedLevel(id, 0);
				format(strx, sizeof(strx), "{ffffff}[%s]\n\nSua ficha foi limpa. Nao cometa mais delitos!", nomeOrgs[PlayerInfo[playerid][pOrg]]);
				ShowPlayerDialog(id, Dinfo, DIALOG_STYLE_MSGBOX, "Departamento Policial", strx, "Fechar", "");
				format(strx, sizeof(strx), "{ffffff}Ficha limpa com sucesso\n\nNome: {ff0000}%s (ID: %d)", GetName(id), id);
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Limpar Ficha", strx, "Fechar", "");
			}
            return 1;
		}
		/* ========================================================
		Convite de organizaçao
		-----------------------------------------------------------*/
		case DIALOG_CONVITE_ORG:
        {
			if( response )
			{
			    PlayerInfo[playerid][pOrg] = PlayerInfo[orgsInvitedPID[playerid]][pOrg];
			    PlayerInfo[playerid][pCargo] = 1;

				PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
				OnSalvarDados(playerid);
				format( strx, sizeof(strx), "{ffffff}{%s}%s{ffffff} acaba de {008800}aceitar{ffffff} seu convite de ingressao em sua organizaçao", OrgColorHex[ PlayerInfo[ orgsInvitedPID[playerid] ][pOrg] ], GetName(playerid) );
				SendClientMessage( orgsInvitedPID[playerid], Branco, strx );
				SelectOrgSkin( playerid );
				ConviteInfoOrg(GetName(playerid), PlayerInfo[playerid][pOrg], 1);
			}
			else
			{
				format( strx, sizeof(strx), "{%s}%s{ffffff} acaba de {ff0000}recusar{ffffff} seu convite ingressao em sua organizaçao", OrgColorHex[ PlayerInfo[ orgsInvitedPID[playerid] ][pOrg] ], GetName(orgsInvitedPID[playerid]) );
				SendClientMessage( orgsInvitedPID[playerid] , Branco, strx );
			}
            return 1;
		}
		/* ========================================================
		Sistema de rtutorial
		-----------------------------------------------------------*/
		case DIALOG_TUTORIAL_KNOW:
		{

			if(response)
            {
				//TutorialStatus[playerid]--;
				//OnEntrarTutorial(playerid);

                new cFile[100];
                format(cFile, 100, PASTA_CODIGOS, inputtext);

                if(!DOF2_FileExists(cFile))
                {
                    ErroMSG(playerid, "Codigo inexistente!");
                    ShowPlayerDialog(playerid, DIALOG_TUTORIAL_KNOW, DIALOG_STYLE_INPUT , "Como voce encontrou o servidor?" ,"Voce possue algum codigo de indicacao ?\nDigite abaixo para ja iniciar com bonus:","Ir","Nao possuo");
                    return 1;

                }

                new nomecodigo[20],
                    str[128],
                    level = DOF2_GetInt(cFile, "Level"),
                    dinheiro = DOF2_GetInt(cFile, "Dinheiro"),
                    dias = DOF2_GetInt(cFile, "DiasVIP"),
                    vip = 1;//vip = DOF2_GetInt(cFile, "VIP");


                format(nomecodigo, 20, inputtext);
                format(PlayerInfo[playerid][pKnow], 20, inputtext);

                SendClientMessage(playerid, 0x12878DFF, "Codigo recebido. Ira ser adicionado assim que spawnar.");
                format(str, 128, "Voce ganhou %d de level, %d de dinheiro, VIP nivel %d por %d dias. Codigo usado: %s", level, dinheiro, vip, dias, nomecodigo);
                SendClientMessage(playerid, 0x12878DFF, str);

                PlayerInfo[playerid][pLevel] = level;
                PlayerInfo[playerid][pDinheiro] = dinheiro;
                PlayerInfo[playerid][pVIP] = vip;
                PlayerInfo[playerid][pVIPTEMP] = dias;

    			TutorialStatus[playerid]++;
    			OnEntrarTutorial(playerid);

                } else {

                format( PlayerInfo[playerid][pKnow], 20, "Nao usou codigo" );
                TutorialStatus[playerid]++;
                OnEntrarTutorial(playerid);
            }
            return 1;
		}


		case DIALOG_TUTORIAL_SEX:{
			if(response){
				SendClientMessage(playerid, 0x12878DFF, "Certo, voce e uma Mulher.");
				PlayerInfo[ playerid ][ pSex ] = 2;
			}
			else {
				SendClientMessage(playerid, 0x12878DFF, "Certo, voce e um Homem.");
				PlayerInfo[ playerid ][ pSex ] = 1;
			}
			TutorialStatus[playerid]++;
			OnEntrarTutorial(playerid);
            return 1;
		}

		/* ========================================================
		Sistema de registro e login
		-----------------------------------------------------------*/
		case DIALOG_AVISO_NICK: {
			if( response == 1 )
				CrashPlayer(playerid);
			else {
				SetPlayerName( playerid, nomeSugerido[playerid] );
				OnVerificarRegistro( playerid );
			}
            return 1;
		}
		case DIALOG_REGISTRO:
		{
			if (!response )
            {
                ChamarTextEntrada(playerid, 2);
                return 1;
            }

			if(!strlen(inputtext))
            {
                ChamarTextEntrada(playerid, 2);
                return 1;
            }
            if(strlen(inputtext) < MIN_SENHA || strlen(inputtext) > MAX_SENHA)
            {
                SendClientMessage(playerid, Vermelho, "A senha deve conter entre "#MIN_SENHA" e "#MAX_SENHA" caracteres!");
                ChamarTextEntrada(playerid, 2);
                return 1;
            }

            ChamarTextEntrada(playerid, 2);

            format(PlayerInfo[playerid][SenhaDigitada], 100, Encriptar(inputtext));
            PlayerInfo[playerid][DigitouSenha] = true;

            new strletra[20];
            if(strlen(inputtext) == 4)  strletra = "xxxx";
            if(strlen(inputtext) == 5)  strletra = "xxxxx";
            if(strlen(inputtext) == 6)  strletra = "xxxxxx";
            if(strlen(inputtext) == 7)  strletra = "xxxxxxx";
            if(strlen(inputtext) == 8)  strletra = "xxxxxxxx";
            if(strlen(inputtext) == 9)  strletra = "xxxxxxxxx";
            if(strlen(inputtext) == 10) strletra = "xxxxxxxxxx";
            if(strlen(inputtext) == 11) strletra = "xxxxxxxxxxx";
            if(strlen(inputtext) == 12) strletra = "xxxxxxxxxxxx";
            if(strlen(inputtext) == 13) strletra = "xxxxxxxxxxxxx";
            if(strlen(inputtext) == 14) strletra = "xxxxxxxxxxxxxx";
            if(strlen(inputtext) == 15) strletra = "xxxxxxxxxxxxxxx";
            if(strlen(inputtext) == 16) strletra = "xxxxxxxxxxxxxxxx";

            PlayerTextDrawSetString(playerid, Entrada[14][playerid], strletra);

			//Registrar(playerid, PlayerInfo[playerid][SenhaDigitada]);
            return 1;
		}

        case DIALOG_REGISTRO_MOBILE:
        {
            if (!response) return ShowWelcome(playerid);

            if(!strlen(inputtext)) return callcmd::registrar(playerid);

            if(strlen(inputtext) < MIN_SENHA || strlen(inputtext) > MAX_SENHA)
            {
                SendClientMessage(playerid, Vermelho, "A senha deve conter entre "#MIN_SENHA" e "#MAX_SENHA" caracteres!");
                callcmd::registrar(playerid);
                return 1;
            }

            RegistrarMobile(playerid, Encriptar(inputtext));
            return 1;
        }

        case DIALOG_LOGAR_MOBILE:
        {
            if (!response) return ShowWelcome(playerid);

            if(!strlen(inputtext)) return callcmd::logar(playerid);

            OnVerificarLoginMobile(playerid, inputtext);
            return 1;
        }

		case DIALOG_LOGAR:
		{
			if (!response )
            {
                //ChamarTextEntrada(playerid, 1);
                ShowPlayerDialog(playerid, DIALOG_LOGAR, DIALOG_STYLE_PASSWORD, "Login", "Insira sua senha de acesso abaixo!","Ir","Voltar");
                return 1;
            }

			if(!strlen(inputtext))
            {
                //ChamarTextEntrada(playerid, 1);
                ShowPlayerDialog(playerid, DIALOG_LOGAR, DIALOG_STYLE_PASSWORD, "Login", "Insira sua senha de acesso abaixo!","Ir","Voltar");
                return 1;
            }

            ChamarTextEntrada(playerid, 1);

            format(PlayerInfo[playerid][SenhaDigitada], 100, inputtext);
            PlayerInfo[playerid][DigitouSenha] = true;

            new strletra[20];
            if(strlen(inputtext) == 4)  strletra = "xxxx";
            if(strlen(inputtext) == 5)  strletra = "xxxxx";
            if(strlen(inputtext) == 6)  strletra = "xxxxxx";
            if(strlen(inputtext) == 7)  strletra = "xxxxxxx";
            if(strlen(inputtext) == 8)  strletra = "xxxxxxxx";
            if(strlen(inputtext) == 9)  strletra = "xxxxxxxxx";
            if(strlen(inputtext) == 10) strletra = "xxxxxxxxxx";
            if(strlen(inputtext) == 11) strletra = "xxxxxxxxxxx";
            if(strlen(inputtext) == 12) strletra = "xxxxxxxxxxxx";
            if(strlen(inputtext) == 13) strletra = "xxxxxxxxxxxxx";
            if(strlen(inputtext) == 14) strletra = "xxxxxxxxxxxxxx";
            if(strlen(inputtext) == 15) strletra = "xxxxxxxxxxxxxxx";
            if(strlen(inputtext) == 16) strletra = "xxxxxxxxxxxxxxxx";

            PlayerTextDrawSetString(playerid, Entrada[14][playerid], strletra);

            //OnVerificarLogin( playerid, inputtext );
            return 1;
		}

		case CamPM:
		{
            if(response)
            {
				switch(listitem){
				    case 0: SetPlayerToCamera(playerid, 1), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				    case 1: SetPlayerToCamera(playerid, 2), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				    case 2: SetPlayerToCamera(playerid, 0), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				    case 3: PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				}
			}
            return 1;
		}
		case CamBOPE:
		{
            if(response){
				switch(listitem){
				    case 0: SetPlayerToCamera(playerid, 5), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				    case 1: SetPlayerToCamera(playerid, 4), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				    case 2: SetPlayerToCamera(playerid, 3), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				    case 3: PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				}
			}
            return 1;
		}

		case CamCV:
		{
            if(response){
				switch(listitem){
				    case 0: SetPlayerToCamera(playerid, 6), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				}
			}
            return 1;
		}
		case CamPCC:
		{
            if(response){
				switch(listitem){
				    case 0: SetPlayerToCamera(playerid, 7), PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
				}
			}
            return 1;
		}

		case CellSMS:
		{
		    if(response){
		        if(CelularInfo[ playerid ][ pCredito ] < 0.10 && CelularInfo[ playerid ][pCell] != 2) return ErroMSG(playerid, "Voce nao possui creditos suficiente para o Envio !");
				if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao possui um celular!");
                if(CelularInfo[ ClickPlayerResult[ playerid ] ][ pCell ] == 0) return ErroMSG(playerid, "Esta pessoa nao possui um celular!");

                if(strlen(inputtext) > 80){
		        	ErroMSG(playerid, "Menssagem muito longa !");
					ShowPlayerDialog(playerid, CellSMS, DIALOG_STYLE_INPUT, ""#SERVELOGO"", "{D3D3D3}Digite a mensagem abaixo de ate {00FF7F}80 {D3D3D3}caracteres", "Enviar", "Cancelar");
					return true;
				}
                LowerString(inputtext);
				EnviarSMS(playerid, ClickPlayerResult[ playerid ], inputtext);
			}
            return 1;
		}
		/*case DIALOG_QUEST:
		{
		    if(response)
			{
				if(listitem == QuestData[PlayerInfo[playerid][pQuestID]][Correta])
				{
					PlayerInfo[playerid][pQuestAcert]++;
				}
                if(PlayerInfo[playerid][pQuestID] >= (sizeof(QuestData))-1)
				{
				    if(PlayerInfo[playerid][pQuestAcert] < QUEST_ACERTAS_MINIMO)
					{
					    ClearChatbox(playerid, 5);
					    SCM(playerid, -1, ""#SERVELOGO" Voce nao acertou o minimo de questoes requisitadas para poder registrar-se !");
						Kick(playerid);
					}
					else
					{
					    ClearChatbox(playerid, 5);
					    SCM(playerid, -1, ""#SERVELOGO" Voce acertou o minimo de questoes requisitadas!");
					    ClearChatbox(playerid, 1);
					    SCM(playerid, Verde, "[ Play Style] - Seja Bem Vindo");
					    ClearChatbox(playerid, 2);
					    TutorialStatus[playerid] = 1;
					    SCM(playerid, -1, "{FF0000}[ {FFFFFF}Play Style{FF0000}] {FFFF00}- {FFFFFF}Tutorial e Coleta de Informaçoes para seu Perfil.");
						OnEntrarTutorial(playerid);
					}
				}
				else
				{
				    PlayerInfo[playerid][pQuestID]++;
				    static sTRX[128], Strx[128];
					new PIQID = PlayerInfo[playerid][pQuestID];

				    format(sTRX, sizeof(sTRX), "%s\n%s\n%s", QuestData[PIQID][Resposta1], QuestData[PIQID][Resposta2], QuestData[PIQID][Resposta3]);
	                format(Strx, sizeof(Strx), "%s", QuestData[PIQID][QuestTitle]);
                    ShowPlayerDialog(playerid, DIALOG_QUEST, DIALOG_STYLE_LIST, Strx, sTRX, "Proxima", "Quit");

				}
			}
			else Kick(playerid);
		}*/

		case DIALOG_COMPRAR_FICHA:{
		    if(response){

				if(!IsNumeric( inputtext )) return ErroMSG(playerid, "Ultilize apenas numeros!");
				if(strval( inputtext ) < 1) return ErroMSG(playerid, "Quantia invalida!");

				new ValorTotal, str[128];

				ValorTotal = strval( inputtext )*100;

				if( GetPlayerGrana( playerid ) <  ValorTotal) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente, verifique a quantia de muniçao informada!");

				PlayerInfo[playerid][pFichas] = strval( inputtext );

				ActionPlayerGrana(playerid, "-", ValorTotal, 1);

     			format(str, sizeof(str), "Voce adquiriu %i fichas por R$ %s.", PlayerInfo[playerid][pFichas],  FormatNumber(ValorTotal) );
				SCM(playerid, -1, str);

			}
            return 1;
		}

		case DIALOG_MENU_CASSINO:{
		    if(response){

				new	numero, fichas ;

			    if( sscanf( inputtext, "dd", numero, fichas ) )
					return ShowPlayerDialog(playerid, DIALOG_MENU_CASSINO, DIALOG_STYLE_INPUT, "Cassino", "{ff0000}Erro: Use o formato [numero] [quantidade de fichas]\n\n{a9c4e4}Digite um numero e a quantidade de fichas que deseja apostar nesse numero. Ex: 21  50 \nOnde 21 e o numero escolhido e 50 e a quantidade de fichas apostadas\nCaso ganhe, seu premio sera multiplicado vezes o numero de fichas apostadas", "Confirmar", "Voltar" );

				if(numero < 0 || numero > 25)
					return ShowPlayerDialog(playerid, DIALOG_MENU_CASSINO, DIALOG_STYLE_INPUT, "Cassino", "{ff0000}Erro: Use numeros de 1 a 25\n\n{a9c4e4}Digite um numero e a quantidade de fichas que deseja apostar nesse numero. Ex: 21  50 \nOnde 21 e o numero escolhido e 50 e a quantidade de fichas apostadas\nCaso ganhe, seu premio sera multiplicado vezes o numero de fichas apostadas", "Confirmar", "Voltar" );

				if(fichas < 0 || fichas > PlayerInfo[playerid][pFichas])
				 	return ShowPlayerDialog(playerid, DIALOG_MENU_CASSINO, DIALOG_STYLE_INPUT, "Cassino", "{ff0000}Erro: Voce nao tem essa quantidade de fichas\n\n{a9c4e4}Digite um numero e a quantidade de fichas que deseja apostar nesse numero. Ex: 21  50 \nOnde 21 e o numero escolhido e 50 e a quantidade de fichas apostadas\nCaso ganhe, seu premio sera multiplicado vezes o numero de fichas apostadas", "Confirmar", "Voltar" );

				ValorFicha[playerid] = fichas;
				NumeroApostado[playerid] = numero;

				SCM(playerid, 0xcde5f7FF, "|INFO| Sorteando o numero, aguarde...");
				SetTimerEx("Apostando", TSegundos(2), false, "i", playerid);

				Apostado[playerid] = 1;

			}
            return 1;
		}
		case DIALOG_ROLAR_DADOS:{
		    if(response){

				new	numero, numero2, str[128];

			    if( sscanf( inputtext, "dd", numero, numero2 ) )
					return ShowPlayerDialog(playerid, DIALOG_ROLAR_DADOS, DIALOG_STYLE_INPUT, "Cassino", "{ff0000}Erro: use o formato: lado1 lado2\n\n{a9c4e4}Digite os dois lados que ficarao para cima apos os dados serem rolados.\n Ex: 2  3 \nOnde 2 indica o lado de um lado e 3 indica o lado do outro dado\nRequer no minimo 5 fichas e o premio proposto e $100000", "Confirmar", "Voltar" );

				if(numero < 1 || numero > 6 || numero2 < 1 || numero2 > 6)
					return ShowPlayerDialog(playerid, DIALOG_ROLAR_DADOS, DIALOG_STYLE_INPUT, "Cassino", "{ff0000}Erro: um daado so possui 6 lados\n\n{a9c4e4}Digite os dois lados que ficarao para cima apos os dados serem rolados.\n Ex: 2  3 \nOnde 2 indica o lado de um lado e 3 indica o lado do outro dado\nRequer no minimo 5 fichas e o premio proposto e $100000", "Confirmar", "Voltar" );

				if(PlayerInfo[playerid][pFichas] < 5)
				return ShowPlayerDialog(playerid, DIALOG_ROLAR_DADOS, DIALOG_STYLE_INPUT, "Cassino", "{ff0000}Erro: voce nao tem 5 fichas\n\n{a9c4e4}Digite os dois lados que ficarao para cima apos os dados serem rolados.\n Ex: 2  3 \nOnde 2 indica o lado de um lado e 3 indica o lado do outro dado\nRequer no minimo 5 fichas e o premio proposto e $100000", "Confirmar", "Voltar" );


				LadoApostado[ playerid ] = numero;
				LadoApostado2[ playerid ] = numero2;

				format(str, sizeof str, "{009916}|INFO| Voce selecionou o lado de numero %d e %d", numero, numero2);
				SCM(playerid, -1, str);

				SCM(playerid, -1, "|INFO| Rolando primeiro dado...");

				SetTimerEx("RolandoDado1", TSegundos(2), false, "i", playerid);

				Apostado[playerid] = 1;

			}
            return 1;
		}
		case DIALOG_ULTILIDADES:{
		    if(response){
			    switch(listitem){
				    case 0:{ // GPS 300
				        if(PlayerInfo[ playerid ][ pGPS ] != 0) return ErroMSG(playerid, "Voce ja tem um Gps :)");
						if(PlayerInfo[ playerid ][pDinheiro] < 300) return ErroMSG(playerid, "Voce nao tem o dinheiro!");


						PlayerInfo[ playerid ][ pGPS ] = 1;
      					ActionPlayerGrana(playerid, "-", 300, 1);

						SCM(playerid, Verde, "[Play Style] - Gps Adquirido com sucesso!");

						//if(PlayerInfo[ playerid ][pAgenda] == 1 && CelularInfo[ playerid ][ pCell ] == 1) return SetPlayerComplet(playerid, Novato);

					}
					case 1: ShowPlayerDialog(playerid, DIALOG_CELLBUY, DIALOG_STYLE_LIST, ""#SERVELOGO" - Celular", "Pre-pago\nPos-pago\nVoltar", "Confirmar", "Cancelar");
					case 2: {
					    if(PlayerInfo[ playerid ][pDinheiro] < 150) return ErroMSG(playerid, "Voce nao tem o dinheiro!");
					    if(PlayerInfo[ playerid ][pCapacete] != 0) return ErroMSG(playerid, "Voce ja tem um Capacete!");

					    ActionPlayerGrana(playerid, "-", 150);
					    PlayerInfo[ playerid ][pCapacete] = 1;
					    OnSalvarDados( playerid );

						GameTextForPlayer(playerid,"~g~ R$~r~-150,00", 5000, 1);
						SCM(playerid, Verde, "[Play Style] - Capacete com sucesso use: /capacete!");

					}
					case 3: ShowPlayerDialog(playerid, DIALOG_CREDITBUY, DIALOG_STYLE_LIST, ""#SERVELOGO" - Creditos", "{FFFF00}Escolha a Quantidade\n{3C982E}R${FFFFFF}5,00\n{3C982E}R${FFFFFF}10,00\n{3C982E}R${FFFFFF}20,00\nVoltar", "Confirmar", "Cancelar"); // Creditos
				    case 4: ShowPlayerDialog(playerid, DIALOG_GALAO, DIALOG_STYLE_LIST, ""#SERVELOGO" - Capacidade", "{FFFF00}10 {FFFFFF}Litros {3C982E}R${FFFFFF}30,00\n{FFFF00}15 {FFFFFF}Litros {3C982E}R${FFFFFF}45,00\n{FFFF00}25 {FFFFFF}Litros {3C982E}R${FFFFFF}70,00\n{FFFF00}50 {FFFFFF}Litros {3C982E}R${FFFFFF}300,00\n{E6E6E6}Voltar", "Confirmar", "Cancelar");
					case 5: {
					    if(PlayerInfo[ playerid ][pDinheiro] < 50) return ErroMSG(playerid, "Voce nao tem o dinheiro!");
					    if(PlayerInfo[ playerid ][pAgenda] != 0) return ErroMSG(playerid, "Voce ja tem uma Agenda!");

					    ActionPlayerGrana(playerid, "-", 50);
					    PlayerInfo[ playerid ][pAgenda] = 1;
					    OnSalvarDados( playerid );

						GameTextForPlayer(playerid,"~g~ R$~r~-50,00", 5000, 1);
						SCM(playerid, Verde, "[Play Style] - Agenda adquirida com sucesso use: /agenda!");

						//if(PlayerInfo[ playerid ][pGPS] == 1 && CelularInfo[ playerid ][ pCell ] == 1) return SetPlayerComplet(playerid, Novato);

					}

				}
			}
            return 1;
		}
		case DIALOG_CELLBUY:
		{
		    if(response)
			{
			    switch(listitem)
				{
				    case 0:{
                        if(CelularInfo[ playerid ][ pCell ] !=0) return ErroMSG(playerid, "Voce ja possui um aparelho celular!");
						if(GetPlayerGrana(playerid) < 200) return ErroMSG(playerid, "Voce nao tem o dinheiro nescessario para realizar esta compra!");

						CelularInfo[ playerid ][pNumero] = (1000 + random(9999));

						CelularInfo[ playerid ][ pCell ] = 1;
						CelularInfo[ playerid ][ pCredito ] += 5.00;

						ActionPlayerGrana(playerid, "-", 200, 1);

						format(strx, sizeof(strx), ""#SERVELOGO" Seu Numero: {FF0000}%i", CelularInfo[ playerid ][pNumero]);
						SCM(playerid, -1, strx);
						SCM(playerid, Verde, "Cell Pre-pago Adquirido com sucesso /ajuda celular para mais informaçoes!");
						SCM(playerid, Verde, "[ Bonus ] - Voce ganhou 5,00 de creditos para seu Pre-pago!");

						//if(PlayerInfo[ playerid ][pAgenda] == 1 && PlayerInfo[ playerid ][ pGPS ] == 1) return SetPlayerComplet(playerid, Novato);

					}
					case 1: SCM(playerid, Verde, "desativado!");
                    case 2: OpenPlayerMenu(playerid, 0);
				}
			}
            return 1;
		}
		case DIALOG_CREDITBUY:
		{
		    if(response)
			{
                if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao tem um celular");

				switch(listitem)
				{
				    case 0: ShowPlayerDialog(playerid, DIALOG_CREDITBUY, DIALOG_STYLE_LIST, ""#SERVELOGO" - Creditos", "{FFFF00}Escolha a Quantidade\n{3C982E}R${FFFFFF}5,00\n{3C982E}R${FFFFFF}10,00\n{3C982E}R${FFFFFF}20,00\nVoltar", "Confirmar", "Cancelar");
					case 1:{
					    if(PlayerInfo[ playerid ][pDinheiro] < 5) return ErroMSG(playerid, "Voce nao tem o dinheiro!");
					    if(CelularInfo[ playerid ][pCredito] >= 50.00 || (CelularInfo[ playerid ][pCredito]+5.00) >= 50.00) return ErroMSG(playerid, "Seu Celular Suporta no maximo R$50,00 de Creditos!");
                        CelularInfo[ playerid ][pCredito] += 5.00;

                        ActionPlayerGrana(playerid, "-", 5);
                        OnSalvarDados( playerid );

                        GameTextForPlayer(playerid,"~g~ R$~r~-5,00", 5000, 1);

						SCM(playerid, Verde, "[Play Style] - Voce recarregou R$5,00 de creditos!");
					}
					case 2:{
					    if(PlayerInfo[ playerid ][pDinheiro] < 10) return ErroMSG(playerid, "Voce nao tem o dinheiro!");
					    if(CelularInfo[ playerid ][pCredito] >= 50.00 || (CelularInfo[ playerid ][pCredito]+10.00) >= 50.00) return ErroMSG(playerid, "Seu Celular Suporta no maximo R$50,00 de Creditos!");
                        CelularInfo[ playerid ][pCredito] += 10.00;

                        ActionPlayerGrana(playerid, "-", 10);
                        OnSalvarDados( playerid );

                        GameTextForPlayer(playerid,"~g~ R$~r~-10,00", 5000, 1);

						SCM(playerid, Verde, "[Play Style] - Voce recarregou R$10,00 de creditos!");
					}
					case 3:{
					    if(PlayerInfo[ playerid ][pDinheiro] < 20) return ErroMSG(playerid, "Voce nao tem o dinheiro!");
					    if(CelularInfo[ playerid ][pCredito] >= 50.00 || (CelularInfo[ playerid ][pCredito]+20.00) >= 50.00) return ErroMSG(playerid, "Seu Celular Suporta no maximo R$50,00 de Creditos!");
                        CelularInfo[ playerid ][pCredito] += 20.00;

                        ActionPlayerGrana(playerid, "-", 20);
                        OnSalvarDados( playerid );

                        GameTextForPlayer(playerid,"~g~ R$~r~-20,00", 5000, 1);

						SCM(playerid, Verde, "[Play Style] - Voce recarregou R$20,00 de creditos!");
					}
					case 4: OpenPlayerMenu(playerid, 0);
				}
			}
            return 1;
		}
		case DIALOG_GALAO:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0:{ //10 litros
				        if(GalaoInfo[playerid][pGalao] != 0 && GalaoInfo[ playerid ][ pMax ] >= 10) return ErroMSG(playerid, "Voce ja possui um galao igual a este.");
                        if(GetPlayerGrana( playerid ) < 30) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente.");

				        GalaoInfo[ playerid ][ pGalao ] = 1;
				        GalaoInfo[ playerid ][ pLitros ] = 0;
				        GalaoInfo[ playerid ][ pMax ] = 10;
				        ActionPlayerGrana(playerid, "-", 30, 1);

						ClearChatbox(playerid, 2);
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Voce comprou um galao com capacidade de 10 litros!");
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Va ate um posto e use /abastecer para encher o galao!");

				    }
				    case 1:{
                        if(GalaoInfo[playerid][pGalao] != 0 && GalaoInfo[ playerid ][ pMax ] == 15) return ErroMSG(playerid, "Voce ja possui um galao igual a este.");
                        if(GetPlayerGrana( playerid ) < 45) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente.");

				        GalaoInfo[ playerid ][ pGalao ] = 1;
				        GalaoInfo[ playerid ][ pMax ] = 15;
				        ActionPlayerGrana(playerid, "-", 45);

				        GameTextForPlayer(playerid,"~g~ R$~w~-45,00", 5000, 1);

						ClearChatbox(playerid, 2);
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Voce comprou um galao com capacidade de 15 litros!");
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Va ate um posto e use /abastecer para encher o galao!");
					}
					case 2:{
                        if(GalaoInfo[playerid][pGalao] != 0 && GalaoInfo[ playerid ][ pMax ] == 25) return ErroMSG(playerid, "Voce ja possui um galao igual a este.");
                        if(GetPlayerGrana( playerid ) < 70) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente.");

						GalaoInfo[ playerid ][ pGalao ] = 1;
				        GalaoInfo[ playerid ][ pMax ] = 25;
                        if((GalaoInfo[ playerid ][ pLitros ]+5) > 25) GalaoInfo[ playerid ][ pLitros ] = 25;
                        else GalaoInfo[ playerid ][ pLitros ] += 5;

						ActionPlayerGrana(playerid, "-", 70);
				        GameTextForPlayer(playerid,"~g~ R$~w~-70,00", 5000, 1);

                        ClearChatbox(playerid, 2);
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF} - Voce comprou um galao com capacidade de 25 litros!");
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Va ate um posto e use /abastecer para colocar gasolina no galao");
						SCM(playerid, -1, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF} - Voce ganhou {04B404}5 {FFFFFF}litros de gasolina como brinde!");
					}
				    case 3:{
				        if(GalaoInfo[playerid][pGalao] != 0 && GalaoInfo[ playerid ][ pMax ] == 50) return ErroMSG(playerid, "Voce ja possui um galao igual a este.");
                        if(GetPlayerGrana( playerid ) < 300) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente.");

						GalaoInfo[ playerid ][ pGalao ] = 1;
				        GalaoInfo[ playerid ][ pMax ] = 50;
                        if((GalaoInfo[ playerid ][ pLitros ]+20) > 50) GalaoInfo[ playerid ][ pLitros ] = 50;
                        else GalaoInfo[ playerid ][ pLitros ] += 20;

						ActionPlayerGrana(playerid, "-", 300);
				        GameTextForPlayer(playerid,"~g~ R$~w~-300,00", 5000, 1);

                        ClearChatbox(playerid, 2);
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Voce comprou um galao com capacidade de 50 litros!");
						SCM(playerid, Verde, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF}- Va ate um posto e use /abastecer para colocar gasolina no galao");
						SCM(playerid, -1, "{FFFF00}[{FFFFFF}Play Style{FFFF00}] {FFFFFF} - Voce ganhou {04B404}20 {FFFFFF}litros de gasolina como brinde!");
				    }
				    case 4:OpenPlayerMenu(playerid, 0);
				}
			}
            return 1;
		}
		case DIALOG_EMPREGOS:{
		    if(!response) return true;

			switch(listitem){
			    case 0: ShowJobsList(playerid, TYPE_TRANS); //transportes
			    case 1: ShowJobsList(playerid, TYPE_CONJ); //Em conjunto
			    case 2: ShowJobsList(playerid, TYPE_SINGLE); //Honestas
			    case 3: ShowJobsList(playerid, TYPE_DESONEST); //Desonestas
			    case 4: ShowJobsList(playerid, TYPE_SECOND); //Secundarias, ganhos extras
			}
            return 1;
	  	}
	  	case DIALOG_EMPESCOLHIDO:
        {
		    if(response)
            {

				/*for(new list; list < sizeof(MenuEmpregosLS); list++) {
					if(MenuEmpregosLS[list][JobType] == catSelected[playerid]) {
					format(str_, 100, "{7CF97C}>{FFFFFF} %s \t%s\t%i\n", MenuEmpregosLS[list][JobName], MenuEmpregosLS[list][JobHabName], MenuEmpregosLS[list][JobLevel]);
					strcat(boxConte, str_);
            		result=true;
					}
				}

				static str_[ 200 ];
				format(str_, sizeof str_, "Voce selecionou o emprego de %s\nVoce precisa ir ate o local de trabalho para começar a trabalhar\nSera marcado ao seu mapa a localizaçao deste emprego\nDeseja confirmar a marcaçao no mapa?", MenuEmpregosLS[listitem][JobName]);



			ShowPlayerDialog(playerid, DIALOG_EMPESCOLHIDO, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - Confirmar Escolha", str_, "Confirmar", "Voltar");
			EmpregoEscolhido[ playerid ] = MenuEmpregosLS[opcao][JobID];

			    PlayerInfo[ playerid ][ pEmprego ] = EmpregoEscolhido[ playerid ];
                PlayerInfo[playerid][ pProfLevel ][ EmpregoEscolhido[ playerid ] ] = 1;
                CarregarProfissao( playerid );*/

				switch(catSelected[playerid])
                {
    				case TYPE_TRANS: EmpregoEscolhido[ playerid ] = EmpregosTypeTrans[listitem][JobID];
					case TYPE_CONJ: EmpregoEscolhido[ playerid ] = EmpregosTypeGroup[listitem][JobID];
					case TYPE_SINGLE: EmpregoEscolhido[ playerid ] = EmpregosTypeSingle[listitem][JobID];
				}

	        	ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	"Observaçoes", "{E1E6E8}Em seu mini-mapa foi marcado o local de trabalho, siga o ponto vermelho para chegar la e pegar o emprego!", "Iniciar", "");

				switch(EmpregoEscolhido[ playerid ])
                {
					case Lixeiro: SetGPSFromLocation(playerid, "HQ Lixeiros", -1938.8781, -1795.8017, 31.8209);
					case Petroleiro: SetGPSFromLocation(playerid, "HQ Petroleiros", -1039.2301, -573.6809, 32.0078);
					case MOnibus: SetGPSFromLocation(playerid, "Terminal de Onibus", 1963.7844, -2196.9265, 13.1560);
					case Carteiro: SetGPSFromLocation(playerid, "HQ Carteiros", 1802.7223,-1723.0398,13.5395);
					case Mecanico: SetGPSFromLocation(playerid, "HQ Mecanicos", 1618.3071,-1880.4132,13.3828);
					case Minerador: SetGPSFromLocation(playerid, "HQ Minerador", 814.7670, 844.9670, 10.3003);
					case Taxista: SetGPSFromLocation(playerid, "HQ Taxistas", 1815.0914,-1890.0520,13.4141);
					case Advogado: SetGPSFromLocation(playerid, "HQ Advogados", 336.333740,157.667953,1014.187500);
					case Paramedico: SetGPSFromLocation(playerid, "HQ Paramedicos", 1177.7167, -1324.0771, 14.0845);
					case Lenhador: SetGPSFromLocation(playerid, "HQ Lenhadores", -497.482574,-56.150737,60.545181);
					case PizzaJob: SetGPSFromLocation(playerid, "Entregadores de Pizza", 2098.8298, -1797.1786, 13.3889);

				}
				PlayerInfo[ playerid ][ pEmprego ] = EmpregoEscolhido[ playerid ];
                PlayerInfo[playerid][ pProfLevel ][ EmpregoEscolhido[ playerid ] ] = 1;
                CarregarProfissao( playerid );
			}
			else OpenPlayerMenu(playerid, 1), EmpregoEscolhido[ playerid ] = 0;
            return 1;
		}
		case DIALOG_JOB_ACCEPT:
        {
		    if(response){
			    PlayerInfo[ playerid ][ pEmprego ] = EmpregoEscolhido[ playerid ];
                PlayerInfo[playerid][ pProfLevel ][ EmpregoEscolhido[ playerid ] ] = 1;
                CarregarProfissao( playerid );

	        	OnSalvarDados( playerid );
				EmpregoEscolhido[ playerid ] = 0;
                PlaySoundForPlayer(playerid, 1057);
              	callcmd::ajuda(playerid, "emprego");

				ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	"Observaçoes", "{E1E6E8}Voce aceitou um novo emprego, use: {ff8cff}/ajuda > emprego {E1E6E8}para mais informaçoes sobre seu emprego.", "Fechar", "");
			}
			else {
				EmpregoEscolhido[ playerid ] = 0;

				return true;
			}
            return 1;
		}
		case DIALOG_SERVEROWNER:{
		    if(response){
			    switch(listitem){
				    case 0: ShowPlayerDialog(playerid, DIALOG_SERVENAME, DIALOG_STYLE_INPUT, ""#SERVELOGO" - ServerName", "Digite o Novo nome do Servidor Abaixo:\nLembre-se este comando nao e muito funcional pois a sequesncia de nomes randomicos o trocam rapidamente ..", "Confirmar", "Voltar");
				    case 1: ShowPlayerDialog(playerid, DIALOG_MAPNAME, DIALOG_STYLE_INPUT, ""#SERVELOGO" - MapName", "Digite o novo MapName do Servidor abaixo:", "Confirmar", "Voltar");
				    case 2: ShowPlayerDialog(playerid, DIALOG_SITESV, DIALOG_STYLE_INPUT, ""#SERVELOGO" - Site/Werbul", "Digite o novo MapName do Servidor abaixo:", "Confirmar", "Voltar");
					case 3: ShowPlayerDialog(playerid, DIALOG_SVNPC, DIALOG_STYLE_INPUT, ""#SERVELOGO" - NPC/Limite", "Digite o novo limite de NPC's conectados no servidor abaixo:", "Confirmar", "Voltar");
					case 4: ShowPlayerDialog(playerid, DIALOG_LOADFS, DIALOG_STYLE_INPUT, ""#SERVELOGO" - FilterScript", "Digite corretamente o nome do FilterScript\nque voce deseja carregar!", "Confirmar", "Voltar");
				    case 5: ShowPlayerDialog(playerid, DIALOG_UNLOADFS, DIALOG_STYLE_INPUT, ""#SERVELOGO" - FilterScript", "Digite corretamente o nome do FilterScript\nque voce deseja desligar", "Confirmar", "Voltar");
				    case 6: ShowPlayerDialog(playerid, DIALOG_GMX, DIALOG_STYLE_INPUT, ""#SERVELOGO" - Gmx", "Digite o Motivo Pelo qual voce deseja Reiniciar o GameMode:", "Confirmar", "Voltar");
				    case 7: ShowPlayerDialog(playerid, DIALOG_SETPASSWORD , DIALOG_STYLE_INPUT, ""#SERVELOGO" - Password", "Digite a senha de entrada no servidor:", "Confirmar", "Voltar");
                    case 8: SendRconCommand("reloadlog"), InfoMSG(playerid, "Log Resetado Com Sucesso!");
                    case 9: {
						static str[100];
						format(str, sizeof(str), "Digite abaixo o novo limite de ping desejado:\n\nAtual: %i", PingLimite_Servidor);
						ShowPlayerDialog(playerid, DIALOG_PINGLIMITE , DIALOG_STYLE_INPUT, ""#SERVELOGO" - Limite de Ping", str, "Confirmar", "Voltar");
					}
				}
			}
            return 1;
		}
		case DIALOG_SERVENAME:{
		    if(response){
		        format(STRX, sizeof(STRX), "Novo Nome no SA-MP Client: %s alterado com sucesso!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        format(STRX, sizeof(STRX), "%s", inputtext);
		        ServerName(STRX);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_MAPNAME:{
		    if(response){
		        format(STRX, sizeof(STRX), "Nova Linguagem no SA-MP Client: %s alterado com sucesso!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        format(STRX, sizeof(STRX), "%s", inputtext);
		        ServerLanguage(STRX);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_SITESV:{
		    if(response){
                format(STRX, sizeof(STRX), "Novo Site no SA-MP Client: %s alterado com sucesso!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        format(STRX, sizeof(STRX), "%s", inputtext);
		        ServerWebsite(STRX);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_SVNPC: {
		    if(response){
                format(STRX, sizeof(STRX), "Novo Limite de NPC Bots: %i, alterado com sucesso!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        ServerMaxNPC(strval(inputtext));
			}
			else callcmd::serverpainel( playerid );
        }
		case DIALOG_LOADFS:{
		    if(response){
		        format(STRX, sizeof(STRX), "Loading FS: %s, se o mesmo nao obter funcionamento verifique novamente o nome informado!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        format(STRX, sizeof(STRX), "%s", inputtext);
		        LoadFS(STRX);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_UNLOADFS:{
		    if(response){
		        format(STRX, sizeof(STRX), "UnLoading FS: %s, se o mesmo continuar em funcionamento verifique novamente o nome informado!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        format(STRX, sizeof(STRX), "%s", inputtext);
		        UnLoadFS(STRX);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_GMX:{
		    if(response){
		        format(STRX, sizeof(STRX), "%s", inputtext);
		        callcmd::gmx(playerid, STRX);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_SETPASSWORD:{
		    if(response){
		        format(STRX, sizeof(STRX), "Voce trancou o Servidor: %s e a senha de acesso!", inputtext);
		        SCM(playerid, Amarelo, STRX);

		        ServerPassword(inputtext);
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_PINGLIMITE:{
		    if(response){
		        if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Apenas numero!");
		        format(STRX, sizeof(STRX), "Limite de ping modificado, agora: %i!", inputtext);
		        SCM(playerid, Amarelo, STRX);

				PingLimite_Servidor = strval(inputtext);
				DOF2_SetInt(PASTA_CONFIG, "Ping", PingLimite_Servidor);
				DOF2_SaveFile();
			}
			else callcmd::serverpainel( playerid );
		}
		case DIALOG_GPS:{
		    if(response){
		        switch(listitem){
					//Locais Geral\nBases HQs\nEmpregos HQs\nDesligar GPS
					case 0: {
					    ShowPlayerDialog(playerid, DIALOG_GPS_LOCAISP, DIALOG_STYLE_LIST, ""#SERVELOGO" - GPS", "Prefeitura\nLoja de Skins (ZIP)\nLoja de Skins (Binco)\nHospital\nLoja de Armas\nOficina\nBurguer Shot\nAuto-Escola\nBanco\nConcessionaria\nLoterica\nCassino\nDelegacia\nAcademia\nShop dos Acessorios\nArea de caca\nImobiliaria\nDetran\nImobiliaria Mobile\nDetran Mobile", "Confirmar", "Voltar");
					}
					case 1: {
                        ShowPlayerDialog(playerid, DIALOG_GPS_EMPREGOS, DIALOG_STYLE_LIST, ""#SERVELOGO" - GPS", "Motoristas de Onibus\nPetroleiros\nLixeiros\nCarteiros\nTaxista\nMecanico\nMinerador\nParamedicos\nLenhadores", "Confirmar", "Voltar");
					}
					case 2:{
					    if(PlayerInfo[ playerid ][ pCheckGPS ]){
							GameTextForPlayer(playerid, "~y~GPS ~r~Desligado", 2000, 1);
							PlayerInfo[ playerid ][ pCheckGPS ] = 0;
							DisablePlayerCheckpoint(playerid);
						}
						else ErroMSG(playerid, "Seu GPS ja se esta desligado");
					}
				}
			}
            return 1;
		}
		case DIALOG_GPS_LOCAISP:{
		    if(response){
		        switch(listitem){
		            case 0: SetGPSFromLocation(playerid, "Prefeitura", 1487.4212, -1732.4739, 13.5919);
		            case 1: SetGPSFromLocation(playerid, "ZIP", 1468.9272, -1153.7318, 23.6978);
		            case 2: SetGPSFromLocation(playerid, "Binco", 2244.6369, -1661.6872, 15.1295);
		            case 3: SetGPSFromLocation(playerid, "Hospital", 1174.0612,-1323.3058,14.9922);
		            case 4: SetGPSFromLocation(playerid, "Ammu Nation", 1362.3555,-1280.6729,13.3828);
                    case 5: SetGPSFromLocation(playerid, "Oficina", 1622.507690,-1843.061889,13.537424);//
		            case 6: SetGPSFromLocation(playerid, "Burguer Shot", 812.6113,-1616.2592,13.5469);
		            case 7: SetGPSFromLocation(playerid, "Auto-Escola", 1310.1240,-1385.8673,13.5845);
		            case 8: SetGPSFromLocation(playerid, "Banco", 1462.9026,-1024.6294,23.8281);
		            case 9: SetGPSFromLocation(playerid, "Concessionaria", 2143.3010,-1200.4835,24.0509);
		            case 10: SetGPSFromLocation(playerid, "Loterica", 1631.2495,-1166.9482,24.0781);
		            case 11: SetGPSFromLocation(playerid, "Cassino", 1022.4035, -1131.0954, 23.8281);
		            case 12: SetGPSFromLocation(playerid, "Delegacia", 1540.500732,-1675.801269,13.550716);
		            case 13: SetGPSFromLocation(playerid, "Academia", 2227.6948,-1722.6416,13.5548);
		            case 14: SetGPSFromLocation(playerid, "Shop. Acessorios", 1157.1967, -1693.8096, 13.9531);
		            case 15: SetGPSFromLocation(playerid, "Area de caça", -1647.4630,-2235.6323,29.8742);
                    case 16: SetGPSFromLocation(playerid, "Imobiliaria", 1794.3041,-1281.3175,13.6328);
                    case 17: SetGPSFromLocation(playerid, "Detran", 1794.3041,-1281.3175,13.6328);
                    case 18: SetGPSFromLocation(playerid, "Imobiliaria", 593.487548,-1250.483276,18.236093);
                    case 19: SetGPSFromLocation(playerid, "Detran", 593.487548,-1250.483276,18.236093);
				}
			}
            return 1;
		}
		case DIALOG_GPS_EMPREGOS:{
		    if(response){
		        switch(listitem){
		            case 0: SetGPSFromLocation(playerid, "Terminal de Onibus", 1963.7844, -2196.9265, 13.1560);
		            case 1: SetGPSFromLocation(playerid, "HQ Petroleiros", -1039.2301, -573.6809, 32.0078);
		            case 2: SetGPSFromLocation(playerid, "Lixeiros", -1938.8781, -1795.8017, 31.8209);
		            case 3: SetGPSFromLocation(playerid, "HQ Carteiros", 1802.7223,-1723.0398,13.5395);
		            case 4: SetGPSFromLocation(playerid, "HQ Taxistas", 1815.0914,-1890.0520,13.4141);
		            case 5: SetGPSFromLocation(playerid, "HQ Mecanicos", 1618.3071,-1880.4132,13.3828);
		            case 6: SetGPSFromLocation(playerid, "HQ Minerador", 814.7670, 844.9670, 10.3003);
		            case 7: SetGPSFromLocation(playerid, "HQ Paramedicos", 1177.7167, -1324.0771, 14.0845);
		            case 8: SetGPSFromLocation(playerid, "HQ Lenhadores", -497.482574,-56.150737,60.545181);
				}
			}
            return 1;
		}
		case DIALOG_TOYS:
    	{
			if (!response) return 0;
		  	switch(listitem) {
				case 0:{
					new
						str[1024],
						slots
					;
		            if(IsAVip(playerid))
			            slots = MAX_VIP_TOYS;
	                else
			            slots = MAX_FREE_TOYS;

				    for (new i; i < slots; i++) {
	                    new
							tmp[ 64 ]
						;
						strcat(tmp, GetToyNameByModel(PlayerToys[playerid][i][ptModelID]));
						if (PlayerToys[playerid][i][ptModelID] && PlayerToys[playerid][i][ptWearing]) {
	                        if (PlayerToys[playerid][i][ptWearing])
						        strcat(tmp, " {00A500}(Vestindo)");
						}
						strcat(tmp, "\n");
						strcat(str, tmp);
					}
					ShowPlayerDialog(playerid, DIALOG_TOYS_ATTACH, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Vestir/Tirar", str, "Selecionar", "Voltar");
				}
				case 1: {
					new
						str[ 1024 ],
						slots
					;
		            if(IsAVip(playerid))
			            slots = MAX_VIP_TOYS;
	                else
			            slots = MAX_FREE_TOYS;
				    for (new i; i < slots; i++) {
	                    new
							tmp[ 64 ]
						;
						strcat(tmp, GetToyNameByModel(PlayerToys[playerid][i][ptModelID]));
						strcat(tmp, "\n");
						strcat(str, tmp);
					}
					ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Editar", str, "Selecionar", "Voltar");
				}
				case 2: {
					new
						str[1024],
						slots
					;
		            if(IsAVip(playerid))
			            slots = MAX_VIP_TOYS;
	                else
			            slots = MAX_FREE_TOYS;

				    for (new i; i < slots; i++) {
	                    new
							tmp[ 64 ]
						;
						strcat(tmp, GetToyNameByModel(PlayerToys[playerid][i][ptModelID]));
						strcat(tmp, "\n");
						strcat(str, tmp);
					}
					ShowPlayerDialog(playerid, DIALOG_TOYS_DELETE, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Descartar", str, "Selecionar", "Voltar");
				}
				case 3:{
					SCM(playerid, AzulClaro, "| Servidor | - Acessorios salvos!");
				    SavePlayerToys(playerid);
				}
			}
            return 1;
		}
		case DIALOG_BUY_TOYS:
		{
			if (!response) return 0;

			new
				str[ 1024 ],
				header[ 320 ]
			;
			for (new i; i < sizeof AttachmentObjects; i++)
				if (AttachmentObjects[i][attachtype] == listitem)
					format(str, sizeof str, "%sR$%d\t\t%s\n", str, AttachmentObjects[i][attachprice], AttachmentObjects[i][attachname]);

	        PlayerBuyingType[playerid] = listitem;
			format(header, sizeof header, "{FFFFFF}Comprar meu Accessorio >>> {BAEE71}%s", AttachmentHeaders[listitem]);
			ShowPlayerDialog(playerid, DIALOG_BUY_TOYS_SELECT, DIALOG_STYLE_LIST, header, str, "Selecionar", "Voltar");
            return 1;
		}
		case DIALOG_BUY_TOYS_SELECT:
		{
			if (!response) return callcmd::menu(playerid, "acessorios");

			new
				str[ 128 ],
				count,
				id
			;
	        for (new i; i < sizeof AttachmentObjects; i++) {
				if(AttachmentObjects[i][attachtype] == PlayerBuyingType[playerid])
					count ++;
				if(count > listitem) {
					id = i;
					break;
				}
	        }
	        PlayerBuyingModel[playerid] = id;
	        format(str, sizeof str, "{FFFFFF}Realmente deseja comprar um {FFD734}%s{FFFFFF} por {00D734}R$%d{FFFFFF}?", AttachmentObjects[id][attachname], AttachmentObjects[id][attachprice]);
	        ShowPlayerDialog(playerid, DIALOG_BUY_TOYS_CONF, DIALOG_STYLE_MSGBOX, "{FFFFFF}Comprar meu Accessorio >>> {BAEE71}Adquirindo", str, "Sim", "Nao");
		}
		case DIALOG_BUY_TOYS_CONF:
		{
			if (!response) return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");

			new index = getFreeToySlot(playerid);
			if (index == -1) {
				SendClientMessage(playerid, Verde, "[Acessorios]{FFFFFF} Voce ja possui muitos acessorios.");
				return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");
			}
			new id = PlayerBuyingModel[playerid];
			new price = AttachmentObjects[id][attachprice];

			if (GetPlayerGrana(playerid) < price) {
				SendClientMessage(playerid, 0xBAEE71FF, "[Acessorios]{FFFFFF} Voce nao tem dinheiro suficiente para comprar este acessorio!");
				return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");
			}
			ActionPlayerGrana(playerid, "-", price, 1);
			ActionEmpresaMoneyEx(EMP_SHOP, "+", price);

			new type = PlayerBuyingType[playerid];
			PlayerToys[playerid][index][ptModelID] = AttachmentObjects[id][attachmodel];
			PlayerToys[playerid][index][ptBoneID] = AttachmentDefaultOffsets[type][dBoneid];
	        PlayerToys[playerid][index][ptOffsetX] = AttachmentDefaultOffsets[type][dOffSets][0];
	        PlayerToys[playerid][index][ptOffsetY] = AttachmentDefaultOffsets[type][dOffSets][1];
	        PlayerToys[playerid][index][ptOffsetZ] = AttachmentDefaultOffsets[type][dOffSets][2];
	        PlayerToys[playerid][index][ptRotX] = AttachmentDefaultOffsets[type][dOffSets][3];
	        PlayerToys[playerid][index][ptRotY] = AttachmentDefaultOffsets[type][dOffSets][4];
	        PlayerToys[playerid][index][ptRotZ] = AttachmentDefaultOffsets[type][dOffSets][5];
	        PlayerToys[playerid][index][ptWearing] = true;
	        SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][index][ptModelID],PlayerToys[playerid][index][ptBoneID],PlayerToys[playerid][index][ptOffsetX],PlayerToys[playerid][index][ptOffsetY],
	        PlayerToys[playerid][index][ptOffsetZ],PlayerToys[playerid][index][ptRotX],PlayerToys[playerid][index][ptRotY],PlayerToys[playerid][index][ptRotZ],1,1,1);

            SavePlayerToys(playerid);

			static
				str[ 129 ]
			;
			format(str, sizeof str, "[Acessorios]{FFFFFF} Voce adquiriu um %s(ID:%d) por {C0C0C0}R$%d{FFFFFF}.", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1, price);
			SendClientMessage(playerid, 0xBAEE71FF, str);
			SendClientMessage(playerid, 0xBAEE71FF, "[Acessorios]{FFFFFF} Gerencie seu acessorio atraves do {C0C0C0}/acessorios{FFFFFF}.");
            return 1;
		}
		case DIALOG_TOYS_ATTACH:
		{
			if (!response) return callcmd::acessorios(playerid);
			new max_slots = IsAVip(playerid) ? (MAX_VIP_TOYS) : (MAX_FREE_TOYS);
			if (PlayerToys[playerid][listitem][ptModelID] == 0 || listitem >= max_slots) {
				SendClientMessage(playerid, 0xBAEE71FF, "[Acessorios]{FFFFFF} Voce nao possui nenhum acessorio neste espaço ou nao pode usa-lo!");
				return OnDialogResponse(playerid, DIALOG_TOYS, true, 0, " ");
			}
			static
				str[ 129 ]
			;
			if (!PlayerToys[playerid][listitem][ptWearing]) {
	            PlayerToys[playerid][listitem][ptWearing] = true;
	            SetPlayerAttachedObject(playerid,listitem,PlayerToys[playerid][listitem][ptModelID],PlayerToys[playerid][listitem][ptBoneID],PlayerToys[playerid][listitem][ptOffsetX],PlayerToys[playerid][listitem][ptOffsetY],
	            PlayerToys[playerid][listitem][ptOffsetZ],PlayerToys[playerid][listitem][ptRotX],PlayerToys[playerid][listitem][ptRotY],PlayerToys[playerid][listitem][ptRotZ],1,1,1);
	            format(str, sizeof str, "[Acessorios]{FFFFFF} Agora voce esta vestindo seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
			} else {
	            PlayerToys[playerid][listitem][ptWearing] = false;
	            RemovePlayerAttachedObject(playerid, listitem);
	            format(str, sizeof str, "[Acessorios]{FFFFFF} Voce removeu seu %s(ID:%d) de seu corpo.", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
			}
			SendClientMessage(playerid, 0xBAEE71FF, str);
			SavePlayerToys(playerid);
			OnDialogResponse(playerid, DIALOG_TOYS, true, 0, " ");
            return 1;
		}
		case DIALOG_TOYS_EDIT:
		{
			if (!response) return callcmd::acessorios(playerid);
			new max_slots = IsAVip(playerid) ? (MAX_VIP_TOYS) : (MAX_FREE_TOYS);
			if (PlayerToys[playerid][listitem][ptModelID] == 0 || listitem >= max_slots) {
				SendClientMessage(playerid, 0xBAEE71FF, "[Acessorios]{FFFFFF} Voce nao possui nenhum acessorio neste espaço ou nao pode edita-lo!");
				return OnDialogResponse(playerid, DIALOG_TOYS, true, 1, " ");
			}
			PlayerEditingToyID[playerid] = listitem;
			new
				str[ 110 ]
			;
			format(str, sizeof str, "[Acessorios]{FFFFFF} Voce esta editando seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
			SendClientMessage(playerid, 0xBAEE71FF, str);
			//format(str, sizeof str, "Posiçao\nParte do Corpo {EEE471}(%s)", AttachmentBones[PlayerToys[playerid][listitem][ptBoneID]]);
			ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Posiçao/Parte", "Posiçao\nParte do Corpo", "Selecionar", "Voltar");
		    return 1;
        }
		case DIALOG_TOYS_EDIT_TYPE:
		{
			if (!response) return OnDialogResponse(playerid, DIALOG_TOYS, true, 1, " ");
			new index = PlayerEditingToyID[playerid];
			if (listitem == 0) {
	            SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][index][ptModelID],PlayerToys[playerid][index][ptBoneID],PlayerToys[playerid][index][ptOffsetX],PlayerToys[playerid][index][ptOffsetY],
	            PlayerToys[playerid][index][ptOffsetZ],PlayerToys[playerid][index][ptRotX],PlayerToys[playerid][index][ptRotY],PlayerToys[playerid][index][ptRotZ],1,1,1);
	            EditAttachedObject(playerid, index);
	            SendClientMessage(playerid, 0xBAEE71FF, "[Acessorios]{FFFFFF} Pressione {C0C0C0}ESC{FFFFFF} para finalizar a ediçao.");
			} else {
				new
					str[ 650 ]
				;
				for (new i; i < sizeof AttachmentBones; i++) {
					strcat(str, AttachmentBones[i]);
					if (i == PlayerToys[playerid][index][ptBoneID])
						strcat(str, " {00A500}(Em Uso)");
					strcat(str, "\n");
				}
				ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_BONE, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Parte do Corpo", str, "Selecionar", "Voltar");
			}
            return 1;
		}
		case DIALOG_TOYS_EDIT_BONE:
		{
			if (!response) return ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Posiçao/Parte", "Posiçao\nParte do Corpo", "Selecionar", "Voltar");
			new
				str[ 110 ],
				index = PlayerEditingToyID[playerid]
			;
			format(str, sizeof str, "[Acessorios]{FFFFFF} Voce ajustou a parte do corpo de seu %s(ID:%d) para %s.", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1, AttachmentBones[listitem]);
			SendClientMessage(playerid, 0xBAEE71FF, str);
			PlayerToys[playerid][index][ptBoneID] = listitem;
			if (PlayerToys[playerid][index][ptWearing]) {
	            SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][index][ptModelID],PlayerToys[playerid][index][ptBoneID],PlayerToys[playerid][index][ptOffsetX],PlayerToys[playerid][index][ptOffsetY],
	            PlayerToys[playerid][index][ptOffsetZ],PlayerToys[playerid][index][ptRotX],PlayerToys[playerid][index][ptRotY],PlayerToys[playerid][index][ptRotZ],1,1,1);
			}
	 		format(str, sizeof str, "Posiçao\nParte do Corpo {EEE471}(%s)", AttachmentBones[listitem]);
			ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Posiçao/Parte", str, "Selecionar", "Voltar");
            SavePlayerToys(playerid);
            return 1;
		}
		case DIALOG_TOYS_DELETE:
		{
			if (!response) return callcmd::acessorios(playerid);
			if (PlayerToys[playerid][listitem][ptModelID] == 0) {
	            SendClientMessage(playerid, 0xBAEE71FF, "[Acessorios]{FFFFFF} Voce nao possui nenhum acessorio neste espaço!");
	            return OnDialogResponse(playerid, DIALOG_TOYS, true, 2, " ");
			}
	        PlayerDeletingID[playerid] = listitem;
	        new
				str[ 130 ]
			;
	        format(str, sizeof str, "{FFFFFF}Realmente deseja descartar seu {FFD734}%s{FFFFFF}(ID:%d)?", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
	        ShowPlayerDialog(playerid, DIALOG_TOYS_DELETE_CONF, DIALOG_STYLE_MSGBOX, "{FFFFFF}Accessorios >>> {EEE471}Meus acessorios {FFFFFF}>>> Descartar", str, "Sim", "Nao");
		    return 1;
        }
		case DIALOG_TOYS_DELETE_CONF:
		{
			if (!response) return OnDialogResponse(playerid, DIALOG_TOYS, true, 2, " ");

			new
				str[ 110 ],
				index = PlayerDeletingID[playerid]
			;
			format(str, sizeof str, "[Acessorios]{FFFFFF} Voce descartou seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1);
			SendClientMessage(playerid, 0xBAEE71FF, str);
			PlayerToys[playerid][index][ptModelID] = 0;
			if (PlayerToys[playerid][index][ptWearing]){
			    RemovePlayerAttachedObject(playerid, index);
			    PlayerToys[playerid][index][ptWearing] = false;
			}
			SavePlayerToys(playerid);
			OnDialogResponse(playerid, DIALOG_TOYS, true, 2, " ");
            return 1;
		}
		case EMPRESA_MENU:
		{
		    if (!response) return true;
		    static str[200],
				ImpID;
			ImpID = PlayerInfo[playerid][pEmpKey];
		    switch(listitem){
		        //Mudar Nome\nSocio\nPreço de Entrada\n%s
				case 0:{
				    format(str, sizeof str, "{FFFFFF}Digite o novo nome da sua empresa de ate {FFFF00}20{FFFFFF} Caracteres\n\n\nNome Atual: %s", EmpInfo[ImpID][EMessage]);
					ShowPlayerDialog(playerid, EMPRESA_MENU_NOME, DIALOG_STYLE_INPUT, "Empresa Menu", str, "Confirmar", "Voltar");
				}
				case 1:{
				    if(!strcmp(EmpInfo[ImpID][ESocio], "Ninguem", true)){
					    format(str, sizeof str, "{FFFFFF}Digite o ID do Usuario que deseja colocar como Socio de sua empresa\n\n\nNome Socio Atual: %s", EmpInfo[ImpID][ESocio]);
						ShowPlayerDialog(playerid, EMPRESA_MENU_SOCIO, DIALOG_STYLE_INPUT, "Empresa Menu", str, "Confirmar", "Voltar");
					}
					else
					{
					    SCM(playerid, -1, "Construindo..");
					}
				}
				case 2:
				{
                    if(EmpInfo[ImpID][ELocked] == 1){
                        EmpInfo[ImpID][ELocked] = 0;
						SCM(playerid, -1, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- Voce {1CC131}destrancou {FFFFFF}sua empresa!");
					}
					else
					{
                        EmpInfo[ImpID][ELocked] = 1;
					    SCM(playerid, -1, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- Voce {FF0000}Trancou {FFFFFF}sua empresa!");
					}
					UpdateEmpresaLabel(ImpID);
					SaveEmpresa(ImpID);
				}
				case 3:
				{
					ShowPlayerDialog(playerid, EMPRESA_MENU_COFRE, DIALOG_STYLE_LIST, "Empresa Menu", "Saldo\nSacar", "Confirmar", "Voltar");
				}
				case 4:
				{
					format(str, sizeof str, "{FFFFFF}Digite o novo preço de entrada a sua empresa,\nO preço deve estar entre {FFFF00}0 {FFFFFF}e {FFFF00}100 {1CC131}R$\n\n{FFFFFF}Preço Atual de entrada: $%d", EmpInfo[ImpID][ECEntrada]);
					ShowPlayerDialog(playerid, EMPRESA_MENU_ENTRADA, DIALOG_STYLE_INPUT, "Empresa Menu", str, "Confirmar", "Voltar");
				}
		    }
            return 1;
		}
		case EMPRESA_MENU_NOME:{
		    if (!response) return true;
		    static ImpID, str[128];
			ImpID = PlayerInfo[playerid][pEmpKey];

		    if(isnull(inputtext)) return OnDialogResponse(playerid, EMPRESA_MENU, true, 0, "");
			if(strlen(inputtext) > 20) return ErroMSG(playerid, "Nome muito grande, use um nome menor.");

			format(EmpInfo[ImpID][EMessage], 100, "%s", inputtext);

			UpdateEmpresaLabel(ImpID);
			SaveEmpresa(ImpID);

            format(str, sizeof str, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- Voce alterou o nome da sua empresa para {FFFF00}%s", EmpInfo[ImpID][EMessage]);
			SCM(playerid, Branco, str);
            return 1;
		}
		case EMPRESA_MENU_SOCIO:{
		    if (!response) return true;
		    static ID, ImpID, str[129];

			ImpID = PlayerInfo[playerid][pEmpKey];
			ID = strval(inputtext);

			if(!IsPlayerConnected(ID)) return ErroMSG(playerid, "O id digitado corresponde a um Player Offline");

			format(EmpInfo[ImpID][ESocio], MAX_PLAYER_NAME, "%s", GetName(ID));

			UpdateEmpresaLabel(ImpID);
			SaveEmpresa(ImpID);

            format(str, sizeof str, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- Voce Colocou {FFFF00}%s [%i]{FFFFFF} como seu novo socio", EmpInfo[ImpID][ESocio], ID);
			SCM(playerid, Branco, str);
			format(str, sizeof str, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- %s [%i] colocou voce como socio em sua empresa!", GetName(playerid), playerid);
			SCM(ID, Branco, str);
            return 1;
		}
		case EMPRESA_MENU_ENTRADA:{
		    if (!response) return true;
		    static Valor, ImpID, str[129];

			ImpID = PlayerInfo[playerid][pEmpKey];
			Valor = strval(inputtext);

			if(!IsNumeric(inputtext)){
				ErroMSG(playerid, "Valor Invalido!");
				return OnDialogResponse(playerid, EMPRESA_MENU, true, 2, "");
			}
			if(Valor > 100) return ErroMSG(playerid, "Valor Invalido!"), OnDialogResponse(playerid, EMPRESA_MENU, true, 2, "");

			EmpInfo[ImpID][ECEntrada] = Valor;

			UpdateEmpresaLabel(ImpID);
			SaveEmpresa(ImpID);

            format(str, sizeof str, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- Voce definiu R${FFFF00}%i{FFFFFF} como preço de entrada em sua empresa", EmpInfo[ImpID][ECEntrada]);
			SCM(playerid, Branco, str);
            return 1;
		}
		case EMPRESA_MENU_COFRE:{
		    if (!response) return true;

			new EmpID = PlayerInfo[playerid][pEmpKey];
			static str[129];

			if(listitem == 0){ //saldo
			    format(str, sizeof str, "{FFFFFF}Empresa: {B7FBEB}%s\n{FFFFFF}Saldo Atual: {B7FBEB}$ %s", EmpInfo[EmpID][EMessage], FormatNumber(EmpInfo[EmpID][EGrana]));
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Empresa Menu", str, "Fechar", "");
			}
			if(listitem == 1){ //saque
			    format(str, sizeof str, "{FFFFFF}Empresa: {B7FBEB}%s\n\n\n{FFFFFF}Digite o valor desejado para relizar o saque:\n", EmpInfo[EmpID][EMessage], FormatNumber(EmpInfo[EmpID][EGrana]));
				ShowPlayerDialog(playerid, E_COFRE_SACAR, DIALOG_STYLE_INPUT, "Empresa Menu", str, "Confirmar", "Cancelar");
			    //if(!IsNumeric(inputtext)){
			}
            return 1;
		}
		case E_COFRE_SACAR:{
		    if (!response) return true;
		    static Valor, ImpID, str[129];

			ImpID = PlayerInfo[playerid][pEmpKey];
			Valor = strval(inputtext);

			if(!IsNumeric(inputtext)){
				ErroMSG(playerid, "Valor Invalido!");
				return OnDialogResponse(playerid, EMPRESA_MENU_COFRE, true, 1, "");
			}
			if(Valor > EmpInfo[ImpID][EGrana]) return ErroMSG(playerid, "Sua empresa nao possui tanto dinheiro!"), OnDialogResponse(playerid, EMPRESA_MENU_COFRE, true, 1, "");

			if(EmpInfo[ImpID][EGrana]-Valor < 0){
				format(STRLOG, sizeof( STRLOG ), "%s A empresa %i ficou com saldo negativado!", GetDateEx(), PlayerInfo[playerid][pEmpKey]);
				SLog("BUG.log", STRLOG);
			}

			ActionEmpresaMoney(playerid,ImpID, "-", Valor);

			ActionPlayerGrana(playerid, "+", Valor, 1);

            format(str, sizeof str, "{FF6600}[{FFFFFF}Play Style{FF6600}] {FFFFFF}- Voce realizou um saque de R$ {FFFF00}%s{FFFFFF} em sua empresa", FormatNumber( Valor ));
			SCM(playerid, Branco, str);
            return 1;
		}
		case Index: {
            if( response ){
        		switch(listitem){
	                case 0: ShowPlayerDialog( playerid, EditModel, DIALOG_STYLE_INPUT, "Model",
	                        "{FFFFFF}2933, 975, 976, 988, 989, 991\n7657, 3050, 3049, 3036, 2990, 2488\n2930, 2409\n{FFFF00}Os modelos citados acima sao os mais usados\nDigite algum dos Modelos na area abaixo:\n", "Mudar", "Voltar");
                    case 1:{
                        EditDynamicObject(playerid, GateInfo[GetPVarInt( playerid, "PastID")][Id2] );
	                    SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Editando Cordenadas do Portao.");
                    }
                    case 2:
					{
	                    ShowPlayerDialog( playerid, EditSpeed, DIALOG_STYLE_INPUT,
	                            "Velocidade", "Os portoes ao serem criados vem com uma velocidade padrao 4\nvoce pode modificar esta velocidade digitando um valor de 1 a 6", "Ok","Voltar");
                        SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Editando Velocidade do Portao.");
                    }
                    case 3:{
                        ShowPlayerDialog( playerid, SaveGate, DIALOG_STYLE_LIST, "Salvando Ediçao", "Salvar Pos Fechado\nSalvar Pos Aberto\nTerminar Ediçao", "OK", "Voltar");
	    				SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Processo de salvamento do Portao.");
	                }
                    case 4: ShowPlayerDialog( playerid, DeletGate, DIALOG_STYLE_MSGBOX, "Deletar Ediçao", "{FFFFFF}Ao deletar um portao podera recupera-lo a qualquer hora /portoesdeletados\n\ntem certeza que deseja deletar essa ediçao?", "Deletar", "Voltar");
				}
            }
            return 1;
	    }
        case EditModel: {
	        if( response ){
	    		if( IsNumeric( inputtext ) ){
	    		    switch(strval( inputtext )){
	    		        case 969, 971, 975, 976, 980, 985, 986, 988, 989, 991,
						2409, 2488, 2930, 2933, 7657, 3050, 3049, 3036, 2990, 2988, 9209: { // portoes validos encontrados
                            DestroyDynamicObject(GateInfo[GetPVarInt( playerid, "PastID")][Id2] );
 							GateID[ playerid ] = strval( inputtext );
				            AtualizeObject( playerid );
				            SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Modelo Alterado com Sucesso!");
				            ShowIndexFor( playerid );
				            SavingGate( GetPVarInt( playerid, "PastID") );
				        }
					    default:{
				            ShowPlayerDialog( playerid, EditModel, DIALOG_STYLE_INPUT, "Model", "{FFFFFF}Digite o Modelo/ID para Adaptar ao Portao\n\n{33AA33}Modelos Constantemente usados: {FFFF00}969, 971, 980", "Mudar", "Voltar");
							ErroMSG(playerid, "Modelo Invalido!");
				    	}
				    }
				}
	            else
				{
	                ShowPlayerDialog( playerid, EditModel, DIALOG_STYLE_INPUT, "Model", "{FFFFFF}Digite o Modelo/ID para Adaptar ao Portao\n\n{33AA33}Modelos Constantemente usados: {FFFF00}969, 971, 980", "Mudar", "Voltar");
	    			ErroMSG(playerid, "Use apenas Valores Numericos!");
	            }
			}
			else ShowIndexFor( playerid );
		}
        case EditSpeed: {
        	if(response){
	            if( IsNumeric( inputtext ) ){
	                if(1 <= strval( inputtext ) <= 6){
	                    new d = GetPVarInt( playerid, "PastID");

						GateInfo[d][Speed] = strval( inputtext );

						SavingGate(d);
		                ShowIndexFor( playerid );
					}
					else
					{
						ShowPlayerDialog( playerid, EditSpeed, DIALOG_STYLE_INPUT,
							"Velocidade", "Os portoes ao serem criados vem com uma velocidade padrao 4\nvoce pode modificar esta velocidade digitando um valor de 2 a 6", "Ok","Voltar");
						ErroMSG(playerid, "Velocidade 1 a 6");
					}
				}
                else
				{
                    ShowPlayerDialog( playerid, EditSpeed, DIALOG_STYLE_INPUT,
                            "Velocidade", "Os portoes ao serem criados vem com uma velocidade padrao 4\nvoce pode modificar esta velocidade digitando um valor de 2 a 6", "Ok","Voltar");
                    ErroMSG(playerid, "Use Apenas Numeros..");
                }
	        }
	        else ShowIndexFor( playerid );
        }
        case SaveGate: {
        	if(response){

                new
                    p,
                    gateid,
                    IDgate
                ;
		        gateid = GetPVarInt( playerid, "GateEdit2");
                p = GetPVarInt( playerid, "PastID");

                switch(listitem){
                    case 0:{
                		GetDynamicObjectPos( gateid, Pos[0], Pos[1], Pos[2]);
                        GetDynamicObjectRot( gateid, Rot[0], Rot[1], Rot[2]);

                        GateInfo[p][Model] = GateID[ playerid ];

                        GateInfo[p][fPosX] = Pos[0];
                        GateInfo[p][fPosY] = Pos[1];
                        GateInfo[p][fPosZ] = Pos[2];
                        GateInfo[p][fPosRX] = Rot[0];
                        GateInfo[p][fPosRY] = Rot[1];
                        GateInfo[p][fPosRZ] = Rot[2];

                        SavingGate( p );

                        SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Portao Fechado salvo com sucesso!");
                        ShowPlayerDialog( playerid, SaveGate, DIALOG_STYLE_LIST, "Salvando Ediçao", "Salvar Pos Fechado\nSalvar Pos Aberto\nTerminar Ediçao", "OK", "Voltar");
                	}
                    case 1:
					{
                        GetDynamicObjectPos( gateid, Pos[0], Pos[1], Pos[2]);
                        GetDynamicObjectRot( gateid, Rot[0], Rot[1], Rot[2]);

                        GateInfo[p][Model] = GateID[ playerid ];

                        GateInfo[p][aPosX] = Pos[0];
                        GateInfo[p][aPosY] = Pos[1];
                        GateInfo[p][aPosZ] = Pos[2];
                        GateInfo[p][aPosRX] = Rot[0];
                        GateInfo[p][aPosRY] = Rot[1];
                        GateInfo[p][aPosRZ] = Rot[2];

                        SavingGate( p );
                        SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Portao aberto salvo com sucesso!");
                    	ShowPlayerDialog( playerid, SaveGate, DIALOG_STYLE_LIST, "Salvando Ediçao", "Salvar Pos Fechado\nSalvar Pos Aberto\nTerminar Ediçao", "OK", "Voltar");
                    }
                    case 2: {
						DestroyDynamicObject(GateInfo[p][Id2] );

						SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Portao salvo com sucesso!");

						IDgate = CreateDynamicObject(GateInfo[p][Model], GateInfo[p][fPosX], GateInfo[p][fPosY], GateInfo[p][fPosZ], GateInfo[p][fPosRX], GateInfo[p][fPosRY], GateInfo[p][fPosRZ], -1, -1, -1, 200.0);

						GateInfo[p][Id2] = IDgate;

						SavingGate( p );
						DeletePVar( playerid, "PastID");
						DeletePVar( playerid, "GateEdit2");
					}
				}
			}
			else ShowIndexFor( playerid );
		}
        case DeletGate: {
            if(response){
                new
	                id
                ;

                id = GetPVarInt( playerid, "PastID");

                GateInfo[id][SDono] = 3;

                DestroyDynamicObject(GateInfo[id][Id2] );
                Delete3DTextLabel(GateInfo[id][gText]);
				GateInfo[id][Id2] = INVALID_OBJECT_ID;
				GateInfo[id][SDono] = 3;

                SavingGate(id);
                SendClientMessage( playerid,-1, "{A8DE90}| Portao | - Portao deletado com sucesso!");

                DeletePVar( playerid, "PastID");
                DeletePVar( playerid, "GateEdit2");

                format(STRLOG, sizeof(STRLOG), "[%s] %s deletou o portao id: %i", GetDateEx(), GetNameEx(playerid));
				SLog("Portao.log", STRLOG);
            }
            else ShowIndexFor( playerid );
        }

        case SCONFIRM_COMPRA:
        {
            if(response)
            {
				CancelSelectTextDraw( playerid );
				TirarTextLojaSkin(playerid);

				DestroyDynamicActor(ActorSkin[ playerid ]);
				ActorSkin[ playerid ] = -1;

				UnFreeze( playerid );

				if(EntrouLojaSkin[playerid] == 1)//zip
                {
                    SetPlayerPos(playerid, 161.0859, -83.6697, 1001.8046);
                    SetPlayerInterior(playerid, 18);
                    SetPlayerVirtualWorld(playerid, 0);
                    ActionEmpresaMoney(playerid, EMP_BINCOLS, "+", Skins[SkinEscolhida[ playerid ]][skVALOR]);
                } else

                if(EntrouLojaSkin[playerid] == 2)//binco
                {
                    SetPlayerPos(playerid, 207.5289, -101.1268, 1005.2578);
                    SetPlayerInterior(playerid, 15);
                    SetPlayerVirtualWorld(playerid, 0);
                    ActionEmpresaMoney(playerid, EMP_ZIPLS, "+", Skins[SkinEscolhida[ playerid ]][skVALOR]);
                }
				/* else

				if(EntrouLojaSkin[playerid] == 3)//pro
				{
					//SetPlayerPosEx(playerid, 207.5289, -101.1268, 1005.2578, 0.0, 5, 0);
				} else

				if(EntrouLojaSkin[playerid] == 4)//subur
				{
					//SetPlayerPosEx(playerid, 207.5289, -101.1268, 1005.2578, 0.0, 5, 0);
				}*/
				SetCameraBehindPlayer( playerid );

				ActionPlayerGrana(playerid, "-", Skins[SkinEscolhida[ playerid ]][skVALOR], 1);

                SCM(playerid, -1, "{DAF778}Skin adquirido com sucesso!");

                SetPlayerSkinEx(playerid, Skins[SkinEscolhida[ playerid ]][skID]);
                PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);

                DestroyDynamicActor(Actor[ playerid ]);
                ActorSkin[ playerid ] = -1;
                SkinEscolhida[ playerid ] = 0;

            }
            else
            {
                PlaySoundForPlayer(playerid, 1055);

                CancelSelectTextDraw( playerid );
                TirarTextLojaSkin(playerid);

                DestroyDynamicActor(Actor[ playerid ]);
                ActorSkin[ playerid ] = -1;
                SkinEscolhida[ playerid ] = 0;

                UnFreeze( playerid );
                if(EntrouLojaSkin[playerid] == 1)//zip
                {
                    SetPlayerPos(playerid, 161.0859, -83.6697, 1001.8046);
                    SetPlayerInterior(playerid, 18);
                    SetPlayerVirtualWorld(playerid, 0);

                } else

                if(EntrouLojaSkin[playerid] == 2)//binco
                {
                    SetPlayerPos(playerid, 207.5289, -101.1268, 1005.2578);
                    SetPlayerInterior(playerid, 15);
                    SetPlayerVirtualWorld(playerid, 0);
                } else

                if(EntrouLojaSkin[playerid] == 3)//pro
                {
                    //SetPlayerPosEx(playerid, 207.5289, -101.1268, 1005.2578, 0.0, 5, 0);
                } else

                if(EntrouLojaSkin[playerid] == 4)//subur
                {
                    //SetPlayerPosEx(playerid, 207.5289, -101.1268, 1005.2578, 0.0, 5, 0);
                }
                SetCameraBehindPlayer( playerid );

                SCM(playerid, -1, "{DAF778}Voce cancelou a compra, obrigado e volte sempre!");
            }
            return 1;
        }


        case VCONFIRM_COMPRA: // prokillerpa
        {
            if(response)
            {
				//if(QuantidadeVeiculos > MAX_VEHICLES_CONCE) return ErroMSG(playerid, "Limite de veiculos atingido, sistema temporariamente bloqueado!");
				//if(SlotVeiculo( playerid ) < 1) return ErroMSG(playerid, "Voce nao pode adquirir mais veiculos!"), PlaySoundForPlayer(playerid, 1055);''
	            CancelSelectTextDraw( playerid );
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
                TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

                if(MenuConceType[ playerid ] == 1){
                    Veh_PQP[playerid][Modelo_pqp] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model];
                }
                else if(MenuConceType[ playerid ] == 2){
                    Veh_PQP[playerid][Modelo_pqp] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model];
                }
                ComprouVeiculo(playerid);

				//if(ConceTerrestreUltimaPos >= (sizeof(conceNewbiesPos)-1)) ConceTerrestreUltimaPos=0;

                /*ConceTerrestreUltimaPos = random(sizeof(conceNewbiesPos));

	            Loop(vid, QuantidadeVeiculos)
                {
	                if(VeiculoInfo[vid][vEstado] == 1)
                    {

                        //Informaçoes guardadas
					    format(VeiculoInfo[vid][vDono], MAX_PLAYER_NAME, "%s", GetName( playerid ));

                        static placa[ 10 ];
						if(vid < 100)
							format(placa, 10, "LS-000%i", vid);
						else
							format(placa, 10, "LS-00%i", vid);

						format(VeiculoInfo[vid][vPlaca], 10, "%s", placa);

						if(MenuConceType[ playerid ] == 1)
                        {
							VeiculoInfo[vid][vPreco] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco];
							VeiculoInfo[vid][vModel] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model];
							VeiculoInfo[vid][vConsumo] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo];
						}
						else if(MenuConceType[ playerid ] == 2)
                        {
							VeiculoInfo[vid][vPreco] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_preco];
							VeiculoInfo[vid][vModel] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model];
							VeiculoInfo[vid][vConsumo] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo];
						}

						//Informaçoes pre definidas
						VeiculoInfo[vid][vSeguro] = 0;
						VeiculoInfo[vid][vCombustivel] = 100;
						VeiculoInfo[vid][vEstado] = 0;
			            VeiculoInfo[vid][vCor1] = -1;
			            VeiculoInfo[vid][vCor2] = -1;
			            VeiculoInfo[vid][vNitro] = 0;
			            VeiculoInfo[vid][vRodas] = 0;
			            VeiculoInfo[vid][vSuspensao] = 0;

                        VeiculoInfo[vid][vDamage] = 1000.0;

						VeiculoInfo[vid][vLocalX] = conceNewbiesPos[ConceTerrestreUltimaPos][0];
						VeiculoInfo[vid][vLocalY] = conceNewbiesPos[ConceTerrestreUltimaPos][1];
						VeiculoInfo[vid][vLocalZ] = conceNewbiesPos[ConceTerrestreUltimaPos][2];
						VeiculoInfo[vid][vLocalA] = conceNewbiesPos[ConceTerrestreUltimaPos][3];

                         if(PlayerInfo[playerid][pVehKey1] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey1] = vid;
						else if(PlayerInfo[playerid][pVehKey2] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey2] = vid;
						else if(PlayerInfo[playerid][pVehKey3] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey3] = vid;
		   				else if(PlayerInfo[playerid][pVehKey4] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey4] = vid;
						else if(PlayerInfo[playerid][pVehKey5] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey5] = vid;*/


	                    //SetPlayerPosEx(playerid, 2116.125488,-1171.545776,25.104999,266.049468, 0, 0);
						//SetCameraBehindPlayer( playerid );
						//UnFreeze( playerid );

						//OnSalvarDados( playerid );
/*
						SetPVarInt(playerid, "CheckConceLS", 1);
			            SetPlayerCheckpoint(playerid, conceNewbiesPos[ConceTerrestreUltimaPos][0], conceNewbiesPos[ConceTerrestreUltimaPos][1], conceNewbiesPos[ConceTerrestreUltimaPos][2], 6.0);

                        if(PlayerInfo[playerid][VeiculoCash] == 0)
                        {
                            ActionPlayerGrana(playerid, "-", VeiculoInfo[vid][vPreco], 1);

                        } else if(PlayerInfo[playerid][VeiculoCash] == 1)
                        {
                            SCM(playerid, -1, "Veiculo adiquirido com direito comprado na loja. Nenhum real foi descontado");
                            PlayerInfo[playerid][VeiculoCash] = 0;
                        }

						ActionEmpresaMoney(playerid,EMP_CONCELS, "+", VeiculoInfo[vid][vPreco]);
*/
						/*static str[ 129 ];
						SCM(playerid, -1, "{DAF778}Veiculo adquirido com sucesso!");
						format(str, sizeof( str ), "{DAF778}| Veiculo | - Modelo: %s, ID: %i, Placa: %s, Preço: R$ %s", SkVeh[VeiculoInfo[vid][vModel]-400], vid, VeiculoInfo[vid][vPlaca], FormatNumber(VeiculoInfo[vid][vPreco]));
	                    SCM(playerid, -1, str);
	                    SCM(playerid, -1, "{DAF778}Seu veiculo esta a sua espera no estacionamento da concessionaria, obrigado pela compra!");
	                    SCM(playerid, -1, "{DAF778}Comando para ver o carro: /meucarro /ajuda veiculo");

	                    ConceTerrestreUltimaPos++;
						DestroyVehicle(VeiculoConce[ playerid ]);
                        VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;
						CurrentVehicle[ playerid ] = 0;

						return true;
					}*/
				}
				/**new vid = QuantidadeVeiculos;

                //Informaçoes guardadas
			    format(VeiculoInfo[vid][vDono], MAX_PLAYER_NAME, "%s", GetName( playerid ));

			    static placa[ 10 ];
				if(vid < 100)
					format(placa, 10, "LS-000%i", vid);
				else
					format(placa, 10, "LS-00%i", vid);

				format(VeiculoInfo[vid][vPlaca], 10, "%s", placa);

				if(MenuConceType[ playerid ] == 1) {
					VeiculoInfo[vid][vPreco] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco];
					VeiculoInfo[vid][vModel] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model];
					VeiculoInfo[vid][vConsumo] = ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo];
				}
				else if(MenuConceType[ playerid ] == 2) {
					VeiculoInfo[vid][vPreco] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_preco];
					VeiculoInfo[vid][vModel] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model];
					VeiculoInfo[vid][vConsumo] = ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo];
				}

				//Informaçoes pre definidas
				VeiculoInfo[vid][vSeguro] = 0;
				VeiculoInfo[vid][vCombustivel] = 90;
				VeiculoInfo[vid][vDamage] = 1000.0;
				VeiculoInfo[vid][vEstado] = 0;
	            VeiculoInfo[vid][vCor1] = -1;
	            VeiculoInfo[vid][vCor2] = -1;
	            VeiculoInfo[vid][vNitro] = 0;
	            VeiculoInfo[vid][vRodas] = 0;
	            VeiculoInfo[vid][vSuspensao] = 0;

				VeiculoInfo[vid][vLocalX] = conceNewbiesPos[ConceTerrestreUltimaPos][0];
				VeiculoInfo[vid][vLocalY] = conceNewbiesPos[ConceTerrestreUltimaPos][1];
				VeiculoInfo[vid][vLocalZ] = conceNewbiesPos[ConceTerrestreUltimaPos][2];
				VeiculoInfo[vid][vLocalA] = conceNewbiesPos[ConceTerrestreUltimaPos][3];*/

                //Criaçao do Veiculo
//			    CarregarVeiculo(vid);

               /* if(PlayerInfo[playerid][pVehKey1] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey1] = vid;
				else if(PlayerInfo[playerid][pVehKey2] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey2] = vid;
				else if(PlayerInfo[playerid][pVehKey3] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey3] = vid;
   				else if(PlayerInfo[playerid][pVehKey4] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey4] = vid;
				else if(PlayerInfo[playerid][pVehKey5] == INVALID_VEHICLE_CONCE) PlayerInfo[playerid][pVehKey5] = vid;*/

                /*SetPlayerPosEx(playerid, 2116.125488,-1171.545776,25.104999,266.049468, 0, 0);
				SetCameraBehindPlayer( playerid );
				UnFreeze( playerid );

				SetPVarInt(playerid, "CheckConceLS", 1);
	            SetPlayerCheckpoint(playerid, conceNewbiesPos[ConceTerrestreUltimaPos][0], conceNewbiesPos[ConceTerrestreUltimaPos][1], conceNewbiesPos[ConceTerrestreUltimaPos][2], 6.0);

                //ActionPlayerGrana(playerid, "-", VeiculoInfo[vid][vPreco], 1);
                if(PlayerInfo[playerid][VeiculoCash] == 0)
                {
                    ActionPlayerGrana(playerid, "-", VeiculoInfo[vid][vPreco], 1);

                } else if(PlayerInfo[playerid][VeiculoCash] == 1)
                {
                    SCM(playerid, -1, "Veiculo adiquirido com direito comprado na loja. Nenhum real foi descontado");
                    PlayerInfo[playerid][VeiculoCash] = 0;
                }

				ActionEmpresaMoney(playerid,EMP_CONCELS, "+", VeiculoInfo[vid][vPreco]);


				static str[ 129 ];
				SCM(playerid, -1, "{DAF778}Veiculo adquirido com sucesso!");
				format(str, sizeof( str ), "{DAF778}| Concessionaria | - Modelo: %s, ID: %i, Placa: %s, Preço: R$ %s", SkVeh[VeiculoInfo[vid][vModel]-400], vid, VeiculoInfo[vid][vPlaca], FormatNumber(VeiculoInfo[vid][vPreco]));
	            SCM(playerid, -1, str);
	            SCM(playerid, -1, "{DAF778}Seu veiculo esta a sua espera no estacionamento da concessionaria, obrigado pela compra!");
				SCM(playerid, -1, "{DAF778}Comandos uteis: /meucarro /ajuda veiculo");

	            ConceTerrestreUltimaPos++;
	            QuantidadeVeiculos++;
				DestroyVehicle(VeiculoConce[ playerid ]);
				VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;
				CurrentVehicle[ playerid ] = 0;
			}
			else
			{
			    PlaySoundForPlayer(playerid, 1055);

			    CancelSelectTextDraw( playerid );
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
				TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
                TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

				DestroyVehicle(VeiculoConce[ playerid ]);
				VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;
				CurrentVehicle[ playerid ] = 0;
				MenuConceType[ playerid ] = 0;

				UnFreeze( playerid );
	            SetPlayerPosEx(playerid, 2116.125488,-1171.545776,25.104999,266.049468, 0, 0);
				SetCameraBehindPlayer( playerid );

				SCM(playerid, -1, "{DAF778}Voce cancelou a compra, obrigado e volte sempre!");
			}*/
            return 1;
		}


		case CONCE_VENDAS: {
			if(!response) return true;

			static str[ 300 ];
			//new Valor;

			/*if(listitem == 0) {
		    	if(PlayerInfo[playerid][pVehKey1] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot!");
                V_@Conce[ playerid ] = PlayerInfo[playerid][pVehKey1];
            }
			else if(listitem == 1){
				if(PlayerInfo[playerid][pVehKey2] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot!");

                V_@Conce[ playerid ] = PlayerInfo[playerid][pVehKey2];
			}
			else if(listitem == 2){
				if(PlayerInfo[playerid][pVehKey3] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot!");

                V_@Conce[ playerid ] = PlayerInfo[playerid][pVehKey3];
			}
			else if(listitem == 3){
				if(PlayerInfo[playerid][pVehKey4] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot!");

                V_@Conce[ playerid ] = PlayerInfo[playerid][pVehKey4];
			}
			else if(listitem == 4){
				if(PlayerInfo[playerid][pVehKey5] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot!");

                V_@Conce[ playerid ] = PlayerInfo[playerid][pVehKey5];
			}

			Valor = (VeiculoInfo[V_@Conce[ playerid ]][vPreco]-(VeiculoInfo[V_@Conce[ playerid ]][vPreco]/4));

			format(str, sizeof str, "{E3EEED}Seu veiculo {84FEF8}%s {E3EEED}foi avaliado pela concessionaria e chegamos a uma proposta..\nPodemos pagar-lhe {84FEF8}R$ %s {E3EEED}pelo veiculo, caso queira fechar um acordo\nclique em {84FEF8}Confirmar{E3EEED}..",
			SkVeh[VeiculoInfo[V_@Conce[ playerid ]][vModel]-400], FormatNumber(Valor));*/
            ShowPlayerDialog( playerid, CONCE_VENDAS_CONFIRM, DIALOG_STYLE_MSGBOX, "{E3EEED}..:: Concessionaria ::..", str, "Confirmar", "Cancelar" );
            return 1;
		}
		case CONCE_VENDAS_CONFIRM: {
		    if(!response) {
				V_@Conce[ playerid ] = 0;
				SCM(playerid, -1, "{145DB0}Voce cancelou a venda do veiculo!");
				return true;
			}

		   /* if(V_@Conce[ playerid ] != 0){

		        new
					vid = V_@Conce[ playerid ],
					st_[150],
					Valor
				;

				Valor = (VeiculoInfo[vid][vPreco]-(VeiculoInfo[vid][vPreco]/4));
				format(st_, sizeof(st_), "{FAF76B}| Concessionaria | - Venda concretizada com sucesso, {63FC72}R$ %s {FAF76B}foram depositados em sua conta bancaria.",	FormatNumber(Valor));
				SCM(playerid, -1, st_);
				//Transferencia do dinheiro
				ActionPlayerBank(playerid, "+", Valor, 1);
				ActionEmpresaMoney(playerid,EMP_CONCELS, "-", Valor);

                format(VeiculoInfo[vid][vDono], MAX_PLAYER_NAME, "Ninguem");

				VeiculoInfo[vid][vPreco] = 0;
				VeiculoInfo[vid][vModel] = 0;
				VeiculoInfo[vid][vConsumo] = 0;

				VeiculoInfo[vid][vSeguro] = 0;
				VeiculoInfo[vid][vCombustivel] = 0;
				VeiculoInfo[vid][vDamage] = 1000.0;
				VeiculoInfo[vid][vEstado] = 1;
				VeiculoInfo[vid][vCor1] = -1;
				VeiculoInfo[vid][vCor2] = -1;
				VeiculoInfo[vid][vNitro] = 0;
				VeiculoInfo[vid][vRodas] = 0;
				VeiculoInfo[vid][vSuspensao] = 0;
                //VeiculoInfo[vid][vDoc] = 0;

                VeiculoInfo[vid][vDoors] = false;
                VeiculoInfo[vid][vRadio] = false;
				VeiculoInfo[vid][vGPS] = false;

				VeiculoInfo[vid][vAlarme] = false;
				VeiculoInfo[vid][vAlarmStatus] = 0;

				VeiculoInfo[vid][vNeon] = false;
				VeiculoInfo[vid][vNeonColor] = 0;
				VeiculoInfo[vid][vNeonStatus] = false;

				VeiculoInfo[vid][vLocalX] = 0.0;
				VeiculoInfo[vid][vLocalY] = 0.0;
				VeiculoInfo[vid][vLocalZ] = 0.0;
				VeiculoInfo[vid][vLocalA] = 0.0;

				if(V_@Conce[ playerid ] == PlayerInfo[playerid][pVehKey1]) {
				    PlayerInfo[playerid][pVehKey1] = PlayerInfo[playerid][pVehKey2];
				    PlayerInfo[playerid][pVehKey2] = PlayerInfo[playerid][pVehKey3];
				    PlayerInfo[playerid][pVehKey3] = PlayerInfo[playerid][pVehKey4];
				    PlayerInfo[playerid][pVehKey4] = PlayerInfo[playerid][pVehKey5];
				    PlayerInfo[playerid][pVehKey5] = -1;
				}
				else if(V_@Conce[ playerid ] == PlayerInfo[playerid][pVehKey2]){
					PlayerInfo[playerid][pVehKey2] = PlayerInfo[playerid][pVehKey3];
				    PlayerInfo[playerid][pVehKey3] = PlayerInfo[playerid][pVehKey4];
				    PlayerInfo[playerid][pVehKey4] = PlayerInfo[playerid][pVehKey5];
				    PlayerInfo[playerid][pVehKey5] = -1;
				}
				else if(V_@Conce[ playerid ] == PlayerInfo[playerid][pVehKey3]){
                    PlayerInfo[playerid][pVehKey3] = PlayerInfo[playerid][pVehKey4];
				    PlayerInfo[playerid][pVehKey4] = PlayerInfo[playerid][pVehKey5];
				    PlayerInfo[playerid][pVehKey5] = -1;
				}
				else if(V_@Conce[ playerid ] == PlayerInfo[playerid][pVehKey4]){
					PlayerInfo[playerid][pVehKey4] = PlayerInfo[playerid][pVehKey5];
				    PlayerInfo[playerid][pVehKey5] = -1;
				}
				else if(V_@Conce[ playerid ] == PlayerInfo[playerid][pVehKey5]){
					PlayerInfo[playerid][pVehKey5] = -1;
				}
				DestroyVehicle(VeiculoInfo[vid][vVeiculo]);

                OnSalvarDados( playerid );
*/
		//	}
            return 1;
		}
		case PAINEL_VEICULO:
        {

            if(PlayerInfo[playerid][Mobile] == true)
            {
                SCM(playerid, AzulClaro, "Mobile, lembre-se de Salvar seu Veiculo apos Tunar, Ou depois de compra-lo na concessionarias.");
            }

		    if(!response) return true;

		/*	static str[100];
			switch(listitem){
				case 0: {
				    if(PlayerInfo[playerid][pVehKey1] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot");

					format(str, sizeof( str ), "{0F5D95}Voce selecionou seu {FFFFFF}%s", SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vModel]-400]);
					SCM(playerid, -1, str);

					OpenVehPainel( playerid , PlayerInfo[playerid][pVehKey1]);

				}
				case 1: {
				    if(PlayerInfo[playerid][pVehKey2] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot");

					format(str, sizeof( str ), "{0F5D95}Voce selecionou seu {FFFFFF}%s", SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey2]][vModel]-400]);
					SCM(playerid, -1, str);

					OpenVehPainel( playerid , PlayerInfo[playerid][pVehKey2]);
				}
				case 2: {
				    if(PlayerInfo[playerid][pVehKey3] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot");

					format(str, sizeof( str ), "{0F5D95}Voce selecionou seu {FFFFFF}%s", SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey3]][vModel]-400]);
					SCM(playerid, -1, str);

					OpenVehPainel( playerid , PlayerInfo[playerid][pVehKey3]);
				}
				case 3: {
				    if(PlayerInfo[playerid][pVehKey4] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot");

					format(str, sizeof( str ), "{0F5D95}Voce selecionou seu {FFFFFF}%s", SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey4]][vModel]-400]);
					SCM(playerid, -1, str);

					OpenVehPainel( playerid , PlayerInfo[playerid][pVehKey4]);
				}
				case 4: {
				    if(PlayerInfo[playerid][pVehKey5] == INVALID_VEHICLE_CONCE) return ErroMSG(playerid, "Voce nao possui um veiculo neste slot");

					format(str, sizeof( str ), "{0F5D95}Voce selecionou seu {FFFFFF}%s", SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey5]][vModel]-400]);
					SCM(playerid, -1, str);

					OpenVehPainel( playerid , PlayerInfo[playerid][pVehKey5]);
				}
			}*/
            return 1;
		}
		case MENU_VEICULO:
        {
		    if(!response) return callcmd::painelveiculo( playerid );

		    /*format(strbox, sizeof(strbox),
			"{7CFAB9}> {FFFFFF}Salvar/Estacionar\n\
            {7CFAB9}> {FFFFFF}Portas %s\n\
            {7CFAB9}> {FFFFFF}Capo %s\n\
            {7CFAB9}> {FFFFFF}Porta-Malas %s\n\
            {7CFAB9}> {FFFFFF}Impostos %s\n\
            {7CFAB9}> {FFFFFF}Alarme %s\n\
			{7CFAB9}> {FFFFFF}Gps-Localizar",
			VeiculoInfo[conceid][vDoors] == true ? ("{51EB3F} Abertas"):("{FF0000} Trancadas"),
			GetVehicleParameters(VeiculoInfo[conceid][vVeiculo], 4) != 1 ? ("{FF0000} fechado"):("{51EB3F} Aberto"),
			GetVehicleParameters(VeiculoInfo[conceid][vVeiculo], 5) != 1 ? ("{FF0000} fechado"):("{51EB3F} Aberto"),
			VeiculoInfo[conceid][vDoc] == 1 ? ("{51EB3F} pagos"):("{C7D1C6}Atrasado"),
			VeiculoInfo[conceid][vAlarme] == true ? ("{51EB3F} Ligado"):("{FF0000} Desligado"));*/

		    if(listitem == 0)
            {
		 /*   	if(!IsPlayerInVehicle(playerid, VeiculoInfo[VehKeyID[ playerid ]][vVeiculo])) return ErroMSG(playerid, "Voce nao esta dentro do veiculo selecionado!");

		    	new
					Float:c_x,
					Float:c_y,
					Float:c_z,
					Float:c_a
				;
				GetVehiclePos(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], c_x, c_y, c_z);
				GetVehicleZAngle(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], c_a);

				VeiculoInfo[VehKeyID[ playerid ]][vLocalX] = c_x;
				VeiculoInfo[VehKeyID[ playerid ]][vLocalY] = c_y;
				VeiculoInfo[VehKeyID[ playerid ]][vLocalZ] = c_z;
				VeiculoInfo[VehKeyID[ playerid ]][vLocalA] = c_a;

				OnSalvarVehicle(VehKeyID[ playerid ]);
				SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce escolheu este local como local de salvamento do seu veiculo!");*/
			}

            /*if(listitem == 1)
            {
                //if(!IsPlayerInVehicle(playerid, VeiculoInfo[VehKeyID[ playerid ]][vVeiculo])) return ErroMSG(playerid, "Voce nao esta dentro do veiculo selecionado!");
                CarregarVeiculoMobile(VehKeyID[ playerid ]);
                SCM(playerid, -1, "A tuning do seu veiculo foi carregada.");
            }*/

		    /*if(listitem == 1)
            {
				if(VeiculoInfo[VehKeyID[ playerid ]][vDoors] == true)
                {
		            //format(st_, sizeof(st_), "");
		            VeiculoInfo[VehKeyID[ playerid ]][vDoors] = false;

                    SetVehicleParams(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], 3, 1);

					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce trancou as portas do seu veiculo!");
				}
				else {
		            //format(st_, sizeof(st_), "");
		            VeiculoInfo[VehKeyID[ playerid ]][vDoors] = true;

                    SetVehicleParams(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], 3, 0);
					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce destrancou as portas do seu veiculo!");
				}
				OpenVehPainel(playerid, VehKeyID[ playerid ]);
			}

			if(listitem == 2)
            {
			    if(GetVehicleParameters(VeiculoInfo[ VehKeyID[ playerid ] ][vVeiculo], 4) != 1)
                {
                    SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce abriu o capo do seu veiculo!");
					SetVehicleParams(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], 4, 1);

				}
                else {
				    SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce fechou o capo do seu veiculo!");
					SetVehicleParams(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], 4, 0);
				}
                OpenVehPainel(playerid, VehKeyID[playerid]);
			}

			if(listitem == 3)
            {

				if(GetVehicleParameters(VeiculoInfo[ VehKeyID[ playerid ] ][vVeiculo], 5) != 1){

                    SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce abriu o porta-malas do seu veiculo!");

					SetVehicleParams(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], 5, 1);
				}
				else {

					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce fechou o porta-malas do seu veiculo!");

					SetVehicleParams(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], 5, 0);
				}
				OpenVehPainel(playerid, VehKeyID[ playerid ]);
			}
			if(listitem == 4) return OpenVehPainel( playerid, VehKeyID[ playerid ]);
			if(listitem == 5)
            {
			    if(VeiculoInfo[VehKeyID[ playerid ]][vAlarme] == false){
				    VeiculoInfo[VehKeyID[ playerid ]][vAlarme] = true;
	                SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce ativou o alarme do seu veiculo!");
				}
				else {
				    VeiculoInfo[VehKeyID[ playerid ]][vAlarme] = false;
				    SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce desativou o alarme do seu veiculo!");
				}
				OnSalvarVehicle(VehKeyID[ playerid ]);
			}
			if(listitem == 6)
            {
			    if(VeiculoInfo[ VehKeyID[ playerid ] ][vNeon] == false) return ErroMSG(playerid, "Seu veiculo nao possui sistema de Neon!");

			    if(VeiculoInfo[ VehKeyID[ playerid ] ][vNeonStatus] == false)
                {
			        VeiculoInfo[ VehKeyID[ playerid ] ][vNeonStatus] = true;
                    SCM(playerid, -1, "{85CCC4}| Neon | - Voce ligou o sistema de Neon do seu veiculo!");
					ChangeVehicleNeon(VeiculoInfo[ VehKeyID[ playerid ] ][vVeiculo], VeiculoInfo[ VehKeyID[ playerid ] ][vNeonColor]);
				}
				else {
				    VeiculoInfo[ VehKeyID[ playerid ] ][vNeonStatus] = false;
				    SCM(playerid, -1, "{85CCC4}| Neon | - Voce desligou o sistema de Neon do seu veiculo!");
	                ChangeVehicleNeon(VeiculoInfo[ VehKeyID[ playerid ] ][vVeiculo], -1);
				}
				OnSalvarVehicle(VehKeyID[ playerid ]);
			}

			if(listitem == 7)
            {
			    if(VeiculoInfo[VehKeyID[ playerid ]][vGPS] == false) return ErroMSG( playerid, "Seu veiculo nao possui sistema de localizador GPS!");

			    new
					Float:x_v,
					Float:y_v,
					Float:z_v
				;
				GetVehiclePos(VeiculoInfo[VehKeyID[ playerid ]][vVeiculo], x_v, y_v, z_v);

				static st_x[ 129 ];
			    format(st_x, 129, "{85CCC4}| GPS | - Seu veiculo esta em %s, o local foi marcado com um checkpoint no mapa!", GetAreaForCords(x_v, y_v, z_v));
				SCM(playerid, -1, st_x);
				SetPVarInt(playerid, "CheckGPSVeh", 1);
				SetPlayerCheckpoint(playerid, x_v, y_v, z_v, 6.0);
			}*/
            return 1;
		}

		case DIALOG_TUNING_CORES:
        {
            if(PlayerInfo[playerid][Mobile] == false)
            {
    			if(!response)
                {
                    SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
    				SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

    				SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
    				SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

    	            Freeze( playerid );
    	            ShowMenuForPlayer(MenuTuning, playerid);
    				return true;
    			}
    			new Color1, Color2;

    			if(sscanf(inputtext, "dd", Color1, Color2)) {
                    ShowPlayerDialog( playerid, DIALOG_TUNING_CORES, DIALOG_STYLE_INPUT, "{F2F4F3}..:: Cores Veicular ::..", "{F2F4F3}Digite os ID's que voce deseja adicionar ao veiculo,\na funilaria tem preço fixo de {51FE8B}R$500,00 {F2F4F3}pela pintura,\ncoloque os ID's das cores escolhidas, lembrando que os id's alternam entre 0-255\nvoce pode consultar a lista de cores a qualquer momento acessando nosso forum\n"#SV_SITE" ou Wiki SA-MP\n\n\nCor ID:", "Confirmar", "Cancelar" );
    				return ErroMSG(playerid, "Use dois ID's separados por espaço exemplo: 2 2 !");
    			}
    			if( 0 < strval(inputtext) > 255) {
    				ShowPlayerDialog( playerid, DIALOG_TUNING_CORES, DIALOG_STYLE_INPUT, "{F2F4F3}..:: Cores Veicular ::..", "{F2F4F3}Digite os ID's que voce deseja adicionar ao veiculo,\na funilaria tem preço fixo de {51FE8B}R$500,00 {F2F4F3}pela pintura,\ncoloque os ID's das cores escolhidas, lembrando que os id's alternam entre 0-255\nvoce pode consultar a lista de cores a qualquer momento acessando nosso forum\n"#SV_SITE" ou Wiki SA-MP\n\n\nCor ID:", "Confirmar", "Cancelar" );
    				return ErroMSG(playerid, "Os ID's variam entre 0-255 apenas !");
    			}
    			ChangeVehicleColor(TuningVehicleID[ playerid ], Color1, Color2);

    			SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
    			SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

    			SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
    			SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                Freeze( playerid );
                ShowMenuForPlayer(MenuTuning, playerid);

    		/*	Loop(Vid, sizeof(VeiculoInfo)) {
    				if(TuningVehicleID[ playerid ] == VeiculoInfo[Vid][vVeiculo]){
    				    VeiculoInfo[Vid][vCor1] = Color1;
    				    VeiculoInfo[Vid][vCor2] = Color2;
                        OnSalvarVehicle(Vid);
    				}
    			}*/
    			PlaySoundForPlayer( playerid, 1134);

    			static str[129];
    			format(str, 129, "| Tuning | - Cores %s e %s aplicadas com sucesso", CorPorID(Color1), CorPorID(Color2));
    			SCM(playerid, Darkaqua, str);

            } else {

                if(!response)
                {
                    SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
                    SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

                    SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
                    SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                    Freeze( playerid );
                    ShowDialogTunar(playerid);
                    return true;
                }
                new Color1, Color2;

                if(sscanf(inputtext, "dd", Color1, Color2)) {
                    ShowPlayerDialog( playerid, DIALOG_TUNING_CORES, DIALOG_STYLE_INPUT, "{F2F4F3}..:: Cores Veicular ::..", "{F2F4F3}Digite os ID's que voce deseja adicionar ao veiculo,\na funilaria tem preço fixo de {51FE8B}R$500,00 {F2F4F3}pela pintura,\ncoloque os ID's das cores escolhidas, lembrando que os id's alternam entre 0-255\nvoce pode consultar a lista de cores a qualquer momento acessando nosso forum\n"#SV_SITE" ou Wiki SA-MP\n\n\nCor ID:", "Confirmar", "Cancelar" );
                    return ErroMSG(playerid, "Use dois ID's separados por espaço exemplo: 2 2 !");
                }
                if( 0 < strval(inputtext) > 255) {
                    ShowPlayerDialog( playerid, DIALOG_TUNING_CORES, DIALOG_STYLE_INPUT, "{F2F4F3}..:: Cores Veicular ::..", "{F2F4F3}Digite os ID's que voce deseja adicionar ao veiculo,\na funilaria tem preço fixo de {51FE8B}R$500,00 {F2F4F3}pela pintura,\ncoloque os ID's das cores escolhidas, lembrando que os id's alternam entre 0-255\nvoce pode consultar a lista de cores a qualquer momento acessando nosso forum\n"#SV_SITE" ou Wiki SA-MP\n\n\nCor ID:", "Confirmar", "Cancelar" );
                    return ErroMSG(playerid, "Os ID's variam entre 0-255 apenas !");
                }
                ChangeVehicleColor(TuningVehicleID[ playerid ], Color1, Color2);

                SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
                SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

                SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
                SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                Freeze( playerid );
                ShowDialogTunar(playerid);

              /*  Loop(Vid, sizeof(VeiculoInfo))
               {
                    if(TuningVehicleID[ playerid ] == VeiculoInfo[Vid][vVeiculo]){
                        VeiculoInfo[Vid][vCor1] = Color1;
                        VeiculoInfo[Vid][vCor2] = Color2;
                        OnSalvarVehicle(Vid);
                    }
                }*/
                PlaySoundForPlayer( playerid, 1134);

                static str[129];
                format(str, 129, "| Tuning | - Cores %s e %s aplicadas com sucesso", CorPorID(Color1), CorPorID(Color2));
                SCM(playerid, Darkaqua, str);
                //for mobile
            }
            return 1;
		}

		case DIALOG_CONFIRM_COMPRA:
        {
            if(PlayerInfo[playerid][Mobile] == false)
            {
    		    if(!response)
                {
    		        if(TuningCompraID[ playerid ] == COMPRA_RODAS)
                    {
    	                AddVehicleComponent(TuningVehicleID[ playerid ], RodaOriginal[ playerid ]);
    	                ShowMenuForPlayer(MenuTRodas, playerid);

    	    			SCM(playerid, -1, "| Tuning | - Compra cancelada!");
    				}
    				else if(TuningCompraID[ playerid ] == COMPRA_SUSPENSAO
    				|| TuningCompraID[ playerid ] == COMPRA_NITRO
    				|| TuningCompraID[ playerid ] == COMPRA_ALARME
    				|| TuningCompraID[ playerid ] == COMPRA_GPS
    				|| TuningCompraID[ playerid ] == COMPRA_RADIO){

    				    TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);

    		            SCM(playerid, -1, "| Tuning | - Instalaçao cancelada!");
    				}
    				else if(TuningCompraID[ playerid ] == COMPRA_NEON)
                    {
    				    SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
    					SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);
    					SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    				}
    				return true;
    			}

    			//COMPRA_SUSPENSAO   ALARME  COMPRA_GPS 5K radio 900
    			if(TuningCompraID[ playerid ] == COMPRA_NITRO)
                {
    			    if(GetPlayerGrana( playerid ) < 2600){

    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
    					return true;
    				}
    				AddVehicleComponent(TuningVehicleID[ playerid ], 1010);

    	/*			Loop(Vid, sizeof(VeiculoInfo)) {
    					if(TuningVehicleID[ playerid ] == VeiculoInfo[Vid][vVeiculo]){
    					    VeiculoInfo[Vid][vNitro] = 1010;
    					    OnSalvarVehicle(Vid);
    					}
    				}*/
    				Freeze( playerid );
    	            ShowMenuForPlayer(MenuTuning, playerid);

    				ActionPlayerGrana(playerid, "-", 2600);
    				ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 2600);
    				PlaySoundForPlayer( playerid, 1133);
    				SCM(playerid, -1, "| Tuning | - Nitro instalado com sucesso!");
    			}
    			else if(TuningCompraID[ playerid ] == COMPRA_SUSPENSAO){
    			    if(GetPlayerGrana( playerid ) < 4300){

    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
    		            return true;
    				}
    			    AddVehicleComponent(TuningVehicleID[ playerid ], 1087);
    				TuningCompraID[ playerid ] = 0;

        		/*	Loop(Vid, sizeof(VeiculoInfo)) {
    					if(TuningVehicleID[ playerid ] == VeiculoInfo[Vid][vVeiculo]){
    					    VeiculoInfo[Vid][vSuspensao] = 1087;
    					    OnSalvarVehicle(Vid);
    					    break;
    					}
    				}*/

    				Freeze( playerid );
    	            ShowMenuForPlayer(MenuTuning, playerid);

                    ActionPlayerGrana(playerid, "-", 4300);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 4300);
    				PlaySoundForPlayer( playerid, 1133);
    				SCM(playerid, -1, "| Tuning | - Suspensao hidraulica instalada com sucesso!");
    				return true;
    			}
    			else if(TuningCompraID[ playerid ] == COMPRA_RODAS)
                {
    			    if(GetPlayerGrana( playerid ) < 1000)
                    {
    	                AddVehicleComponent(TuningVehicleID[ playerid ], RodaOriginal[ playerid ]);
    	                ShowMenuForPlayer(MenuTRodas, playerid);

    	    			SCM(playerid, -1, "| Tuning | - Voce nao possui grana suficiente para adquirir este item!");
    	    			return true;
    				}
    				SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
    				SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

    				SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
    				SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

    	            ShowMenuForPlayer(MenuTuning, playerid);

    			//	new RodaID = GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_WHEELS);

    		/*		Loop(vid, sizeof(VeiculoInfo)){
    			        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
    			            VeiculoInfo[vid][vRodas] = RodaID;
    					    OnSalvarVehicle(vid);
    					}
    				}*/
    				ActionPlayerGrana(playerid, "-", 1000);
    				PlaySoundForPlayer( playerid, 1133);
    				ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 1000);
    				SCM(playerid, -1, "| Tuning | - Roda Adquirida com sucesso!");
    				return true;
    			}
    			else if(TuningCompraID[ playerid ] == COMPRA_ALARME){
    			    if(GetPlayerGrana( playerid ) < 3900){

    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
    		            return true;
    				}
    		/*	    Loop(vid, sizeof(VeiculoInfo)){
    			        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
    			            VeiculoInfo[vid][vAlarme] = true;
    					    OnSalvarVehicle(vid);
    					}
    				}*/

    				ShowMenuForPlayer(MenuTuning, playerid);

                    ActionPlayerGrana(playerid, "-", 3900);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 3900);
    				PlaySoundForPlayer( playerid, 1133);
    				SCM(playerid, -1, "| Tuning | - Alarme instalado com sucesso!");
    				return true;
    			}
    			else if(TuningCompraID[ playerid ] == COMPRA_GPS){
    			    if(GetPlayerGrana( playerid ) < 5000){

    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
    		            return true;
    				}
    		/*	    Loop(vid, sizeof(VeiculoInfo)){
    			        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
    			            VeiculoInfo[vid][vGPS] = true;
    					    OnSalvarVehicle(vid);
    					}
    				}*/
    				ShowMenuForPlayer(MenuTuning, playerid);

                    ActionPlayerGrana(playerid, "-", 5000);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 5000);
    				PlaySoundForPlayer( playerid, 1133);
    				SCM(playerid, -1, "| Tuning | - Localizador GPS instalado com sucesso!");
    				return true;
    			}
    			else if(TuningCompraID[ playerid ] == COMPRA_RADIO){
    			    if(GetPlayerGrana( playerid ) < 900){

    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
    		            return true;
    				}

    			/*	new bool:Arch = false;
    			    Loop(vid, sizeof(VeiculoInfo)){
    			        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
    			            Arch = true;
    			            VeiculoInfo[vid][vRadio] = true;
    					    OnSalvarVehicle(vid);
    					}
    				}
    				if(!Arch) {
    				    TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - Este item e exclusivo para veiculos da concessionaria!");
    		            return true;
    				}*/
    				ShowMenuForPlayer(MenuTuning, playerid);

                    ActionPlayerGrana(playerid, "-", 900);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 900);
    				PlaySoundForPlayer( playerid, 1133);
    				SCM(playerid, -1, "| Tuning | - Radio instalado com sucesso!");
    				return true;
    			}
    			else if(TuningCompraID[ playerid ] == COMPRA_NEON){
                    if(GetPlayerGrana( playerid ) < 3200){

    					TuningCompraID[ playerid ] = 0;
    		            ShowMenuForPlayer(MenuTuning, playerid);
    		            SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
    		            return true;
    				}
                    if(listitem == 6){
    					ChangeVehicleNeon(TuningVehicleID[ playerid ], -1);
    				}
    				else ChangeVehicleNeon(TuningVehicleID[ playerid ], listitem);

    		/*		Loop(vid, sizeof(VeiculoInfo)){
    			        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
    			            if(listitem == 6){
    			                VeiculoInfo[vid][vNeon] = false;
    				            VeiculoInfo[vid][vNeonColor] = 0;
    				            VeiculoInfo[vid][vNeonStatus] = false;
    						}
    						else {
    						    VeiculoInfo[vid][vNeon] = true;
    				            VeiculoInfo[vid][vNeonColor] = listitem;
    				            VeiculoInfo[vid][vNeonStatus] = true;
    						}
    					    OnSalvarVehicle(vid);
    					}
    				}*/
    				ShowMenuForPlayer(MenuTuning, playerid);

                    ActionPlayerGrana(playerid, "-", 3200);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 3200);
    				PlaySoundForPlayer( playerid, 1133);
    				SCM(playerid, -1, "| Tuning | - Neon instalado com sucesso!");
    				return true;
    			}

            } else {

                // for mobile
                if(!response)
                {
                    if(TuningCompraID[ playerid ] == COMPRA_RODAS)
                    {
                        AddVehicleComponent(TuningVehicleID[ playerid ], RodaOriginal[ playerid ]);
                        ShowDialogTunarRodas(playerid);

                        SCM(playerid, -1, "| Tuning | - Compra cancelada!");
                    }
                    else if(TuningCompraID[ playerid ] == COMPRA_SUSPENSAO
                    || TuningCompraID[ playerid ] == COMPRA_NITRO
                    || TuningCompraID[ playerid ] == COMPRA_ALARME
                    || TuningCompraID[ playerid ] == COMPRA_GPS
                    || TuningCompraID[ playerid ] == COMPRA_RADIO){

                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);

                        SCM(playerid, -1, "| Tuning | - Instalaçao cancelada!");
                    }
                    else if(TuningCompraID[ playerid ] == COMPRA_NEON)
                    {
                        SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
                        SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);
                        SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                    }
                    return true;
                }

                //COMPRA_SUSPENSAO   ALARME  COMPRA_GPS 5K radio 900
                if(TuningCompraID[ playerid ] == COMPRA_NITRO)
                {
                    if(GetPlayerGrana( playerid ) < 2600){

                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1010);

                /*    Loop(Vid, sizeof(VeiculoInfo))
                    {
                        if(TuningVehicleID[ playerid ] == VeiculoInfo[Vid][vVeiculo])
                        {
                            VeiculoInfo[Vid][vNitro] = 1010;
                            OnSalvarVehicle(Vid);
                        }
                    }*/
                    Freeze( playerid );
                    ShowDialogTunar(playerid);

                    ActionPlayerGrana(playerid, "-", 2600);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 2600);
                    PlaySoundForPlayer( playerid, 1133);
                    SCM(playerid, -1, "| Tuning | - Nitro instalado com sucesso!");
                }
                else if(TuningCompraID[ playerid ] == COMPRA_SUSPENSAO)
                {
                    if(GetPlayerGrana( playerid ) < 4300){

                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }
                    AddVehicleComponent(TuningVehicleID[ playerid ], 1087);
                    TuningCompraID[ playerid ] = 0;

              /*      Loop(Vid, sizeof(VeiculoInfo)) {
                        if(TuningVehicleID[ playerid ] == VeiculoInfo[Vid][vVeiculo]){
                            VeiculoInfo[Vid][vSuspensao] = 1087;
                            OnSalvarVehicle(Vid);
                            break;
                        }
                    }
*/
                    Freeze( playerid );
                    ShowDialogTunar(playerid);

                    ActionPlayerGrana(playerid, "-", 4300);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 4300);
                    PlaySoundForPlayer( playerid, 1133);
                    SCM(playerid, -1, "| Tuning | - Suspensao hidraulica instalada com sucesso!");
                    return true;
                }
                else if(TuningCompraID[ playerid ] == COMPRA_RODAS)
                {
                    if(GetPlayerGrana( playerid ) < 1000)
                    {
                        AddVehicleComponent(TuningVehicleID[ playerid ], RodaOriginal[ playerid ]);
                        ShowDialogTunarRodas(playerid);

                        SCM(playerid, -1, "| Tuning | - Voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }

                    SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
                    SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

                    SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));
                    SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));

                  /*  new RodaID = GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_WHEELS);

                    Loop(vid, sizeof(VeiculoInfo))
                    {
                        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
                            VeiculoInfo[vid][vRodas] = RodaID;
                            OnSalvarVehicle(vid);
                        }
                    }*/

                    ShowDialogTunar(playerid);
                    ActionPlayerGrana(playerid, "-", 1000);
                    PlaySoundForPlayer( playerid, 1133);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 1000);
                    SCM(playerid, -1, "| Tuning | - Roda Adquirida com sucesso!");
                    return true;
                }
                else if(TuningCompraID[ playerid ] == COMPRA_ALARME)
                {
                    if(GetPlayerGrana( playerid ) < 3900)
                    {
                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }
                    /*Loop(vid, sizeof(VeiculoInfo))
                    {
                        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
                            VeiculoInfo[vid][vAlarme] = true;
                            OnSalvarVehicle(vid);
                        }
                    }*/

                    ShowDialogTunar(playerid);

                    ActionPlayerGrana(playerid, "-", 3900);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 3900);
                    PlaySoundForPlayer( playerid, 1133);
                    SCM(playerid, -1, "| Tuning | - Alarme instalado com sucesso!");
                    return true;
                }
                else if(TuningCompraID[ playerid ] == COMPRA_GPS)
                {
                    if(GetPlayerGrana( playerid ) < 5000)
                    {
                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }
                 /*   Loop(vid, sizeof(VeiculoInfo))
                    {
                        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
                            VeiculoInfo[vid][vGPS] = true;
                            OnSalvarVehicle(vid);
                        }
                    }*/

                    ShowDialogTunar(playerid);
                    ActionPlayerGrana(playerid, "-", 5000);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 5000);
                    PlaySoundForPlayer( playerid, 1133);
                    SCM(playerid, -1, "| Tuning | - Localizador GPS instalado com sucesso!");
                    return true;
                }
                else if(TuningCompraID[ playerid ] == COMPRA_RADIO)
                {
                    if(GetPlayerGrana( playerid ) < 900)
                    {
                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }

                   /* new bool:Arch = false;
                    Loop(vid, sizeof(VeiculoInfo))
                    {
                        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ])
                        {
                            Arch = true;
                            VeiculoInfo[vid][vRadio] = true;
                            OnSalvarVehicle(vid);
                        }
                    }
                    if(!Arch)
                    {
                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - Este item e exclusivo para veiculos da concessionaria!");
                        return true;
                    }*/

                    ShowDialogTunar(playerid);
                    ActionPlayerGrana(playerid, "-", 900);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 900);
                    PlaySoundForPlayer( playerid, 1133);
                    SCM(playerid, -1, "| Tuning | - Radio instalado com sucesso!");
                    return true;
                }
                else if(TuningCompraID[ playerid ] == COMPRA_NEON)
                {
                    if(GetPlayerGrana( playerid ) < 3200)
                    {
                        TuningCompraID[ playerid ] = 0;
                        ShowDialogTunar(playerid);
                        SCM(playerid, -1, "| Tuning | - voce nao possui grana suficiente para adquirir este item!");
                        return true;
                    }
                    if(listitem == 6)
                    {
                        ChangeVehicleNeon(TuningVehicleID[ playerid ], -1);
                    }
                    else ChangeVehicleNeon(TuningVehicleID[ playerid ], listitem);

                   /* Loop(vid, sizeof(VeiculoInfo))
                    {
                        if(VeiculoInfo[vid][vVeiculo] == TuningVehicleID[ playerid ]){
                            if(listitem == 6){
                                VeiculoInfo[vid][vNeon] = false;
                                VeiculoInfo[vid][vNeonColor] = 0;
                                VeiculoInfo[vid][vNeonStatus] = false;
                            }
                            else {
                                VeiculoInfo[vid][vNeon] = true;
                                VeiculoInfo[vid][vNeonColor] = listitem;
                                VeiculoInfo[vid][vNeonStatus] = true;
                            }
                            OnSalvarVehicle(vid);
                        }
                    }*/

                    ShowDialogTunar(playerid);
                    ActionPlayerGrana(playerid, "-", 3200);
                    ActionEmpresaMoneyEx(EMP_TUNINGLS, "+", 3200);
                    PlaySoundForPlayer( playerid, 1133);
                    SCM(playerid, -1, "| Tuning | - Neon instalado com sucesso!");
                    return true;
                }
            }
            return 1;
		}

		case DIALOG_PETROLEIRO:
        {
			if(!response){
			    TraillerAttach[ playerid ] = false;
			    SCM(playerid, -1, "{A4E1C9}Voce rejeitou uma nova Ordem de Serviço, volte a HQ para sair do modo serviço!");
			    SetGPSFromLocation(playerid, "HQ Petroleiros", -1039.2301, -573.6809, 32.0078);
			}
			else {
			    SCM(playerid, -1, "{A4E1C9}Voce aceitou uma nova Ordem de Serviço!");
			    SortPetrolRoute( playerid );
			}
            return 1;
		}

		case DIALOG_PAINTJOB:
        {
			new car;
			car = GetPlayerVehicleID(playerid);
			if(listitem == 0) // Estilo 1
			{
    			ChangeVehiclePaintjob(car,0);
			}
			if(listitem == 1) // Estilo 2
			{
    			ChangeVehiclePaintjob(car,1);
			}
			if(listitem == 2) // Estilo 3
			{
	       		ChangeVehiclePaintjob(car,2);
			}
            return 1;
		}
		case DIALOG_AUTO_ESCOLA:
        {
			if(!response) return true;

			switch(listitem)
            {
				case 0: {//Motos
				    if(GetPlayerGrana( playerid ) < 1840) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(PlayerInfo[ playerid ][ pHabA ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");
                    //if(GetPlayerLevel( playerid ) < ) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");

					/*pHabD, pHabE,	pHabAR,	pHabN,	pHabES,*/

	                if(PlayerInfo[ playerid ][ pHabB ] == 1){
	                    ShowPlayerDialog(playerid, AE_CONFIRM_EXAME, DIALOG_STYLE_MSGBOX, "CNH Tipo A", "{FFFFFF}Voce esta prestes a confirmar sua inscriçao para a segunda etapa\ndo sistema de habilitaçoes. por voce ja ter feito o exame teorico em sua primeira CNH\n\nconfirme abaixo sua inscriçao para iniciar o exame {A2F7E8}'pratico'", "Confirmar", "Cancelar");
					}
					else {
					    ShowPlayerDialog(playerid, AE_CONFIRM_EXAME, DIALOG_STYLE_MSGBOX, "Minha primeira CNH", "{FFFFFF}Voce esta prestes a confirmar sua inscriçao para a primeira etapa\ndo sistema de habilitaçoes. confirme abaixo para iniciar o exame {A2F7E8}'teorico'", "Confirmar", "Cancelar");
					}
					CNHTest[ playerid ] = 1;
				}
				case 1: {//Veiculos

					if(GetPlayerGrana( playerid ) < 2550) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(PlayerInfo[ playerid ][ pHabB ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");
                    //if(GetPlayerLevel( playerid ) < ) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");

					/*pHabD, pHabE,	pHabAR,	pHabN,	pHabES,*/

	                if(PlayerInfo[ playerid ][ pHabA ] == 1){
	                    ShowPlayerDialog(playerid, AE_CONFIRM_EXAME, DIALOG_STYLE_MSGBOX, "CNH Tipo B", "{FFFFFF}Voce esta prestes a confirmar sua inscriçao para a segunda etapa\ndo sistema de habilitaçoes. por voce ja ter feito o exame teorico em sua primeira CNH\n\nconfirme abaixo sua inscriçao para iniciar o exame {A2F7E8}'pratico'", "Confirmar", "Cancelar");
					}
					else {
					    ShowPlayerDialog(playerid, AE_CONFIRM_EXAME, DIALOG_STYLE_MSGBOX, "Minha primeira CNH", "{FFFFFF}Voce esta prestes a confirmar sua inscriçao para a primeira etapa\ndo sistema de habilitaçoes. confirme abaixo para iniciar o exame {A2F7E8}'teorico'", "Confirmar", "Cancelar");
					}
					CNHTest[ playerid ] = 2;
				}
				case 2: {//Onibus
				    if(GetPlayerGrana( playerid ) < 3900) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(PlayerInfo[ playerid ][ pHabB ] != 1) return ErroMSG(playerid, "Voce precisa ter a categoria B registrada em sua CNH!");
				    if(PlayerInfo[ playerid ][ pHabD ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");
                    if(GetPlayerLevel( playerid ) < 5) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");

                    CNHTest[ playerid ] = 3;
                    ShowPlayerDialog(playerid, AE_CONFIRM_EXAME, DIALOG_STYLE_MSGBOX, "CNH Tipo D", "{FFFFFF}Voce esta prestes a confirmar sua inscriçao para a segunda etapa\ndo sistema de habilitaçoes. por voce ja ter feito o exame teorico em sua primeira CNH\n\nconfirme abaixo sua inscriçao para iniciar o exame {A2F7E8}'pratico'", "Confirmar", "Cancelar");
				}
				case 3: {//Caminhoes
                    if(GetPlayerGrana( playerid ) < 5830) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(PlayerInfo[ playerid ][ pHabD ] != 1) return ErroMSG(playerid, "Voce precisa ter a categoria D registrada em sua CNH!");
				    if(PlayerInfo[ playerid ][ pHabE ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");
                    if(GetPlayerLevel( playerid ) < 5) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");

					CNHTest[ playerid ] = 4;
                    ShowPlayerDialog(playerid, AE_CONFIRM_EXAME, DIALOG_STYLE_MSGBOX, "CNH Tipo E", "{FFFFFF}Voce esta prestes a confirmar sua inscriçao para a segunda etapa\ndo sistema de habilitaçoes. por voce ja ter feito o exame teorico em sua primeira CNH\n\nconfirme abaixo sua inscriçao para iniciar o exame {A2F7E8}'pratico'", "Confirmar", "Cancelar");
				}
				case 4: { //Hab. Aerea
                    if(GetPlayerGrana( playerid ) < 100000) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(GetPlayerLevel( playerid ) < 15) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");
                    if(PlayerInfo[ playerid ][ pHabAR ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");

                    PlayerInfo[ playerid ][ pHabAR ] = 1;

                    SCM(playerid, -1, "{1F5FD5}[Auto Escola] - Voce comprou uma licensa aerea, agora pode utilizar veiculos aereos!");
					ActionPlayerGrana(playerid, "-", 100000, 1);
					ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 8900);
				}
				case 5: {//Hab. Nautica
				    if(GetPlayerGrana( playerid ) < 50000) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(GetPlayerLevel( playerid ) < 10) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");
                    if(PlayerInfo[ playerid ][ pHabN ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");

                    PlayerInfo[ playerid ][ pHabN ] = 1;

                    SCM(playerid, -1, "{1F5FD5}[Auto Escola] - Voce comprou uma licensa nautica, agora pode utilizar veiculos nauticos!");
					ActionPlayerGrana(playerid, "-", 50000, 1);
					ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 6900);
				}
				case 6: {//Licensa Especial
				    if(GetPlayerGrana( playerid ) < 150000) return ErroMSG(playerid, "Voce nao possui dinheiro o suficiente!");
				    if(
						PlayerInfo[ playerid ][ pHabA ] != 1 ||
						PlayerInfo[ playerid ][ pHabB ] != 1 ||
						PlayerInfo[ playerid ][ pHabD ] != 1 ||
						PlayerInfo[ playerid ][ pHabE ] != 1 ||
						PlayerInfo[ playerid ][ pHabAR ] != 1 ||
						PlayerInfo[ playerid ][ pHabN ] != 1) return ErroMSG(playerid, "Voce precisa ter todas as outras categoria registradas em sua CNH!");

					if(PlayerInfo[ playerid ][ pHabES ] == 1) return ErroMSG(playerid, "Voce ja possui esta categoria em sua CNH!");
                    if(GetPlayerLevel( playerid ) < 50) return ErroMSG(playerid, "Voce nao possui level para adiquirir esta categoria!");

					SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Habilitaçao especial adiquirida com sucesso, agora voce pode ultilizar os veiculos especiais legalmente!");
				    PlayerInfo[ playerid ][ pHabES ] = 1;

				    ActionPlayerGrana(playerid, "-", 150000, 1);
				    ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 12000);
				}
			}
            return 1;
		}

		case AE_CONFIRM_EXAME:
        {
			if(!response)
            {
				callcmd::menu(playerid, "autoescola");
			    CNHTest[ playerid ] = 0;
				return true;
			}

			switch(CNHTest[ playerid ])
            {
			    case 1:
                {
                    if(PlayerInfo[ playerid ][ pHabB ] != 1){
                        ActionPlayerGrana(playerid, "-", 1840);
                        ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 1840);

	                    ExameQuestID[ playerid ] = 0;
						ExamePoints[ playerid ] = 0;

						PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
			   			Freeze( playerid );

                        /*SetPlayerCameraPos(playerid, 1244.6067, -1329.5552, 33.0758);
						SetPlayerCameraLookAt(playerid, 1245.6095, -1329.5497, 32.5856);*/

                        SetPlayerPos(playerid, -2029.386108,-127.000755,-50.800273);
                        SetPlayerFacingAngle(playerid, 358.134399);
                        LoopingAnim(playerid, "PED","SEAT_idle", 1.0,1,0,0,0,0);

						SetPlayerVirtualWorld(playerid, 100);
						SetPlayerInterior(playerid, 0);

						static BoxConteudo[300], BoxTitle[128];

					    format(BoxConteudo, sizeof(BoxConteudo), "%s\n%s\n%s", ExameTeoricoData[0][Resposta1], ExameTeoricoData[0][Resposta2], ExameTeoricoData[0][Resposta3]);
		                format(BoxTitle, sizeof(BoxTitle), "%s", ExameTeoricoData[0][QuestTitle]);
	                    ShowPlayerDialog(playerid, AE_EXAME_TEORICO, DIALOG_STYLE_LIST, BoxTitle, BoxConteudo, "Proxima", "Cancelar");


					  } else {

					    ActionPlayerGrana(playerid, "-", 1840);
					    ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 1840);

					    if(IsVehicleOccupied(AutoVeiculosA[ 0 ]) && IsVehicleOccupied(AutoVeiculosA[ 1 ]) &&
						IsVehicleOccupied(AutoVeiculosA[ 2 ]) && IsVehicleOccupied(AutoVeiculosA[ 3 ])
						&& IsVehicleOccupied(AutoVeiculosA[ 4 ]) && IsVehicleOccupied(AutoVeiculosA[ 5 ])) return ErroMSG(playerid, "Todos os veiculos estao ocupados no momento, aguarde alguns instantes!");
                        ActionPlayerGrana(playerid, "-", 1140);

                        SetPlayerPosEx(playerid, -2029.8550, -121.3959, 35.3554, 182.1559, 0, 0, 2);
						SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Va ate as motos escolha uma e pegue-a, para dar inicio ao exame!");
                        PlaySoundForPlayer(playerid, 1187);
					}
				}

                case 2:
                {
                    ActionPlayerGrana(playerid, "-", 2550);
                    ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 2550);
                    if(PlayerInfo[ playerid ][ pHabA ] != 1)
                    {
	                    ExameQuestID[ playerid ] = 0;
						ExamePoints[ playerid ] = 0;

						PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
			   			Freeze( playerid );

                        SetPlayerPos(playerid, -2029.386108,-127.000755,-50.800273);
                        SetPlayerFacingAngle(playerid, 358.134399);
                        LoopingAnim(playerid, "PED","SEAT_idle", 1.0,1,0,0,0,0);

						SetPlayerVirtualWorld(playerid, 100);
						SetPlayerInterior(playerid, 0);

						static BoxConteudo[300], BoxTitle[128];

					    format(BoxConteudo, sizeof(BoxConteudo), "%s\n%s\n%s", ExameTeoricoData[0][Resposta1], ExameTeoricoData[0][Resposta2], ExameTeoricoData[0][Resposta3]);
		                format(BoxTitle, sizeof(BoxTitle), "%s", ExameTeoricoData[0][QuestTitle]);
	                    ShowPlayerDialog(playerid, AE_EXAME_TEORICO, DIALOG_STYLE_LIST, BoxTitle, BoxConteudo, "Proxima", "Cancelar");

					   } else {

                        SetCameraBehindPlayer(playerid);

	                    SetPlayerPosEx(playerid, 1286.2294, -1329.1927, 13.5524, 83.8956, 0, 0, 1);

						SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Escolha um veiculo para iniciar a segunda parte do exame !");
                        CriarRotaAutoEscolaTipoB( playerid );
					}
                }

                case 3:
                {
                    if(!IsVehicleOccupied(AutoVeiculosD[ 0 ]))
                    {
                    	ActionPlayerGrana(playerid, "-", 3900);
                        ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 3900);

                    	CriarRotaAutoEscolaTipoD( playerid );

                    	SetPlayerInterior(playerid, 0);
                    	PutPlayerInVehicle(playerid, AutoVeiculosD[ 0 ], 0);
                    }
                    else if(!IsVehicleOccupied(AutoVeiculosD[ 1 ]))
                    {
                    	ActionPlayerGrana(playerid, "-", 3900);
                        ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 3900);

                    	CriarRotaAutoEscolaTipoD( playerid );

                    	SetPlayerInterior(playerid, 0);
                    	PutPlayerInVehicle(playerid, AutoVeiculosD[ 1 ], 0);
                    }
                    else ErroMSG(playerid, "Os veiculos para esta categoria encontram-se ocupados, tente novamente em instantes!");
				}

				case 4:

                {
				    if(IsVehicleOccupied(AutoVeiculosE[ 0 ]) || IsVehicleOccupied(AutoVeiculosE[ 1 ])
					|| IsVehicleOccupied(AutoVeiculosE[ 2 ]) || IsVehicleOccupied(AutoVeiculosE[ 3 ]) || IsVehicleOccupied(AutoVeiculosE[ 4 ])) return ErroMSG(playerid, "Os veiculos para esta categoria encontram-se ocupados, tente novamente em instantes!");

				    ActionPlayerGrana(playerid, "-", 5830);
				    ActionEmpresaMoneyEx(EMP_AUTOESCOLALS, "+", 5830);
				    SetPlayerPosEx(playerid, -598.8256, -507.9644, 25.5234, 28.2189, 0, 0, 2);
				    SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Escolha um caminhao para iniciar a segunda parte do exame !");
				}
			}
            return 1;
		}
		case AE_EXAME_TEORICO:
		{
		    if(!response){
			    GameTextForPlayer(playerid, "~r~Cancelado", 1000, 1);

				ExameQuestID[ playerid ] = 0;
				ExamePoints[ playerid ] = 0;
	            CNHTest[ playerid ] = 0;
				PlaySoundForPlayer(playerid, 1055);

	            SetCameraBehindPlayer(playerid);
	            SetPlayerPosEx(playerid, -2039.353271,-126.431694,-50.914062, 0.0, 0, 0);
                ClearAnimations(playerid);
	            UnFreeze( playerid );
	            return true;
			}
			static str[ 150 ];
			if(listitem == ExameTeoricoData[ExameQuestID[ playerid ]][Correta])
			{
				ExamePoints[ playerid ]++;
			}
            if(ExameQuestID[ playerid ] >= (sizeof(ExameTeoricoData))-1)
			{
			    if(ExamePoints[ playerid ] < (sizeof(ExameTeoricoData)-2))
				{
				    ClearChatbox(playerid, 5);
				    format(str, sizeof(str), "{1F5FD5}[ Auto Escola ] - Voce nao atingiu o minimo de pontos na prova para prosseguir para segunda etapa do exame! {FFFFFF}%i{1F5FD5}/{FFFFFF}%i !", ExamePoints[ playerid ], sizeof(ExameTeoricoData));
				    SCM(playerid, -1, str);
					GameTextForPlayer(playerid, "~r~Falhou", 1000, 1);

					ExameQuestID[ playerid ] = 0;
					ExamePoints[ playerid ] = 0;

					PlaySoundForPlayer(playerid, 1055);

                    SetCameraBehindPlayer(playerid);
                    SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
					SetPlayerVirtualWorld(playerid, 0);
					ClearAnimations(playerid);
					UnFreeze( playerid );
				}
				else
				{

					ClearChatbox(playerid, 5);
                    format(str, sizeof(str), "{1F5FD5}[ Auto Escola ] - Voce atingiu o minimo de pontos na prova para prosseguir para segunda etapa do exame! {FFFFFF}%i{1F5FD5}/{FFFFFF}%i !", ExamePoints[ playerid ], sizeof(ExameTeoricoData));
				    SCM(playerid, -1, str);
				    GameTextForPlayer(playerid, "~g~Parabens", 1000, 1);
					ClearChatbox(playerid, 1);

                    ClearAnimations(playerid);

					ExameQuestID[ playerid ] = 0;
					ExamePoints[ playerid ] = 0;

					PlaySoundForPlayer(playerid, 1055);

                    UnFreeze( playerid );
                    if(CNHTest[ playerid ] == 1) { // Exame de moto


                        ClearAnimations(playerid);
						SetCameraBehindPlayer(playerid);

                    	SetPlayerPosEx(playerid, -2029.8550, -121.3959, 35.3554, 182.1559, 0, 0, 2);
						SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Va ate as motos escolha uma e pegue-a, para dar inicio ao exame!");
                    	PlaySoundForPlayer(playerid, 1187);


					}
					else if(CNHTest[ playerid ] == 2) {// Exame de carro

                        ClearAnimations(playerid);
						SetCameraBehindPlayer(playerid);

	                    SetPlayerPosEx(playerid, 1286.2294, -1329.1927, 13.5524, 83.8956, 0, 0, 1);

						ClearChatbox(playerid, 1);
						SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Escolha um veiculo para iniciar a segunda parte do exame !");
                        CriarRotaAutoEscolaTipoB( playerid );
					}
				}
			}
			else
			{
			    ExameQuestID[ playerid ]++;

			    static BoxConteudo[300], BoxTitle[128];
				new PIQID = ExameQuestID[ playerid ];

			    format(BoxConteudo, sizeof(BoxConteudo), "%s\n%s\n%s", ExameTeoricoData[PIQID][Resposta1], ExameTeoricoData[PIQID][Resposta2], ExameTeoricoData[PIQID][Resposta3]);
                format(BoxTitle, sizeof(BoxTitle), "%s", ExameTeoricoData[PIQID][QuestTitle]);
                ShowPlayerDialog(playerid, AE_EXAME_TEORICO, DIALOG_STYLE_LIST, BoxTitle, BoxConteudo, "Proxima", "Cancelar");

			}
            return 1;
		}

        case DIALOG_LANCHONETES: {
			if( response ){
			    if(listitem == 0){ //Lanches
					new Box[600];
					static str[ 129 ];

                    strcat(Box, "Produto\tPreço\tEfeito\n");
                    for(new list_= 0; list_ < sizeof(TraillerLanchesArray); list_++){
						format(str, 129, "{7CF97C}>{FFFFFF}%s\t%s\t%i\n", TraillerLanchesArray[list_][L_Name], FormatNumber(TraillerLanchesArray[list_][L_Valor]), TraillerLanchesArray[list_][L_Quant]);
                        strcat(Box, str);
					}
                	ShowPlayerDialog(playerid, DIALOG_LAN_COMIDA, DIALOG_STYLE_TABLIST_HEADERS, "Lanches", Box, "Selecionar", "Cancel");
				}
				if(listitem == 1){ //Bebidas
					new Box[600];
					static str[ 129 ];

                    strcat(Box, "Produto\tPreço\tEfeito\n");
                    for(new list_= 0; list_ < sizeof(TraillerBebidasArray); list_++){
						format(str, 129, "{7CF97C}>{FFFFFF}%s\t%s\t%i\n", TraillerBebidasArray[list_][L_Name], FormatNumber(TraillerBebidasArray[list_][L_Valor]), TraillerBebidasArray[list_][L_Quant]);
                        strcat(Box, str);
					}
                	ShowPlayerDialog(playerid, DIALOG_LAN_BEBIDAS, DIALOG_STYLE_TABLIST_HEADERS, "Bebidas", Box, "Selecionar", "Cancel");
				}
			}
            return 1;
		}
        case DIALOG_LAN_COMIDA: {
			if( response ){
			    new Money;
			    Money = GetPlayerGrana( playerid );

				if(Money < TraillerLanchesArray[listitem][L_Valor]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");

                if(PlayerInfo[ playerid ][ pFome ]+TraillerLanchesArray[listitem][L_Quant] > 100) PlayerInfo[ playerid ][ pFome ] = 100;
			    else PlayerInfo[ playerid ][ pFome ]+= TraillerLanchesArray[listitem][L_Quant];

                ActionPlayerGrana(playerid, "-", TraillerLanchesArray[listitem][L_Valor], 1);
				ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", TraillerLanchesArray[listitem][L_Valor]);

    			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				static str[ 129 ];
				format(str, 129, "(>) - Voce esta comendo um(a) %s!", TraillerLanchesArray[listitem][L_Name]);
				SendClientMessage(playerid, 0xff5555ff, str);
				format(str, 129, "{F763E9}(>) - %s esta comendo um(a) %s!", GetName( playerid ), TraillerLanchesArray[listitem][L_Name]);
				MessageProxPlayer(playerid, -1, 5.0, str);

				OnSalvarDados( playerid );
			}
            return 1;
		}
		case DIALOG_LAN_BEBIDAS: {
			if( response ){
			    new Money;
			    Money = GetPlayerGrana( playerid );

				if(Money < TraillerBebidasArray[listitem][L_Valor]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");

                if(PlayerInfo[ playerid ][ pSede ]+TraillerBebidasArray[listitem][L_Quant] > 100) PlayerInfo[ playerid ][ pSede ] = 100;
			    else PlayerInfo[ playerid ][ pSede ]+= TraillerBebidasArray[listitem][L_Quant];

                ActionPlayerGrana(playerid, "-", TraillerBebidasArray[listitem][L_Valor], 1);

                ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", TraillerBebidasArray[listitem][L_Valor]);

				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				static str[ 129 ];
				format(str, 129, "(>) - Voce esta bebendo um(a) %s!", TraillerBebidasArray[listitem][L_Name]);
				SendClientMessage(playerid, 0xff5555ff, str);
				format(str, 129, "{F763E9}(>) - %s esta bebendo um(a) %s!", GetName( playerid ), TraillerBebidasArray[listitem][L_Name]);
				MessageProxPlayer(playerid, -1, 5.0, str);

				OnSalvarDados( playerid );
			}
            return 1;
		}
		case DIALOG_PIZZARIA: {
			if( response ){
			    if(listitem == 0){ //Lanches
					new Box[600];
					static str[ 129 ];

                    strcat(Box, "Produto\tPreço\tEfeito\n");
                    for(new list_= 0; list_ < sizeof(pizzariaLanchesMenu); list_++){
						format(str, 129, "{7CF97C}>{FFFFFF}%s\t%s\t%i\n", pizzariaLanchesMenu[list_][L_Name], FormatNumber(pizzariaLanchesMenu[list_][L_Valor]), pizzariaLanchesMenu[list_][L_Quant]);
                        strcat(Box, str);
					}
                	ShowPlayerDialog(playerid, DIALOG_LAN_COMIDA, DIALOG_STYLE_TABLIST_HEADERS, "Lanches", Box, "Selecionar", "Cancel");
				}
				if(listitem == 1){ //Bebidas
					new Box[600];
					static str[ 129 ];

                    strcat(Box, "Produto\tPreço\tEfeito\n");
                    for(new list_= 0; list_ < sizeof(pizzariaBebidasMenu); list_++){
						format(str, 129, "{7CF97C}>{FFFFFF}%s\t%s\t%i\n", pizzariaBebidasMenu[list_][L_Name], FormatNumber(pizzariaBebidasMenu[list_][L_Valor]), pizzariaBebidasMenu[list_][L_Quant]);
                        strcat(Box, str);
					}
                	ShowPlayerDialog(playerid, DIALOG_LAN_BEBIDAS, DIALOG_STYLE_TABLIST_HEADERS, "Bebidas", Box, "Selecionar", "Cancel");
				}
			}
            return 1;
		}
        case DIALOG_PI_PIZZAS: {
			if( response ){
			    new Money;
			    Money = GetPlayerGrana( playerid );

				if(Money < pizzariaLanchesMenu[listitem][L_Valor]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");

                if(PlayerInfo[ playerid ][ pFome ]+pizzariaLanchesMenu[listitem][L_Quant] > 100) PlayerInfo[ playerid ][ pFome ] = 100;
			    else PlayerInfo[ playerid ][ pFome ]+= pizzariaLanchesMenu[listitem][L_Quant];

                ActionPlayerGrana(playerid, "-", pizzariaLanchesMenu[listitem][L_Valor], 1);
				ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", pizzariaLanchesMenu[listitem][L_Valor]);

				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				static str[ 129 ];
				format(str, 129, "(>) - Voce esta comendo um(a) %s!", pizzariaLanchesMenu[listitem][L_Name]);
				SendClientMessage(playerid, 0xff5555ff, str);
				format(str, 129, "{F763E9}(>) - %s esta comendo um(a) %s!", GetName( playerid ), pizzariaLanchesMenu[listitem][L_Name]);
				MessageProxPlayer(playerid, -1, 5.0, str);

				OnSalvarDados( playerid );
			}
            return 1;
		}
		case DIALOG_PI_BEBIDAS: {
			if( response ){
			    new Money;
			    Money = GetPlayerGrana( playerid );

				if(Money < pizzariaBebidasMenu[listitem][L_Valor]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");

                if(PlayerInfo[ playerid ][ pSede ]+pizzariaBebidasMenu[listitem][L_Quant] > 100) PlayerInfo[ playerid ][ pSede ] = 100;
			    else PlayerInfo[ playerid ][ pSede ]+= pizzariaBebidasMenu[listitem][L_Quant];

                ActionPlayerGrana(playerid, "-", pizzariaBebidasMenu[listitem][L_Valor], 1);

                ActionEmpresaMoney(playerid,EMP_BURGERSHOTLS, "+", pizzariaBebidasMenu[listitem][L_Valor]);

				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

				static str[ 129 ];
				format(str, 129, "(>) - Voce esta bebendo um(a) %s!", pizzariaBebidasMenu[listitem][L_Name]);
				SendClientMessage(playerid, 0xff5555ff, str);
				format(str, 129, "{F763E9}(>) - %s esta bebendo um(a) %s!", GetName( playerid ), pizzariaBebidasMenu[listitem][L_Name]);
				MessageProxPlayer(playerid, -1, 5.0, str);

				OnSalvarDados( playerid );
			}
            return 1;
		}
		case DIALOG_CONTRATO_ADV: {
		    new str[ 129 ];
			if(!response){
                format(str, sizeof str, "{ACBFD2}(>) - %s recusou seu contrato de liberaçao!", GetNameEx( playerid ));
				SCM(ContratoID[playerid], -1, str);

				format(str, sizeof str, "{ACBFD2}(>) - Voce recusou o contrato prisional de %s!", GetNameEx( ContratoID[playerid] ));
				SCM(playerid, -1, str);

                ContratoID[playerid] = INVALID_PLAYER_ID;
				ContratoValor[playerid] = -1;
				TempoCOffer[playerid] = 0;
				return true;
			}
			else {
			    format(str, sizeof str, "{ACBFD2}(>) - %s aceitou seu contrato de liberaçao, +$%s!", GetNameEx( playerid ), FormatNumber(ContratoValor[ playerid ]));
				SCM(ContratoID[playerid], -1, str);

				format(str, sizeof str, "{ACBFD2}(>) - Voce aceitou o contrato prisional %s %s!", PlayerInfo[ ContratoID[playerid] ][ pSex ] == 1 ? ("do advogado"):("da advogada"), GetNameEx( ContratoID[playerid] ));
				SCM(playerid, -1, str);

				ActionPlayerBank(playerid, "-", ContratoValor[ playerid ], 1);
				ActionPlayerGrana(ContratoID[playerid], "+", ContratoValor[ playerid ], 1);

				PlayerInfo[ContratoID[playerid]][pSalario] += 10;

				if(TempoCOffer[ playerid ] != -1){
				    PlayerInfo[playerid][PresoTempo] -= TempoCOffer[ playerid ];
					format(str, sizeof str, "{ACBFD2}(>) - foram reduzidos: %s!", Convert(TempoCOffer[ playerid ], 1));
					SCM(playerid, -1, str);
                }
                else {
					SCM(playerid, -1, "{ACBFD2}(>) - voce foi liberado pelo advogado!");
                    SistemaPrisao(playerid, "soltar");
				}
				OnSalvarDados(ContratoID[playerid]);
				OnSalvarDados(playerid);

                ContratoID[playerid] = INVALID_PLAYER_ID;
				ContratoValor[playerid] = 0;
				TempoCOffer[ playerid ] = 0;

			}
            return 1;
		}
		case DIALOG_ABANDONO_EMPREGO: {
            if(!response) return true;

			static str[ 129 ];
            format(str, sizeof str, "{ACBFD2}(>) - Voce abandonou seu atual emprego de %s!", EmpregoNome[PlayerInfo[playerid][pEmprego]]);
			SCM(playerid, -1, str);

            RemovePlayerWeapon(playerid, 9);
            DisablePlayerCheckpoint(playerid);

			if(EmpregoDuty[ playerid ])
			{
	            ModoTrabalho(playerid, 1);
			}
            EncerrarTimerProfissao( playerid );

            PlayerInfo[ playerid ][ pEmprego ] = 0;
			PlayerInfo[ playerid ][ pOrg ] = 0;
			EmpregoDuty[ playerid ] = 0;
			SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);
			OnSalvarDados(playerid);
            return 1;
		}
		case DIALOG_HOSP_PLANOS: {
			if(!response) return true;

			if(GetPVarInt(playerid, "PlanOption") == 1){
				if(GetPlayerGrana(playerid) < CUSTO_PLANO_SAUDE) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para completar essa açao!");

	            PlayerInfo[ playerid ][ pPlanoSaude ] = true;

				ActionPlayerGrana(playerid, "-", CUSTO_PLANO_SAUDE, 1);

				static str[ 129 ];
				format(str, sizeof( str ), "[ Hospital ] - Plano de Saude adiquirido com sucesso, valor: $%s, Obrigado e volte sempre !", FormatNumber(CUSTO_PLANO_SAUDE));
				SCM(playerid, 0x7FF2E944, str);
			}
			else {
                if(!PlayerInfo[ playerid ][ pPlanoSaude ]) return true;

	            PlayerInfo[ playerid ][ pPlanoSaude ] = false;

	            SCM(playerid, 0x7FF2E944, "[ Hospital ] - Plano de Saude cancelado com sucesso, Obrigado e volte sempre !");
	            OnSalvarDados( playerid );
			}
            return 1;
		}
		case DIALOG_ELEVADOR: {
	        if(!response) return 0;
			if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
				GameTextForPlayer(playerid, "~r~O Elevador ja esta neste andar.", 3500, 4);
			else if(DidPlayerRequestElevator(playerid))
				GameTextForPlayer(playerid, "~r~Voce ja chamou o elevador~n~~w~Aguarde..", 3500, 4);
			else
				CallElevator(playerid, listitem);
		}
		case INVENT_MENU: {
			if(!response) return true;

            static op;
			op = (listitem+1);

			if(op == 1 && playerInventario[ playerid ][ itemId1 ] == -1) return true;
			if(op == 2 && playerInventario[ playerid ][ itemId2 ] == -1) return true;
			if(op == 3 && playerInventario[ playerid ][ itemId3 ] == -1) return true;
			if(op == 4 && playerInventario[ playerid ][ itemId4 ] == -1) return true;
			if(op == 5 && playerInventario[ playerid ][ itemId5 ] == -1) return true;
			if(op == 6 && playerInventario[ playerid ][ itemId6 ] == -1) return true;
			if(op == 7 && playerInventario[ playerid ][ itemId7 ] == -1) return true;

			SetPVarInt(playerid, "ArmaID", op);

			//GetPVarInt(playerid, "ArmaID");
			ShowPlayerDialog( playerid, INVENT_MENU2, DIALOG_STYLE_LIST, "Opçoes", "Equipar\nDropar", "Escolher", "Cancelar");
		}
		case INVENT_MENU2: {
			if(!response) return true;

			static
				Escolha,
				str[100]
			;

			Escolha = GetPVarInt(playerid, "ArmaID");

			if(listitem == 0){
	            if(Escolha == 1){
	                if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId1 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId1 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}
     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId1 ], playerInventario[ playerid ][ itemQuant1 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId1 ]][i_Name], playerInventario[ playerid ][ itemQuant1 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId1 ] = playerInventario[ playerid ][ itemQuant1 ] = -1;
				}
				else if(Escolha == 2){
   	               	if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId2 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId2 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}
     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId2 ], playerInventario[ playerid ][ itemQuant2 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId2 ]][i_Name], playerInventario[ playerid ][ itemQuant2 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId2 ] = playerInventario[ playerid ][ itemQuant2 ] = -1;
				}
				else if(Escolha == 3){
  	               	if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId3 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId3 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}

     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId3 ], playerInventario[ playerid ][ itemQuant3 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId3 ]][i_Name], playerInventario[ playerid ][ itemQuant3 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId3 ] = playerInventario[ playerid ][ itemQuant3 ] = -1;
				}
				else if(Escolha == 4){
				    if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId4 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId4 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}

     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId4 ], playerInventario[ playerid ][ itemQuant4 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId4 ]][i_Name], playerInventario[ playerid ][ itemQuant4 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId4 ] = playerInventario[ playerid ][ itemQuant4 ] = -1;
				}
				else if(Escolha == 5){
				    if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId5 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId5 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}
     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId5 ], playerInventario[ playerid ][ itemQuant5 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId5 ]][i_Name], playerInventario[ playerid ][ itemQuant5 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId5 ] = playerInventario[ playerid ][ itemQuant5 ] = -1;
				}
				else if(Escolha == 6){
				    if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId6 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId6 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}

     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId6 ], playerInventario[ playerid ][ itemQuant6 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId6 ]][i_Name], playerInventario[ playerid ][ itemQuant6 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId6 ] = playerInventario[ playerid ][ itemQuant6 ] = -1;
				}
				else if(Escolha == 7){
				    if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(playerInventario[ playerid ][ itemId7 ]))){
						if(!GetWeaponInPlayer(playerid, playerInventario[ playerid ][ itemId7 ]))
							return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
					}

     				SetPlayerArma(playerid, playerInventario[ playerid ][ itemId7 ], playerInventario[ playerid ][ itemQuant7 ]);
					format(str, sizeof str, "(>) - Voce equipou-se com uma %s com %i balas!", ItensDrop[playerInventario[ playerid ][ itemId7 ]][i_Name], playerInventario[ playerid ][ itemQuant7 ]);
					SCM(playerid, Purple, str);

					playerInventario[ playerid ][ itemId7 ] = playerInventario[ playerid ][ itemQuant7 ] = -1;
				}
				OnSalvarDados( playerid );
			}
			if(listitem == 1){
                static
					World,
					Dados[2],
					Int,
					Float:xPos[3]
				;

				World = GetPlayerVirtualWorld( playerid );
				Int = GetPlayerInterior( playerid );

                GetPlayerPos( playerid, xPos[0], xPos[1], xPos[2]);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 850);

				switch(Escolha){
					case 1: {
					    Dados[0] = playerInventario[ playerid ][ itemId1 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant1 ];
						playerInventario[ playerid ][ itemId1 ] = playerInventario[ playerid ][ itemQuant1 ] = -1;
					}
					case 2: {
					    Dados[0] = playerInventario[ playerid ][ itemId2 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant2 ];
						playerInventario[ playerid ][ itemId2 ] = playerInventario[ playerid ][ itemQuant2 ] = -1;
					}
					case 3: {
					    Dados[0] = playerInventario[ playerid ][ itemId3 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant3 ];
						playerInventario[ playerid ][ itemId3 ] = playerInventario[ playerid ][ itemQuant3 ] = -1;
					}
					case 4: {
					    Dados[0] = playerInventario[ playerid ][ itemId4 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant4 ];
						playerInventario[ playerid ][ itemId4 ] = playerInventario[ playerid ][ itemQuant4 ] = -1;
					}
					case 5: {
					    Dados[0] = playerInventario[ playerid ][ itemId5 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant5 ];
						playerInventario[ playerid ][ itemId5 ] = playerInventario[ playerid ][ itemQuant5 ] = -1;
					}
					case 6: {
					    Dados[0] = playerInventario[ playerid ][ itemId6 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant6 ];
						playerInventario[ playerid ][ itemId6 ] = playerInventario[ playerid ][ itemQuant6 ] = -1;
					}
					case 7: {
					    Dados[0] = playerInventario[ playerid ][ itemId7 ];
					    Dados[1] = playerInventario[ playerid ][ itemQuant7 ];
						playerInventario[ playerid ][ itemId7 ] = playerInventario[ playerid ][ itemQuant7 ] = -1;
					}
				}

				Loop(wid, MAX_WEAPONS){
					if(WeaponData[wid][w_Ativa] == true) continue;

			        WeaponData[wid][w_ArmaID] = Dados[0];
			        WeaponData[wid][w_Balas] = Dados[1];

					WeaponData[wid][w_Pickup] = CreateDynamicObject(ItensDrop[WeaponData[wid][w_ArmaID]][i_Model], xPos[0], xPos[1], xPos[2]-1,  93.7, 120.0, 120.0, World, Int, -1, 300.0);
					WeaponData[wid][w_Label] = CreateDynamic3DTextLabel(ItensDrop[WeaponData[wid][w_ArmaID]][i_Name], 0xE9FAFF88, xPos[0], xPos[1], xPos[2]-1, 10);

			        WeaponData[wid][w_PosX] = xPos[0];
			        WeaponData[wid][w_PosY] = xPos[1];
			        WeaponData[wid][w_PosZ] = xPos[2];

					WeaponData[wid][w_Ativa] = true;

			        //RemovePlayerWeapon(playerid, WeaponData[wid][w_ArmaID]);

			        OnSalvarDados(playerid);
			        break;
				}

				format(str, sizeof str, "{88D1F5}> Servidor: voce dropou sua %s com %i balas!", ItensDrop[Dados[0]][i_Name], Dados[1]);
				SCM(playerid, -1, str);
			}
		}
		case CRAFT_MENU:
        {
			if(!response) return true;

		    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return true;

			new
				Float:xPos[3],
				wid = GetPVarInt(playerid, "CraftLoop")
			;

			GetPlayerPos( playerid, xPos[0], xPos[1], xPos[2]);

			if(!WeaponData[wid][w_Ativa]) return true;

			if(!IsPlayerInRangeOfPoint(playerid, 1.0, WeaponData[wid][w_PosX], WeaponData[wid][w_PosY], WeaponData[wid][w_PosZ])) return true;

            if(!GetPlayerFreeSlotWeapon( playerid )){
				if(!GetWeaponInPlayer(playerid, WeaponData[wid][w_ArmaID]))//Para nao bugar a parte de pegar so balas.
					return ErroMSG(playerid, "Voce nao possui slot's livres para mais armas!");
			}
			if(GetWeaponInSlotPlayer(playerid, GetWeaponSlot(WeaponData[wid][w_ArmaID]))){
				if(!GetWeaponInPlayer(playerid, WeaponData[wid][w_ArmaID]))
					return ErroMSG(playerid, "Voce possui uma arma que faz uso do mesmo slot que esta, guarde a sua atual no /inventario ou descarte!");
			}
			if(GetWeaponInPlayer(playerid, WeaponData[wid][w_ArmaID]) == 1)
            {
			    new Vars[2];
			    GetPlayerWeaponData(playerid, GetWeaponSlot(WeaponData[wid][w_ArmaID]), Vars[0], Vars[1]);
				GivePlayerWeaponEx(playerid, WeaponData[wid][w_ArmaID], (WeaponData[wid][w_Balas]+Vars[1]));

				static str[100];
				format(str, sizeof str, "> Servidor: voce pegou %i balas de: %s!", WeaponData[wid][w_Balas], ItensDrop[WeaponData[wid][w_ArmaID]][i_Name]);
				SCM(playerid, -1, str);
			}
   			else {
			    SetPlayerArma(playerid, WeaponData[wid][w_ArmaID], WeaponData[wid][w_Balas]);

				static str[100];
				format(str, sizeof str, "> Servidor: voce pegou uma %s com %i balas!", ItensDrop[WeaponData[wid][w_ArmaID]][i_Name], WeaponData[wid][w_Balas]);
				SCM(playerid, -1, str);
			}
			DestroyDynamicObject(WeaponData[wid][w_Pickup]);
			DestroyDynamic3DTextLabel(WeaponData[wid][w_Label]);

			WeaponData[wid][w_Ativa] = false;

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 850);
		}
		case DIALOG_IMOBILIARIA:{
			if(!response) return true;

            //listitem == 0  Selecionou a casa numero 1
            //listitem == 1  Selecionou a casa numero 2
            if(listitem) SetPVarInt(playerid, "Imo_option", PlayerInfo[ playerid ][ pHouse2 ]);
            else SetPVarInt(playerid, "Imo_option", PlayerInfo[ playerid ][ pHouse1 ]);

            ShowPlayerDialog(playerid, DIALOG_IMO_INDEX, DIALOG_STYLE_LIST, "Opçoes disponiveis", "{B5F7E5}>{F1F6F5} Modificar interior\n{B5F7E5}>{F1F6F5} Transferir Imovel", "Escolher", "Voltar");
		}
		case DIALOG_IMO_INDEX :{
		    if(!response) return callcmd::menu(playerid, "imobiliaria");

		    if(!listitem){ //Modificar interior
		        ShowPlayerDialog(playerid, DIALOG_IMO_INT, DIALOG_STYLE_INPUT, "Mudança de interior", "Informe o id do interior desejado:\n\nConfira os ID's dos interiores disponiveis no site\n\n"#SV_SITE"!", "Confirmar", "Cancelar");
			}
			else { //Transferir imovel
			    if(GetPVarInt(playerid, "E_Contrato")) return ErroMSG(playerid, "Voce ja tem um contrato ativo!");
			    ShowPlayerDialog(playerid, DIALOG_IMO_TRANSF, DIALOG_STYLE_INPUT, "Transferencia de Propriedade", "Informe o id do player e o valor desejado para enviarmos um contrato:\n\nExemplo: 3 30000, sendo 3 o ID do player e 30000 o valor que deseja negociar seu imovel!", "Enviar", "Voltar");
			}
		}
		case DIALOG_IMO_INT:
        {
		    if(!response) return callcmd::menu(playerid, "imobiliaria");

		    if(!IsNumeric(inputtext)) return true;

		    static Int_id, House;

		    Int_id = strval(inputtext);
            House = GetPVarInt(playerid, "Imo_option");

			if(Int_id < (sizeof(InteriorHouse)-1) || Int_id >= 0){

			    static str[ 129 ];

			    if(!InteriorHouse[Int_id][ h_value ])
                {
			        if(PlayerInfo[ playerid ][ Cash ] < InteriorHouse[Int_id][ h_eps ]) return ErroMSG(playerid, "Voce nao possui cash suficiente para adquirir este interior, confira o valor no site!");

                    PlayerInfo[ playerid ][ Cash ] -= InteriorHouse[Int_id][ h_eps ];

					format(str, sizeof str, "[ imobiliaria ] - O interior de sua residencia NÑ %i foi modificado para o id %i, valor: %i cash!", House, Int_id, InteriorHouse[Int_id][ h_eps ]);
					SCM(playerid, AzulMedio, str);

				}
				else {
					if(GetPlayerGrana( playerid ) < InteriorHouse[Int_id][ h_value ]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para adquirir este interior, confira o preço no site!");
					ActionPlayerGrana(playerid, "-", InteriorHouse[Int_id][ h_value ], 1);

					format(str, sizeof str, "[ imobiliaria ] - O interior de sua residencia NÑ %i foi modificado para o id %i valor R$ %s!", House, Int_id, FormatNumber(InteriorHouse[Int_id][ h_value ]));
					SCM(playerid, AzulMedio, str);
				}


	            SetHouseExit(House, InteriorHouse[Int_id][ h_Int ], InteriorHouse[Int_id][ h_Px ], InteriorHouse[Int_id][ h_Py ], InteriorHouse[Int_id][ h_Pz ], InteriorHouse[Int_id][ h_Sx ], InteriorHouse[Int_id][ h_Sy ], InteriorHouse[Int_id][ h_Sz ], InteriorHouse[Int_id][ h_Sa ]);

				OnSalvarDados( playerid );
				LoadHouseID(House);
				SaveHouse(House);
			}
		}
		case DIALOG_IMO_TRANSF:{
			if(!response) return callcmd::menu(playerid, "imobiliaria");

			static id, valor;

			if(sscanf(inputtext, "ud", id, valor)) return true;

			if(!ValorValido(id) || !ValorValido(valor)) return ErroMSG(playerid, "Valor invalido!");

			if(PlayerInfo[id][pHouse1] != 999 && PlayerInfo[id][pHouse2] != 999) return ErroMSG( playerid, "Este player ja possui duas casas!");
			if(GetPlayerDistanceFromPlayer(playerid, id) > 25.0) return ErroMSG( playerid, "Esta pessoa nao esta dentro da imobiliaria!");

			SetPVarInt(playerid, "E_Contrato", 1);
			SetPVarInt(id, "Contrato", 1);
			SetPVarInt(id, "C_ID", playerid);
			SetPVarInt(id, "C_Imovel", GetPVarInt(playerid, "Imo_option"));
			SetPVarInt(id, "C_Valor", valor);

            if(HouseInfo[GetPVarInt(playerid, "Imo_option")][hVipHouse] == true && !PlayerInfo[ id ][ pVIP ]) return ErroMSG(playerid, "Esta casa e exclusiva VIP ou SOCIO!");

			static str[ 129 ];
            SCM(playerid, -1, "{2DFEE6}{FFFFFF}Contrato enviado!");

			format(str, sizeof(str), "{2DFEE6}{FFFFFF}%s lhe enviou um contrato de venda de imovel, para mais detalhes {2DFEE6}/ver contrato{FFFFFF} .", GetNameEx( playerid ));
			SCM(id, -1, str);
		}
		case DIALOG_CONTRACT_OP:{
            if(!response){
                SetPVarInt(GetPVarInt(playerid, "C_ID"), "E_Contrato", 0);
                SetPVarInt(playerid, "Contrato", 0);
				SetPVarInt(playerid, "C_ID", INVALID_PLAYER_ID);
				SetPVarInt(playerid, "C_Imovel", -1);
				SetPVarInt(playerid, "C_Valor", -1);

				SCM(playerid, -1, "{89F7C0}{FFFFFF}Contrato cancelado!");
			}
			else {
			    static
			        Imovel,
			        Valor,
			        P_ID,
			        str[ 129 ]
				;
                Imovel = GetPVarInt(playerid, "C_Imovel");
				Valor = GetPVarInt(playerid, "C_Valor");
				P_ID = GetPVarInt(playerid, "C_ID");

				if(GetPlayerGrana( playerid ) < Valor) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente!"), ErroMSG(GetPVarInt(playerid, "C_ID"), "Este jogador nao possui dinheiro suficiente!"), 1;
                if(PlayerInfo[playerid][pHouse1] != 999 && PlayerInfo[playerid][pHouse2] != 999) return true;

				/*SetPVarInt(playerid, "C_ID", playerid);
				SetPVarInt(playerid, "C_Imovel", GetPVarInt(playerid, "Imo_option"));
				SetPVarInt(playerid, "C_Valor", valor);*/

				if(Imovel == PlayerInfo[P_ID][pHouse1]){
					if(PlayerInfo[P_ID][pHouse2] != 999){
					    PlayerInfo[P_ID][pHouse1] = PlayerInfo[P_ID][pHouse2];
					    PlayerInfo[P_ID][pHouse2] = 999;
					    if(PlayerInfo[P_ID][pSpawnType] == 2) PlayerInfo[P_ID][pSpawnType] = 1;
					}
					else {
                        PlayerInfo[P_ID][pSpawnType] = 3;
                        PlayerInfo[P_ID][pHouse1] = 999;
					}
				}
				else if(Imovel == PlayerInfo[P_ID][pHouse2]){
					if(PlayerInfo[P_ID][pSpawnType] == 2 && PlayerInfo[P_ID][pHouse1] != 999){
						PlayerInfo[P_ID][pSpawnType] = 1;
					}
					else {
                        PlayerInfo[P_ID][pSpawnType] = 3;
                    }
                    PlayerInfo[P_ID][pHouse2] = 999;
				}
				OnSalvarDados(P_ID);

				if(PlayerInfo[playerid][pHouse1] == 999){
                    PlayerInfo[playerid][pHouse1] = Imovel;
				}
				else PlayerInfo[playerid][pHouse2] = Imovel;
                HouseInfo[Imovel][hOwned] = 1;
				strmid(HouseInfo[Imovel][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);

                DestroyDynamicPickup(HousePickup[Imovel]);
                Delete3DTextLabel(HouseLabel[Imovel]);
                //DestroyDynamicMapIcon(HouseIcon[Imovel]);
                LoadHouseID(Imovel);

			    SaveHouse(Imovel);
                OnSalvarDados( playerid );

                PlaySoundForPlayer(playerid, 1149);
                PlaySoundForPlayer(P_ID, 1149);

				ActionPlayerGrana(playerid, "-", Valor, 1);
				ActionPlayerGrana(P_ID, "+", Valor, 1);

				format(str, sizeof(str), "[Imobiliaria] - %s Aceitou os termos do contrato da casa NÑ %i, valor: R$%s.", GetName(playerid), Imovel, FormatNumber(Valor));
				SCM(P_ID, AzulClaro, str);
				format(str, sizeof(str), "[Imobiliaria] - Voce fechou contrato com %s pela residencia NÑ %i, valor: R$%s.", GetName(P_ID), Imovel, FormatNumber(Valor));
				SCM(playerid, AzulClaro, str);

                format(STRLOG, sizeof(STRLOG), "[%s] %s Transferiu a sua residencia  NÑ %i para %s.", GetDateEx(), GetName(P_ID), Imovel, GetName(playerid));
                SLog("Casas.log", STRLOG);

                SetPVarInt(GetPVarInt(playerid, "C_ID"), "E_Contrato", 0);
                SetPVarInt(playerid, "Contrato", 0);
				SetPVarInt(playerid, "C_ID", INVALID_PLAYER_ID);
				SetPVarInt(playerid, "C_Imovel", -1);
				SetPVarInt(playerid, "C_Valor", -1);
			}
		}
		//	=================================================
		//  Sistema de Detran
		//	-------------------------------------------------

		case DIALOG_DETRAN:{
			if(!response) return true;

            switch( listitem ){
                case 0: {
                    if(possui_veh1[playerid] == 0)
                        return SendClientMessage(playerid, -1, "| DETRAN | Você não possui um veículo no SLOT 01!");

                    SetPVarInt( playerid, "Detran_ordem_carro", 1);  
                }
                case 1: {
                    if(possui_veh2[playerid] == 0)
                        return SendClientMessage(playerid, -1, "| DETRAN | Você não possui um veículo no SLOT 02!");

                    SetPVarInt( playerid, "Detran_ordem_carro", 2);
                }
                case 2:{
                    if(possui_veh3[playerid] == 0)
                        return SendClientMessage(playerid, -1, "| DETRAN | Você não possui um veículo no SLOT 03!");

                    SetPVarInt( playerid, "Detran_ordem_carro", 3);
                
                }
                case 3:{
                    if(possui_veh4[playerid] == 0)
                        return SendClientMessage(playerid, -1, "| DETRAN | Você não possui um veículo no SLOT 04!");

                    SetPVarInt( playerid, "Detran_ordem_carro", 4);
                
                }
                case 4:{
                    if(possui_veh5[playerid] == 0)
                        return SendClientMessage(playerid, -1, "| DETRAN | Você não possui um veículo no SLOT 05!");

                    SetPVarInt( playerid, "Detran_ordem_carro", 5);
                }

			}

			ShowPlayerDialog(playerid, DIALOG_DETRAN_INDEX, DIALOG_STYLE_LIST, "Opçoes disponiveis", "Anunciar um Veículo\nTransferir um Veiculo", "Escolher", "Voltar");
		}
		case DIALOG_DETRAN_INDEX :{
		    if(!response) return callcmd::menu(playerid, "detran");

		    switch(listitem){
                case 0:{
                    if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Necessario um celular para contato" );

                    ShowPlayerDialog(playerid, DIALOG_ANUNCIO, DIALOG_STYLE_INPUT, "{FA8072}Anunciar Venda", "{FA8072}Bem vindo ao {DAA520}Detran!\n\n{FA8072}Para anunciar seu veículo, digite abaixo o valor que deseja pedir por ele.\nFuturos compradores entrarão em contato com você via telefone.\n\n{DAA520}Digite abaixo o valor e clique em anunciar:", "Anunciar", "Voltar");
               }
                case 1:{
                    if(GetPVarInt(playerid, "V_Contrato")) return ErroMSG(playerid, "Voce ja tem um contrato ativo!");
                    ShowPlayerDialog(playerid, DIALOG_DT_IN_VALOR, DIALOG_STYLE_INPUT, "{FA8072}Transferencia de Veiculo", "{DAA520}Boas vindas á transferência de veículos do {FA8072}Detran!\n\n{DAA520}A transferência de veículo funciona em duas etapas: A primeira, você envia a proposta ao comprador\ne, se o mesmo aceitar, o Detran se encarrega de fazer a alteração da titularidade do veículo!\n\n{FF0000}OBS: Antes de transferir o veículo, acesse /meuscarros e salve seu veículo na frente do Detran,\npois o mesmo será respawnado na ultima posição salva.\n\n{FFD700}Para prosseguir, digite abaixo o valor pedido pelo veículo!", "Prosseguir", "Voltar");
                }
            }
		}
		case DIALOG_DETRAN_TRANSF:{
			if(!response) return callcmd::menu(playerid, "detran");

		//	new id, valor;
            new id;

			//if(sscanf(inputtext, "ud", id, valor)) return true;

			//if(!ValorValido(id) || !ValorValido(valor)) return ErroMSG(playerid, "Valor invalido!");
            if(sscanf(inputtext, "u", id))
                return ErroMSG(playerid, "| DETRAN | ID Invalido!");

            if(IsAVip( id )) {
                format(Celulas, sizeof(Celulas), JFSCON_5, PlayerName(id));
                if(DOF2::FileExists(Celulas)) 
                    return ErroMSG(playerid, "| DETRAN | Esse player ja alcançou o limite de veiculos!");
            }
            else
            {
                format(Celulas, sizeof(Celulas), JFSCON_3, PlayerName(id));
                if(DOF2::FileExists(Celulas)) 
                return ErroMSG(playerid, "| DETRAN | Esse player não é vip e ja alcançou o limite de veiculos!");                
            }

			//if(GetPlayerDistanceFromPlayer(playerid, id) > 25.0) return ErroMSG( playerid, "Esta pessoa nao esta dentro do detran!");

			SetPVarInt(playerid, "V_Contrato", 1);
			SetPVarInt(id, "Contratoenviado", 1);
			SetPVarInt(id, "V_ID", playerid);
			SetPVarInt(id, "V_Valor", Detran_Valor[playerid]);

            if(GetPVarInt(playerid, "Detran_ordem_carro") == 1){
                SetPVarInt(id, "V_Veiculo", JFSCarros[playerid][JFSModelo]);
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 2){
                SetPVarInt(id, "V_Veiculo", JFSCarros[playerid][JFSModelo_2]);
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 3){
                SetPVarInt(id, "V_Veiculo", JFSCarros[playerid][JFSModelo_3]);
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 4){
                SetPVarInt(id, "V_Veiculo", JFSCarros[playerid][JFSModelo_4]); 
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 5){
                SetPVarInt(id, "V_Veiculo", JFSCarros[playerid][JFSModelo_5]);
            }



			static str[ 129 ];
            SCM(playerid, -1, "{2DFEE6}{FFFFFF}Contrato enviado!");

			format(str, sizeof(str), "{abadac}[ Detran ] %s lhe enviou um contrato de venda de veiculo, para mais detalhes {00d8b4}/ver contrato{FFFFFF} .", GetNameEx( playerid ));
			SCM(id, -1, str);
		}
        case DIALOG_DT_IN_VALOR:{
            if(!response)
                return 1;

            if(sscanf(inputtext, "d", Detran_Valor[playerid]))
                return SendClientMessage(playerid, -1, "| DETRAN | Valor Invalido!");

            ShowPlayerDialog(playerid, DIALOG_DETRAN_TRANSF, DIALOG_STYLE_INPUT, "Transferencia de Veiculo", "Agora, insira o ID do jogador que você deseja enviar a proposta de transferência!", "Enviar", "Voltar");


        }
        case DIALOG_SLT_SLOT_DT:{
            switch(listitem){
                case 0:{ // Slot do veiculo 01!
                 //   new Cel1[MAX_PLAYER_NAME];
                    format(Celulas, sizeof(Celulas), JFSCON, PlayerName(playerid));

                    if(DOF2::FileExists(Celulas))
                        return ShowPlayerDialog(playerid, DIALOG_SLT_SLOT_DT, DIALOG_STYLE_LIST, "Selecione um Slot", "{FF0000}SLOT 01 EM USO!\nTransferir Veiculo para Slot 02\nTransferir Veiculo para Slot 03\nTransferir Veiculo para Slot 04\nTransferir Veiculo para Slot 05\n", "Confirmar", "Cancelar");


                    static
                        Veh,
                        Valor,
                        P_ID,
                        str[ 129 ]
                    ;

                    Veh = GetPVarInt(playerid, "V_Veiculo");
                    Valor = GetPVarInt(playerid, "V_Valor");
                    P_ID = GetPVarInt(playerid, "V_ID");

                    JFSCarros[playerid][JFSModelo] = PQPCarros[playerid][d_JFSModelo];
                    JFSCarros[playerid][JFSCorX] = PQPCarros[playerid][d_JFSCorX];
                    JFSCarros[playerid][JFSCorY] = PQPCarros[playerid][d_JFSCorY];
                    JFSCarros[playerid][JFSCorZ] = PQPCarros[playerid][d_JFSCorZ];
                    JFSCarros[playerid][JFSAngulo] = PQPCarros[playerid][d_JFSAngulo];
                    JFSCarros[playerid][JFSCor1] = PQPCarros[playerid][d_JFSCor1];
                    JFSCarros[playerid][JFSCor2] = PQPCarros[playerid][d_JFSCor2];
                    JFSCarros[playerid][Portas] = PQPCarros[playerid][d_Portas];
                    JFSCarros[playerid][Capo] = PQPCarros[playerid][d_Capo];
                    JFSCarros[playerid][Malas] = PQPCarros[playerid][d_Malas];
                    JFSCarros[playerid][Imposto] = PQPCarros[playerid][d_Imposto];
                    JFSCarros[playerid][Neon] = PQPCarros[playerid][d_Neon];
                    JFSCarros[playerid][NeonStatus] = PQPCarros[playerid][d_NeonStatus];
                    JFSCarros[playerid][Alarme] = PQPCarros[playerid][d_Alarme];
                    JFSCarros[playerid][Gasolina] = PQPCarros[playerid][d_Gasolina];

                    JFSID[playerid] = CreateVehicle(JFSCarros[playerid][JFSModelo], JFSCarros[playerid][JFSCorX], JFSCarros[playerid][JFSCorY], JFSCarros[playerid][JFSCorZ], JFSCarros[playerid][JFSAngulo], JFSCarros[playerid][JFSCor1] , JFSCarros[playerid][JFSCor2], 0);
                        //PutPlayerInVehicle(playerid, JFSID[playerid], 0);

                    SalvarArquivos(playerid);

                    SetPlayerCheckpoint(playerid, JFSCarros[playerid][JFSCorX], JFSCarros[playerid][JFSCorY], JFSCarros[playerid][JFSCorZ], 6.0);
                    SendClientMessage(playerid, 0xe34234,"{FA8072}| DETRAN | Transferência do veiculo completa! Seu novo veiculo esta marcado no mapa com um ponto vermelho!");


                    PlaySoundForPlayer(playerid, 1149);
                    PlaySoundForPlayer(P_ID, 1149);

                    ActionPlayerGrana(playerid, "-", Valor, 1);
                    ActionPlayerGrana(P_ID, "+", Valor, 1);

                    format(str, sizeof(str), "[Detran] - %s Aceitou os termos do contrato do veiculo ID:%i, valor: R$%s.", GetName(playerid), Veh, FormatNumber(Valor));
                    SCM(P_ID, AzulClaro, str);
                    format(str, sizeof(str), "[Detran] - Voce fechou contrato com %s pelo veiculo ID:%i, valor: R$%s.", GetName(P_ID), Veh, FormatNumber(Valor));
                    SCM(playerid, AzulClaro, str);

                }
                case 1:{
                 //   new Cel2[MAX_PLAYER_NAME];
                    format(Celulas, sizeof(Celulas), JFSCON_2, PlayerName(playerid));

                    if(DOF2::FileExists(Celulas))
                        return ShowPlayerDialog(playerid, DIALOG_SLT_SLOT_DT, DIALOG_STYLE_LIST, "Selecione um Slot", "Transferir Veiculo para Slot 01\n{FF0000}SLOT 02 EM USO!\nTransferir Veiculo para Slot 03\nTransferir Veiculo para Slot 04\nTransferir Veiculo para Slot 05\n", "Confirmar", "Cancelar"); 

                    static
                        Veh,
                        Valor,
                        P_ID,
                        str[ 129 ]
                    ;
                    Veh = GetPVarInt(playerid, "V_Veiculo");
                    Valor = GetPVarInt(playerid, "V_Valor");
                    P_ID = GetPVarInt(playerid, "V_ID");

                    JFSCarros[playerid][JFSModelo_2] = PQPCarros[playerid][d_JFSModelo];
                    JFSCarros[playerid][JFSCorX_2] = PQPCarros[playerid][d_JFSCorX];
                    JFSCarros[playerid][JFSCorY_2] = PQPCarros[playerid][d_JFSCorY];
                    JFSCarros[playerid][JFSCorZ_2] = PQPCarros[playerid][d_JFSCorZ];
                    JFSCarros[playerid][JFSAngulo_2] = PQPCarros[playerid][d_JFSAngulo];
                    JFSCarros[playerid][JFSCor1_2] = PQPCarros[playerid][d_JFSCor1];
                    JFSCarros[playerid][JFSCor2_2] = PQPCarros[playerid][d_JFSCor2];
                    JFSCarros[playerid][Portas_2] = PQPCarros[playerid][d_Portas];
                    JFSCarros[playerid][Capo_2] = PQPCarros[playerid][d_Capo];
                    JFSCarros[playerid][Malas_2] = PQPCarros[playerid][d_Malas];
                    JFSCarros[playerid][Imposto_2] = PQPCarros[playerid][d_Imposto];
                    JFSCarros[playerid][Neon_2] = PQPCarros[playerid][d_Neon];
                    JFSCarros[playerid][NeonStatus_2] = PQPCarros[playerid][d_NeonStatus];
                    JFSCarros[playerid][Alarme_2] = PQPCarros[playerid][d_Alarme];
                    JFSCarros[playerid][Gasolina_2] = PQPCarros[playerid][d_Gasolina];

                    JFSID_2[playerid] = CreateVehicle(JFSCarros[playerid][JFSModelo_2], JFSCarros[playerid][JFSCorX_2], JFSCarros[playerid][JFSCorY_2], JFSCarros[playerid][JFSCorZ_2], JFSCarros[playerid][JFSAngulo_2], JFSCarros[playerid][JFSCor1_2] , JFSCarros[playerid][JFSCor2_2], 0);
                    //PutPlayerInVehicle(playerid, JFSID[playerid], 0);

                    SalvarArquivos_2(playerid);

                    SetPlayerCheckpoint(playerid, JFSCarros[playerid][JFSCorX_2], JFSCarros[playerid][JFSCorY_2], JFSCarros[playerid][JFSCorZ_2], 6.0);
                    SendClientMessage(playerid, 0xe34234,"{FA8072}| DETRAN | Transferência do veiculo completa! Seu novo veiculo esta marcado no mapa com um ponto vermelho!");


                    PlaySoundForPlayer(playerid, 1149);
                    PlaySoundForPlayer(P_ID, 1149);

                    ActionPlayerGrana(playerid, "-", Valor, 1);
                    ActionPlayerGrana(P_ID, "+", Valor, 1);

                    format(str, sizeof(str), "[Detran] - %s Aceitou os termos do contrato do veiculo ID:%i, valor: R$%s.", GetName(playerid), Veh, FormatNumber(Valor));
                    SCM(P_ID, AzulClaro, str);
                    format(str, sizeof(str), "[Detran] - Voce fechou contrato com %s pelo veiculo ID:%i, valor: R$%s.", GetName(P_ID), Veh, FormatNumber(Valor));
                    SCM(playerid, AzulClaro, str);

                }
                case 2:{
                  //  new Cel3[MAX_PLAYER_NAME];
                    format(Celulas, sizeof(Celulas), JFSCON_3, PlayerName(playerid));

                    if(DOF2::FileExists(Celulas))
                        return ShowPlayerDialog(playerid, DIALOG_SLT_SLOT_DT, DIALOG_STYLE_LIST, "Selecione um Slot", "Transferir Veiculo para Slot 01\nTransferir Veiculo para Slot 02\n{FF0000}SLOT 03 EM USO!\nTransferir Veiculo para Slot 04\nTransferir Veiculo para Slot 05\n", "Confirmar", "Cancelar");                

                    static
                        Veh,
                        Valor,
                        P_ID,
                        str[ 129 ]
                    ;
                    Veh = GetPVarInt(playerid, "V_Veiculo");
                    Valor = GetPVarInt(playerid, "V_Valor");
                    P_ID = GetPVarInt(playerid, "V_ID");

                    JFSCarros[playerid][JFSModelo_3] = PQPCarros[playerid][d_JFSModelo];
                    JFSCarros[playerid][JFSCorX_3] = PQPCarros[playerid][d_JFSCorX];
                    JFSCarros[playerid][JFSCorY_3] = PQPCarros[playerid][d_JFSCorY];
                    JFSCarros[playerid][JFSCorZ_3] = PQPCarros[playerid][d_JFSCorZ];
                    JFSCarros[playerid][JFSAngulo_3] = PQPCarros[playerid][d_JFSAngulo];
                    JFSCarros[playerid][JFSCor1_3] = PQPCarros[playerid][d_JFSCor1];
                    JFSCarros[playerid][JFSCor2_3] = PQPCarros[playerid][d_JFSCor2];
                    JFSCarros[playerid][Portas_3] = PQPCarros[playerid][d_Portas];
                    JFSCarros[playerid][Capo_3] = PQPCarros[playerid][d_Capo];
                    JFSCarros[playerid][Malas_3] = PQPCarros[playerid][d_Malas];
                    JFSCarros[playerid][Imposto_3] = PQPCarros[playerid][d_Imposto];
                    JFSCarros[playerid][Neon_3] = PQPCarros[playerid][d_Neon];
                    JFSCarros[playerid][NeonStatus_3] = PQPCarros[playerid][d_NeonStatus];
                    JFSCarros[playerid][Alarme_3] = PQPCarros[playerid][d_Alarme];
                    JFSCarros[playerid][Gasolina_3] = PQPCarros[playerid][d_Gasolina];

                    JFSID_3[playerid] = CreateVehicle(JFSCarros[playerid][JFSModelo_3], JFSCarros[playerid][JFSCorX_3], JFSCarros[playerid][JFSCorY_3], JFSCarros[playerid][JFSCorZ_3], JFSCarros[playerid][JFSAngulo_3], JFSCarros[playerid][JFSCor1_3] , JFSCarros[playerid][JFSCor2_3], 0);
                    //PutPlayerInVehicle(playerid, JFSID[playerid], 0);

                    SalvarArquivos_3(playerid);

                    SetPlayerCheckpoint(playerid, JFSCarros[playerid][JFSCorX_3], JFSCarros[playerid][JFSCorY_3], JFSCarros[playerid][JFSCorZ_3], 6.0);
                    SendClientMessage(playerid, 0xe34234,"{FA8072}| DETRAN | Transferência do veiculo completa! Seu novo veiculo esta marcado no mapa com um ponto vermelho!");


                    PlaySoundForPlayer(playerid, 1149);
                    PlaySoundForPlayer(P_ID, 1149);

                    ActionPlayerGrana(playerid, "-", Valor, 1);
                    ActionPlayerGrana(P_ID, "+", Valor, 1);

                    format(str, sizeof(str), "[Detran] - %s Aceitou os termos do contrato do veiculo ID:%i, valor: R$%s.", GetName(playerid), Veh, FormatNumber(Valor));
                    SCM(P_ID, AzulClaro, str);
                    format(str, sizeof(str), "[Detran] - Voce fechou contrato com %s pelo veiculo ID:%i, valor: R$%s.", GetName(P_ID), Veh, FormatNumber(Valor));
                    SCM(playerid, AzulClaro, str);
                }
                case 3:{
                    if(!IsAVip( playerid )) 
                        return SendClientMessage(playerid, -1, "| DETRAN | Slots 4 e 5 estão disponíveis apenas para jogadores VIPS!");


                    new Cel4[MAX_PLAYER_NAME];
                    format(Cel4, sizeof(Cel4), JFSCON_4, PlayerName(playerid));

                    if(DOF2::FileExists(Cel4))
                        return ShowPlayerDialog(playerid, DIALOG_SLT_SLOT_DT, DIALOG_STYLE_LIST, "Selecione um Slot", "Transferir Veiculo para Slot 01\nTransferir Veiculo para Slot 02\nTransferir Veiculo para Slot 03\nT{FF0000}SLOT 04 EM USO!\nTransferir Veiculo para Slot 05\n", "Confirmar", "Cancelar");
                
                    static
                        Veh,
                        Valor,
                        P_ID,
                        str[ 129 ]
                    ;
                    Veh = GetPVarInt(playerid, "V_Veiculo");
                    Valor = GetPVarInt(playerid, "V_Valor");
                    P_ID = GetPVarInt(playerid, "V_ID");

                    JFSCarros[playerid][JFSModelo_4] = PQPCarros[playerid][d_JFSModelo];
                    JFSCarros[playerid][JFSCorX_4] = PQPCarros[playerid][d_JFSCorX];
                    JFSCarros[playerid][JFSCorY_4] = PQPCarros[playerid][d_JFSCorY];
                    JFSCarros[playerid][JFSCorZ_4] = PQPCarros[playerid][d_JFSCorZ];
                    JFSCarros[playerid][JFSAngulo_4] = PQPCarros[playerid][d_JFSAngulo];
                    JFSCarros[playerid][JFSCor1_4] = PQPCarros[playerid][d_JFSCor1];
                    JFSCarros[playerid][JFSCor2_4] = PQPCarros[playerid][d_JFSCor2];
                    JFSCarros[playerid][Portas_4] = PQPCarros[playerid][d_Portas];
                    JFSCarros[playerid][Capo_4] = PQPCarros[playerid][d_Capo];
                    JFSCarros[playerid][Malas_4] = PQPCarros[playerid][d_Malas];
                    JFSCarros[playerid][Imposto_4] = PQPCarros[playerid][d_Imposto];
                    JFSCarros[playerid][Neon_4] = PQPCarros[playerid][d_Neon];
                    JFSCarros[playerid][NeonStatus_4] = PQPCarros[playerid][d_NeonStatus];
                    JFSCarros[playerid][Alarme_4] = PQPCarros[playerid][d_Alarme];
                    JFSCarros[playerid][Gasolina_4] = PQPCarros[playerid][d_Gasolina];

                    JFSID_4[playerid] = CreateVehicle(JFSCarros[playerid][JFSModelo_4], JFSCarros[playerid][JFSCorX_4], JFSCarros[playerid][JFSCorY_4], JFSCarros[playerid][JFSCorZ_4], JFSCarros[playerid][JFSAngulo_4], JFSCarros[playerid][JFSCor1_4] , JFSCarros[playerid][JFSCor2_4], 0);
                    //PutPlayerInVehicle(playerid, JFSID[playerid], 0);

                    SalvarArquivos_4(playerid);

                    SetPlayerCheckpoint(playerid, JFSCarros[playerid][JFSCorX_4], JFSCarros[playerid][JFSCorY_4], JFSCarros[playerid][JFSCorZ_4], 6.0);
                    SendClientMessage(playerid, 0xe34234,"{FA8072}| DETRAN | Transferência do veiculo completa! Seu novo veiculo esta marcado no mapa com um ponto vermelho!");


                    PlaySoundForPlayer(playerid, 1149);
                    PlaySoundForPlayer(P_ID, 1149);

                    ActionPlayerGrana(playerid, "-", Valor, 1);
                    ActionPlayerGrana(P_ID, "+", Valor, 1);

                    format(str, sizeof(str), "[Detran] - %s Aceitou os termos do contrato do veiculo ID:%i, valor: R$%s.", GetName(playerid), Veh, FormatNumber(Valor));
                    SCM(P_ID, AzulClaro, str);
                    format(str, sizeof(str), "[Detran] - Voce fechou contrato com %s pelo veiculo ID:%i, valor: R$%s.", GetName(P_ID), Veh, FormatNumber(Valor));
                    SCM(playerid, AzulClaro, str);

                }
                case 4:{
                    if(!IsAVip( playerid )) 
                        return SendClientMessage(playerid, -1, "| DETRAN | Slots 4 e 5 estão disponíveis apenas para jogadores VIPS!");


                    new Cel5[MAX_PLAYER_NAME];
                    format(Cel5, sizeof(Cel5), JFSCON_5, PlayerName(playerid));

                    if(DOF2::FileExists(Cel5))
                        return ShowPlayerDialog(playerid, DIALOG_SLT_SLOT_DT, DIALOG_STYLE_LIST, "Selecione um Slot", "Transferir Veiculo para Slot 01\nTransferir Veiculo para Slot 02\nTransferir Veiculo para Slot 03\nTransferir Veiculo para Slot 04\n{FF0000}SLOT 05 EM USO!\n", "Confirmar", "Cancelar");                      

                    static
                        Veh,
                        Valor,
                        P_ID,
                        str[ 129 ]
                    ;

                    Veh = GetPVarInt(playerid, "V_Veiculo");
                    Valor = GetPVarInt(playerid, "V_Valor");
                    P_ID = GetPVarInt(playerid, "V_ID");

                    JFSCarros[playerid][JFSModelo_5] = PQPCarros[playerid][d_JFSModelo];
                    JFSCarros[playerid][JFSCorX_5] = PQPCarros[playerid][d_JFSCorX];
                    JFSCarros[playerid][JFSCorY_5] = PQPCarros[playerid][d_JFSCorY];
                    JFSCarros[playerid][JFSCorZ_5] = PQPCarros[playerid][d_JFSCorZ];
                    JFSCarros[playerid][JFSAngulo_5] = PQPCarros[playerid][d_JFSAngulo];
                    JFSCarros[playerid][JFSCor1_5] = PQPCarros[playerid][d_JFSCor1];
                    JFSCarros[playerid][JFSCor2_5] = PQPCarros[playerid][d_JFSCor2];
                    JFSCarros[playerid][Portas_5] = PQPCarros[playerid][d_Portas];
                    JFSCarros[playerid][Capo_5] = PQPCarros[playerid][d_Capo];
                    JFSCarros[playerid][Malas_5] = PQPCarros[playerid][d_Malas];
                    JFSCarros[playerid][Imposto_5] = PQPCarros[playerid][d_Imposto];
                    JFSCarros[playerid][Neon_5] = PQPCarros[playerid][d_Neon];
                    JFSCarros[playerid][NeonStatus_5] = PQPCarros[playerid][d_NeonStatus];
                    JFSCarros[playerid][Alarme_5] = PQPCarros[playerid][d_Alarme];
                    JFSCarros[playerid][Gasolina_5] = PQPCarros[playerid][d_Gasolina];

                    JFSID_5[playerid] = CreateVehicle(JFSCarros[playerid][JFSModelo_5], JFSCarros[playerid][JFSCorX_5], JFSCarros[playerid][JFSCorY_5], JFSCarros[playerid][JFSCorZ_5], JFSCarros[playerid][JFSAngulo_5], JFSCarros[playerid][JFSCor1_5] , JFSCarros[playerid][JFSCor2_5], 0);
                    //PutPlayerInVehicle(playerid, JFSID[playerid], 0);

                    SalvarArquivos_5(playerid);

                    SetPlayerCheckpoint(playerid, JFSCarros[playerid][JFSCorX_5], JFSCarros[playerid][JFSCorY_5], JFSCarros[playerid][JFSCorZ_5], 6.0);
                    SendClientMessage(playerid, 0xe34234,"{FA8072}| DETRAN | Transferência do veiculo completa! Seu novo veiculo esta marcado no mapa com um ponto vermelho!");


                    PlaySoundForPlayer(playerid, 1149);
                    PlaySoundForPlayer(P_ID, 1149);

                    ActionPlayerGrana(playerid, "-", Valor, 1);
                    ActionPlayerGrana(P_ID, "+", Valor, 1);

                    format(str, sizeof(str), "[Detran] - %s Aceitou os termos do contrato do veiculo ID:%i, valor: R$%s.", GetName(playerid), Veh, FormatNumber(Valor));
                    SCM(P_ID, AzulClaro, str);
                    format(str, sizeof(str), "[Detran] - Voce fechou contrato com %s pelo veiculo ID:%i, valor: R$%s.", GetName(P_ID), Veh, FormatNumber(Valor));
                    SCM(playerid, AzulClaro, str);

                }

            }


        }
		case DIALOG_CONTRACT_DETRAN:{
            if(!response){
                SetPVarInt(GetPVarInt(playerid, "V_ID"), "V_Contrato", 0);
                SetPVarInt(playerid, "Contratoenviado", 0);
				SetPVarInt(playerid, "V_ID", INVALID_PLAYER_ID);
				SetPVarInt(playerid, "V_Veicuclo", -1);
				SetPVarInt(playerid, "V_Valor", -1);

				SCM(playerid, -1, "{89F7C0}{FFFFFF}Contrato cancelado!");
			}
			else {
			    static
			        //Veh,
			        Valor,
			        P_ID
			       // str[ 129 ]
				;
                //Veh = GetPVarInt(playerid, "V_Veiculo");
				//Valor = GetPVarInt(playerid, "V_Valor");
				P_ID = GetPVarInt(playerid, "V_ID");

				if(GetPlayerGrana( playerid ) < Valor) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente!"), ErroMSG(GetPVarInt(playerid, "C_ID"), "Este jogador nao possui dinheiro suficiente!"), 1;


                ShowPlayerDialog(playerid, DIALOG_SLT_SLOT_DT, DIALOG_STYLE_LIST, "Selecione um Slot", "Transferir Veiculo para Slot 01\nTransferir Veiculo para Slot 02\nTransferir Veiculo para Slot 03\nTransferir Veiculo para Slot 04\nTransferir Veiculo para Slot 05\n", "Confirmar", "Cancelar");

                new str_pqp[100]
                ;
                if(GetPVarInt(P_ID, "Detran_ordem_carro") == 1){
                    format(str_pqp, sizeof(str_pqp), JFSCON, PlayerName(P_ID));

                    PQPCarros[playerid][d_JFSModelo] = DOF2::GetInt(str_pqp, "Modelo");
                    PQPCarros[playerid][d_JFSCorX] = DOF2::GetFloat(str_pqp, "CorX");
                    PQPCarros[playerid][d_JFSCorY] = DOF2::GetFloat(str_pqp, "CorY");
                    PQPCarros[playerid][d_JFSCorZ] = DOF2::GetFloat(str_pqp, "CorZ");
                    PQPCarros[playerid][d_JFSAngulo] = DOF2::GetFloat(str_pqp, "Angulo");
                    PQPCarros[playerid][d_JFSCor1] = DOF2::GetInt(str_pqp, "Cor1");
                    PQPCarros[playerid][d_JFSCor2] = DOF2::GetInt(str_pqp, "Cor2");
                    PQPCarros[playerid][d_Portas] = DOF2::GetInt(str_pqp, "Portas");
                    PQPCarros[playerid][d_Capo] = DOF2::GetInt(str_pqp, "Capo");
                    PQPCarros[playerid][d_Malas] = DOF2::GetInt(str_pqp, "Malas");
                    PQPCarros[playerid][d_Imposto] = DOF2::GetInt(str_pqp, "Imposto");
                    PQPCarros[playerid][d_Neon] = DOF2::GetInt(str_pqp, "Neon");
                    PQPCarros[playerid][d_NeonStatus] = DOF2::GetInt(str_pqp, "NeonStatus");
                    PQPCarros[playerid][d_Alarme] = DOF2::GetInt(str_pqp, "Alarme");
                    PQPCarros[playerid][d_Gasolina] = DOF2::GetInt(str_pqp, "Gasolina"); 

                    DOF2::RemoveFile(str_pqp);
                    DestroyVehicle(JFSID[P_ID]);
                } else if(GetPVarInt(P_ID, "Detran_ordem_carro") == 2){
                    format(str_pqp, sizeof(str_pqp), JFSCON_2, PlayerName(P_ID)); 

                    PQPCarros[playerid][d_JFSModelo] = DOF2::GetInt(str_pqp, "Modelo");
                    PQPCarros[playerid][d_JFSCorX] = DOF2::GetFloat(str_pqp, "CorX");
                    PQPCarros[playerid][d_JFSCorY] = DOF2::GetFloat(str_pqp, "CorY");
                    PQPCarros[playerid][d_JFSCorZ] = DOF2::GetFloat(str_pqp, "CorZ");
                    PQPCarros[playerid][d_JFSAngulo] = DOF2::GetFloat(str_pqp, "Angulo");
                    PQPCarros[playerid][d_JFSCor1] = DOF2::GetInt(str_pqp, "Cor1");
                    PQPCarros[playerid][d_JFSCor2] = DOF2::GetInt(str_pqp, "Cor2");
                    PQPCarros[playerid][d_Portas] = DOF2::GetInt(str_pqp, "Portas");
                    PQPCarros[playerid][d_Capo] = DOF2::GetInt(str_pqp, "Capo");
                    PQPCarros[playerid][d_Malas] = DOF2::GetInt(str_pqp, "Malas");
                    PQPCarros[playerid][d_Imposto] = DOF2::GetInt(str_pqp, "Imposto");
                    PQPCarros[playerid][d_Neon] = DOF2::GetInt(str_pqp, "Neon");
                    PQPCarros[playerid][d_NeonStatus] = DOF2::GetInt(str_pqp, "NeonStatus");
                    PQPCarros[playerid][d_Alarme] = DOF2::GetInt(str_pqp, "Alarme");
                    PQPCarros[playerid][d_Gasolina] = DOF2::GetInt(str_pqp, "Gasolina");

                    DOF2::RemoveFile(str_pqp);  
                    DestroyVehicle(JFSID[P_ID]);                
                }
                else if(GetPVarInt(P_ID, "Detran_ordem_carro") == 3){
                    format(str_pqp, sizeof(str_pqp), JFSCON_3, PlayerName(P_ID)); 

                    PQPCarros[playerid][d_JFSModelo] = DOF2::GetInt(str_pqp, "Modelo");
                    PQPCarros[playerid][d_JFSCorX] = DOF2::GetFloat(str_pqp, "CorX");
                    PQPCarros[playerid][d_JFSCorY] = DOF2::GetFloat(str_pqp, "CorY");
                    PQPCarros[playerid][d_JFSCorZ] = DOF2::GetFloat(str_pqp, "CorZ");
                    PQPCarros[playerid][d_JFSAngulo] = DOF2::GetFloat(str_pqp, "Angulo");
                    PQPCarros[playerid][d_JFSCor1] = DOF2::GetInt(str_pqp, "Cor1");
                    PQPCarros[playerid][d_JFSCor2] = DOF2::GetInt(str_pqp, "Cor2");
                    PQPCarros[playerid][d_Portas] = DOF2::GetInt(str_pqp, "Portas");
                    PQPCarros[playerid][d_Capo] = DOF2::GetInt(str_pqp, "Capo");
                    PQPCarros[playerid][d_Malas] = DOF2::GetInt(str_pqp, "Malas");
                    PQPCarros[playerid][d_Imposto] = DOF2::GetInt(str_pqp, "Imposto");
                    PQPCarros[playerid][d_Neon] = DOF2::GetInt(str_pqp, "Neon");
                    PQPCarros[playerid][d_NeonStatus] = DOF2::GetInt(str_pqp, "NeonStatus");
                    PQPCarros[playerid][d_Alarme] = DOF2::GetInt(str_pqp, "Alarme");
                    PQPCarros[playerid][d_Gasolina] = DOF2::GetInt(str_pqp, "Gasolina");

                    DOF2::RemoveFile(str_pqp);  
                    DestroyVehicle(JFSID[P_ID]);

                }
                else if(GetPVarInt(P_ID, "Detran_ordem_carro") == 4){
                    format(str_pqp, sizeof(str_pqp), JFSCON_4, PlayerName(P_ID)); 

                    PQPCarros[playerid][d_JFSModelo] = DOF2::GetInt(str_pqp, "Modelo");
                    PQPCarros[playerid][d_JFSCorX] = DOF2::GetFloat(str_pqp, "CorX");
                    PQPCarros[playerid][d_JFSCorY] = DOF2::GetFloat(str_pqp, "CorY");
                    PQPCarros[playerid][d_JFSCorZ] = DOF2::GetFloat(str_pqp, "CorZ");
                    PQPCarros[playerid][d_JFSAngulo] = DOF2::GetFloat(str_pqp, "Angulo");
                    PQPCarros[playerid][d_JFSCor1] = DOF2::GetInt(str_pqp, "Cor1");
                    PQPCarros[playerid][d_JFSCor2] = DOF2::GetInt(str_pqp, "Cor2");
                    PQPCarros[playerid][d_Portas] = DOF2::GetInt(str_pqp, "Portas");
                    PQPCarros[playerid][d_Capo] = DOF2::GetInt(str_pqp, "Capo");
                    PQPCarros[playerid][d_Malas] = DOF2::GetInt(str_pqp, "Malas");
                    PQPCarros[playerid][d_Imposto] = DOF2::GetInt(str_pqp, "Imposto");
                    PQPCarros[playerid][d_Neon] = DOF2::GetInt(str_pqp, "Neon");
                    PQPCarros[playerid][d_NeonStatus] = DOF2::GetInt(str_pqp, "NeonStatus");
                    PQPCarros[playerid][d_Alarme] = DOF2::GetInt(str_pqp, "Alarme");
                    PQPCarros[playerid][d_Gasolina] = DOF2::GetInt(str_pqp, "Gasolina");

                    DOF2::RemoveFile(str_pqp);
                    DestroyVehicle(JFSID[P_ID]);                      
                }
                else if(GetPVarInt(P_ID, "Detran_ordem_carro") == 5){
                    format(str_pqp, sizeof(str_pqp), JFSCON_5, PlayerName(P_ID));

                    PQPCarros[playerid][d_JFSModelo] = DOF2::GetInt(str_pqp, "Modelo");
                    PQPCarros[playerid][d_JFSCorX] = DOF2::GetFloat(str_pqp, "CorX");
                    PQPCarros[playerid][d_JFSCorY] = DOF2::GetFloat(str_pqp, "CorY");
                    PQPCarros[playerid][d_JFSCorZ] = DOF2::GetFloat(str_pqp, "CorZ");
                    PQPCarros[playerid][d_JFSAngulo] = DOF2::GetFloat(str_pqp, "Angulo");
                    PQPCarros[playerid][d_JFSCor1] = DOF2::GetInt(str_pqp, "Cor1");
                    PQPCarros[playerid][d_JFSCor2] = DOF2::GetInt(str_pqp, "Cor2");
                    PQPCarros[playerid][d_Portas] = DOF2::GetInt(str_pqp, "Portas");
                    PQPCarros[playerid][d_Capo] = DOF2::GetInt(str_pqp, "Capo");
                    PQPCarros[playerid][d_Malas] = DOF2::GetInt(str_pqp, "Malas");
                    PQPCarros[playerid][d_Imposto] = DOF2::GetInt(str_pqp, "Imposto");
                    PQPCarros[playerid][d_Neon] = DOF2::GetInt(str_pqp, "Neon");
                    PQPCarros[playerid][d_NeonStatus] = DOF2::GetInt(str_pqp, "NeonStatus");
                    PQPCarros[playerid][d_Alarme] = DOF2::GetInt(str_pqp, "Alarme");
                    PQPCarros[playerid][d_Gasolina] = DOF2::GetInt(str_pqp, "Gasolina");

                    DOF2::RemoveFile(str_pqp);
                    DestroyVehicle(JFSID[P_ID]);                       
                }

           //     SetPlayerCheckpoint(playerid, JFSCarros[playerid][JFSCorX], JFSCarros[playerid][JFSCorY], JFSCarros[playerid][JFSCorZ], 6.0);

				OnSalvarDados(P_ID);

		//		strmid(VeiculoInfo[Veh][vDono], GetName(playerid), 0, strlen(GetName(playerid)), 255);

		//	    OnSalvarVehicle( Veh );
       //         OnSalvarDados( playerid );

        /*        PlaySoundForPlayer(playerid, 1149);
                PlaySoundForPlayer(P_ID, 1149);

				ActionPlayerGrana(playerid, "-", Valor, 1);
				ActionPlayerGrana(P_ID, "+", Valor, 1);

				format(str, sizeof(str), "[Detran] - %s Aceitou os termos do contrato do veiculo ID:%i, valor: R$%s.", GetName(playerid), Veh, FormatNumber(Valor));
				SCM(P_ID, AzulClaro, str);
				format(str, sizeof(str), "[Detran] - Voce fechou contrato com %s pelo veiculo ID:%i, valor: R$%s.", GetName(P_ID), Veh, FormatNumber(Valor));
				SCM(playerid, AzulClaro, str);*/


                SetPVarInt(GetPVarInt(playerid, "V_ID"), "V_Contrato", 0);
                SetPVarInt(playerid, "Contratoenviado", 0);
				SetPVarInt(playerid, "V_ID", INVALID_PLAYER_ID);
				SetPVarInt(playerid, "V_Imovel", -1);
				SetPVarInt(playerid, "V_Valor", -1);

			}
		}
		case DIALOG_ANUNCIO:{
			if( !response ) return callcmd::menu(playerid, "detran");

			if(!IsNumeric(inputtext)) return ErroMSG(playerid, "Somente numeros");

			new
				valor;

			valor = strval(inputtext);

			if(!ValorValido(valor)) return ErroMSG(playerid, "Valor invalido!");


			static str[ 129 ];

            if(GetPVarInt(playerid, "Detran_ordem_carro") == 1){

            format(str, sizeof(str), "{FA8072}| DETRAN | %s esta vendendo seu %s por $%i, utilize /ligar %i .", 
                GetNameEx( playerid ), 
                SkVeh[JFSCarros[playerid][JFSModelo]-400], 
                valor, 
                CelularInfo[playerid][ pNumero ]
            );                
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 2){

            format(str, sizeof(str), "{FA8072}| DETRAN | %s esta vendendo seu %s por $%i, utilize /ligar %i .", 
                GetNameEx( playerid ), 
                SkVeh[JFSCarros[playerid][JFSModelo_2]-400], 
                valor, 
                CelularInfo[playerid][ pNumero ]
            );                
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 3){

            format(str, sizeof(str), "{FA8072}| DETRAN | %s esta vendendo seu %s por $%i, utilize /ligar %i .", 
                GetNameEx( playerid ), 
                SkVeh[JFSCarros[playerid][JFSModelo_3]-400], 
                valor, 
                CelularInfo[playerid][ pNumero ]
            );                
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 4){

            format(str, sizeof(str), "{FA8072}| DETRAN | %s esta vendendo seu %s por $%i, utilize /ligar %i .", 
                GetNameEx( playerid ), 
                SkVeh[JFSCarros[playerid][JFSModelo_4]-400], 
                valor, 
                CelularInfo[playerid][ pNumero ]
            );                
            }
            else if(GetPVarInt(playerid, "Detran_ordem_carro") == 5){

            format(str, sizeof(str), "{FA8072}| DETRAN | %s esta vendendo seu %s por $%i, utilize /ligar %i .", 
                GetNameEx( playerid ), 
                SkVeh[JFSCarros[playerid][JFSModelo_5]-400], 
                valor, 
                CelularInfo[playerid][ pNumero ]
            );                
            }
			SendClientMessageToAll(-1, str);


		}
		case DIALOG_DINAMITE:{
			if(!response) return true;

			callcmd::dinamite(playerid);
		}
	}
	return 1;
}
////{7CFAB9}â¢ {FFFFFF}Carregar Tuning\n
/*OpenVehPainel( playerid, conceid){

    VehKeyID[ playerid ] = conceid;

    static strbox[400];
    static strtitle[80];

    format(strtitle, sizeof(strtitle), "..:: Menu Veicular ::..   Veiculo: %s", SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vModel]-400]);

	format(strbox, sizeof(strbox),
            "{7CFAB9}â¢ {FFFFFF}Salvar/Estacionar\n\
            {7CFAB9}â¢ {FFFFFF}Portas %s\n\
            {7CFAB9}â¢ {FFFFFF}Capo %s\n\
            {7CFAB9}â¢ {FFFFFF}Porta-Malas %s\n\
            {7CFAB9}â¢ {FFFFFF}Impostos %s\n\
            {7CFAB9}â¢ {FFFFFF}Alarme %s\n\
            {7CFAB9}â¢ {FFFFFF}Neon %s\n\
            {7CFAB9}â¢ {FFFFFF}Gps-Localizar",
            VeiculoInfo[conceid][vDoors] == true ? ("{51EB3F} Abertas"):("{FF0000} Trancadas"),
            GetVehicleParameters(VeiculoInfo[conceid][vVeiculo], 4) != 1 ? ("{FF0000} fechado"):("{51EB3F} Aberto"),
            GetVehicleParameters(VeiculoInfo[conceid][vVeiculo], 5) != 1 ? ("{FF0000} fechado"):("{51EB3F} Aberto"),
            //VeiculoInfo[conceid][vDoc] == 1 ? ("{51EB3F} pagos"):("{C7D1C6}Atrasado"),
            VeiculoInfo[conceid][vAlarme] == true ? ("{51EB3F} Ligado"):("{FF0000} Desligado"),
            VeiculoInfo[conceid][vNeonStatus] == true ? ("{51EB3F} Ligado"):("{FF0000} Desligado"));

    ShowPlayerDialog(playerid, MENU_VEICULO, DIALOG_STYLE_LIST, strtitle, strbox, "Selecionar", "Cancelar");
	return true;
}
*/
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(PlayerInfo[ playerid ][ pLogger ] == 1)
	{
        if(CelularInfo[ clickedplayerid ][ pCell ] == 0) return ErroMSG(playerid, "Ele(a) nao possui um aparelho celular!");

		static str[ 129 ];
		SCM(playerid, -1, "{F3F781}~~~~~~~~~~ {FFFFFF}Agenda {F3F781}~~~~~~~~~~");

		format(str, sizeof str, "{F3F781}Nome: {FFFFFF}%s", GetNameEx(clickedplayerid));
		SCM(playerid, -1, str);
		format(str, sizeof str, "{F3F781}Numero: {FFFFFF}%i", CelularInfo[clickedplayerid][ pNumero ]);
		SCM(playerid, -1, str);
		format(str, sizeof str, "{F3F781}Recebendo SMS: %s", CelularInfo[clickedplayerid][ pBlockSMS ] == 1 ? ("{FF0000}Nao"):("{01DF01}Sim"));
		SCM(playerid, -1, str);
		format(str, sizeof str, "{F3F781}Recebendo Ligaçoes: %s", CelularInfo[clickedplayerid][ pBlockCall ]  == 1 ? ("{FF0000}Nao"):("{01DF01}Sim"));
		SCM(playerid, -1, str);
		SCM(playerid, -1, "{F3F781}~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		PlaySoundForPlayer(playerid, 1138);
	}
	return 1;
}


public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == Entrada[14][playerid]) // local da senha
    {
        if(DOF2_FileExists(CI(playerid)))
        {
            Loop(o, sizeof(Entrada)){ PlayerTextDrawHide(playerid, Entrada[ o ][ playerid ]);}

            CancelSelectTextDraw(playerid);
            ShowPlayerDialog(playerid, DIALOG_LOGAR, DIALOG_STYLE_PASSWORD, "Login", "Insira sua senha de acesso abaixo!","Entrar","Voltar");

            } else {

            Loop(o, sizeof(Entrada)){ PlayerTextDrawHide(playerid, Entrada[ o ][ playerid ]);}

            CancelSelectTextDraw(playerid);
            ShowPlayerDialog(playerid, DIALOG_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", "Insira uma senha valida abaixo!","Registrar","Voltar");
        }
    }

    if(playertextid == Entrada[8][playerid]) // registrar / logar
    {
        if(DOF2_FileExists(CI(playerid)))
        {
            if(PlayerInfo[playerid][DigitouSenha] == false) return 1;

            OnVerificarLogin( playerid, PlayerInfo[playerid][SenhaDigitada]);
            PlayerInfo[playerid][DigitouSenha] = false;

            } else {

            if(PlayerInfo[playerid][DigitouSenha] == false) return 1;

            Registrar(playerid, PlayerInfo[playerid][SenhaDigitada]);
            PlayerInfo[playerid][DigitouSenha] = false;
        }
    }
	return true;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    //skin org
    if(clickedid == EscolherSkinOrg[ playerid ][0]) //esquerda
    {
        if(orgsInvitedID[playerid] == 1) //pm
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]--;

            if(SkinEscolhida[ playerid ] <= 0) SkinEscolhida[ playerid ] = sizeof( SkinsPM );

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsPM[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
        } else
        if(orgsInvitedID[playerid] == 2) //bope
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]--;

            if(SkinEscolhida[ playerid ] <= 0) SkinEscolhida[ playerid ] = sizeof( SkinsBOPE );

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsBOPE[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
        } else
        if(orgsInvitedID[playerid] == 3)//cv
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]--;

            if(SkinEscolhida[ playerid ] <= 0) SkinEscolhida[ playerid ] = sizeof( SkinsCV );

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsCV[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));

        } else
        if(orgsInvitedID[playerid] == 4)//pcc
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]--;

            if(SkinEscolhida[ playerid ] <= 0) SkinEscolhida[ playerid ] = sizeof( SkinsPCC );

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsPCC[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
        }

        return true;
    }

    if(clickedid == EscolherSkinOrg[ playerid ][1]) //direita
    {
        if(orgsInvitedID[playerid] == 1) //pm
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]++;

            if(SkinEscolhida[ playerid ] >= (sizeof( SkinsPM ))) SkinEscolhida[ playerid ] = 0;

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsPM[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
        } else
        if(orgsInvitedID[playerid] == 2) //bope
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]++;

            if(SkinEscolhida[ playerid ] >= (sizeof( SkinsBOPE ))) SkinEscolhida[ playerid ] = 0;

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsBOPE[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
        } else
        if(orgsInvitedID[playerid] == 3)//cv
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]++;

            if(SkinEscolhida[ playerid ] >= (sizeof( SkinsCV ))) SkinEscolhida[ playerid ] = 0;

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsCV[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));

        } else
        if(orgsInvitedID[playerid] == 4)//pcc
        {
            DestroyDynamicActor(ActorSkin[ playerid ]);
            SkinEscolhida[ playerid ]++;

            if(SkinEscolhida[ playerid ] >= (sizeof( SkinsPCC ))) SkinEscolhida[ playerid ] = 0;

            PlaySoundForPlayer(playerid, 1039);
            DestroyDynamicActor(ActorSkin[ playerid ]);

            ActorSkin[ playerid ] = CreateDynamicActor(SkinsPCC[SkinEscolhida[ playerid ]][skID], 2606.2554,-1267.7814,81.1481,5.8937);
            SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
        }
        return true;
    }

    if(clickedid == EscolherSkinOrg[ playerid ][2]) //escolher
    {
        CancelSelectTextDraw( playerid );
        TirarTextSkinOrg(playerid);

        UnFreeze( playerid );

        SCM(playerid, -1, "{DAF778}Skin escolhida com sucesso!");

        SetPlayerSkinEx(playerid, Skins[SkinEscolhida[ playerid ]][skID]);
        PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);

        SetPlayerPos(playerid, posAnterior[playerid][0], posAnterior[playerid][1], posAnterior[playerid][2]);
        SetPlayerInterior(playerid, intAnterior[playerid]);
        SetCameraBehindPlayer( playerid );

        DestroyDynamicActor(Actor[ playerid ]);
        ActorSkin[ playerid ] = -1;
        SkinEscolhida[ playerid ] = 0;
        orgsInvitedID[playerid] = 0;

        return true;
    }


    ///=============================================================

    //Seletor de Skin
    if(clickedid == MenuSelectSkin[ playerid ][0]) //esquerda
    {
        DestroyDynamicActor(ActorSkin[ playerid ]);
        SkinEscolhida[ playerid ]--;

        if(SkinEscolhida[ playerid ] <= 0) SkinEscolhida[ playerid ] = sizeof( Skins );

        PlaySoundForPlayer(playerid, 1039);
        DestroyDynamicActor(ActorSkin[ playerid ]);

        ActorSkin[ playerid ] = CreateDynamicActor(Skins[SkinEscolhida[ playerid ]][skID], 215.8539,-154.9566,1000.5234,155.3609);
        SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));

        static TextStr[ 100 ];
        format(TextStr, sizeof TextStr, "~w~ID: ~r~%d ~w~VALOR: ~r~$ %s", Skins[SkinEscolhida[ playerid ]][skID], FormatNumber(Skins[SkinEscolhida[ playerid ]][skVALOR]));
        TextDrawSetString(MenuSelectSkin[playerid][5], TextStr);

        return true;
    }

    if(clickedid == MenuSelectSkin[ playerid ][1]) //direita
    {
        DestroyDynamicActor(ActorSkin[ playerid ]);
        SkinEscolhida[ playerid ]++;

        if(SkinEscolhida[ playerid ] >= (sizeof( Skins ))) SkinEscolhida[ playerid ] = 0;

        PlaySoundForPlayer(playerid, 1039);
        DestroyDynamicActor(ActorSkin[ playerid ]);

        ActorSkin[ playerid ] = CreateDynamicActor(Skins[SkinEscolhida[ playerid ]][skID], 215.8539,-154.9566,1000.5234,155.3609);
        SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));

        static TextStr[ 100 ];
        format(TextStr, sizeof TextStr, "~w~ID: ~r~%d ~w~VALOR: ~r~$ %s", Skins[SkinEscolhida[ playerid ]][skID], FormatNumber(Skins[SkinEscolhida[ playerid ]][skVALOR]));
        TextDrawSetString(MenuSelectSkin[playerid][5], TextStr);

        return true;
    }

    if(clickedid == MenuSelectSkin[playerid][8]) //cancelar
    {
        CancelSelectTextDraw( playerid );
        TirarTextLojaSkin(playerid);

        //SCM(playerid, -1, "Voce cancelou a compra!");

        SkinEscolhida[ playerid ] = 0;
        DestroyDynamicActor(ActorSkin[ playerid ]);
        ActorSkin[ playerid ] = -1;

        UnFreeze( playerid );

        if(EntrouLojaSkin[playerid] == 1)//zip
        {
            SetPlayerPos(playerid, 161.0859, -83.6697, 1001.8046);
            SetPlayerInterior(playerid, 18);
            SetPlayerVirtualWorld(playerid, 0);
        } else

        if(EntrouLojaSkin[playerid] == 2)//binco
        {
            SetPlayerPos(playerid, 207.5289, -101.1268, 1005.2578);
            SetPlayerInterior(playerid, 15);
            SetPlayerVirtualWorld(playerid, 0);
        } else

        if(EntrouLojaSkin[playerid] == 3)//pro
        {
            //SetPlayerPosEx(playerid, 207.5289, -101.1268, 1005.2578, 0.0, 5, 0);
        } else

        if(EntrouLojaSkin[playerid] == 4)//subur
        {
            //SetPlayerPosEx(playerid, 207.5289, -101.1268, 1005.2578, 0.0, 5, 0);
        }
        SetCameraBehindPlayer( playerid );

        PlaySoundForPlayer(playerid, 1055);
        return true;
    }

    if(clickedid == MenuSelectSkin[playerid][7]) //comprar
    {
        if(GetPlayerGrana( playerid ) < Skins[SkinEscolhida[ playerid ]][skVALOR]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para comprar esta skin!");

        DestroyDynamicActor(ActorSkin[ playerid ]);

        static string[ 200 ];
        format(string, sizeof( string ), "{F3F3F0}Voce deseja confirmar a compra por R$ %s ?\ncaso queira realizar a comprar confirme no botao abaixo!", FormatNumber(Skins[SkinEscolhida[ playerid ]][skVALOR]));
        ShowPlayerDialog(playerid, SCONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "..:: Confirmaçao de compra ::..", string, "Confirmar", "Cancelar");
        return true;
    }

    if(clickedid == Text:INVALID_TEXT_DRAW && MenuConceType[ playerid ])
    {
        CancelSelectTextDraw( playerid );
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
        TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

		//SCM(playerid, -1, "Voce cancelou a compra!");

		MenuConceType[ playerid ] = 0;
		CurrentVehicle[ playerid ] = 0;
		DestroyVehicle(VeiculoConce[ playerid ]);
		VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;
		UnFreeze( playerid );
		SetPlayerPosEx(playerid, 2116.125488,-1171.545776,25.104999,266.049468, 0, 0);
		SetCameraBehindPlayer( playerid );

        PlaySoundForPlayer(playerid, 1055);
	}

	else if(clickedid == ConceMenu[ playerid ][ 5 ])
    {
        CurrentVehicle[ playerid ]--;

        if(MenuConceType[ playerid ] == 1)
        {
	        if(CurrentVehicle[ playerid ] <= 0) CurrentVehicle[ playerid ] = sizeof( ConceTerrestreVeiculos );

	        PlaySoundForPlayer(playerid, 1039);
			DestroyVehicle(VeiculoConce[ playerid ]);

            VeiculoConce[ playerid ] = CreateVehicle(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model], 2126.834716,-1161.488403,29.589717,32.282352, 1, 1, 100);
		    SetVehicleVirtualWorld(VeiculoConce[ playerid ], (playerid+1));

			static TextStr[ 100 ], TypeV[ 10 ];

			if(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level] != 100) // 100 por ser um level improvavel e servira como type vip
			{
			    format(TypeV, 10, "%i", ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level]);
			}
			else format(TypeV, 10, "~g~VIP");

            if(PlayerInfo[playerid][VeiculoCash] == 0)
            {
    			format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~%s~n~%s", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo],
    			FormatNumber(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]), TypeV);

            } else if(PlayerInfo[playerid][VeiculoCash] == 1)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~0 (loja)~n~%s", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo], TypeV);
            }

			TextDrawSetString(ConceMenu[ playerid ][ 2 ], TextStr);
		}
		else if(MenuConceType[ playerid ] == 2)
        {
	        if(CurrentVehicle[ playerid ] <= 0) CurrentVehicle[ playerid ] = sizeof( ConceTerrestreBikes );

	        PlaySoundForPlayer(playerid, 1039);
			DestroyVehicle(VeiculoConce[ playerid ]);

            VeiculoConce[ playerid ] = CreateVehicle(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model], 2126.834716,-1161.488403,29.589717,32.282352, 1, 1, 100);
		    SetVehicleVirtualWorld(VeiculoConce[ playerid ], (playerid+1));

			static TextStr[ 100 ], TypeV[ 10 ], TypeC[ 10 ];

			if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level] != 100) // 100 por ser um level improvavel e servira como type vip
			{
			    format(TypeV, 10, "%i", ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level]);
			}
			else format(TypeV, 10, "~g~VIP");

            if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo] != 0) // 0 por ser uma bicicleta
			{
			    format(TypeC, 10, "%i", ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo]);
			}
			else format(TypeC, 10, "~g~Sem Consumo");

			if(PlayerInfo[playerid][VeiculoCash] == 0)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~%s~n~%s", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo],
                FormatNumber(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]), TypeV);

            } else if(PlayerInfo[playerid][VeiculoCash] == 1)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~0 (loja)~n~%s", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo], TypeV);
            }

			TextDrawSetString(ConceMenu[ playerid ][ 2 ], TextStr);
		}
		return true;
	}
	else if(clickedid == ConceMenu[ playerid ][ 6 ])
    {
	    CurrentVehicle[ playerid ]++;

	    if(MenuConceType[ playerid ] == 1){

		    if(CurrentVehicle[ playerid ] >= (sizeof( ConceTerrestreVeiculos ))) CurrentVehicle[ playerid ] = 0;

	        PlaySoundForPlayer(playerid, 1039);
	        DestroyVehicle(VeiculoConce[ playerid ]);
	        VeiculoConce[ playerid ] = CreateVehicle(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model], 2126.834716,-1161.488403,29.589717,32.282352, 1, 1, 100);
		    SetVehicleVirtualWorld(VeiculoConce[ playerid ], (playerid+1));

			static TextStr[ 100 ], TypeV[ 10 ];

			if(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level] != 100) // 100 por ser um level improvavel e servira como type vip
			{
			    format(TypeV, 10, "%i", ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level]);
			}
			else format(TypeV, 10, "~g~VIP");

			if(PlayerInfo[playerid][VeiculoCash] == 0)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~%s~n~%s", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo],
                FormatNumber(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]), TypeV);

            } else if(PlayerInfo[playerid][VeiculoCash] == 1)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~0 (loja)~n~%s", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo], TypeV);
            }

			TextDrawSetString(ConceMenu[ playerid ][ 2 ], TextStr);
		}
		else if(MenuConceType[ playerid ] == 2)
        {

	        if(CurrentVehicle[ playerid ] >= (sizeof( ConceTerrestreBikes ))) CurrentVehicle[ playerid ] = 0;

	        PlaySoundForPlayer(playerid, 1039);
			DestroyVehicle(VeiculoConce[ playerid ]);


		    VeiculoConce[ playerid ] = CreateVehicle(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model], 2126.834716,-1161.488403,29.589717,32.282352, 1, 1, 100);
		    SetVehicleVirtualWorld(VeiculoConce[ playerid ], (playerid+1));

			static TextStr[ 100 ], TypeV[ 10 ], TypeC[ 10 ];

			if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level] != 100) // 100 por ser um level improvavel e servira como type vip
			{
			    format(TypeV, 10, "%i", ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level]);
			}
			else format(TypeV, 10, "~g~VIP");

            if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo] != 0) // 0 por ser uma bicicleta
			{
			    format(TypeC, 10, "%i", ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo]);
			}
			else format(TypeC, 10, "~g~Sem Consumo");

			if(PlayerInfo[playerid][VeiculoCash] == 0)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~%s~n~%s", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo],
                FormatNumber(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]), TypeV);

            } else if(PlayerInfo[playerid][VeiculoCash] == 1)
            {
                format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~0 (loja)~n~%s", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo], TypeV);
            }

			TextDrawSetString(ConceMenu[ playerid ][ 2 ], TextStr);
		}
		return true;
	}
	else if(clickedid == ConceMenu[ playerid ][ 7 ])
    {
	    if(MenuConceType[ playerid ] == 1)
        {
            if(PlayerInfo[playerid][VeiculoCash] == 1)
            {
                if(GetPlayerGrana( playerid ) < ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para comprar este veiculo!");
                if(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level] == 100 && PlayerInfo[ playerid ][pVIP] == 0) return ErroMSG(playerid, "Este veiculo so pode ser adquirido por um player VIP ou SOCIO!");

                new string[ 200 ];
                format(string, sizeof( string ), "{F3F3F0}Voce deseja confirmar a compra do {F7FA89}%s {F3F3F0}por R$ 0 (loja) ?\ncaso queira realizar a comprar confirme no botao abaixo!", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400]);
                ShowPlayerDialog(playerid, VCONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "..:: Confirmaçao de compra ::..", string, "Confirmar", "Cancelar");

            }
            else if(PlayerInfo[playerid][VeiculoCash] == 0)
            {
                if(GetPlayerGrana( playerid ) < ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para comprar este veiculo!");
    		    if(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level] == 100 && PlayerInfo[ playerid ][pVIP] == 0) return ErroMSG(playerid, "Este veiculo so pode ser adquirido por um player VIP ou SOCIO!");

    			new string[ 200 ];
    			format(string, sizeof( string ), "{F3F3F0}Voce deseja confirmar a compra do {F7FA89}%s {F3F3F0}por R$ %s ?\ncaso queira realizar a comprar confirme no botao abaixo!", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], FormatNumber(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]));
    			ShowPlayerDialog(playerid, VCONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "..:: Confirmaçao de compra ::..", string, "Confirmar", "Cancelar");
    		}

		}
		else if(MenuConceType[ playerid ] == 2)
        {
            if(PlayerInfo[playerid][VeiculoCash] == 1)
            {
                if(GetPlayerGrana( playerid ) < ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_preco]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para comprar este veiculo!");
                if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level] == 100 && PlayerInfo[ playerid ][pVIP] == 0) return ErroMSG(playerid, "Este veiculo so pode ser adquirido por um player VIP ou SOCIO!");

                static string[ 200 ];
                format(string, sizeof( string ), "{F3F3F0}Voce deseja confirmar a compra da {F7FA89}%s {F3F3F0}por R$ 0 (loja) ?\ncaso queira realizar a comprar confirme no botao abaixo!", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400]);
                ShowPlayerDialog(playerid, VCONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "..:: Confirmaçao de compra ::..", string, "Confirmar", "Cancelar");

            }
            else if(PlayerInfo[playerid][VeiculoCash] == 0)
            {
                if(GetPlayerGrana( playerid ) < ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_preco]) return ErroMSG(playerid, "Voce nao possui dinheiro suficiente para comprar este veiculo!");
                if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level] == 100 && PlayerInfo[ playerid ][pVIP] == 0) return ErroMSG(playerid, "Este veiculo so pode ser adquirido por um player VIP ou SOCIO!");

				static string[ 200 ];
				format(string, sizeof( string ), "{F3F3F0}Voce deseja confirmar a compra da {F7FA89}%s {F3F3F0}por R$ %s ?\ncaso queira realizar a comprar confirme no botao abaixo!", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], FormatNumber(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_preco]));
				ShowPlayerDialog(playerid, VCONFIRM_COMPRA, DIALOG_STYLE_MSGBOX, "..:: Confirmaçao de compra ::..", string, "Confirmar", "Cancelar");
			}
		}
		return true;
	}
	else if(clickedid == ConceMenu[ playerid ][ 8 ])
    {
	    CancelSelectTextDraw( playerid );
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
		TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
        TextDrawHideForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

		SCM(playerid, -1, "Voce fechou o menu");

		MenuConceType[ playerid ] = 0;
		CurrentVehicle[ playerid ] = 0;
		DestroyVehicle(VeiculoConce[ playerid ]);
		VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;
		UnFreeze( playerid );
		SetPlayerPosEx(playerid, 2116.125488,-1171.545776,25.104999,266.049468, 0, 0);
		SetCameraBehindPlayer( playerid );

        PlaySoundForPlayer(playerid, 1055);
        return true;
	}

	return true;
}

/*================================== COMANDOS =============================================*/




CMD:menu( playerid, params[])
{
	new
		sk_menu[50]
	;
	if(sscanf(params, "s[50]", sk_menu)) return true;


	if(!strcmp(sk_menu, "banco", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 2316.6213, -15.5158, 26.7421)){
    		PlaySoundForPlayer(playerid, 1052);
			ShowPlayerDialog(playerid, DIALOG_BANCO_HOME, DIALOG_STYLE_LIST, "Banco - Menu", "{F5D310}>{FFFFFF} Saldo da Conta Corrente\n{FF0000}>{FFFFFF} Deposito em Conta Corrente\n{12A402}>{FFFFFF} Saque\n{C38AF7}>{FFFFFF} Transferencia", "Escolher", "Fechar");
		}
	}
	if(!strcmp(sk_menu, "utilidades", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, -27.4749,-89.8407,1003.5469)){
    		PlaySoundForPlayer(playerid, 1052);
            ShowPlayerDialog(playerid, DIALOG_ULTILIDADES, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - Ultilidades", "Item\tValor\n{12A402}> {FFFFFF}GPS \t{3C982E}R${FFFFFF}300,00\n{FF0000}> {FFFFFF}Celular \t{3C982E}R${FFFFFF}200,00\n{FF4000}> {FFFFFF}Capacete \t{3C982E}R${FFFFFF}150,00\n{FA5882}> {FFFFFF}Creditos \t{3C982E}R${FFFFFF}10,00\n{00FFFF}> {FFFFFF}Galao de Gasolina \t{3C982E}R${FFFFFF}30,00\n{5C8A00}> {FFFFFF}Agenda \t{3C982E}R${FFFFFF}50,00", "Confirmar", "Cancelar");
	        SCM(playerid, Verde, "Voce esta vendo o menu da 24/7 !");
		}
	}
	else if(!strcmp(sk_menu, "empregos", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 361.2999,173.6999, 1008.4000)){
  			OpenPlayerMenu(playerid, 1);
		}
	}
	else if(!strcmp(sk_menu, "armas", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 314.2578, -134.1084, 999.6015))
        {
			SCM(playerid, Verde, "Voce esta vendo o menu da loja de armas Ammu Nation !");

            new dialog[60], str[350];

            format(dialog, sizeof(dialog), "Item\tValor\n");
            strcat(str, dialog);
            for(new item = 0; item < sizeof(ItemsAmmuNation); item++)
            {
                format(dialog, sizeof(dialog), "%s\t%d\n", ItemsAmmuNation[item][ItemNome], ItemsAmmuNation[item][ItemValor]);
                strcat(str, dialog);
            }
            ShowPlayerDialog(playerid, DIALOG_LOJA_ARMAS, DIALOG_STYLE_TABLIST_HEADERS, "AMMUNATIONS", str, "Escolher", "Fechar");
		}
	}
    else if(!strcmp(sk_menu, "conce", true)) //prokillerpa
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 2116.125488,-1171.545776,25.104999))
        {
            SCM(playerid, Verde, "Menu da concessionaria!");

            ShowPlayerDialog(playerid, DIALOG_LOJA_CONCE, DIALOG_STYLE_LIST, "CONCESSIONARIA", "Veiculos\nMotocicletas\nVender veiculo", "Escolher", "Fechar");

        }
	}
	else if(!strcmp(sk_menu, "tuning", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1649.7916, -1838.3610, 13.5452)
		|| IsPlayerInRangeOfPoint(playerid, 5.0, 1649.8812, -1830.0577, 13.5461))
        {
		    if(!IsPlayerInAnyVehicle( playerid )) return ErroMSG(playerid, "Voce precisa estar em um veiculo !");

            SCM(playerid, Verde, "Menu tuning!");

            ShowMenuTuning( playerid );
		}
	}
    else if(!strcmp(sk_menu, "lutas", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 771.0333, 12.7343, 1000.7002)){
  			OpenPlayerMenu(playerid, 11);
		}
	}
	else if(!strcmp(sk_menu, "autoescola", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, -2039.353271,-126.431694,-50.914062)){
	        PlaySoundForPlayer(playerid, 1139);
	        ShowPlayerDialog(playerid, DIALOG_AUTO_ESCOLA, DIALOG_STYLE_TABLIST_HEADERS, "Habilitaçoes",
			"Tipo\tPreço\tLevel\n\
            {7CF97C}>{FFFFFF} A - Motos\t$1.840,00\tN/A\n\
            {7CF97C}>{FFFFFF} B - Carros\t$2.550,00\tN/A\n\
            {7CF97C}>{FFFFFF} D - Onibus\t$3.900,00\t5\n\
            {7CF97C}>{FFFFFF} E - Caminhoes\t$5.830,00\t5\n\
            {7CF97C}>{FFFFFF} Hab. Aerea\t$100.000,00\t15\n\
            {7CF97C}>{FFFFFF} Hab. Nautica\t$50.000,00\t10\n\
            {7CF97C}>{FFFFFF} Licensa Especial\t$150.000,00\t50",
			"Selecionar", "Cancel");
		}
	}
	else if(!strcmp(sk_menu, "lanches", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1068.5289, -1793.5102, 13.6652) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, 582.1516, 852.7593, -42.7081) ||
            IsPlayerInRangeOfPoint(playerid, 5.0, -1903.0164, -1606.4281, 21.7564) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, 2160.2956, -1208.0113, 23.9620)  ||
			IsPlayerInRangeOfPoint(playerid, 5.0, 1716.40491, -1713.68848, 13.63900)  ||
            IsPlayerInRangeOfPoint(playerid, 5.0, 1501.278686,-1023.729125,23.811782)  ||
			IsPlayerInRangeOfPoint(playerid, 5.0, 1951.216796,-1769.125732,13.547272)  ||
			IsPlayerInRangeOfPoint(playerid, 5.0, 1213.5698, -1309.4743, 13.5572)){
	        PlaySoundForPlayer(playerid, 1139);

	        ShowPlayerDialog(playerid, DIALOG_LANCHONETES, DIALOG_STYLE_LIST, "Cardapio", "{2DFEE6}{FFFFFF}Lanches\n{2DFEE6}{FFFFFF}Bebidas", "Confirmar", "Cancelar");
	    }
	}
	else if(!strcmp(sk_menu, "pizzaria", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1373.6212, -0.9385, 1000.9316)){
	        PlaySoundForPlayer(playerid, 1139);

	        ShowPlayerDialog(playerid, DIALOG_PIZZARIA, DIALOG_STYLE_LIST, "Pizzaria", "{2DFEE6}{FFFFFF}Lanches\n{2DFEE6}{FFFFFF}Bebidas", "Confirmar", "Cancelar");
		}
	}
	else if(!strcmp(sk_menu, "acessorios", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.1092, -129.5366, 1003.5078))
        {
	        PlaySoundForPlayer(playerid, 1139);

            if(PlayerInfo[playerid][Mobile] == true)
            {
                SCM(playerid, -1, "Voce esta na plataforma ANDROID e nao sera possivel editar a localizacao do acessorio.");
                SCM(playerid, -1, "Essa opcao pode ser acessada pelo computador. Ou aguarde a proxima atualizaçao para usar.");
                //return 1;
            }

            new str[350];
			if(IsAVip(playerid)){
			    for (new i; i < sizeof AttachmentHeaders; i++){
					strcat(str, AttachmentHeaders[i]);
					strcat(str, "\n");
				}
				ShowPlayerDialog(playerid, DIALOG_BUY_TOYS, DIALOG_STYLE_LIST, "{FFFFFF}Acessorios {FFD734}VIP", str, "Selecionar", "Fechar");
			}
			else {
			    for (new i; i < sizeof AttachmentHeaders-1; i++) {
					strcat(str, AttachmentHeaders[i]);
					strcat(str, "\n");
				}
				ShowPlayerDialog(playerid, DIALOG_BUY_TOYS, DIALOG_STYLE_LIST, "{FFFFFF}Comprar meu Accessorio >>> {BAEE71}Tipo", str, "Selecionar", "Fechar");
			}
		}
	}
	else if(!strcmp(sk_menu, "hospital", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, -201.7175, -1741.5043, 675.7687)){
	        PlaySoundForPlayer(playerid, 1139);

	        static str[ 100 ];
			if(!PlayerInfo[ playerid ][ pPlanoSaude ]){

				SetPVarInt(playerid, "PlanOption", 1);
			    new box[ 500 ];

				strcat(box, "{FFFFFF}Ola,\n");
				strcat(box, "Com o plano de saude, a taxa paga ao utilizar os\nserviços do hospital e reduzida em 25(por cento)\n");
				strcat(box, "alem de ter um melhor atendimento, resultando em\numa quantidadede vida maior ao ser liberado!\n");
	            strcat(box, "Caso queira contratar o serviço, e preciso que pague\na primeira mensalidade do serviço na hora da contrataçao!\n\n");

	            format(str, 100, "O custo do plano e de: $%s a cada vez que UP", FormatNumber(CUSTO_PLANO_SAUDE));
				strcat(box, str);

				ShowPlayerDialog(playerid, DIALOG_HOSP_PLANOS, DIALOG_STYLE_MSGBOX, "Plano de Saude", box, "Contratar", "Cancelar");
			}
			else {
			    SetPVarInt(playerid, "PlanOption", 2);
				format(str, 100, "{FFFFFF}Ola,\nSabemos que o senhor(a) ja possui um plano de saude,\ndeseja realmente cancelar o mesmo ?");
				ShowPlayerDialog(playerid, DIALOG_HOSP_PLANOS, DIALOG_STYLE_MSGBOX, "Cancelamento do plano de saude", str, "Confirmar", "Cancelar");
			}
		}
	}
	else if(!strcmp(sk_menu, "loterica", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 822.8012, 2.5352, 1004.1796)){
	        PlaySoundForPlayer(playerid, 1139);
	        OpenPlayerMenu(playerid, 4);
		}
	}

	else if(!strcmp(sk_menu, "detran", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1797.4390, -1304.0562, 27.6718) || IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0900,-117.3085,1035.1719)){

            //new Celulas[MAX_PLAYER_NAME];
          /*  format(Celulas, sizeof(Celulas), JFSCON, PlayerName(playerid));
            if(!DOF2::FileExists(Celulas)) 
                return SendClientMessage(playerid, -1, "| DETRAN | Você não possui veiculos!");*/

            new str_pqp[300];
            possui_veh1[playerid] = 0;
            possui_veh2[playerid] = 0;
            possui_veh3[playerid] = 0;
            possui_veh4[playerid] = 0;
            possui_veh5[playerid] = 0;


            format(Celulas, sizeof(Celulas), JFSCON, PlayerName(playerid));
            if (DOF2::FileExists(Celulas)){
                possui_veh1[playerid] = 1;
            }
            format(Celulas, sizeof(Celulas), JFSCON_2, PlayerName(playerid));
            if (DOF2::FileExists(Celulas)){
                possui_veh2[playerid] = 1;
            }
            format(Celulas, sizeof(Celulas), JFSCON_3, PlayerName(playerid));
            if (DOF2::FileExists(Celulas)){
                possui_veh3[playerid] = 1;
            }
            format(Celulas, sizeof(Celulas), JFSCON_4, PlayerName(playerid));
            if (DOF2::FileExists(Celulas)){
                possui_veh4[playerid] = 1;
            }
            format(Celulas, sizeof(Celulas), JFSCON_5, PlayerName(playerid));
            if (DOF2::FileExists(Celulas)){
                possui_veh5[playerid] = 1;
            }

            if(PlayerInfo[playerid][pVIP] == 1 || PlayerInfo[playerid][pVIP] == 2 || PlayerInfo[playerid][pVIP] == 3){

                format(str_pqp, sizeof(str_pqp), "{FA8072}Veiculo 01: {4EEE94}%s\n{FA8072}Veiculo 02: {4EEE94}%s\n{FA8072}Veiculo 03: {4EEE94}%s\n{FA8072}Veiculo 04: {4EEE94}%s\n{FA8072}Veiculo 05: {4EEE94}%s\n",
                    possui_veh1[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo]-400]) : ("{D4D6D4}Slot Vazio"),
                    possui_veh2[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo_2]-400]) : ("{D4D6D4}Slot Vazio"),
                    possui_veh3[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo_3]-400]) : ("{D4D6D4}Slot Vazio"),
                    possui_veh4[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo_4]-400]) : ("{D4D6D4}Slot Vazio"),
                    possui_veh5[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo_5]-400]) : ("{D4D6D4}Slot Vazio"))
                ;
                ShowPlayerDialog(playerid, DIALOG_DETRAN, DIALOG_STYLE_LIST, "Detran", str_pqp, "Acessar", "Sair");
            }
            else{

                format(str_pqp, sizeof(str_pqp), "{FA8072}Veiculo 01: {4EEE94}%s\n{FA8072}Veiculo 02: {4EEE94}%s\n{FA8072}Veiculo 03: {4EEE94}%s\n",
                    possui_veh1[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo]-400]) : ("{D4D6D4}Slot Vazio"),
                    possui_veh2[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo_2]-400]) : ("{D4D6D4}Slot Vazio"),
                    possui_veh3[playerid] == 1 ? (SkVeh[JFSCarros[playerid][JFSModelo_3]-400]) : ("{D4D6D4}Slot Vazio"))
                ;
                ShowPlayerDialog(playerid, DIALOG_DETRAN, DIALOG_STYLE_LIST, "Detran", str_pqp, "Acessar", "Sair");        
            }
	   }
    }
	else if(!strcmp(sk_menu, "imobiliaria", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1797.4356, -1303.8337, 22.2109) || IsPlayerInRangeOfPoint(playerid, 3.0, 1490.7349,1306.0675,1093.2964)){
		    if(PlayerInfo[ playerid ][ pHouse1 ] == 999 && PlayerInfo[ playerid ][ pHouse2 ] == 999) return ErroMSG(playerid, "Voce nao possui nenhuma residencia!");

			PlaySoundForPlayer(playerid, 1139);

	        new
				str[ 550 ],
				id, id2,
				Box[ 700 ]
			;

			id = PlayerInfo[ playerid ][ pHouse1 ];
			id2 = PlayerInfo[ playerid ][ pHouse2 ];


			format(str, sizeof str, "{FDFDFA}Casa 1: NÂ° {EFFFA4}%i {FDFDFA}| Local: {EFFFA4}%s\n", id, GetAreaForCords(HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ]));
   			strcat(Box, str);

   			if(id2 != 999){
				format(str, sizeof str, "{FDFDFA}Casa 2: NÂ° {EFFFA4}%i {FDFDFA}| Local: {EFFFA4}%s\n", id2, GetAreaForCords(HouseInfo[id2][hEntranceX], HouseInfo[id2][hEntranceY], HouseInfo[id2][hEntranceZ]));
				strcat(Box, str);
			}
            ShowPlayerDialog( playerid, DIALOG_IMOBILIARIA, DIALOG_STYLE_LIST, "Selecione a residencia:", Box, "Selecionar", "Cancelar");
        }
	}
	return true;
}

CMD:iniciarrota( playerid )
{
	if(PlayerInfo[ playerid ][ pEmprego ] == MOnibus)
    {
		if(!IsPlayerInPlace(playerid, 1939.4639, -2228.4987, 2089.4638, -2148.4987)) return ErroMSG(playerid, "Voce nao esta na hq do seu emprego!");
        if(!EmpregoDuty[ playerid ]) return ErroMSG(playerid, "Voce precisa estar em modo trabalhando!");
		if(!IsBusVehicle(playerid)) return ErroMSG(playerid, "Voce precisa estar dentro do onibus!");

		SendClientMessage(playerid, Amarelo, "Aguarde, estamos localizando a proxima rota.");

		Freeze(playerid);
		SetTimerEx("RotaOnibus", TSegundos(4), false, "i", playerid );

		PlaySoundForPlayer(playerid, 1057);

		static sky[129];
		format(sky, sizeof(sky), "{D5F17A}%s %s iniciou uma nova rota!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O motorista"):("A motorista"), GetNameEx( playerid ));
		MessageProxPlayer(playerid, -1, 20.0, sky);
	}
    else if(PlayerInfo[ playerid ][ pEmprego ] == Lixeiro){

		if(!EmpregoDuty[ playerid ]) return ErroMSG(playerid, "Voce nao esta em modo trabalho!");
   	    if(!IsTrashVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta no caminhao de lixo!");
		if(!IsPlayerInPlace(playerid, -1959.5488, -1708.9702, -1789.5488, -1528.9702)) return ErroMSG(playerid, "Voce nao esta na hq do seu emprego!");

		GameTextForPlayer(playerid, "~y~Iniciando ~w~Rota", 2000, 1);
	    RotaLixeiro(playerid);
	}
	return true;
}

CMD:pegarlixo( playerid ){
    if(!IsTrashVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta no caminhao de lixo!");
	if(PlayerInfo[ playerid ][ pEmprego ] == Lixeiro){
		if(EmpregoDuty[ playerid ] == Lixeiro){
		    if(TrashCheck[ playerid ]){
		        if(TrashRoute[ playerid ] == 100){
			    	if(IsPlayerInRangeOfPoint( playerid, 10.0, CordsLixeiro[TrashCheck[ playerid ]][0], CordsLixeiro[TrashCheck[ playerid ]][1], CordsLixeiro[TrashCheck[ playerid ]][2])){
	                    TrashCheck[ playerid ]++;
						ProximoCheck( playerid );
					}
					else ErroMSG(playerid, "Voce nao esta proximo ao local!");
				}
				else if(TrashRoute[ playerid ] == 200){
			    	if(IsPlayerInRangeOfPoint( playerid, 10.0, CordsLixeiro2[TrashCheck[ playerid ]][0], CordsLixeiro2[TrashCheck[ playerid ]][1], CordsLixeiro2[TrashCheck[ playerid ]][2])){
	                    TrashCheck[ playerid ]++;
						ProximoCheck( playerid );
					}
					else ErroMSG(playerid, "Voce nao esta proximo ao local!");
				}
			}
		}
    	else ErroMSG(playerid, "Voce nao esta trabalhando!");
    }
    return true;
}

CMD:descarregar( playerid, params[] ){
	new
	    action[ 50 ]
	;
	if(sscanf(params, "s[50]", action)) return ErroMSG(playerid, "Use: /descarregar | caminhao | lixo | !");

    if(!strcmp(action, "lixo", true)){
        if(PlayerInfo[playerid][pEmprego] == Lixeiro){
			if(EmpregoDuty[ playerid ] == Lixeiro){
			  	if(TrashRoute[ playerid ] == 100){
				    if(TrashCheck[ playerid ] == 15){
				        if(IsPlayerInRangeOfPoint(playerid, 10.0, -1823.0755, -1590.3911, 23.0015)){
				            if(!IsTrashVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta no caminhao de Lixo!");

	                        InfoMSG(playerid, "Descarregando..");
	                        Freeze(playerid);
							SetTimerEx("Descarregar", TSegundos(5), false, "d", playerid);
						}
						else ErroMSG(playerid, "Voce nao esta no local de descarregar o lixo!");
					}
					else ErroMSG(playerid, "Voce nao completou sua rota!");
				}
				else if(TrashRoute[ playerid ] == 200){
				    if(TrashCheck[ playerid ] == 12){
				        if(IsPlayerInRangeOfPoint(playerid, 10.0, -1823.0755, -1590.3911, 23.0015)){
				            if(!IsTrashVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta no caminhao de Lixo!");

	                        InfoMSG(playerid, "Descarregando..");
	                        Freeze(playerid);
							SetTimerEx("Descarregar", TSegundos(5), false, "d", playerid);
						}
						else ErroMSG(playerid, "Voce nao esta no local de descarregar o lixo!");
					}
					else ErroMSG(playerid, "Voce nao completou sua rota!");
				}
			}
	    	else ErroMSG(playerid, "Voce nao esta trabalhando!");
	    }
	    else ErroMSG(playerid, "Voce nao e um Lixeiro!");
    }
    else if(!strcmp(action, "caminhao", true)){
        if(PlayerInfo[playerid][pEmprego] == Petroleiro){
			if(EmpregoDuty[ playerid ] == Petroleiro){
		        if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))){
                    if(!(IsPlayerInRangeOfPoint(playerid, 10.0, PostoPetrol[_SecurityPetrol[ playerid ]][px_], PostoPetrol[_SecurityPetrol[ playerid ]][py_], PostoPetrol[_SecurityPetrol[ playerid ]][pz_]))) return ErroMSG(playerid, "Voce nao esta no local indicado!");

					if(TraillerComb[ playerid ] > 0){
		                GameTextForPlayer(playerid, "~y~Descarregando ~w~Petroleo", 5000, 1);
						SetTimerEx("DescarregarTrucker", 10000, false, "i", playerid);
						Freeze( playerid );
					}
				}
			}
		}
	}
    return true;
}


CMD:detach( playerid ) {

	if(!IsPlayerInAnyVehicle( playerid )) return ErroMSG(playerid, "Voce nao esta em um veiculo.");
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return ErroMSG(playerid, "Voce nao tem um trailler attachado no seu veiculo.");
    if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)) return ErroMSG(playerid, "Voce nao esta dirigindo um veiculo.");
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	return true;
}

CMD:tocarmusica( playerid ) {
    if(PlayerInfo[playerid][musica] == 1)
    {
	ShowPlayerDialog(playerid, DIALOG_mp3tt, DIALOG_STYLE_INPUT, "{FF00FF}tMusica Online","Cole aqui o endereço do audio.\n{FFFFFF}Exemplo:\n{FFA500}http://site.com.br/musica/musica.mp3","Iniciar","Cancelar");
    }
	return true;
}

CMD:carregar( playerid )
{
	if(PlayerInfo[playerid][pEmprego] != Petroleiro) return true;
	if(EmpregoDuty[ playerid ] != Petroleiro) return true;

    if(PlayerInfo[playerid][Mobile] == false)
    {
	   if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return ErroMSG(playerid, "Voce nao tem um tanque para armazenar o petroleo");
    }

    if(!IsPlayerInPlace(playerid, -1120.0850, -760.2822, -970.0850, -600.2822)) return true;

	GameTextForPlayer(playerid, "~y~Carregando ~w~Caminhao", 5000, 1);
    SetTimerEx("CarregarTrucker", 10000, false, "i", playerid );
	Freeze( playerid );
	return true;
}

CMD:iniciarentregas( playerid )
{
	if(PlayerInfo[ playerid ][ pEmprego ] == Carteiro){
		if(PegouPacotes[playerid] == true){
			if(!InicioRota[playerid]){
				if(VehCarteiro(playerid))				{
					DisablePlayerCheckpoint( playerid );
					RotaCarteiro( playerid );
					InicioRota[playerid] = true;
					EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
					SCM(playerid, Amarelo, "Siga o ponto vermelho para efetuar a primeira entrega.");
				}
				else
				{
				    ErroMSG(playerid, "Voce nao esta em uma bicileta da empresa.");
				}
			}
			else
			{
				ErroMSG(playerid, "Voce ja iniciou uma rota.");
			}
		}
		else
		{
			ErroMSG(playerid, "Voce nao tem nenhum pacote de entregas!");
		}
    }
    return true;
}

CMD:entregar( playerid ){
	if(PlayerInfo[ playerid ][ pEmprego ] == Carteiro){
		if(EmpregoDuty[ playerid ] == Carteiro){
		    if(CartCheck[ playerid ]){
		    	if(IsPlayerInRangeOfPoint( playerid, 10.0, CarteiroLS[RotaSelecionada[playerid]][0], CarteiroLS[RotaSelecionada[playerid]][1], CarteiroLS[RotaSelecionada[playerid]][2])){
                    CartCheck[ playerid ]++;
					IniciarRota( playerid );
				}
				else ErroMSG(playerid, "Voce nao esta proximo ao local!");
			}
		}
    	else ErroMSG(playerid, "Voce nao esta trabalhando!");
    } else {
        ErroMSG(playerid, "Voce nao e um carteiro.");
	}
    return true;
}

CMD:deslocalizar( playerid)
{
    if(PlayerInfo[ playerid ][ pEmprego ] != Mecanico) return false;
    if(!EmpregoDuty[ playerid ]) return ErroMSG( playerid, "Voce nao esta trabalhando.");

    KillTimer(TimerLocalizar[playerid]);
	RemovePlayerMapIcon(playerid, 10);

    SCM(playerid, -1, "Localizacao desativada");
    return true;
}

CMD:localizar( playerid, params[] )
{
    if(PlayerInfo[ playerid ][ pEmprego ] != Mecanico) return false;

    new id;
    if(sscanf(params, "u", id)) return ErroMSG( playerid, "Use: /localizar [ id ]");
    if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");
    if(id == playerid) return ErroMSG( playerid, "Voce nao pode selecionar seu proprio ID.");
    if(!EmpregoDuty[ playerid ]) return ErroMSG( playerid, "Voce nao esta trabalhando.");

    KillTimer(TimerLocalizar[playerid]);
    RemovePlayerMapIcon(playerid, 10);

    new Float:Dx, Float:Dy, Float:Dz;
    GetPlayerPos(id, Dx, Dy, Dz);

    SetPlayerMapIcon(playerid, 10, Dx, Dy, Dz, 2, 0, MAPICON_GLOBAL);

    SCM(playerid, -1, "Localizacao ativada");
    TimerLocalizar[playerid] = SetTimerEx("AtualizaLocalizacao", 1000, true, "iifff", playerid, id, Dx, Dy, Dz);
    return true;
}

Public:AtualizaLocalizacao(playerid, id, Float:Dx, Float:Dy, Float:Dz)
{
    RemovePlayerMapIcon(playerid, 10);
    SetPlayerMapIcon(playerid, 10, Dx, Dy, Dz, 2, 0, MAPICON_GLOBAL);
    return 1;
}

CMD:consertar( playerid, params[] ){

    if(PlayerInfo[ playerid ][ pEmprego ] != Mecanico) return false;
	new id,
		valor,
		zString[120];

	if(sscanf(params, "ud", id, valor)) return ErroMSG( playerid, "Use: /concertar [ id ] [ preço ]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");
	if(id == playerid) return ErroMSG( playerid, "Voce nao pode selecionar seu proprio ID.");
	if(!EmpregoDuty[ playerid ]) return ErroMSG( playerid, "Voce nao esta trabalhando.");

	static Float:VehHealt;
	GetVehicleHealth(GetPlayerVehicleID(playerid), VehHealt);

	if( IsPlayerInAnyVehicle( id ) ){
		if(VehHealt <= 800)	{

			format(zString, sizeof(zString), "* Voce se ofereceu para concertar o carro de %s por R$%s .", GetName(id), FormatNumber(valor));
			SCM(playerid, Darkaqua, zString);
			format(zString, sizeof(zString), "* O Mecanico %s quer reparar seu carro por R$%s, (/aceitar ou /recusar mecanico) para confirmar.", GetName(playerid), FormatNumber(valor));
			SCM(id, Cinza, zString);
			Jogador[id] = playerid;
			Jogador[playerid] = id;
			PlayerInfo[ id ][pRepairValue] = valor;
			PlayerInfo[ id ][pRepairOffer] = 1;

		} else {
			ErroMSG (playerid, "Nao foi encontrado nenhum defeito no veiculo.");
		}
	}
    return true;
}


CMD:recusar(playerid, params[]){
	new opcao[20];
    if(sscanf(params, "s[20]", opcao)) return SCM(playerid, Verde, "Use: /recusar | mecanico |");

    if(!strcmp(opcao, "mecanico", true)){
		if(!PlayerInfo[playerid][pRepairOffer]) return ErroMSG( playerid, "Voce nao tem nenhuma oferta de um mecanico.");

		PlayerInfo[playerid][pRepairOffer] = 0;
		PlayerInfo[playerid][pRepairValue] = 0;
		Jogador[playerid] = 0;

		SCM(playerid, Vermelho, "Recusado com sucesso!");
	}
	return true;
}

CMD:pegarcervo( playerid ){
    if(Cacando{playerid}){
		static Rand; //Float:CordZ,

		Rand = CacaID{playerid};
        //GetPointZPos(CacaObjects[Rand][0], CacaObjects[Rand][1], CordZ);
		if(IsPlayerInRangeOfPoint(playerid, 2.0, CacaObjects[Rand][0], CacaObjects[Rand][1], CacaObjects[Rand][2]))
        {

			CacaID{playerid} = 0;
			Cacando{playerid} = false;
			PegouCaca{playerid} = false;
			PegouCervo{playerid} = true;
			CacaProgress{playerid} = 0;
			CacandoTemp{playerid} = 0;
			//Textdraw & Progress bar

			ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 1, 0);

	        SetTimerEx("CervoGrudado", 5000, false, "i", playerid);

			TextDrawHideForPlayer(playerid, DistanceCaca);

			DestroyPlayerProgressBar(playerid, CacaDistance[playerid]);

			SCM(playerid, -1, "{78F4D9}Amarrando cervo a seu corpo para leva-lo para venda.. ");
		}
	}
	return true;
}

CMD:vendercaca( playerid ){
	if(!PegouCervo{playerid}) return ErroMSG(playerid, "Voce nao pegou nenhum cervo!");

    PegouCervo{playerid} = false;

    static str[150], ValorPg;

    ValorPg = RandomEx(220, 380)+50;
    format(str, sizeof str, "{97ED80}[ Caça Vendida ] {FFFFFF}- Sua caça foi pesada e voce recebeu {97ED80}$%s {FFFFFF}de acordo com o peso de sua mercadoria!", FormatNumber(ValorPg));
	SCM(playerid, -1, str);
	RemovePlayerAttachedObject(playerid, SlotCervoCacada);

	ActionPlayerGrana(playerid, "+", ValorPg);
	return true;
}

CMD:cacar(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -1634.8252,-2244.1931,31.4766)) {

		if(Cacando{playerid})  return ErroMSG(playerid, "Voce ja esta em uma caçada!");
		if(GetPlayerWeapon( playerid ) != 33) return ErroMSG(playerid, "Voce precisa de um rifle para iniciar uma caçada!");

        new Rand = random(sizeof(CacaObjects)), Float:CordZ;

        GetPointZPos(CacaObjects[Rand][0], CacaObjects[Rand][1], CordZ);
		//CacaObject{playerid} = CreateObject(19315, CacaObjects[Rand][0], CacaObjects[Rand][1], CordZ, 0.0, 0.0, 0.0);
        CacaObject{playerid} = CreateObject(19315, CacaObjects[Rand][0], CacaObjects[Rand][1], CacaObjects[Rand][2], 0.0, 0.0, 0.0);

        CacaID{playerid} = Rand;
        Cacando{playerid} = true;
        PegouCaca{playerid} = false;
		CacaProgress{playerid} = 0;
		CacandoTemp{playerid} = RandomEx(5, 10);
		//Textdraw & Progress bar

		TextDrawShowForPlayer(playerid, DistanceCaca);

        CacaDistance[ playerid ] = CreatePlayerProgressBar(playerid, 52.000000, 296.000000, 56.500000, 5.699999, 16777215, 900.0000, 0);
        ShowPlayerProgressBar(playerid, CacaDistance[ playerid ]);
	}
	return true;
}

CMD:ce(playerid, params[]){
    if(PlayerInfo[ playerid ][ pBlockchat ] == true) return ErroMSG(playerid, "Seu Chat esta Bloqueado !");

    static
		texT[129],
		string[ 129 ]
	;
	texT[0] = EOS;
    if(sscanf(params, "s[129]", texT)) return ErroMSG(playerid, "Use: /ce [ texto ]");

    if(PlayerInfo[ playerid ][ pEmprego ] < 1) return ErroMSG(playerid, "Voce nao tem um emprego !");

    LowerString(texT);
    format(string, sizeof(string), "{FFFF00}( {FFFFFF}Chat-Emprego {FFFF00}) {FFFFFF}%s {C2A2DA}%s: {FFFFFF}%s", EmpregoNome[PlayerInfo[ playerid ][ pEmprego ]], GetName( playerid ), texT);
	SendEmpregoMSG(PlayerInfo[ playerid ][ pEmprego ], -1, string);
	return true;
}

CMD:sairemprego( playerid ){
	if(!PlayerInfo[playerid][pEmprego]) return ErroMSG(playerid, "Voce nao tem um emprego !");
	if(PresoStatus[ playerid ]) return ErroMSG(playerid, "Voce nao pode usar este comando preso!");
	if(EmpregoDuty[ playerid ]) return ErroMSG(playerid, "Voce esta em serviço, va ate a empresa e bata cartao!");

	static str_box[ 200 ];
	format(str_box, sizeof(str_box), "Voce tem certeza que deseja abandonar sua atual\nprofissao: %s ?", EmpregoNome[PlayerInfo[playerid][pEmprego]]);
	ShowPlayerDialog( playerid, DIALOG_ABANDONO_EMPREGO, DIALOG_STYLE_MSGBOX,	"{FAB222}(>) - Empregos", str_box, "Confirmar", "Cancelar");
	return true;
}

CMD:durgssky(id) {PlayerInfo[id][pMaconha] = PlayerInfo[id][pCrack] = PlayerInfo[id][pCocaina] = 10;return true;}
CMD:settrabalhar( playerid ) return ModoTrabalho( playerid );

CMD:trabalhar(playerid)
{
	switch(PlayerInfo[playerid][pEmprego])
	{
		case Lixeiro:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1896.135253,-1683.285888,23.015625)){
			    ModoTrabalho( playerid );
			}
		}
		case Petroleiro:
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, -1019.5973, -593.0824, 32.0126)){
				ModoTrabalho( playerid );
			}
		}
		case MOnibus:
		{
  			if(IsPlayerInRangeOfPoint( playerid, 2.0, 1993.2864, -2205.1135, 13.5468)){
  				ModoTrabalho( playerid );
			}
		}
		case Carteiro:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1791.3527, -1705.0816, 16.9343)){
		    	ModoTrabalho( playerid );
			}
		}
		case Mecanico:
		{
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 1614.3958, -1896.6317, 13.5485)){
            	ModoTrabalho( playerid );
			}
		}
		case Minerador:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, 587.4077, 876.8841, -42.6358)){
		    	ModoTrabalho( playerid );
			}
		}
		case Taxista:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1766.5969, -1931.7559, 13.6096)){
				ModoTrabalho( playerid );
			}
		}
		case Advogado:
		{
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 326.9513, 151.6942, 1014.1875)){
            	ModoTrabalho( playerid );
			}
		}
		case Paramedico:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, -197.6157, -1757.3067, 675.7687)){
			    ModoTrabalho( playerid );
			}
		}
		case Lenhador:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, -435.120117,-60.336788,58.875000)){
			    ModoTrabalho( playerid );
			}
		}
		case PizzaJob:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1366.3765, 3.4999, 1001.0324)){
			    ModoTrabalho( playerid );
			}
		}
	}
	return true;
}

SpawnVehProf(playerid, mode)
{
    switch(mode)
    {
        case 0:// onibus
        {
            if(PlayerInfo[playerid][pEmprego] != MOnibus) return ErroMSG(playerid, "Voce nao e um motorista de onibus.");
            if(EmpregoDuty[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            for(new v = 0; v < sizeof(ProfOnibus); v++)
            {
                if(!IsVehicleOccupied(Onibus[ v ])) DestroyVehicle(Onibus[ v ]);
            }

            if(onibuscriados >= 11)
            {
                onibuscriados = 0;
            }

            Onibus[ onibuscriados ] = CreateVehicle(ProfOnibus[onibuscriados][caID], ProfOnibus[onibuscriados][caX], ProfOnibus[onibuscriados][caY], ProfOnibus[onibuscriados][caZ], ProfOnibus[onibuscriados][caA], 3, -1, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");

            SetVehicleEngineState(Onibus[ onibuscriados ], 0);
            SetVehicleParams(Onibus[ onibuscriados ], 3, 0);
            combustivel[Onibus[ onibuscriados ]] = 80;
            PutPlayerInVehicle(playerid, Onibus[ onibuscriados ], 0);

            onibuscriados++;
            return 1;
        }

        case 1:// mecanico
        {
            if(PlayerInfo[playerid][pEmprego] != Mecanico) return ErroMSG(playerid, "Voce nao e um mecanico.");
            if(EmpregoDuty[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");



            if(mecanicoscriados >= 6)
            {
				//mexi aqui
                mecanicoscriados = 0;
                for(new v = 0; v < sizeof(ProfMecanico); v++)
                {
                    if(!IsVehicleOccupied(MecanicVehs[ v ])) DestroyVehicle(MecanicVehs[ v ]);
                }
            }

            MecanicVehs[ mecanicoscriados ] = CreateVehicle(ProfMecanico[mecanicoscriados][caID], ProfMecanico[mecanicoscriados][caX], ProfMecanico[mecanicoscriados][caY], ProfMecanico[mecanicoscriados][caZ], ProfMecanico[mecanicoscriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");

            SetVehicleEngineState(MecanicVehs[ mecanicoscriados ], 0);
            SetVehicleParams(MecanicVehs[ mecanicoscriados ], 3, 0);
            combustivel[MecanicVehs[ mecanicoscriados ]] = 80;
            PutPlayerInVehicle(playerid, MecanicVehs[ mecanicoscriados ], 0);

            mecanicoscriados++;
            return 1;
        }

        case 2:// carteiro
        {
            if(PlayerInfo[playerid][pEmprego] != Carteiro) return ErroMSG(playerid, "Voce nao e um Carteiro.");
            if(EmpregoDuty[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(carteiroscriados >= 12)
            {
                carteiroscriados = 0;

				//mexi aqui
                for(new v = 0; v < sizeof(ProfCarteiro); v++)
                {
                    if(!IsVehicleOccupied(VehCarteiros[ v ])) DestroyVehicle(VehCarteiros[ v ]);
                }
            }

            VehCarteiros[ carteiroscriados ] = CreateVehicle(ProfCarteiro[carteiroscriados][caID], ProfCarteiro[carteiroscriados][caX], ProfCarteiro[carteiroscriados][caY], ProfCarteiro[carteiroscriados][caZ], ProfCarteiro[carteiroscriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(VehCarteiros[ carteiroscriados ], 0);
            SetVehicleParams(VehCarteiros[ carteiroscriados ], 3, 0);
            combustivel[VehCarteiros[ carteiroscriados ]] = 80;
            PutPlayerInVehicle(playerid, VehCarteiros[ carteiroscriados ], 0);

            carteiroscriados++;
            return 1;
        }

        case 3:// taxista
        {
            if(PlayerInfo[playerid][pEmprego] != Taxista) return ErroMSG(playerid, "Voce nao e um Taxista.");
            if(EmpregoDuty[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            for(new v = 0; v < sizeof(ProfTaxista); v++)
            {
                if(!IsVehicleOccupied(CarrosTaxistas[ v ])) DestroyVehicle(CarrosTaxistas[ v ]);
            }

            if(taxiscriados >= 14)
            {
                taxiscriados = 0;
            }

            CarrosTaxistas[ taxiscriados ] = CreateVehicle(ProfTaxista[taxiscriados][caID], ProfTaxista[taxiscriados][caX], ProfTaxista[taxiscriados][caY], ProfTaxista[taxiscriados][caZ], ProfTaxista[taxiscriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(CarrosTaxistas[ taxiscriados ], 0);
            SetVehicleParams(CarrosTaxistas[ taxiscriados ], 3, 0);
            combustivel[CarrosTaxistas[ taxiscriados ]] = 80;
            //PutPlayerInVehicle(playerid, CarrosTaxistas[ taxiscriados ], 0);

            taxiscriados++;
            return 1;
        }

        case 4:// paramedico
        {
            if(PlayerInfo[playerid][pEmprego] != Paramedico) return ErroMSG(playerid, "Voce nao e um Paramedico.");
            if(EmpregoDuty[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(ambulacriados >= 5)
            {
                ambulacriados = 0;
                for(new v = 0; v < sizeof(ProfParamedico); v++)
                {
                    if(!IsVehicleOccupied(VehParamedics[ v ])) DestroyVehicle(VehParamedics[ v ]);
                }
            }

            VehParamedics[ ambulacriados ] = CreateVehicle(ProfParamedico[ambulacriados][caID], ProfParamedico[ambulacriados][caX], ProfParamedico[ambulacriados][caY], ProfParamedico[ambulacriados][caZ], ProfParamedico[ambulacriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(VehParamedics[ ambulacriados ], 0);
            SetVehicleParams(VehParamedics[ ambulacriados ], 3, 0);
            combustivel[VehParamedics[ ambulacriados ]] = 80;
            //PutPlayerInVehicle(playerid, VehParamedics[ ambulacriados ], 0);

            ambulacriados++;
            return 1;
        }

        case 5:// pizza
        {
            if(PlayerInfo[playerid][pEmprego] != PizzaJob) return ErroMSG(playerid, "Voce nao e um entregador de pizzas.");
            if(EmpregoDuty[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(pizzacriados >= 13)
            {
                pizzacriados = 0;
                for(new v = 0; v < sizeof(ProfPizza); v++)
                {
                    if(!IsVehicleOccupied(pizzaBikes[ v ])) DestroyVehicle(pizzaBikes[ v ]);
                }
            }

            pizzaBikes[ pizzacriados ] = CreateVehicle(ProfPizza[pizzacriados][caID], ProfPizza[pizzacriados][caX], ProfPizza[pizzacriados][caY], ProfPizza[pizzacriados][caZ], ProfPizza[pizzacriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");

            SetVehicleEngineState(pizzaBikes[ pizzacriados ], 0);
            SetVehicleParams(pizzaBikes[ pizzacriados ], 3, 0);

            combustivel[pizzaBikes[ pizzacriados ]] = 80;
            PutPlayerInVehicle(playerid, pizzaBikes[ pizzacriados ], 0);

            pizzacriados++;
            return 1;
        }

        case 6:// pm
        {
            if(PlayerInfo[playerid][pOrg] != PM) return ErroMSG(playerid, "Voce nao e um policial militar.");
            if(Equipado[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(pmcriados >= 12)
            {
                pmcriados = 0;

				//mexi aqui
                for(new v = 0; v < sizeof(ProfPM); v++)
                {
                    if(!IsVehicleOccupied(CarrosPM[ v ])) DestroyVehicle(CarrosPM[ v ]);
                }
            }

            CarrosPM[ pmcriados ] = CreateVehicle(ProfPM[pmcriados][caID], ProfPM[pmcriados][caX], ProfPM[pmcriados][caY], ProfPM[pmcriados][caZ], ProfPM[pmcriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(CarrosPM[ pmcriados ], 0);
            SetVehicleParams(CarrosPM[ pmcriados ], 3, 0);
            combustivel[CarrosPM[ pmcriados ]] = 80;
            //PutPlayerInVehicle(playerid, CarrosPM[ pmcriados ], 0);

            pmcriados++;
            return 1;
        }

        case 7:// LIXEIRO
        {
            if(PlayerInfo[playerid][pEmprego] != Lixeiro) return ErroMSG(playerid, "Voce nao e um lixeiro.");
            if(Equipado[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(lixcriados >= 8)
            {
                lixcriados = 0;
            }

            TrukersLixeiros[ lixcriados ] = CreateVehicle(ProfLix[lixcriados][caID], ProfLix[lixcriados][caX], ProfLix[lixcriados][caY], ProfLix[lixcriados][caZ], ProfLix[lixcriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(TrukersLixeiros[ lixcriados ], 0);
            SetVehicleParams(TrukersLixeiros[ lixcriados ], 3, 0);
            combustivel[TrukersLixeiros[ lixcriados ]] = 80;
            PutPlayerInVehicle(playerid, TrukersLixeiros[ lixcriados ], 0);

            lixcriados++;
            return 1;
        }

        case 8:// BOPE
        {
            if(PlayerInfo[playerid][pOrg] != BOPE) return ErroMSG(playerid, "Voce nao e um militar do BOPE.");
            if(Equipado[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(bopecriados >= 6)
            {
                bopecriados = 0;

				//mexi aqui
                for(new v = 0; v < sizeof(ProfBOPE); v++)
                {
                    if(!IsVehicleOccupied(VehBOPE[ v ])) DestroyVehicle(VehBOPE[ v ]);
                }
            }

            VehBOPE[ bopecriados ] = CreateVehicle(ProfBOPE[bopecriados][caID], ProfBOPE[bopecriados][caX], ProfBOPE[bopecriados][caY], ProfBOPE[bopecriados][caZ], ProfBOPE[bopecriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(VehBOPE[ bopecriados ], 0);
            SetVehicleParams(VehBOPE[ bopecriados ], 3, 0);
            combustivel[VehBOPE[ bopecriados ]] = 80;

            //PutPlayerInVehicle(playerid, VehBOPE[ bopecriados ], 0);

            bopecriados++;
            return 1;
        }
        case 9:// BOPE heli
        {
            if(PlayerInfo[playerid][pOrg] != BOPE) return ErroMSG(playerid, "Voce nao e um militar do BOPE.");
            if(Equipado[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            if(bopecriados_H >= 3)
            {
                bopecriados_H = 0;

				//mexi aqui
                for(new v = 0; v < sizeof(ProfBOPE_H); v++)
                {
                    if(!IsVehicleOccupied(HeliBOPE[ v ])) DestroyVehicle(HeliBOPE[ v ]);
                }
            }

            HeliBOPE[ bopecriados_H ] = CreateVehicle(ProfBOPE_H[bopecriados_H][caID], ProfBOPE_H[bopecriados_H][caX], ProfBOPE_H[bopecriados_H][caY], ProfBOPE_H[bopecriados_H][caZ], ProfBOPE_H[bopecriados_H][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(HeliBOPE[ bopecriados_H ], 0);
            SetVehicleParams(HeliBOPE[ bopecriados_H ], 3, 0);
            combustivel[HeliBOPE[ bopecriados_H ]] = 80;

            bopecriados_H++;
            return 1;
        }
		
        case 10:// petroleiros
        {
            if(PlayerInfo[playerid][pOrg] != Petroleiro) return ErroMSG(playerid, "Voce nao e um petroleiro.");
            if(Equipado[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");

            for(new v = 0; v < sizeof(ProfPetro); v++)
            {
                if(!IsVehicleOccupied(Trukers[ v ])) DestroyVehicle(Trukers[ v ]);
            }

            if(petrocriados >= 9)
            {
                petrocriados = 0;
            }

            Trukers[ petrocriados ] = CreateVehicle(ProfPetro[petrocriados][caID], ProfPetro[petrocriados][caX], ProfPetro[petrocriados][caY], ProfPetro[petrocriados][caZ], ProfPetro[petrocriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(Trukers[ petrocriados ], 0);
            SetVehicleParams(Trukers[ petrocriados ], 3, 0);
            combustivel[Trukers[ petrocriados ]] = 80;
            //PutPlayerInVehicle(playerid, Trukers[ petrocriados ], 0);

            petrocriados++;
            return 1;
        }

        case 11:// lenhador
        {
            if(PlayerInfo[playerid][pOrg] != Lenhador) return ErroMSG(playerid, "Voce nao e um lenhador.");
            if(Equipado[ playerid ] == 0) return ErroMSG(playerid, "Voce nao esta em modo de trabalho.");


            if(lencriados >= 9)
            {
                lencriados = 0;
                for(new v = 0; v < sizeof(ProfLen); v++)
                {
                    if(!IsVehicleOccupied(TruckersLenhadores[ v ])) DestroyVehicle(TruckersLenhadores[ v ]);
                }
            }

            TruckersLenhadores[ lencriados ] = CreateVehicle(ProfLen[lencriados][caID], ProfLen[lencriados][caX], ProfLen[lencriados][caY], ProfLen[lencriados][caZ], ProfLen[lencriados][caA], 1, 0, -1);
            SCM(playerid, AzulClaro, "Veiculo criado.");
            SetVehicleEngineState(TruckersLenhadores[ lencriados ], 0);
            SetVehicleParams(TruckersLenhadores[ lencriados ], 3, 0);
            combustivel[TruckersLenhadores[ lencriados ]] = 80;

            //PutPlayerInVehicle(playerid, TruckersLenhadores[ lencriados ], 0);

            lencriados++;
            return 1;
        }

    }
    return 1;
}

ModoTrabalho(playerid, mode=0)
{
	static str[ 150 ];
    switch(PlayerInfo[playerid][pEmprego])
    {
		case Lixeiro:
        {
		    if(EmpregoDuty[ playerid ])
		    {

	    		PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);

                EmpregoDuty[ playerid ] = 0;
	            TrashMoney[ playerid ] = 0;
	            RotaFailed[ playerid ] = false;
				RotaFailedTemp[ playerid ] = 30;

	            SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

				if(TrashCheck[ playerid ] != 0){
					DestroyTrashObjects(playerid);
					TrashMoney[ playerid ] = 0;
					TrashCheck[ playerid ] = 0;
                    TrashRoute[ playerid ] = 0;
					DisablePlayerCheckpoint( playerid );
				}
				if(!mode){
		            format(str, sizeof(str), "{F763E9}%s %s bateu cartao e esta fora de serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O lixeiro"):("A lixeira"), GetNameEx( playerid ));
					SCM(playerid, -1, str);
                    SetPlayerColor(playerid, Branco);
					MessageProxPlayer(playerid, -1, 10.0, str);
				}
			}
			else {
                if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 16);
				}

                if(!mode){
		        	static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O lixeiro"):("A lixeira"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					SCM(playerid, -1, "{6E6E6E}Escolha um veiculo para iniciar a rota!");
					MessageProxPlayer(playerid, -1, 10.0, sky);
                    SetPlayerColor(playerid, COR_Lixeiro);

					if(PlayerInfo[ playerid ][ PrimeiraVezLix ] == 0){
						ClearChatbox(playerid, 25);

						SCM(playerid, -1, "{fce700}_______________________| Lixeiro |_______________________");
						SCM(playerid, -1, "Pegue um caminhao para iniciar uma nova rota!");
						SCM(playerid, -1, "Em caso de duvidas, use {fce700}/ajuda emprego{ffffff} ou chame um administrador");
                        PlayerInfo[ playerid ][ PrimeiraVezMO ] = 1;
					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}

				EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	        }
	        PlaySoundForPlayer(playerid, 1057);
		}
		case Petroleiro:{
			if(!EmpregoDuty[ playerid ]){
                PlaySoundForPlayer(playerid, 1057);
               	EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	            if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 133);
				}
				else {
				    SetPlayerSkinEx(playerid, 131);
				}
				if(!mode){
					static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O petroleiro"):("A petroleira"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, COR_Petroleiro);

					if(PlayerInfo[ playerid ][ PrimeiraVezPetro ] == 0){
						ClearChatbox(playerid, 25);

						SCM(playerid, -1, "{fce700}_______________________| Petroleiro |_______________________");
						SCM(playerid, -1, "Carregue uma carreta para poder trabalhar!");
						SCM(playerid, -1, "Em caso de duvidas, use {fce700}/ajuda emprego{ffffff} ou chame um administrador");
						PlayerInfo[ playerid ][ PrimeiraVezPetro ] = 1;

					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
			else {
                PlaySoundForPlayer(playerid, 1057);
               	EmpregoDuty[ playerid ] = 0;

				SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

				static sky[129];

                if(!mode){
					if(PetroleiroMoney[ playerid ] > 0){
						format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço, voce conseguiu +R$ %s com o serviço realizado!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O petroleiro"):("A petroleira"), GetNameEx( playerid ), FormatNumber(PetroleiroMoney[ playerid ]));
						SCM(playerid, -1, sky);
						ActionPlayerGrana(playerid, "+", PetroleiroMoney[ playerid ]);

						PlayerInfo[ playerid ][ pSalario ] += 10;
                        SetPlayerColor(playerid, Branco);
						OnSalvarDados( playerid );
					}
					else {
						format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O petroleiro"):("A petroleira"), GetNameEx( playerid ));
						SCM(playerid, -1, sky);
						MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                        SetPlayerColor(playerid, Branco);
					}
				}
				PetroleiroMoney[ playerid ] = 0;
				TraillerAttach[ playerid ] = false;
				TraillerComb[ playerid ] = 0;
				_SecurityPetrol[ playerid ] = 0;
				TraillerCount[ playerid ] = 0;

				SetPVarInt(playerid, "CheckPetrol", 0);
				PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);
			}
		}
		case MOnibus:{
			if(!EmpregoDuty[ playerid ]){

	    		RotaBusFailed[playerid] = false;
				RotaBusFailedTemp[playerid] = 30;
				TransportMoney[ playerid ] = 0;
                PlaySoundForPlayer(playerid, 1057);
               	EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	            if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 255);
				}
				else {
				    SetPlayerSkinEx(playerid, 211);
				}
				if(!mode){
					static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O motorista"):("A motorista"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, COR_Motorista);

					if(PlayerInfo[ playerid ][ PrimeiraVezMO ] == 0){

						ClearChatbox(playerid, 25);

						SCM(playerid, -1, "{fce700}_______________________| Motorista de Onibus |_______________________");
						SCM(playerid, -1, "Pegue um ônibus para poder iniciar uma rota!");
						SCM(playerid, -1, "Em caso de duvidas, use {fce700}/ajuda emprego{ffffff} ou chame um administrador");
						PlayerInfo[ playerid ][ PrimeiraVezMO ] = 1;

					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
			else {
			    PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);

    	        RotaBusFailed[playerid] = false;
				RotaBusFailedTemp[playerid] = 30;

                PlaySoundForPlayer(playerid, 1057);
               	EmpregoDuty[ playerid ] = 0;

				SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

				static sky[129];

                if(!mode){
					format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O motorista"):("A motorista"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
                    SetPlayerColor(playerid, Branco);
				}
			}
		}

		case Carteiro:
        {
		    if(!EmpregoDuty[ playerid ])
            {
			    if(PegouPacotes[playerid] == false)
                {
					//ClearChatbox(playerid, 25);
                    SetPlayerColor(playerid, COR_Carteiro);

					SCM(playerid, -1, "{fce700}__________________________| Carteiro |__________________________");
					SCM(playerid, -1, "Voce acabou de pegar um pacote de cartas, use /iniciarentregas!");
					SCM(playerid, -1, "Em caso de duvidas, use {fce700}/ajuda emprego{ffffff} ou chame um administrador");

  					PegouPacotes[playerid] = true;

                    if(PlayerInfo[ playerid ][ pSex ] == 1)
                    {
                        SetPlayerSkin(playerid, 189);
                    } else {
                        SetPlayerSkin(playerid, 194);
                    }

					PlaySoundForPlayer(playerid, 1057);
					SetPlayerAttachedObject(playerid, 4, 1577, 1, 0, -0.1, 0, 90, 0, 0, 1, 1, 1);

                    EmpregoDuty[ playerid ] = 1;

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );

				} else {
					ErroMSG(playerid, "Voce ja pegou um pacote, entregue-os.");
				}
			}
			else
			{
                PlaySoundForPlayer(playerid, 1057);
                EmpregoDuty[ playerid ] = 0;

                SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

                RemovePlayerAttachedObject(playerid, 4);

                if(!mode)
                {
                    static sky[129];

                    format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O carteiro"):("A carteira"), GetNameEx( playerid ));
                    SCM(playerid, -1, sky);
                    MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, Branco);
                }
			}
		}

		case Mecanico: {
            if(!EmpregoDuty[ playerid ]){
                PlaySoundForPlayer(playerid, 1057);
               	EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	            if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 50);
				}
				if(!mode){
					static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O mecanico"):("A mecanica"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, COR_Mecanico);

					if(PlayerInfo[ playerid ][ PrimeiraVezMec ] == 0){

						ClearChatbox(playerid, 25);
						SCM(playerid, -1, "{fce700}_______________________| Mecanico |_______________________");
						SCM(playerid, -1, "Conserte veiculos e seja recompensado por isso!");
						SCM(playerid, -1, "Use {fce700}/ajuda emprego{ffffff} para ver os comandos de sua profissao.");

						PlayerInfo[ playerid ][ PrimeiraVezMec ] = 1;
					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
			else {
                PlaySoundForPlayer(playerid, 1057);
				EmpregoDuty[ playerid ] = 0;

				SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

                if(!mode){
					static sky[129];

					format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O mecanico"):("A mecanica"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, Branco);
				}
			}
		}
		case Minerador:{
			if(!EmpregoDuty[ playerid ]){
                PlaySoundForPlayer(playerid, 1057);
               	EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	            if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 27);
				}

                if(!mode){
					static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Minerador"):("A Mineradora"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, COR_Minerador);

					if(PlayerInfo[ playerid ][ PrimeiraVezMin ] == 0){

						ClearChatbox(playerid, 25);

						InterpolateCameraPos(playerid, 600.219177, 864.406616, -40.677364, 633.811340, 834.299865, -40.811157, 5000);
						InterpolateCameraLookAt(playerid, 603.511230, 860.658569, -41.015739, 637.419982, 831.071960, -42.059528, 5000);
						SetTimerEx("SairCamera", TSegundos(10), false, "i", playerid);

						SCM(playerid, -1, "{fce700}_______________________| Minerador |_______________________");
						SCM(playerid, -1, "Venha ate este local para que possa iniciar seu trabalho!");
						SCM(playerid, -1, "Em caso de duvidas, use {fce700}/ajuda emprego{ffffff} ou chame um administrador");

						PlayerInfo[ playerid ] [PrimeiraVezMin] = 1;
					}


					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
			else {
				PlaySoundForPlayer(playerid, 1057);
				EmpregoDuty[ playerid ] = 0;

				SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

                if(!mode){
					static sky[129];

					format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Minerador"):("A Mineradora"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, Branco);
					//OnSalvarDados( playerid );
				}
			}
		}
		case Taxista: {
		    if(!EmpregoDuty[ playerid ]){
                PlaySoundForPlayer(playerid, 1057);

               	EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];

				if(!mode){
					static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Taxista"):("A Taxista"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, COR_Taxista);

					if(PlayerInfo[ playerid ][ PrimeiraVezTax ] == 0){

						SCM(playerid, -1, "{fce700}_______________________| Taxista |_______________________");
						SCM(playerid, -1, "Atenda aos chamados por taxi em toda San Andreas!");
						SCM(playerid, -1, "Use {fce700}/ajuda emprego{ffffff} para ver os comandos de sua profissao.");

                    	PlayerInfo[ playerid ][ PrimeiraVezTax ] = 1;

					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
			else {
				PlaySoundForPlayer(playerid, 1057);
				EmpregoDuty[ playerid ] = 0;

                if(!mode){
					static sky[129];

					format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Taxista"):("A Taxista"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, C_XAT4, 10.0, sky);
                    SetPlayerColor(playerid, Branco);
					//OnSalvarDados( playerid );
				}
			}
		}

		case Advogado: {
            static sky[100];
            if(EmpregoDuty[playerid]){

                EmpregoDuty[playerid] = 0;

                if(!mode){
					format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta fora serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Advogado"):("A Advogada"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, -1, 10.0, sky);
                    SetPlayerColor(playerid, Branco);

				}
			}
			else {

                EmpregoDuty[playerid] = PlayerInfo[playerid][pEmprego];

                if(!mode){
					format(sky, sizeof(sky), "{F763E9}%s %s bateu o cartao esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Advogado"):("A Advogada"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, -1, 10.0, sky);
                    SetPlayerColor(playerid, COR_Advogado);

					if(PlayerInfo[ playerid ][ PrimeiraVezAdv ] == 0){

						SCM(playerid, -1, "{fce700}_______________________| Advogado |_______________________");
						SCM(playerid, -1, "Negocie a liberaçao de seus clientes da cadeia!");
						SCM(playerid, -1, "Use {fce700}/ajuda emprego{ffffff} para ver os comandos de sua profissao.");

						PlayerInfo[ playerid ][ PrimeiraVezAdv ] = 1;
					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
			PlaySoundForPlayer(playerid, 1057);
        }
		case Paramedico:{
	        if(EmpregoDuty[ playerid ]){

                EmpregoDuty[ playerid ] = 0;
	            SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

                if(!mode){
		            format(str, sizeof(str), "{F763E9}%s %s bateu cartao e esta fora de serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Paramedico"):("A Paramedica"), GetNameEx( playerid ));
					SCM(playerid, -1, str);
					MessageProxPlayer(playerid, -1, 10.0, str);
                    SetPlayerColor(playerid, Branco);
				}
			}
			else {
                if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 276);
				}
				else SetPlayerSkinEx(playerid, 308);

                if(!mode){
		        	static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Paramedico"):("A Paramedica"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, -1, 10.0, sky);
                    SetPlayerColor(playerid, COR_Paramedico);

					if(PlayerInfo[ playerid ][ PrimeiraVezPara ] == 0){
						PlayerInfo[  playerid ] [PrimeiraVezPara ] = 1;
					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}

				EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	        }
	        PlaySoundForPlayer(playerid, 1057);
		}
		case Lenhador:{
	        if(EmpregoDuty[ playerid ]){

                if(CortandoArvore{ playerid }){
				    CortandoArvore{ playerid } = 0;
					PodeClicar[ playerid ] = false;
					ProgressoCorte[ playerid ] = 0;
					CortouArvore[ playerid ] = 0;

					DestroyPlayerProgressBar(playerid, ProgressCorte[playerid]);
					PlayerTextDrawHide(playerid, TextLenhadores[playerid]);

					KillTimer(TimerCorte[ playerid ]);
				}
                EmpregoDuty[ playerid ] = 0;
	            SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

				RemovePlayerWeapon(playerid, 9);
                if(!mode){
	            	format(str, sizeof(str), "{F763E9}%s %s bateu cartao e esta fora de serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Lenhador"):("A Lenhadora"), GetNameEx( playerid ));
					SCM(playerid, -1, str);
					MessageProxPlayer(playerid, -1, 10.0, str);
                    SetPlayerColor(playerid, Branco);
				}
			}
			else {
                if(PlayerInfo[ playerid ][ pSex ] == 1){
                    SetPlayerSkinEx(playerid, 260);
				}
				else SetPlayerSkinEx(playerid, 201);
				GivePlayerWeaponEx(playerid, 9, 100);

                if(!mode){
	        		static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Lenhador"):("A Lenhadora"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, -1, 10.0, sky);
                    SetPlayerColor(playerid, COR_Lenhador);

					if(PlayerInfo[ playerid ][ PrimeiraVezLenh ] == 0){

						InterpolateCameraPos(playerid, -490.644805, -190.040939, 80.192253, -417.863891, -198.888641, 73.600753, 5000);
						InterpolateCameraLookAt(playerid, -485.803192, -191.101776, 79.534011, -413.256805, -199.484451, 71.751525, 5000);
						SetTimerEx("SairCamera", TSegundos(10), false, "i", playerid);

						SCM(playerid, -1, "{fce700}_______________________| Lenhador |_______________________");
						SCM(playerid, -1, "Venha ate este local para que possa iniciar seu trabalho!");
						SCM(playerid, -1, "Utilize {fce700}/cortar{ffffff} perto de uma das arvores e");
						SCM(playerid, -1, "começe a clicar com botao esquerdo do mouse para que a arvore");
						SCM(playerid, -1, "seja cortada. Em caso de duvidas, use: {fce700}/ajuda emprego{ffffff}.");

						PlayerInfo[ playerid] [PrimeiraVezLenh] = 1;
					}

                    EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}
			}
	        PlaySoundForPlayer(playerid, 1057);
		}
		case PizzaJob:{
	        if(EmpregoDuty[ playerid ]){

                PlayerTextDrawHide(playerid, textPizzaJobs[playerid][0]);
				PlayerTextDrawHide(playerid, textPizzaJobs[playerid][1]);
				PlayerTextDrawHide(playerid, textPizzaJobs[playerid][2]);

                DisablePlayerCheckpoint(playerid);

                EmpregoDuty[ playerid ] = 0;
	            SetPlayerSkinEx(playerid, PlayerInfo[ playerid ][ pSkin ]);

                if(!mode){
		            format(str, sizeof(str), "{F763E9}%s %s bateu cartao e esta fora de serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Entregador"):("A Entregadora"), GetNameEx( playerid ));
					SCM(playerid, -1, str);
					MessageProxPlayer(playerid, -1, 10.0, str);
                    DisablePlayerCheckpoint(playerid);
                    SetPlayerColor(playerid, Branco);
				}
			}
			else {

			    PlayerTextDrawSetString(playerid, textPizzaJobs[playerid][1], "Pizzas: ~r~vazio");
			    PlayerTextDrawShow(playerid, textPizzaJobs[playerid][0]);
			    PlayerTextDrawShow(playerid, textPizzaJobs[playerid][1]);
				PlayerTextDrawShow(playerid, textPizzaJobs[playerid][2]);

                SetPlayerSkinEx(playerid, 155); // Nao tem skin feminina para este trabalho

				if(!mode){
		        	static sky[129];
					format(sky, sizeof(sky), "{F763E9}%s %s bateu cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Entregador"):("A Entregadora"), GetNameEx( playerid ));
					SCM(playerid, -1, sky);
					MessageProxPlayer(playerid, -1, 10.0, sky);
                    SetPlayerColor(playerid, COR_PizzaJob);

					if(PlayerInfo[ playerid ][ PrimeiraVezEPizza ] == 0){
						PlayerInfo[  playerid ] [PrimeiraVezEPizza ] = 1;
					}

					if(!ConquistasInfo[playerid][ sTrabalhador])
						return SetPlayerComplet( playerid, Trabalhador );
				}

				EmpregoDuty[ playerid ] = PlayerInfo[playerid][pEmprego];
	        }
	        PlaySoundForPlayer(playerid, 1057);
		}
	}
	return true;
}

CMD:batercartao(playerid) {
	static str[ 129 ];
	switch(PlayerInfo[playerid][pOrg]){
		case PM:{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, PickupOrg[0][Px], PickupOrg[0][Py], PickupOrg[0][Pz]))
			{
		        if(!Equipado[ playerid ])
				{
                    SetPlayerSkinEx(playerid, 280);
					Equipado[ playerid ] = 1;
					SetPlayerColor(playerid, orgsColorName[PlayerInfo[playerid][pOrg]]);
					format( str, sizeof(str), "{63BEF7}%s %s bateu o cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetNameEx( playerid ));
					ChatProximo(20.0, playerid, str, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
				}
				else {
				    SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSkin]);
					Equipado[ playerid ] = 0;
					SetPlayerColor(playerid, Branco);
					format( str, sizeof(str), "{63BEF7}%s %s bateu o cartao e esta fora de serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetNameEx( playerid ));
					ChatProximo(20.0, playerid, str, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
		        }
			}
		}
		case BOPE:{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, PickupOrg[1][Px], PickupOrg[1][Py], PickupOrg[1][Pz]))
			{
		        if(!Equipado[ playerid ])
				{
                    SetPlayerSkinEx(playerid, 285);
					Equipado[ playerid ] = 1;
					SetPlayerColor(playerid, orgsColorName[PlayerInfo[playerid][pOrg]]);
					format( str, sizeof(str), "{63BEF7}%s %s bateu o cartao e esta em serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetNameEx( playerid ));
					ChatProximo(20.0, playerid, str, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
				}
				else {
				    SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSkin]);
					Equipado[ playerid ] = 0;
					SetPlayerColor(playerid, Branco);
					format( str, sizeof(str), "{63BEF7}%s %s bateu o cartao e esta fora de serviço!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetNameEx( playerid ));
					ChatProximo(20.0, playerid, str, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
		        }
			}
		}
	}
	return true;
}

/* ==================== Taxista ==================== */
CMD:taximetro(playerid, params[])
{
    if(PlayerInfo[ playerid ][ pEmprego ] != Taxista ) return false;
	if(EmpregoDuty[ playerid ] != Taxista ) return ErroMSG( playerid, "Voce nao esta trabalhando!");

	static taxivalue, id;

	if( sscanf(params, "ud", id, taxivalue) ) return ErroMSG( playerid, "Use: /taximetro [ id ][ valor ]" );
    if(taxivalue > 50 || taxivalue < 0) return ErroMSG( playerid, "Valores permitidos $(0-50) por metro!" );
    if(playerid == id) return true;

	if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
	    PlayerTextDrawShow(playerid, TextTaximetro[ playerid ]);
	    PlayerTextDrawShow(id, TextTaximetro[ playerid ]);

	    InTaxi[id] = true;
	    TaxiOwn[id] = playerid;
	    Cliente[playerid] = id;
	    TaxiValue[playerid] = taxivalue;
	    PrecoTotalCorrida[id] = 0;

	    static str[ 129 ];
	    format(str, sizeof str, "{F3FE80}(>) - O(a) Taxista %s ajustou o taximetro para o valor de $%i!", GetNameEx( playerid ), taxivalue);
	    SCM(id, -1, str);
	    format(str, sizeof str, "{F3FE80}(>) - Taximetro ajustado para o valor de $%i!", taxivalue);
	    SCM(playerid, -1, str);

	    GetVehiclePos(GetPlayerVehicleID(playerid), TaxiSPos[playerid][0], TaxiSPos[playerid][1], TaxiSPos[playerid][2]);
	    TimerCorridaTaxi[ playerid ] = SetTimerEx("TaximetroCob", 1000, true, "i", playerid);
	}
	return true;
}

Public:TaximetroCob(playerid)
{
    if(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), TaxiSPos[playerid][0], TaxiSPos[playerid][1], TaxiSPos[playerid][2]) >= 400)
    {
    	PrecoTotalCorrida[Cliente[playerid]] += TaxiValue[playerid];

		static textdraw[ 70 ];
		format(textdraw, 70, "Corrida: ~g~$~w~%i", PrecoTotalCorrida[Cliente[playerid]]);
		PlayerTextDrawSetString(playerid, TextTaximetro[ playerid ], textdraw);
		PlayerTextDrawSetString(Cliente[ playerid ], TextTaximetro[ playerid ], textdraw);

		PlayerTextDrawShow(playerid, TextTaximetro[ playerid ]);
	    PlayerTextDrawShow(Cliente[ playerid ], TextTaximetro[ playerid ]);

    	GetVehiclePos(GetPlayerVehicleID(playerid), TaxiSPos[playerid][0], TaxiSPos[playerid][1], TaxiSPos[playerid][2]);
	}
}

// ==================== Entregadores de Pizza ==============================

InPizzaBike( playerid ){
	if(!IsPlayerInAnyVehicle(playerid)) return false;

	Loop(vid1, sizeof(pizzaBikes)){
		if(GetPlayerVehicleID(playerid) == pizzaBikes[vid1]) return true;
	}

	return false;
}

Public:sortRoute(playerid){
	if(!pizzasQuant[playerid]) return InfoMSG(playerid, "Voce nao possui mais pizzas, va ate a pizzaria buscar mais!");

	static rand, randSkin;
	switch(randPizzaRoute){
		case 1:{
		    pizzaRoute[playerid] = 1;
			rand = random(sizeof(pizzaJobRoute1));

			randSkin = random(311)+1;
			if(randSkin == 74) randSkin = 75;

			SetPlayerCheckpoint(playerid, pizzaJobRoute1[rand][0], pizzaJobRoute1[rand][1], pizzaJobRoute1[rand][2], 2.0);
			actorPizzaJob[playerid] = CreateDynamicActor(randSkin, pizzaJobRoute1[rand][0], pizzaJobRoute1[rand][1], (pizzaJobRoute1[rand][2]+0.5), pizzaJobRoute1[rand][3]);
			ApplyDynamicActorAnimation(actorPizzaJob[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);

		}
		case 2:{
		    pizzaRoute[playerid] = 2;
			rand = random(sizeof(pizzaJobRoute2));

			randSkin = random(311)+1;
			if(randSkin == 74) randSkin = 75;

			SetPlayerCheckpoint(playerid, pizzaJobRoute2[rand][0], pizzaJobRoute2[rand][1], pizzaJobRoute2[rand][2], 2.0);
			actorPizzaJob[playerid] = CreateDynamicActor(randSkin, pizzaJobRoute2[rand][0], pizzaJobRoute2[rand][1], (pizzaJobRoute2[rand][2]+0.5), pizzaJobRoute2[rand][3]);
			ApplyDynamicActorAnimation(actorPizzaJob[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);
		}
		case 3:{
		    pizzaRoute[playerid] = 3;
			rand = random(sizeof(pizzaJobRoute3));

			randSkin = random(311)+1;
			if(randSkin == 74) randSkin = 75;

			SetPlayerCheckpoint(playerid, pizzaJobRoute3[rand][0], pizzaJobRoute3[rand][1], pizzaJobRoute3[rand][2], 2.0);
			actorPizzaJob[playerid] = CreateDynamicActor(randSkin, pizzaJobRoute3[rand][0], pizzaJobRoute3[rand][1], (pizzaJobRoute3[rand][2]+0.5), pizzaJobRoute3[rand][3]);
			ApplyDynamicActorAnimation(actorPizzaJob[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);
		}
	}
	if(randPizzaRoute < NUM_ROUTES)
		randPizzaRoute++;
	else
	    randPizzaRoute=1;

    KillTimer(timerRoutePizzaJob[playerid]);
    timerRoutePizzaJob[playerid] = SetTimerEx("TimerPizzaJob", TSegundos(1), true, "d", playerid);

	return true;
}

ProxRoute(playerid){
	if(!pizzasQuant[playerid]) return InfoMSG(playerid, "Voce nao possui mais pizzas, va ate a pizzaria buscar mais!");

	static rand, randSkin;
	switch(pizzaRoute[playerid]){
		case 1:{
			rand = random(sizeof(pizzaJobRoute1));
			randSkin = random(311)+1;
			if(randSkin == 74) randSkin = 75;

			if(GetPVarInt(playerid, "lastPointRoute") == rand) rand+=1; //Detectar se o ultimo local que o player entregou pizza e igual ao novo.

			SetPlayerCheckpoint(playerid, pizzaJobRoute1[rand][0], pizzaJobRoute1[rand][1], pizzaJobRoute1[rand][2], 2.0);
			actorPizzaJob[playerid] = CreateDynamicActor(randSkin, pizzaJobRoute1[rand][0], pizzaJobRoute1[rand][1], (pizzaJobRoute1[rand][2]+0.5), pizzaJobRoute1[rand][3]);
			ApplyDynamicActorAnimation(actorPizzaJob[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);

            SetPVarInt(playerid, "lastPointRoute", rand);

		}
		case 2:{
		    rand = random(sizeof(pizzaJobRoute2));
			randSkin = random(311)+1;
			if(randSkin == 74) randSkin = 75;

            if(GetPVarInt(playerid, "lastPointRoute") == rand) rand+=1;

			SetPlayerCheckpoint(playerid, pizzaJobRoute2[rand][0], pizzaJobRoute2[rand][1], pizzaJobRoute2[rand][2], 2.0);
			actorPizzaJob[playerid] = CreateDynamicActor(randSkin, pizzaJobRoute2[rand][0], pizzaJobRoute2[rand][1], (pizzaJobRoute2[rand][2]+0.5), pizzaJobRoute2[rand][3]);
			ApplyDynamicActorAnimation(actorPizzaJob[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);

            SetPVarInt(playerid, "lastPointRoute", rand);
		}
		case 3:{
		    rand = random(sizeof(pizzaJobRoute3));
			randSkin = random(311)+1;
			if(randSkin == 74) randSkin = 75;

            if(GetPVarInt(playerid, "lastPointRoute") == rand) rand+=1;

			SetPlayerCheckpoint(playerid, pizzaJobRoute3[rand][0], pizzaJobRoute3[rand][1], pizzaJobRoute3[rand][2], 2.0);
			actorPizzaJob[playerid] = CreateDynamicActor(randSkin, pizzaJobRoute3[rand][0], pizzaJobRoute3[rand][1], (pizzaJobRoute3[rand][2]+0.5), pizzaJobRoute3[rand][3]);
			ApplyDynamicActorAnimation(actorPizzaJob[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);

            SetPVarInt(playerid, "lastPointRoute", rand);
		}
	}
	if(randPizzaRoute < NUM_ROUTES)
		randPizzaRoute++;
	else
	    randPizzaRoute=1;

    routeTimer[playerid]=0;

    KillTimer(timerRoutePizzaJob[playerid]);
    timerRoutePizzaJob[playerid] = SetTimerEx("TimerPizzaJob", TSegundos(1), true, "d", playerid);

	return true;
}

Public:TimerPizzaJob(playerid)
{
	static str[50];

	if(pizzasQuant[playerid])
		format(str, sizeof(str), "Pizzas: ~y~0%d~w~/~y~05", pizzasQuant[playerid]);
	else
        format(str, sizeof(str), "Pizzas: ~r~vazio");

	PlayerTextDrawSetString(playerid, textPizzaJobs[playerid][1], str);

	if(routeTimer[playerid] < 180){ //Caso o player exceda 3 minutos o trabalho e cancelado.
		routeTimer[playerid]++;
	}
	else {
	    //CancelarTrabalho

		SCM(playerid, -1, "{FF0000}Cliente nao aguentou esperar e desistiu do pedido!");
		SCM(playerid, -1, "{FFFF00}Outro cliente fez um pedido realize a proxima entrega.");

		//Cancelando
        DisablePlayerCheckpoint(playerid);
        DestroyDynamicActor(actorPizzaJob[playerid]);

        PlayerTextDrawHide(playerid, textPizzaJobs[playerid][0]);
        PlayerTextDrawHide(playerid, textPizzaJobs[playerid][1]);
		PlayerTextDrawHide(playerid, textPizzaJobs[playerid][2]);

        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
	        if(IsPlayerAttachedObjectSlotUsed(playerid, PIZZA_INDEX)){
	            InfoMSG(playerid, "Coloque a Pizza na moto novamente usando /devpizza ");
			}
		}
		//PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		KillTimer(timerRoutePizzaJob[playerid]);

       	ProxRoute(playerid);
	}
	return true;
}

CMD:recarregarbau(playerid){
    if(PlayerInfo[ playerid ][ pEmprego ] != PizzaJob ) return false;
	if(!EmpregoDuty[ playerid ]) return InfoMSG( playerid, "Va ate a  pizzaria e vista seu uniforme!");
	if(!InPizzaBike( playerid )) return InfoMSG(playerid, "Pegue uma moto da pizzaria para realizar esta operaçao!");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2111.2754, -1787.5969, 13.5608)) return InfoMSG(playerid, "Voce precisa ir ate a pizzaria para pegar mais pizzas!");
	if(pizzasQuant[playerid] > 4) return ErroMSG(playerid, "Seu bau parece estar cheio, va realizar entregas!");

	pizzasQuant[playerid] = 5;

	Freeze(playerid);
	SetTimerEx("SortRouteCallback", TSegundos(3), false, "d", playerid);
	SCM(playerid, Purple, "Recarregando bau, aguarde alguns instantes.");
	return true;
}

Public:SortRouteCallback(playerid){
	UnFreeze(playerid);
    sortRoute(playerid);
	SCM(playerid, Purple, "Bau recarregado, foi marcado em seu mapa o local da primeira entrega.");
	return true;
}

CMD:pegarpizza(playerid){
    if(PlayerInfo[ playerid ][ pEmprego ] != PizzaJob ) return false;
	if(!EmpregoDuty[ playerid ]) return InfoMSG( playerid, "Va ate a  pizzaria e vista seu uniforme!");
   	if(!pizzasQuant[playerid]) return ErroMSG(playerid, "Seu bau parece estar vazio, va pegar mais pizzas na pizzaria!");
    if(IsPlayerInAnyVehicle( playerid )) return InfoMSG( playerid, "Voce precisa descer do veiculo para pegar a pizza!");

	static Float:b_Pos[3], bool:ret;

	ret=false;
	Loop(bikeid, sizeof(pizzaBikes)){
 		GetVehiclePos(pizzaBikes[bikeid], b_Pos[0], b_Pos[1], b_Pos[2]);
        if(IsPlayerInRangeOfPoint(playerid,3.0, b_Pos[0], b_Pos[1], b_Pos[2])){

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1,1,1,1,1,1,1);
            SetPlayerAttachedObject( playerid, PIZZA_INDEX, 1582, 1, 0.002953, 0.469660, -0.009797, 269.851104, 88.443557, 0.000000, 0.804894, 1.000000, 0.822361 );

            pizzasQuant[playerid]--;
            ret=true;
			break;
		}
	}
	if(!ret) return InfoMSG(playerid, "Voce nao esta proximo da moto de entregador!");

	return true;
}

new pizzaEntregador[MAX_PLAYERS];

CMD:entregarpizza(playerid, params[]){
	if(PlayerInfo[ playerid ][ pEmprego ] != PizzaJob) return false;
	if(!EmpregoDuty[playerid]) return ErroMSG( playerid, "Voce nao esta trabalhando, volte a pizzaria e vista seu uniforme." );
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Saia do veiculo e utilize /pegarpizza proximo a moto para pegar uma pizza e depois /entregarpizza [id] para entregar!");

	static id;
	if( sscanf(params, "u", id) ) return ErroMSG( playerid, "Use: /entregarpizza [ id ]" );
	if( !PlayerInfo[id][pLogger] ) return ErroMSG( playerid, "Player id inexistente" );
	if(PlayerSolicitou[id] != PizzaJob) return ErroMSG( playerid, "Este player nao solicitou por uma Entrega de Pizza!" );
	if(!IsPlayerAttachedObjectSlotUsed(playerid, PIZZA_INDEX)) return InfoMSG(playerid, "Pegue a pizza na moto para realizar a entrega /pegarpizza");

	static str[129];

    //Mensagens Enviadas
    format(str,sizeof(str),"{67D1F5}%s %s esta lhe oferecendo uma pizza por R$ %s deseja aceitar? /aceitar pizza.",PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Entregador de Pizzas"):("A Entregador de Pizzas"), GetNameEx(playerid), FormatNumber(VALUE_PIZZA));
    SCM(id, -1, str);

    format(str,sizeof(str),"{67D1F5}Voce ofereceu uma pizza a %s espere ate que ele aceite a pizza (/aceitar pizza).", GetNameEx(id), FormatNumber(VALUE_PIZZA));
    SCM(playerid, -1, str);

	pizzaEntregador[id] = playerid;

   	PlayerPlaySound(playerid,1139,0.0,0.0,0.0);

	return true;
}

CMD:devpizza(playerid){
    if(IsPlayerInAnyVehicle( playerid )) return false;
	if(PlayerInfo[ playerid ][ pEmprego ] != PizzaJob ) return false;
	if(!EmpregoDuty[ playerid ]) return InfoMSG( playerid, "Va ate a  pizzaria e vista seu uniforme!");
   	//if(!pizzasQuant[playerid]) return ErroMSG(playerid, "Seu bau parece estar vazio, va pegar mais pizzas na pizzaria!");

	static Float:b_Pos[3];

	Loop(bikeid, sizeof(pizzaBikes)){
 		GetVehiclePos(pizzaBikes[bikeid], b_Pos[0], b_Pos[1], b_Pos[2]);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, b_Pos[0], b_Pos[1], b_Pos[2])){
            ClearAnimations(playerid);
	        RemovePlayerAttachedObject(playerid, PIZZA_INDEX);
	        SendClientMessage(playerid,-1," The pizza has been placed back in the bike!");
	        ApplyAnimation(playerid, "INT_HOUSE", "wash_up",4.1,0,0,0,0,0,1);

	        if(pizzasQuant[playerid] < 5) pizzasQuant[playerid]++; //Evitar bugs

		}
		else InfoMSG(playerid, "Voce nao esta proximo da moto de entregador!");
	}
	return true;
}


#define VALUETREE_MIN 110
#define VALUETREE_MAX 130
#define VALUE_BONUS_MIN 20

CMD:vendermadeiras(playerid, params[])
{
	if(PlayerInfo[ playerid ][ pEmprego ] != Lenhador ) return ErroMSG( playerid, "Voce nao trabalha como lenhador!");
	if(EmpregoDuty[ playerid ] != Lenhador ) return ErroMSG( playerid, "Voce nao esta em serviço!");
	if(!IsTrukLumb(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ErroMSG( playerid, "Voce precisa estar dirigindo o caminhao de lenhador!");
	if(!objSlicesAttachCount[GetPlayerVehicleID(playerid)]) return ErroMSG(playerid, "Seu caminhao nao possui nenhuma madeira!");
	if(parceiroLenhador[playerid] == INVALID_PLAYER_ID) return ErroMSG(playerid, "Seu parceiro desconectou-se ou nao existe!");
    if(!IsPlayerInPlace(playerid, -2072.347656, -2440.809814, -1932.712402, -2362.799804))return ErroMSG(playerid, "Voce nao esta na area de vendas de madeira!");

	static
		moneyJob,
		randTreeValue,
		bonusPay[3],
		parceiro,
		str[ 200 ]
	;

	parceiro = parceiroLenhador[playerid];
	if(IsPlayerConnected(parceiro))
	{
        if(IsTrukLumb(playerid))
        {
            bonusPay[0] = (objSlicesAttachCount[GetPlayerVehicleID(playerid)]*5); // Calculo do bonus maximo 23*5 115R$
			bonusPay[1] = objSlicesAttachCount[GetPlayerVehicleID(playerid)] < 10 ? (0):(random(bonusPay[0])); //Abaixo de 10 madeiras Bonus 0
			bonusPay[2] = (bonusPay[1]+VALUE_BONUS_MIN); // Bonus minimo mais valor recebido de bonusPay[1]

			randTreeValue = RandomEx(VALUETREE_MIN, VALUETREE_MAX); //Valor de cada madeira vendida
			moneyJob = (randTreeValue*objSlicesAttachCount[GetPlayerVehicleID(playerid)]); //A ideia e deixar um valor proximo a 3k
			moneyJob = (moneyJob/2);

            if(PlayerInfo[playerid][temparceiro] == true)
            {
    			ActionPlayerGrana(playerid, "+", moneyJob, 1);
                ActionPlayerGrana(parceiro, "+", moneyJob, 1);
                PlayerInfo[playerid][pSalario] += bonusPay[2];
                PlayerInfo[parceiro][pSalario] += bonusPay[2];

    			format(str, sizeof(str), "| Trabalho Lenhador | - Voce e seu parceiro(a) receberam R$%s pelas madeiras coletadas", FormatNumber(moneyJob), FormatNumber(bonusPay[2]));
    			SCM(playerid, -1, str);
    			SCM(parceiro, -1, str);

    			format(str, sizeof(str), "Foram adicionados R$%s ao seu bônus salarial", FormatNumber(bonusPay[2]));
    			SCM(playerid, -1, str);
    			SCM(parceiro, -1, str);

    			OnSalvarDados(playerid);
    			OnSalvarDados(parceiro);

                PlayerInfo[playerid][temparceiro] = false;

                } else {

                ActionPlayerGrana(playerid, "+", moneyJob, 1);
                PlayerInfo[playerid][pSalario] += bonusPay[2];

                format(str, sizeof(str), "| Trabalho Lenhador | - Voce recebeu R$%s pelas madeiras coletadas", FormatNumber(moneyJob), FormatNumber(bonusPay[2]));
                SCM(playerid, -1, str);

                format(str, sizeof(str), "Foram adicionados R$%s ao seu bônus salarial", FormatNumber(bonusPay[2]));
                SCM(playerid, -1, str);

                OnSalvarDados(playerid);
            }

			detachObjectsForTruck(GetPlayerVehicleID(playerid));
			/*parceiroLenhador[parceiroLenhador[playerid]] = INVALID_PLAYER_ID;
			parceiroLenhador[playerid] = INVALID_PLAYER_ID;*/
		}
	}
    return true;
}

CMD:iniciar(playerid, params[]){
	new
		parametro[50],
		bool:result = false
	;
	if(sscanf(params, "s[50]", parametro)) return SCM(playerid, Verde, "Use: /iniciar | lenhador |");

	if(!strcmp(parametro, "lenhador", true))
	{
 		if(PlayerInfo[ playerid ][ pEmprego ] != Lenhador ) return ErroMSG( playerid, "Voce nao trabalha como lenhador!");
		if(EmpregoDuty[ playerid ] != Lenhador ) return ErroMSG( playerid, "Voce nao esta em serviço!");
		if(!IsTrukLumb(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ErroMSG( playerid, "Voce precisa estar dirigindo o caminhao de lenhador!");

        ForPlayers(i)
        {
  			if(PlayerInfo[ i ][ pEmprego ] == Lenhador && EmpregoDuty[ i ])
  			{
  				if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleSeat(i) == 1 && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)){
  				    parceiroLenhador[i] = playerid;
                    parceiroLenhador[playerid] = i;
                    PlayerInfo[playerid][temparceiro] = true;

                    static str[ 150 ];
                    format(str, sizeof(str), "| Trabalho Lenhador | - Voce iniciou um trabalho de lenhador com %s, utilize /gps > pontos de cortes para saber onde cortar madeiras!", GetName(i));
					SCM(playerid, -1, str);
					format(str, sizeof(str), "| Trabalho Lenhador | - Voce iniciou um trabalho de lenhador com %s, quando chegar ao local de corte de madeiras use /cortar!", GetName(playerid));
					SCM(i, -1, str);
					result = true;
				}
			}
		}
		if(!result) SCM(playerid, -1, "Voce precisa arrumar um parceiro lenhador e em modo trabalho para começar o serviço!");
	}
	return true;
}

CMD:cortar(playerid){
    //if(PlayerInfo[ playerid ][ pEmprego ] != Lenhador ) return false;
	if(EmpregoDuty[ playerid ] != Lenhador ) return ErroMSG( playerid, "Voce nao esta em serviço como lenhador!");
    if(playerCutting[playerid] == true) return ErroMSG( playerid, "Voce ja esta cortando uma arvore!");

	//if(CortouArvore[ playerid ]) return ErroMSG( playerid, "Voce ja cortou uma arvore, va vende-la!");

	static bool:result;
	result = false;

	Loop(tid, MAX_TREE)
    {
		if(IsPlayerInRangeOfPoint(playerid, 5.0, treeLumb[tid][t_posx], treeLumb[tid][t_posy], treeLumb[tid][t_posz]))
        {
            result = true;
			if(!playerCuttingTree[tid])
            {
                SCM(playerid, -1, "Use a motossera para cortar a arvore observando a barra de corte.");
                ProgressCorte[playerid] = CreatePlayerProgressBar(playerid, 148.000000, 388.000000, 68.500000, 6.199999, -1429936641, 60.0, 0);
				ShowPlayerProgressBar(playerid, ProgressCorte[ playerid ]);

				PlayerTextDrawShow(playerid, TextLenhadores[playerid]);

				//Vars setadas na arvore
				playerCuttingTree[tid] = true;

                //CortouArvore[ playerid ] = 0;

				ProgressoCorte[ playerid ] = 0;
				PodeClicar[ playerid ] = false;
				playerCutting[playerid] = true;
		        TimerCorte[ playerid ] = SetTimerEx("CortandoTimer", 1000, true, "d", playerid);

			}
			else {
				ErroMSG(playerid, "Esta arvore ja esta sendo cortada por alguem!");
				break;
			}
		}
	}
	if(!result) ErroMSG(playerid, "Voce nao esta proximo a uma arvore de corte valida!");

	return true;
}

Public:CortandoTimer( playerid )
{
    PodeClicar[ playerid ] = false;

	if((ProgressoCorte[ playerid ]-1) <= 0) ProgressoCorte[ playerid ] = 0;
	else ProgressoCorte[ playerid ]--;

	SetPlayerProgressBarValue(playerid, ProgressCorte[ playerid ], ProgressoCorte[playerid]);
	return true;
}


/* ==================== Paramedicos ==================== */
CMD:curar( playerid, params[]){

    static id;

	if(sscanf(params, "u", id)) return SCM(playerid, -1, "{9BE8C5}Use: /Curar [id]");


	if(PlayerInfo[ playerid ][ pEmprego ] != Paramedico ) return false;
	if(EmpregoDuty[ playerid ] != Paramedico ) return ErroMSG( playerid, "Voce nao esta trabalhando!");
	if(PlayerSolicitou[ id ] != Paramedico) return SCM(playerid, -1, "{9BE8C5}Este player nao solicitou por um serviço medico!");
    if(GetPlayerDistanceFromPlayer(playerid, id) > 1.0) return ErroMSG( playerid, "Chegue mais perto do ferido(a)!");

    ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.0, 1, 0, 0, 0, 0);

    ProgressCurando[playerid] = CreatePlayerProgressBar(playerid, 148.000000, 388.000000, 68.500000, 6.199999, -1429936641, 100.0, 0);
	ShowPlayerProgressBar(playerid, ProgressCurando[playerid]);
	TextDrawShowForPlayer(playerid, TextParamedicos);

    PlayerSolicitou[ id ] = 0;
    SetPlayerMarkerForPlayer(playerid, id, 0xFFFFFF00);

    ProgressoCurando[ playerid ] = 0;
	TimerCurando[ playerid ] = SetTimerEx("CurandoPlayer", 1000, true, "dd", playerid, id);
	return true;
}

forward CurandoPlayer(playerid, id);
public CurandoPlayer(playerid, id) {

	// Playerid = Medico   |  ID = ferido

    ProgressoCurando[ playerid ] += 2;
	SetPlayerProgressBarValue(playerid, ProgressCurando[ playerid ], ProgressoCurando[ playerid ]);
	ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.0, 1, 0, 0, 0, 0);

//	printf("Valor de ProgressoCurando: %i", ProgressoCurando[ playerid ]);

    if(ProgressoCurando[ playerid ] > 100){

		KillTimer(TimerCurando[ playerid ]);

        static ninhul[ 140 ];

        StopLoopingAnim(playerid);

        PlaySoundForPlayer(playerid, 1057);

		if(GetPlayerDistanceFromPlayer(playerid, id) < 5.0) {
			if(IsPlayerConnected( id )){
	            PlayerInfo[ id ][ Morreu ] = false;
				KillTimer(AnimeMorte[ id ]);
	    		KillTimer(EsperandoA_Timer[ id ]);

				StopLoopingAnim(id);
				SetPlayerVida(id, 50.0);

				format(ninhul, sizeof ninhul, "{F5F9EC}| Servidor | - Voce conseguiu reanimar {DEF9A4}%s {F5F9EC}e {7EEB8F}$500 {F5F9EC}foram adicionados ao seu salario!", GetNameEx(id));
				SCM(playerid, -1, ninhul);

				format(ninhul, sizeof ninhul, "{F5F9EC}| Servidor | - Voce foi reanimado pelo paramedico {DEF9A4}%s {F5F9EC}e o custo do serviço ficou em {7EEB8F}$500 {F5F9EC}!", GetNameEx(playerid));
				SCM(id, -1, ninhul);

				ActionPlayerGrana(id, "-", 500, 1);

				ActionPlayerGrana(playerid, "+", 500, 1);
				PlayerInfo[playerid][pSalario] += 10;
				OnSalvarDados(playerid);
			}
			else {
                format(ninhul, sizeof ninhul, "{9FD2F8}O Jogador(a) desconectou-se!", GetNameEx(id));
				SCM(playerid, -1, ninhul);
	            GameTextForPlayer(playerid, "~r~Falhou", 1000, 1);
			}
		}
		else {

			format(ninhul, sizeof ninhul, "{9FD2F8}| Servidor | - {E5EFF7}%s {9FD2F8}nao resistiu aos ferimentos e faleceu!", GetNameEx(id));
			SCM(playerid, -1, ninhul);
            GameTextForPlayer(playerid, "~r~Falhou", 1000, 1);
		}

		DestroyPlayerProgressBar(playerid, ProgressCurando[ playerid ]);
		TextDrawHideForPlayer(playerid, TextParamedicos);
	}

	return true;
}

/* ==================== Advogados ==================== */

CMD:solicitar(playerid, params[]){

	new
		sk_opcao[50]
	;

	static str[180];

	if(sscanf(params, "s[50]", sk_opcao)){
		Params:SCM(playerid, -1, "{9BE8C5}Use: /solicitar | mecanico | advogado | taxi | medico | pizza |");
	}
	else if(!strcmp(sk_opcao, "advogado", true)){
        if(!PresoStatus[ playerid ]) return ErroMSG(playerid, "Voce nao esta preso!");
		if(!PlayerInfo[ playerid ][ PresoOrg ]) return ErroMSG(playerid, "Voce nao pode solicitar um advogado na solitaria!");

		format(str, sizeof(str), "{ACBFD2}(>) - %s solicitou por um advogado, va ate o local onde o player se encontra preso e realize uma oferta!", GetName(playerid));
        SendEmpregoMSG(Advogado, -1, str);

        SCM(playerid, -1, "{ACBFD2}(>) - Voce solicitou por um Advogado, aguarde ..");

        ForPlayers(i){
			if(PlayerInfo[ i ][ pEmprego ] == Advogado){
                PlaySoundForPlayer(i, 1057);
			}
		}

        PlayerSolicitou[ playerid ] = Advogado;
	}
	else if(!strcmp(sk_opcao, "mecanico", true)){
        if(PresoStatus[ playerid ]) return ErroMSG(playerid, "Voce nao pode solicitar um mecanico preso!");

        PlayerSolicitou[ playerid ] = Mecanico;

        SCM(playerid, Purple, "(>) - Voce solicitou por um serviço mecanico, aguarde ..");

		format(str, sizeof(str), "{ACBFD2}(>) - %s [%i] solicitou por um mecanico atenda-o assim que possivel!", GetName(playerid), playerid);
        SendEmpregoMSG(Mecanico, Purple, str);

        ForPlayers(i){
			if(PlayerInfo[ i ][ pEmprego ] == Mecanico){
                PlaySoundForPlayer(i, 1057);
			}
		}

		SetTimerEx("LiberarSolicitacao", TMinutos(8), false, "dd", playerid, Mecanico);
	}
	else if(!strcmp(sk_opcao, "taxi", true)){
        if(PresoStatus[ playerid ]) return true;
		if(PediuTaxi[ playerid ]) return ErroMSG(playerid, "Os taxistas ja foram avisados, aguarde!");

        SCM(playerid, -1, "{F3FE80}(>) - Voce solicitou um taxi, aguarde por resposta!");

		format(str, sizeof(str), "{F3FE80}(>) - %s [%i] solicitou por um taxista, atenda-o se possivel!", GetName(playerid), playerid);
        SendEmpregoMSG(Taxista, -1, str);

        ForPlayers(i){
			if(PlayerInfo[ i ][ pEmprego ] == Taxista){
                PlaySoundForPlayer(i, 1057);
			}
		}

        PediuTaxi[playerid] = true;
        SetTimerEx("LiberarSolicitacao", TMinutos(8), false, "dd", playerid, Taxista);
	}
	else if(!strcmp(sk_opcao, "medico", true)){
	    if(PresoStatus[ playerid ]) return true;
		if(PlayerSolicitou[ playerid ]) return true;
		//Mexi aqui
	   //if(!PlayerInfo[ playerid ][ Morreu ]) return true;
		//if(GetPlayerGrana( playerid ) < 500 ) return ErroMSG(playerid, "Voce nao possui a quantia de $500!");

		SCM(playerid, Purple, "(>) - Voce solicitou por um serviço medico, aguarde ..");

		format(str, sizeof(str), "(>) - %s [%i] solicitou por um medico atenda-o assim que possivel!", GetName(playerid), playerid);
        SendEmpregoMSG(Paramedico, Purple, str);

        PlayerSolicitou[ playerid ] = Paramedico;

        ForPlayers(i){
			if(PlayerInfo[ i ][ pEmprego ] == Paramedico){
                PlaySoundForPlayer(i, 1057);
			}
		}

		SetTimerEx("LiberarSolicitacao", TMinutos(8), false, "dd", playerid, Paramedico);
	}
	else if(!strcmp(sk_opcao, "pizza", true)){
	    if(PresoStatus[ playerid ]) return true;
		if(PlayerSolicitou[ playerid ]) return true;
	    if(PlayerInfo[ playerid ][ Morreu ]) return true;

		if(GetPlayerGrana( playerid ) < VALUE_PIZZA ) {
            format(str, sizeof(str), "(>) - Voce nao possui a quantia de {F7A2A0}R$%s", FormatNumber(VALUE_PIZZA));
			return SCM(playerid, -1, str);
		}

		SCM(playerid, Purple, "(>) - Voce solicitou por um Entregador(a) de Pizzas, aguarde ..");

		format(str, sizeof(str), "{FFFFFF}({F6F59B}>{FFFFFF}) - {F6F59B}%s {FFFFFF}[{F6F59B}%i{FFFFFF}] solicitou por um(a) {F6F59B}Entregador de Pizzas {FFFFFF}atenda-o assim que possivel!", GetName(playerid), playerid);
        SendEmpregoMSG(PizzaJob, -1, str);

        PlayerSolicitou[ playerid ] = PizzaJob;

        ForPlayers(i){
			if(PlayerInfo[ i ][ pEmprego ] == PizzaJob){
                PlaySoundForPlayer(i, 1057);
			}
		}

		SetTimerEx("LiberarSolicitacao", TMinutos(8), false, "dd", playerid, PizzaJob);
	}
	else goto Params;
	return true;
}

forward LiberarSolicitacao(playerid, profissao);
public LiberarSolicitacao(playerid, profissao)
{
	switch(profissao)
	{
	    case Mecanico:
	    {
            SCM(playerid, -1, "{ACBFD2}(>) - Voce foi liberado para utilizar um chamado mecanico!");

            PlayerSolicitou[ playerid ] = 0;

            ForPlayers(i)
            {
				if(PlayerInfo[ i ][ pEmprego ] == Mecanico)
				{
				    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
		}
	    case Paramedico: {
            SCM(playerid, -1, "{ACBFD2}(>) - Voce foi liberado para utilizar um chamado medico!");

            PlayerSolicitou[ playerid ] = 0;

            ForPlayers(i){
				if(PlayerInfo[ i ][ pEmprego ] == Paramedico){
				    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
		}
		case PizzaJob: {
            SCM(playerid, -1, "{ACBFD2}(>) - Voce foi liberado para pedir pizza novamente!");

            PlayerSolicitou[ playerid ] = 0;

            ForPlayers(i){
				if(PlayerInfo[ i ][ pEmprego ] == PizzaJob){
				    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
		}
		case Taxista: {
            SCM(playerid, -1, "{ACBFD2}(>) - Voce foi liberado para chamar um taxista!");

            PediuTaxi[playerid] = false;

            ForPlayers(i){
				if(PlayerInfo[ i ][ pEmprego ] == Taxista){
				    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
		}
	}
	return true;
}

CMD:enviarcontrato(playerid, params[]){
	if(PlayerInfo[playerid][pEmprego] != Advogado) return ErroMSG(playerid, "Voce nao e um Advogado!");

	if(!EmpregoDuty[playerid]) return ErroMSG(playerid, "Voce nao esta trabalhando!");

	new id;
	if(sscanf(params, "i", id)) return ErroMSG(playerid, "Use: /enviarcontrato [id]!");

	if(!IsPlayerConnected(id) || !PlayerInfo[ id ][ pLogger ]) return ErroMSG(playerid, "Player nao conectado!");
    if(id == playerid) return ErroMSG(playerid, "Voce nao pode enviar contratos para si proprio!");
	if(!PresoStatus[ id ]) return ErroMSG(playerid, "Este player se encontra em liberdade!");
	if(!PlayerInfo[ id ][ PresoOrg ]) return ErroMSG(playerid, "Voce nao pode enviar contrato a players presos na solitaria!");
	if(PlayerSolicitou[ playerid ] != Advogado) return ErroMSG(playerid, "O player ainda nao solicitou um advogado!");
	EnviarContratoAdvogado(playerid, id);

	return true;
}

EnviarContratoAdvogado(playerid, id){

	new box[500],
		str[129],
		TempoOferecido,
		Valor
	;

    PlayerSolicitou[ id ] = 0;

    format(str, sizeof str, "{ACBFD2}%s %s lhe enviou um contrato de liberaçao!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O advogado"):("A advogada"), GetNameEx( playerid ));
	SCM(id, -1, str);

	format(str, sizeof str, "{ACBFD2}Voce enviou um contrato prisional para %s!", GetNameEx( id ));
	SCM(playerid, -1, str);

	switch(PlayerInfo[playerid][ pProfLevel ][ Advogado ]){
		case 1: {
			TempoOferecido = ((30*PlayerInfo[id][PresoTempo])/100);
			Valor = 2300;
		}
		case 2: {
			TempoOferecido = ((40*PlayerInfo[id][PresoTempo])/100);
			Valor = 4500;
		}
		case 3: {
			TempoOferecido = ((60*PlayerInfo[id][PresoTempo])/100);
			Valor = 5100;
		}
		case 4: {
			TempoOferecido = ((80*PlayerInfo[id][PresoTempo])/100);
			Valor = 7700;
		}
		case 5: {
			TempoOferecido = -1;
			Valor = 10000;
		}
	}

	ContratoID[id] = playerid;
	ContratoValor[id] = Valor;
	TempoCOffer[id] = TempoOferecido;

	strcat(box, "{79C5FC}|___________ {FFFFFF}Contrato Prisional {79C5FC}___________|\n");
    format(str, sizeof(str), "{2DFEE6}{FFFFFF}%s: %s\n", PlayerInfo[ playerid ][ pSex ] == 1 ? ("Advogado"):("Advogada"), GetNameEx( playerid ));
    strcat(box, str);
    format(str, sizeof(str), "{2DFEE6}{FFFFFF}Habilidade nivel: %i\n", PlayerInfo[id][ pProfLevel ][ Advogado ]);
    strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Proposta: %s\n", TempoOferecido == -1 ? (Convert(TempoOferecido, 1)):("{A7FC97}Liberadade"));
    strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Tempo restante para cumprir: %s\n", Convert(PlayerInfo[id][PresoTempo], 1));
    strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Valor: %s\n", FormatNumber(Valor));
	strcat(box, str);
	strcat(box, "{2DFEE6}{FFFFFF}Obs: O dinheiro necessario para fechar o contrato\n{2DFEE6}{FFFFFF}sai diretamente da sua conta bancaria!\n");
	strcat(box, "{79C5FC}|__________________________________________|\n");

    ShowPlayerDialog( id, DIALOG_CONTRATO_ADV, DIALOG_STYLE_MSGBOX,	"Contrato prisional", box, "Aceitar", "Recusar");

	box[0] = '\0';

	strcat(box, "{79C5FC}|___________ {FFFFFF}Contrato Prisional {79C5FC}___________|\n");
    format(str, sizeof(str), "{2DFEE6}{FFFFFF}Detento(a): %s\n", GetNameEx( id ));
    strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Proposta: %s\n", TempoOferecido == PlayerInfo[id][PresoTempo] ? (Convert(TempoOferecido, 1)):("{A7FC97}Liberadade"));
    strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Tempo de cadeia: %s\n", Convert(PlayerInfo[id][PresoTempo], 1));
    strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Valor: %s\n", FormatNumber(Valor));
	strcat(box, str);
	strcat(box, "{2DFEE6}{FFFFFF}Aguarde uma resposta!\n");
	strcat(box, "{79C5FC}|__________________________________________|\n");

    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	"Contrato prisional", box, "Aguardar", "");

	return true;
}

CMD:mecanico(playerid)
{
	if(PediuMecanico[playerid] == 0){
		new sK[ 128 ];

		ForPlayers(i){
			if(PlayerInfo[i][pEmprego] == Mecanico){
				if(EmpregoDuty[i] == Mecanico){
		 			format( sK, sizeof( sK ), "* %s[%d] esta pedindo um Mecanico, use /localizar para encontra-lo.", GetNameEx( playerid ), playerid);
		    		SCM(i, 0x7AC7FAFF , sK);
				}
			}
		}

		SCM(playerid, 0x13690CAA, "Os mecanicos em serviço foram avisados, por favor aguarde.");
		PediuMecanico[playerid] = 1;

		SetTimer("LiberarComandoMecanico", TMinutos(1), true);
	} else {
	    ErroMSG(playerid, "Voce usou esse comando recentemente, aguarde alguns instantes.");
	}

	return true;
}

CMD:colocarminerio(playerid){
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 673.2671, 828.9078, -38.3878)){
		if(PlayerInfo[ playerid ][pEmprego] != Minerador) return ErroMSG(playerid, "Voce nao e um Minerador!");
		if(!EmpregoDuty[ playerid ]) return ErroMSG(playerid, "Voce nao esta em serviço!");

		if(MinerioValue[ playerid ] == 0 || MinerioType[ playerid ] == 0) return ErroMSG(playerid, "Seu minerio nao tem valor, volte la e busque mais!");

        ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);

        new str[ 129 ], Minerio_[ 30 ];
		switch(MinerioType[ playerid ]){
			case MINERIO_OURO: Minerio_ = "uma pedra ouro";
			case MINERIO_FERRO: Minerio_ = "um minerio de ferro";
			case MINERIO_PRATA: Minerio_ = "um minerio de prata";
			case MINERIO_BRONZE: Minerio_ = "um minerio de bronze";
		}

		PlayerInfo[ playerid ][ pSalario ] += 10;
		ActionPlayerGrana(playerid, "+", MinerioValue[ playerid ], 1);
		format(str, sizeof(str), "{77FAD9}> - Voce trouxe %s e vai ganhar por ele $%s, retorne a mina para buscar mais minerios!", Minerio_, FormatNumber(MinerioValue[ playerid ]));
		SCM(playerid, -1, str);

		OnSalvarDados( playerid );
		Mineirando[ playerid ] = 0;
		MinerioValue[ playerid ] = 0;
		MinerioType[ playerid ] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, 9);
	}
	return true;
}

CMD:minerar(playerid){
    if(IsPlayerInRangeOfPoint(playerid, 5.0, -2595.2668, 3950.6301, 251.4338)
	|| IsPlayerInRangeOfPoint(playerid, 5.0, -2589.2111, 3942.4921, 251.7765)
	|| IsPlayerInRangeOfPoint(playerid, 5.0, -2587.3886, 3924.4562, 252.7747)
	|| IsPlayerInRangeOfPoint(playerid, 5.0, -2594.7407, 3914.3105, 253.3480)
	|| IsPlayerInRangeOfPoint(playerid, 5.0, 2604.9072, 3909.9938, 253.5944)
	|| IsPlayerInRangeOfPoint(playerid, 5.0, -2616.8371, 3916.8371, 253.2293)){

		if(PlayerInfo[ playerid ][pEmprego] != Minerador) return ErroMSG(playerid, "Voce nao e um Minerador!");
		if(!EmpregoDuty[ playerid ]) return ErroMSG(playerid, "Voce nao esta em serviço!");
		if(Mineirando[ playerid ]) return ErroMSG(playerid, "Voce ja esta mineirando!");
		if(MinerioValue[ playerid ]) return ErroMSG(playerid, "Va ate a superficie e deposite o seu minerio no local indicado!");

        SetPlayerAttachedObject( playerid, 9, 19631, 6, 0.058538, 0.013809, 0.000000, 250.090454, 101.572578, 0.000000, 1.000000, 1.000000, 1.000000 ); // unknown - marreta

        ApplyAnimationEx(playerid, "BASEBALL","Bat_4", 4.1, 1, 0, 0, 1, 0);

		SCM(playerid, -1, "{A2A6A6}Minerando..");

		Mineirando[ playerid ] = 3;
		MinerioValue[ playerid ] = 0;
		MinerioType[ playerid ] = 0;

		ProgressMineirador[playerid] = CreatePlayerProgressBar(playerid, 148.000000, 388.000000, 68.500000, 6.199999, -1429936641, 100.0, 0);
		ShowPlayerProgressBar(playerid, ProgressMineirador[playerid]);
	}
	return true;
}

CMD:equipar(playerid)
{
	// Sistema de Equipamentos
    if(GetPlayerOrg(playerid) > 0){
		new now = gettime(),
			tmp[129], Oid;
		Loop(i, sizeof(PickupEquipar)) {
			if( IsPlayerInRangeOfPoint( playerid, 2.0, PickupEquipar[i][posX], PickupEquipar[i][posY], PickupEquipar[i][posZ] ) && PlayerInfo[playerid][pOrg] == PickupEquipar[i][orgsID] ) {
				if( GetPVarInt(playerid, "countdown") > now ) return ErroMSG( playerid, "Espere 1 minuto para equipar novamente.");
				SetPVarInt(playerid, "countdown", (now + 60));

			    Oid = GetPlayerOrg(playerid);
                if(isPlayerCop(playerid)) {
                    switch(Oid){
						case PM:{
							GivePlayerWeaponEx(playerid, 3, 1);//Cacetete

							if(CofreOrg[Oid][WEagle] > 0){
								GivePlayerWeaponEx(playerid, 24, 250);//Eagle
								CofreOrg[Oid][WEagle]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'Eagle' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WMP5] > 0){
								GivePlayerWeaponEx(playerid, 29, 500);//MP5
								CofreOrg[Oid][WMP5]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'MP5' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WM4] > 0){
			    				GivePlayerWeaponEx(playerid, 31, 500);//M4
			    				CofreOrg[Oid][WM4]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'M4' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WShot] > 0){
			    				GivePlayerWeaponEx(playerid, 25, 150);//	Shotgun
							    CofreOrg[Oid][WShot]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'Shotgun/Doze' de sua Organizaçao se esgotou !");
						}
						case BOPE:{

							if(CofreOrg[Oid][WEagle] > 0){
								GivePlayerWeaponEx(playerid, 24, 250);//Eagle
								CofreOrg[Oid][WEagle]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'Eagle' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WMP5] > 0){
								GivePlayerWeaponEx(playerid, 29, 500);//MP5
								CofreOrg[Oid][WMP5]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'MP5' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WM4] > 0){
			    				GivePlayerWeaponEx(playerid, 31, 500);//M4
			    				CofreOrg[Oid][WM4]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'M4' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WGranada] > 0){
								GivePlayerWeaponEx(playerid, 16, 10);//Granada
				    			CofreOrg[Oid][WGranada]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'Granada' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WRifle] > 0){
			    				GivePlayerWeaponEx(playerid, 34, 50);//Sniper
							    CofreOrg[Oid][WRifle]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'Sniper/Rifle' de sua Organizaçao se esgotou !");
							if(CofreOrg[Oid][WShot] > 0){
			    				GivePlayerWeaponEx(playerid, 25, 150);//	Shotgun
							    CofreOrg[Oid][WShot]--;
							}
							else SCM(playerid, Vermelho, "O Estoque de 'Shotgun/Doze' de sua Organizaçao se esgotou !");
						}
					}
				}
				else if(IsPlayerGang(playerid)) {
                    GivePlayerWeaponEx(playerid, 4, 1);//Faca

					if(CofreOrg[Oid][WEagle] > 0){
					    GivePlayerWeaponEx(playerid, 24, 250);//Eagle
					    CofreOrg[Oid][WEagle]--;
					}
					else SCM(playerid, Vermelho, "O Estoque de 'Eagle' de sua Organizaçao se esgotou !");
					if(CofreOrg[Oid][WMP5] > 0){
						GivePlayerWeaponEx(playerid, 32, 500);//Tec
						CofreOrg[Oid][WMP5]--;
					}
					else SCM(playerid, Vermelho, "O Estoque de 'Tec' de sua Organizaçao se esgotou !");
					if(CofreOrg[Oid][WAK47] > 0){
					    GivePlayerWeaponEx(playerid, 30, 500);//AK-47
					    CofreOrg[Oid][WAK47]--;
					}
					else SCM(playerid, Vermelho, "O Estoque de 'AK-47' de sua Organizaçao se esgotou !");
					if(CofreOrg[Oid][WGranada] > 0){
					    GivePlayerWeaponEx(playerid, 18, 10);//Granada
					    CofreOrg[Oid][WGranada]--;
					}
					else SCM(playerid, Vermelho, "O Estoque de 'Bomba Garrafa' de sua Organizaçao se esgotou !");
					if(CofreOrg[Oid][WShot] > 0){
					    GivePlayerWeaponEx(playerid, 25, 150);//	Shotgun
					    CofreOrg[Oid][WShot]--;
					}
					else SCM(playerid, Vermelho, "O Estoque de 'Shotgun/Doze' de sua Organizaçao se esgotou !");
				}
				SaveCofreOrg(Oid);


				ShowPlayerDialog( playerid, DIALOG_DINAMITE, DIALOG_STYLE_MSGBOX,	"Dinamite", "\n{ffffff}Tambem deseja pegar uma dinamite?\nCaso queria mais tarde, podera usar {ff0f0f}'{ffffff}/dinamite{ff0f0f}'\n", "Sim", "Nao");

				format( tmp, sizeof(tmp), "{%s}O %s %s acaba de pegar seus equipamentos !", OrgColorHex[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg],PlayerInfo[playerid][pCargo]), GetName(playerid));
				ChatProximo(20.0, playerid, tmp, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
			}
		}
	}
	return true;
}

CMD:empresa(playerid, params[])
{
    new
		Acao[ 32 ],
		str[129],
		VarX
	;
    if(sscanf(params, "s[32]D(-1)", Acao, VarX)) return ErroMSG( playerid, "Use: /empresa [comprar | vender | info | menu]");

    if(!strcmp(Acao, "info", true))
    {
        static infstr[ 80 ];
        Loop(i, MAX_EMPRESAS)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, EmpInfo[i][ELocalX], EmpInfo[i][ELocalY], EmpInfo[i][ELocalZ]))
            {

                SendClientMessage(playerid, Purple, "|_______ INFO _______|");
                format(infstr, sizeof(infstr), " Nome: %s", EmpInfo[i][EMessage]);
                SendClientMessage(playerid, Purple, infstr);
                format(infstr, sizeof(infstr), " Porta: %s", EmpInfo[i][ELocked] ? ("Trancada"):("Aberta"));
                SendClientMessage(playerid, Purple, infstr);
                format(infstr, sizeof(infstr), " Entrada: -%d ", EmpInfo[i][ECEntrada]);
                SendClientMessage(playerid, Purple, infstr);
                format(infstr, sizeof(infstr), " Dono: %s ", EmpInfo[i][EDono]);
                SendClientMessage(playerid, Purple, infstr);
                format(infstr, sizeof(infstr), " Socio: %s ", EmpInfo[i][ESocio]);
                SendClientMessage(playerid, Purple, infstr);
                format(infstr, sizeof(infstr), " Preço: $%s", FormatNumber(EmpInfo[i][EPreco]));
                SendClientMessage(playerid, Purple, infstr);
                format(infstr, sizeof(infstr), " Local: %s", GetAreaForCords(EmpInfo[i][ELocalX], EmpInfo[i][ELocalY], EmpInfo[i][ELocalZ]));
                SendClientMessage(playerid, Purple, infstr);
                SendClientMessage(playerid, Purple, "|____________________|");
                return true;
            }
        }
    } else if(!strcmp(Acao, "menu", true))
    {
        if(PlayerInfo[playerid][pEmpKey] == 999) return ErroMSG(playerid, "Voce nao possui uma empresa!");

        if(IsPlayerInRangeOfPoint(playerid, 2.0, EmpInfo[PlayerInfo[playerid][pEmpKey]][ELocalX], EmpInfo[PlayerInfo[playerid][pEmpKey]][ELocalY], EmpInfo[PlayerInfo[playerid][pEmpKey]][ELocalZ]))
        {
            if(EmpInfo[PlayerInfo[playerid][pEmpKey]][EType] == 1){ //Empresas com interior
                format(str, 150, "Mudar Nome\nSocio\n%s\nCofre\nPreço de Entrada", EmpInfo[PlayerInfo[playerid][pEmpKey]][ELocked] == 0 ? ("{FF0000}Trancar"): ("{11BD1A}Abrir"));
                SCM(playerid, Verde, "Voce esta vendo o menu da sua empresa!");
                ShowPlayerDialog(playerid, EMPRESA_MENU, DIALOG_STYLE_LIST, "Menu Empresa", str, "Confirmar", "Cancelar");
            }
            else if(EmpInfo[PlayerInfo[playerid][pEmpKey]][EType] == 2 || EmpInfo[PlayerInfo[playerid][pEmpKey]][EType] == 3){
                format(str, 150, "Mudar Nome\nSocio\n%s\nCofre", EmpInfo[PlayerInfo[playerid][pEmpKey]][ELocked] == 0 ? ("{FF0000}Trancar"): ("{11BD1A}Abrir"));
                SCM(playerid, Verde, "Voce esta vendo o menu da sua empresa!");
                ShowPlayerDialog(playerid, EMPRESA_MENU, DIALOG_STYLE_LIST, "Menu Empresa", str, "Confirmar", "Cancelar");
            }
        }
        else ErroMSG(playerid, "Voce nao esta na sua empresa!");
    } else if(!strcmp(Acao, "comprar", true))
    {
        Loop(i, MAX_EMPRESAS)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, EmpInfo[i][ELocalX], EmpInfo[i][ELocalY], EmpInfo[i][ELocalZ]))
            {
                //if(!ConquistasInfo[playerid][ sMorador]) return ErroMSG(playerid, "Necessita conquista de Morador!");
                if(PlayerInfo[playerid][pEmpKey] != 999) return ErroMSG(playerid, "Voce ja possui uma empresa!");
    			if(EmpInfo[i][EEstado] == 1) return ErroMSG(playerid, "Esta empresa nao esta a venda!");

                if(PlayerInfo[playerid][pVIP] == 0)
                {
                    if(GetPlayerGrana(playerid) < EmpInfo[i][EPreco]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

    				EmpInfo[i][EEstado] = 1;
    				EmpInfo[i][EGrana] = 0;
    				ActionPlayerGrana(playerid, "-", EmpInfo[i][EPreco]);

    				strmid(EmpInfo[i][EDono], GetName(playerid), 0, strlen(GetName(playerid)), 255);
                    SendClientMessage(playerid, Verde, "Parabens por sua nova Empresa!");

                    UpdateEmpresaLabel(i);
                    SaveEmpresa(i);

    				PlayerInfo[playerid][pEmpKey] = i;

    				format(str, sizeof(str), "[Play Style] - %s comprou a propriedade [Empresa] NÂ° %i.", GetName(playerid), i);
    				ChatProximo(100.0, playerid, str, 0x707070FF,0x707070FF,0x707070FF,0x707070FF,0x707070FF);

                    format(STRLOG, sizeof(STRLOG), "[%s] %s comprou a propriedade [Empresa] NÂ° %i.", GetDateEx(), GetName(playerid), i);
                    SLog("Empresas.log", STRLOG);
                    break;

                } else if(PlayerInfo[playerid][pVIP] == 1)
                {
                    new resultado = DES_EMP_VIP1 * EmpInfo[i][EPreco] / 100;
                    new vtotal =  EmpInfo[i][EPreco] - resultado;

                    ShowDialogVIP(playerid, 1, i, DES_EMP_VIP1, vtotal);

                } else if(PlayerInfo[playerid][pVIP] == 2)
                {
                    new resultado = DES_EMP_VIP2 * EmpInfo[i][EPreco] / 100;
                    new vtotal =  EmpInfo[i][EPreco] - resultado;

                    ShowDialogVIP(playerid, 1, i, DES_EMP_VIP2, vtotal);

                } else if(PlayerInfo[playerid][pVIP] >= 3)
                {
                    new resultado = DES_EMP_VIP3 * EmpInfo[i][EPreco] / 100;
                    new vtotal =  EmpInfo[i][EPreco] - resultado;

                    ShowDialogVIP(playerid, 1, i, DES_EMP_VIP3, vtotal);
                }
    	    }
		}
	}

	else if(!strcmp(Acao, "vender", true))
    {
		static Lucro, bool:Count = false;
		Loop(i, MAX_EMPRESAS)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, EmpInfo[i][ELocalX], EmpInfo[i][ELocalY], EmpInfo[i][ELocalZ]))
            {
                if(PlayerInfo[playerid][pEmpKey] == 999) return ErroMSG(playerid, "Voce nao possui uma empresa!");
                if(EmpInfo[i][EEstado] != 1) return ErroMSG(playerid, "Esta empresa ja esta a venda!");
                if(PlayerInfo[playerid][pEmpKey] != i) return ErroMSG(playerid, "Esta empresa nao e sua!");

				EmpInfo[i][EEstado] = 0;

				Lucro = (EmpInfo[i][EPreco]/4);
				ActionPlayerGrana(playerid, "+", (EmpInfo[i][EPreco]-Lucro));

				strmid(EmpInfo[i][EDono], "Ninguem", 0, strlen("Ninguem"), 255);

				format(str, sizeof(str), "Voce consseguiu R$%s (75 Por cento) do valor pago em sua empresa!", FormatNumber((EmpInfo[i][EPreco]-Lucro)));
                SendClientMessage(playerid, AzulClaro, str);
                SendClientMessage(playerid, AzulClaro, "Empresa vendida !");


                UpdateEmpresaLabel(i);
                SaveEmpresa(i);

				PlayerInfo[playerid][pEmpKey] = 999;

    			format(str, sizeof(str), "[Play Style] - %s vendeu a propriedade [Empresa] NÂ° %i.", GetName(playerid), i);
				ChatProximo(100.0, playerid, str, 0x707070FF,0x707070FF,0x707070FF,0x707070FF,0x707070FF);

                format(STRLOG, sizeof(STRLOG), "[%s] %s vendeu a propriedade [Empresa] NÂ° %i.", GetDateEx(), GetName(playerid), i);
                SLog("Empresas.log", STRLOG);

                Count = true;
                break;
    	    }
		}
		if(Count != true) ErroMSG(playerid, "Voce nao esta em sua empresa");
    }
	return true;
}

ShowDialogVIP(playerid, tipo, id, desconto, valor)
{
    new dialog[200];
    if(tipo == 1)
    {
        PlayerInfo[playerid][IDcomprar] = id;
        PlayerInfo[playerid][VALORcomprar] = valor;

        format(dialog, sizeof(dialog), "Voce e um player VIP, e seu desconto e de %d % \nO preco com desconto ira custar: %d\n\nDeseja comprar essa empresa ?", desconto, valor);
        ShowPlayerDialog(playerid, DIALOG_COMPRAR_EMPRESA_VIP, DIALOG_STYLE_MSGBOX, "VIP - COMPRAR EMPRESA", dialog, "Comprar", "Cancelar");
    }

    if(tipo == 2)
    {
        PlayerInfo[playerid][IDcomprar] = id;
        PlayerInfo[playerid][VALORcomprar] = valor;

        format(dialog, sizeof(dialog), "Voce e um player VIP, e seu desconto e de %d % \nO preco com desconto ira custar: %d\n\nDeseja comprar essa casa ?", desconto, valor);
        ShowPlayerDialog(playerid, DIALOG_COMPRAR_CASA_VIP, DIALOG_STYLE_MSGBOX, "VIP - COMPRAR CASA", dialog, "Comprar", "Cancelar");
    }
    return 1;
}

CMD:casa(playerid, params[])
{
    new
		Acao[ 32 ],
		string[ 129],
		VarX
	;
    if(sscanf(params, "s[32]D(-1)", Acao, VarX)) return ErroMSG( playerid, "Use: /casa [comprar | info | localizar | trancar]");

    if(!strcmp(Acao, "comprar", true))
    {
        Loop(i, MAX_HOUSES)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]))
            {
                //if(!ConquistasInfo[playerid][ sMorador]) return ErroMSG(playerid, "Necessita conquista de Morador!");

                if(PlayerInfo[playerid][pHouse1] != 999 && PlayerInfo[playerid][pHouse2] != 999){
				    ErroMSG(playerid, "Voce ja possui duas casas!");
				    return true;
				}
				if(HouseInfo[i][hOwned] == 1) return ErroMSG(playerid, "Esta casa nao esta a venda!");


				if(HouseInfo[i][hVipHouse] == true && !PlayerInfo[ playerid ][ pVIP ]) return ErroMSG(playerid, "Esta casa e de compra exclusiva VIP ou SOCIO!");
                {
                    if(GetPlayerGrana( playerid ) < HouseInfo[i][hPrice]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente !");

    				ActionPlayerGrana(playerid, "-", HouseInfo[i][hPrice], 1);


    				HouseInfo[i][hOwned] = 1;
    				strmid(HouseInfo[i][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);

                    DestroyDynamicPickup(HousePickup[i]);
                    Delete3DTextLabel(HouseLabel[i]);
                    //DestroyDynamicMapIcon(HouseIcon[i]);
                    LoadHouseID(i);

    				SendClientMessage(playerid, Verde, "Parabens por sua nova residencia!");

    				if(PlayerInfo[playerid][pHouse1] != 999)
    					PlayerInfo[playerid][pHouse2] = i;
    				else
    					PlayerInfo[playerid][pHouse1] = i;

                    SaveHouse(i);
                    OnSalvarDados( playerid );

                    PlaySoundForPlayer(playerid, 1149);
    				format(strx, sizeof(strx), "[Play Style] - %s comprou a propriedade [Casa] NÂ° %i.", GetName(playerid), i);
    				SendClientMessageToAll(AzulClaro, strx);
                    format(strx, sizeof(strx), "[%s] %s comprou a propriedade [Casa] NÂ° %i.", GetDateEx(), GetName(playerid), i);
                    SLog("Casas.log", strx);

                }
				if(PlayerInfo[playerid][pVIP] == 1)
                {
                    new resultado = DES_CASA_VIP1 * EmpInfo[i][EPreco] / 100;
                    new vtotal =  EmpInfo[i][EPreco] - resultado;

                    ShowDialogVIP(playerid, 2, i, DES_CASA_VIP1, vtotal);

                } else if(PlayerInfo[playerid][pVIP] == 2)
                {
                    new resultado = DES_CASA_VIP2 * EmpInfo[i][EPreco] / 100;
                    new vtotal =  EmpInfo[i][EPreco] - resultado;

                    ShowDialogVIP(playerid, 2, i, DES_CASA_VIP2, vtotal);

                } else if(PlayerInfo[playerid][pVIP] >= 3)
                {
                    new resultado = DES_CASA_VIP3 * EmpInfo[i][EPreco] / 100;
                    new vtotal =  EmpInfo[i][EPreco] - resultado;

                    ShowDialogVIP(playerid, 2, i, DES_CASA_VIP3, vtotal);
                }
    	    }
    	}
        return 1;
    }
    if(!strcmp(Acao, "info", true))
    {
		static infstr[ 50 ];

        Loop(i, MAX_HOUSES)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]))
            {
		        SendClientMessage(playerid, Purple, "|_______ INFO _______|");
		        format(infstr, sizeof(infstr), " Casa NÂ° %i", i);
				SendClientMessage(playerid, Purple, infstr);
				format(infstr, sizeof(infstr), " Porta: %s", HouseInfo[i][hLocked] ? ("Trancada"):("Aberta"));
				SendClientMessage(playerid, Purple, infstr);
				format(infstr, sizeof(infstr), " Dono: %s ", HouseInfo[i][hOwner]);
				SendClientMessage(playerid, Purple, infstr);

				format(infstr, sizeof(infstr), " Tipo: %s ", HouseInfo[i][hVipHouse] == true ? ("Casa VIP"):("Casa Comum"));
				SendClientMessage(playerid, Purple, infstr);

				format(infstr, sizeof(infstr), " Preço: $%s", FormatNumber(HouseInfo[i][hPrice]));
				SendClientMessage(playerid, Purple, infstr);

				format(infstr, sizeof(infstr), " Local: %s", GetAreaForCords(HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]));
                SendClientMessage(playerid, Purple, infstr);
				SendClientMessage(playerid, Purple, "|____________________|");
				return true;
            }
        }

		if(PlayerInfo[playerid][pHouse1] == 999 && PlayerInfo[playerid][pHouse2] == 999) return ErroMSG(playerid, "Voce nao possui nenhuma casa!");

        format(string, sizeof(string), "Slot: Casa 1 | ID: %i | Porta: %s | Preço: $%d, Local: %s", PlayerInfo[playerid][pHouse1], HouseInfo[PlayerInfo[playerid][pHouse1]][hLocked] ? ("Trancada"):("Aberta"),
		HouseInfo[PlayerInfo[playerid][pHouse1]][hPrice], GetAreaForCords(HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceY],HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceZ]));
        SendClientMessage(playerid, Purple, string);
        if(PlayerInfo[playerid][pHouse2] != 999)
        {
            format(string, sizeof(string), "Slot: Casa 2 | ID: %i | Porta: %s | Preço: $%d, Local: %s", PlayerInfo[playerid][pHouse2], HouseInfo[PlayerInfo[playerid][pHouse2]][hLocked] ? ("Trancada"):("Aberta"), HouseInfo[PlayerInfo[playerid][pHouse2]][hPrice],
			GetAreaForCords(HouseInfo[PlayerInfo[playerid][pHouse2]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouse2]][hEntranceY],HouseInfo[PlayerInfo[playerid][pHouse2]][hEntranceZ]));
            SendClientMessage(playerid, Purple, string);
        }
        return 1;
    }
    if(!strcmp(Acao, "localizar", true))
    {
        if(PlayerInfo[playerid][pHouse1] == 999 && PlayerInfo[playerid][pHouse2] == 999) return ErroMSG(playerid, "Voce nao possui nenhuma casa!");

		if(PlayerInfo[playerid][pHouse2] != 999){
	        if(VarX == -1) return ErroMSG(playerid, "Por possuir duas casas, digite o ID da casa que deseja Localizar. (/casa localizar <1/2>)");
	        if(VarX != 1 && VarX != 2) return ErroMSG(playerid, "Os ID's das casas alternam entre 1 e 2 (/casa info para checar)");


            if(VarX == 2) SetGPSFromLocation(playerid, "Minha Casa", HouseInfo[PlayerInfo[playerid][pHouse2]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouse2]][hEntranceY],HouseInfo[PlayerInfo[playerid][pHouse2]][hEntranceZ]);
			else
            if(VarX == 1) SetGPSFromLocation(playerid, "Minha Casa", HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceY],HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceZ]);
		}
		else
		{
			SetGPSFromLocation(playerid, "Minha Casa", HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceY],HouseInfo[PlayerInfo[playerid][pHouse1]][hEntranceZ]);
		}
        return 1;
    }
    if(!strcmp(Acao, "trancar", true))
    {
        Loop(i, MAX_HOUSES)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]))
            {
                if(!strcmp(GetName(playerid), HouseInfo[i][hOwner], true) || PlayerInfo[ playerid ][ pAdmin ] > 0)
                {
                    if(HouseInfo[i][hLocked] == 0)
                    {
						GameTextForPlayer(playerid, "~y~Porta ~r~Trancada", 2000, 1);
						HouseInfo[i][hLocked] = 1;
        				SaveHouse(i);
    			    }
    			    else
                    {
        	   			HouseInfo[i][hLocked] = 0;
        	   			GameTextForPlayer(playerid, "~y~Porta ~r~Destrancada", 2000, 1);
                        SaveHouse(i);
    			    }
                }
                else
                {
                    ErroMSG(playerid, "Voce nao possui as chaves desta casa!");
                }
            }
        }
        return 1;
    }


    if(!strcmp(Acao, "vender", true))
    {
        if(PlayerInfo[playerid][pHouse1] == 999 && PlayerInfo[playerid][pHouse2] == 999) return ErroMSG(playerid, "Voce nao possui nenhuma casa!");

		if(PlayerInfo[playerid][pHouse2] == 999)
        {
			if(PlayerInfo[playerid][pSpawnType] == 1) PlayerInfo[playerid][pSpawnType] = 3;

			new houseid = PlayerInfo[playerid][pHouse1],
			precoTotal = (HouseInfo[houseid][hPrice]/4);

			format(string, sizeof(string), "[ Imobiliaria ] - Voce vendeu sua casa NÂ°%i, Valor pago: %i, Valor Recebido: %i", houseid, HouseInfo[houseid][hPrice], (HouseInfo[houseid][hPrice] - precoTotal));
            SendClientMessage(playerid, Verde, string);

            ActionPlayerGrana(playerid, "+", (HouseInfo[houseid][hPrice] - precoTotal));

			PlayerInfo[playerid][pHouse1] = 999;
			HouseInfo[houseid][hOwned] = 0;

			format(HouseInfo[houseid][hOwner],  MAX_PLAYER_NAME, "Ninguem");

            DestroyDynamicPickup(HousePickup[houseid]);
            Delete3DTextLabel(HouseLabel[houseid]);
            //DestroyDynamicMapIcon(HouseIcon[houseid]);

            LoadHouseID(houseid);

            SaveHouse(houseid);
        }
        else
        {
            if(VarX == -1) return ErroMSG(playerid, "Por possuir duas casas, digite o ID da casa que deseja vender. (/casa vender <1/2>)");
            if(VarX != 1 && VarX != 2) return ErroMSG(playerid, "Os ID's das casas alternam entre 1 e 2 (/casa info para checar)");
            if(VarX == 1)
            {
                if(PlayerInfo[playerid][pSpawnType] == 1) PlayerInfo[playerid][pSpawnType] = 2;

				new houseid = PlayerInfo[playerid][pHouse1],
				precoTotal = (HouseInfo[houseid][hPrice]/4);

				format(string, sizeof(string), "[ Imobiliaria ] - Voce vendeu sua casa primaria (ID 1) NÂ°%i, Valor pago: %i, Valor Recebido: %i", houseid, HouseInfo[houseid][hPrice], (HouseInfo[houseid][hPrice] - precoTotal));
				SendClientMessage(playerid, Verde, string);
	            ActionPlayerGrana(playerid, "+", (HouseInfo[houseid][hPrice] - precoTotal));

				HouseInfo[houseid][hOwned] = 0;
				format(HouseInfo[houseid][hOwner],  MAX_PLAYER_NAME, "Ninguem");

	            DestroyDynamicPickup(HousePickup[houseid]);
	            Delete3DTextLabel(HouseLabel[houseid]);
	            //DestroyDynamicMapIcon(HouseIcon[houseid]);

            	LoadHouseID(houseid);

	            new houseid2 = PlayerInfo[playerid][pHouse2];
                PlayerInfo[playerid][pHouse1] = houseid2;
                PlayerInfo[playerid][pHouse2] = 999;
                SendClientMessage(playerid, Verde, "Automaticamente, sua casa secundaria tornou-se sua casa primaria !");

	            SaveHouse(houseid);
	            OnSalvarDados( playerid );
				return 1;
            }

            if(VarX == 2)
            {
                if(PlayerInfo[playerid][pSpawnType] == 2) PlayerInfo[playerid][pSpawnType] = 1;

				new houseid = PlayerInfo[playerid][pHouse2],
				precoTotal = (HouseInfo[houseid][hPrice]/4);

				format(string, sizeof(string), "[ Imobiliaria ] - Voce vendeu sua casa N: %i, Valor pago: %i, Valor Recebido: %i", houseid, HouseInfo[houseid][hPrice], (HouseInfo[houseid][hPrice] - precoTotal));
				SendClientMessage(playerid, Verde, string);

	            PlayerInfo[playerid][pDinheiro] += (HouseInfo[houseid][hPrice] - precoTotal);

				PlayerInfo[playerid][pHouse2] = 999;
				HouseInfo[houseid][hOwned] = 0;
				format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, "Ninguem");

	            DestroyDynamicPickup(HousePickup[houseid]);
	            Delete3DTextLabel(HouseLabel[houseid]);
	            //DestroyDynamicMapIcon(HouseIcon[houseid]);

	            LoadHouseID(houseid);

			    SaveHouse(houseid);
			    OnSalvarDados( playerid );
                return 1;
            }
        }
	}
    return 1;
}

CMD:entrar(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;

	static str[128];
	Loop(i, MAX_HOUSES)
    {
		if(!HouseExist(i) || HouseInfo[i][hOwned] == 3) continue;

		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
        {
			if(!HouseInfo[i][hLocked]){
                SetPlayerPosEx(playerid, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ], 0.0, HouseInfo[i][hInterior]);

				PlayerInfo[ playerid ][ pWorld ] = HouseInfo[i][hWorld];

                SetPlayerVirtualWorld(playerid, HouseInfo[i][hWorld]);

                PlayerInfo[playerid][pHouseEnter] = i;

				GameTextForPlayer(playerid, "~w~Bem vindo em casa", 3000, 5);
                return 1;
			}
			else GameTextForPlayer(playerid, "~b~A casa esta trancada", 3000, 5);
		}
	}
	Loop(i, sizeof(PickupFixEntradaEmp)){
	    if(IsPlayerInRangeOfPoint( playerid, 2.0, PickupFixEntradaEmp[i][E_entradax], PickupFixEntradaEmp[i][E_entraday], PickupFixEntradaEmp[i][E_entradaz] )) {
			new EmpID = PickupFixEntradaEmp[i][E_emp];

			if(GetPlayerGrana(playerid) >= EmpInfo[EmpID][ECEntrada]){
			    if(EmpInfo[EmpID][ELocked] == 1 && PlayerInfo[playerid][pEmpKey] != EmpID) return ErroMSG(playerid, "Esta propriedade esta trancada!");

				SetPlayerPosEx(playerid, PickupFixEntradaEmp[i][E_saidax], PickupFixEntradaEmp[i][E_saiday], PickupFixEntradaEmp[i][E_saidaz], 142.5669, PickupFixEntradaEmp[i][E_interior]);
				FreezeEx(playerid, 1);
				Freeze( playerid ); //debugmobile

				format(str, sizeof(str), "~w~Bem Vindo~n~-R$%i", EmpInfo[EmpID][ECEntrada]);
				GameTextForPlayer(playerid, str, 3000, 1);
				ActionPlayerGrana(playerid, "-", EmpInfo[EmpID][ECEntrada]);

				ActionEmpresaMoney(playerid,EmpID, "+", EmpInfo[EmpID][ECEntrada]);
				return true;
			}
			else ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");
		}
	}
	Loop(i, sizeof(PickupFixEntrada)) {
		if(IsPlayerInRangeOfPoint( playerid, 2.0, PickupFixEntrada[i][posX], PickupFixEntrada[i][posY], PickupFixEntrada[i][posZ] )) {
			SetPlayerPosEx(playerid, PickupFixEntrada[i][tarX], PickupFixEntrada[i][tarY], PickupFixEntrada[i][tarZ], 0.0, PickupFixEntrada[i][intID]);
			FreezeEx(playerid, 1);
			Freeze( playerid ); //debugmobile
			return true;
		}
	}
	return true;
}

CMD:sair(playerid)
{

	if(PlayerInfo[playerid][pHouseEnter] != -1){
	    new
			vw = GetPlayerVirtualWorld( playerid ),
			i = PlayerInfo[playerid][pHouseEnter]
		;
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && vw == HouseInfo[i][hWorld])
	    {
	        SetPlayerPosEx(playerid, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], 0.0, 0, 0, 2);

			PlayerInfo[playerid][pHouseEnter] = -1;
	        PlayerInfo[playerid][pWorld] = 0;
	        SCM(playerid, VerdeClaro, "Voce saiu da casa!");
	        return true;
	    }
	}
	Loop(i, sizeof(PickupFixEntradaEmp)){
	    if(IsPlayerInRangeOfPoint( playerid, 5.0, PickupFixEntradaEmp[i][E_saidax], PickupFixEntradaEmp[i][E_saiday], PickupFixEntradaEmp[i][E_saidaz] )) {
			SetPlayerPosEx(playerid, PickupFixEntradaEmp[i][E_entradax], PickupFixEntradaEmp[i][E_entraday], PickupFixEntradaEmp[i][E_entradaz], 0.0, 0, 0, 2);
			break;
		}
	}
	Loop(i, sizeof(PickupFixEntradaEmp)){
	    if(IsPlayerInRangeOfPoint( playerid, 3.0, PickupFixSaida[i][PX], PickupFixSaida[i][PY], PickupFixSaida[i][PZ] )) {
			SetPlayerPosEx(playerid, PickupFixSaida[i][TX], PickupFixSaida[i][TY], PickupFixSaida[i][TZ], PickupFixSaida[i][Ang], PickupFixSaida[i][inteID]);
			FreezeEx(playerid, 1);
			Freeze( playerid ); //debugmobile
		}
	}
	return true;
}

CMD:gps( playerid ){
	if(PlayerInfo[ playerid ][ pGPS ] != 1) return ErroMSG(playerid, "Voce nao tem um Gps . compre um na loja de ultilidades");
	SCM(playerid, Verde, "Menu GPS na tela!");
	ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, ""#SERVELOGO" - GPS", "Locais Geral\nEmpregos HQs\nDesligar GPS", "Confirmar", "Cancelar");
	return true;
}

CMD:andar(playerid, params[]){
	new
		id,
		action[ 10 ]
	;

	if(sscanf(params, "s[10]D(-1)", action, id)){
        SCM( playerid, Verde, "Use: /andar set (id = 0 a 13)");
        SCM( playerid, Verde, "Use: /andar save (-300R$)");
		return true;
	}
	if(!strcmp(action, "set", true) && id != -1 && id <= 13)
    {
        SetPlayerWalkingStyle(playerid, id);
        SCM(playerid, Verde, "Voce Mudou seu estilo de andado!");
    }
    else if(!strcmp(action, "save", true)){
        if(GetPlayerGrana( playerid ) < 300) return ErroMSG(playerid, "a mudança de estilo custa 300 R$");

		PlayerInfo[ playerid ][ pWalkingStyle ] = GetPlayerWalkingStyle(playerid);
		SCM(playerid, Verde, "Estilo de Andado Salvo!");

		ActionPlayerGrana(playerid, "-", 300);
	}
	return true;
}

CMD:acessorios(playerid) {
	ShowPlayerDialog(playerid, DIALOG_TOYS, DIALOG_STYLE_LIST, "{EEE471}Meus acessorios", "Vestir/Tirar um de meus acessorios\nEditar acessorio\nDescartar acessorio\nSalvar Acessorios", "Selecionar", "Fechar");
    return 1;
}

CMD:novidades(playerid)
{
	new string[sizeof(News)*128];
	format(string, sizeof(string),"Versao: %s - Data: %s", GM_VERSAO, ATUALIZE_DATA);
	for(new i=1; i <sizeof(News); i ++)
	format(string,sizeof(string),"%s\n%s",string,News[i]);

	ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX,"\tultimas novidades do servidor:", string, "OK", "");
	return true;
}

CMD:capacete(playerid)
{
    if(PlayerInfo[ playerid ][pCapacete])
	{
        if(PlayerInfo[ playerid ][UsandoCapacete] != true)
		{
	        switch(GetPlayerSkin(playerid))
			{
				#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SlotCapacete, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
				case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
				case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
				case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
				case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
				case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
				case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				#undef SPAO
			}
			PlayerInfo[ playerid ][UsandoCapacete] = true;
			InfoMSG(playerid, "Voce colocou seu Capacete!");
		}
		else
		{
            PlayerInfo[ playerid ][UsandoCapacete] = false;
			InfoMSG(playerid, "Voce tirou seu Capacete!");
			RemovePlayerAttachedObject(playerid, SlotCapacete);
		}
    }
    else ErroMSG(playerid, "Voce nao tem um capacete !");
    return true;
}

CMD:senha( playerid )
{
	if(PlayerInfo[playerid][pAdmin])
		return ErroMSG(playerid, "Adminis nao podem pegar senha.");

	if(Senha[ playerid ] != 0)
		return ErroMSG(playerid, "Voce ja esta na fila de atendimento, Aguarde algum Administrador !");

	Senha[ playerid ] = Fila;
	Fila++;

	SendClientMessage(playerid, Laranja, "Voce entrou na fila de atendimento. Aguarde ate que algum Admin venha te atender.");

	format(strx, sizeof strx, "[ Play Style ] - [%i] %s entrou na fila de atendimento. Para atende-lo digite /irsenha {ffffff}%d.", playerid, GetName( playerid ), Senha[ playerid ]);
    SendAdminMessage(Amarelo, strx);
	return 1;
}

CMD:sairfila( playerid )
{
	if(Senha[playerid] == 0)
		return ErroMSG(playerid, "Voce nao esta na fila de atendimento.");
	Senha[ playerid ] = 0;
	SCM(playerid, Laranja, "Voce saiu da fila de atendimento.");
	return 1;
}

CMD:me(playerid, params[])
{
	static text[21],
		str[100];

	if( PlayerInfo[ playerid ][ pBlockchat ] == true ) return SendClientMessage(playerid, -1, "{FF0000}|_ {FFFF00}ANTI-FLOOD {FF0000}_| {FFFFFF} Seu Chat esta temporariamente BLOQUEADO!"), 1;


	if(sscanf(params, "s[20]", text))
	{
		ErroMSG(playerid, "Use /me [ açao ]");
		return true;
	}
	if(strlen(text) >= 20) return ErroMSG(playerid, "Use uma açao menor !!");

	format(str, sizeof(str), "* %s: %s", GetName( playerid ), text);
	ChatProximo(30.0, playerid, str, Purple,Purple,Purple,Purple,Purple);

	return true;
}

CMD:g( playerid, params[] ) return callcmd::gritar(playerid, params);
CMD:gritar(playerid, params[])
{
	static text[129],
		str[129];

	if( PlayerInfo[ playerid ][ pBlockchat ] == true ) return SendClientMessage(playerid, -1, "{FF0000}|_ {FFFF00}ANTI-FLOOD {FF0000}_| {FFFFFF} Seu Chat esta temporariamente BLOQUEADO!"), 1;

	if(sscanf(params, "s[128]", text))
	{
		ErroMSG(playerid, "Use /g [ texto ]");
		ErroMSG(playerid, "Use /gritar [ texto ]");
		return true;
	}
	format(str, sizeof(str), "%s Grita: %s!!", GetName( playerid ), text);
	ChatProximo(50.0, playerid, str, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
	return true;
}

CMD:s( playerid, params[] ) return callcmd::sussurar(playerid, params);
CMD:sussurar(playerid, params[])
{
	static text[129],
		str[129];

	if( PlayerInfo[ playerid ][ pBlockchat ] == true ) return SendClientMessage(playerid, -1, "{FF0000}|_ {FFFF00}ANTI-FLOOD {FF0000}_| {FFFFFF} Seu Chat esta temporariamente BLOQUEADO!"), 1;

	if(sscanf(params, "s[128]", text))
	{
		ErroMSG(playerid, "Use /s [ texto ]");
		ErroMSG(playerid, "Use /sussurar [ texto ]");
		return true;
	}
	format(str, sizeof(str), "%s Sussura: %s", GetName( playerid ), text);
	ChatProximo(10.0, playerid, str, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);
	return true;
}

CMD:meubilhete( playerid ){
	static str[ 129 ];
	if(PlayerInfo[ playerid ][ pBilheteMega ] == 0) return ErroMSG(playerid, "Voce nao possui um bilhete da Mega Sena!");

	format(str, sizeof(str), "{F3F781}| Mega Sena | - O numero do seu bilhete e o %i.", PlayerInfo[ playerid ][ pBilheteMega ]);
	SCM(playerid, -1, str);

    format(str, sizeof(str), "(*) - %s esta verificando seu bilhete da Mega Sena", GetName( playerid ));
    MessageProxPlayer(playerid, Purple, 10.0, str);
	return true;
}


CMD:lprofs( playerid )return callcmd::levelprofissoes( playerid );
CMD:levelprofissoes( playerid ){
	static str[ 129 ];
	new Box[ 900 ];

	strcat(Box, "{800080}|____________________________________________|\n\n");
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Motorista de Onibus: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ MOnibus ]);
    strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Petroleiro: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Petroleiro ]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Lixeiro: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Lixeiro ]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Carteiro: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Carteiro ]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Mecanico: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Mecanico ]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Minerador: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Minerador ]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Taxista: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Taxista ]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Advogado: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Advogado ]);
    strcat(Box, str);
    format(str, sizeof(str), "{2DFEE6}{FFFFFF}Paramedico: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Paramedico ]);
    strcat(Box, str);
    format(str, sizeof(str), "{2DFEE6}{FFFFFF}Lenhador: {2DFEE6}%i{FFFFFF}/{2DFEE6}5\n", PlayerInfo[playerid][ pProfLevel ][ Lenhador ]);
    strcat(Box, str);

	strcat(Box, "{800080}|____________________________________________|");

	format(str, 128, "{FFFFFF}Profissoes status %s", GetName( playerid ));

    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	str, Box, "Confirma", "");

	return true;
}

CMD:inventario( playerid ){
    if(PlayerInfo[playerid][pLevel ] < 2) return ErroMSG( playerid, "Voce precisa ser no minimo level 2 para utilizar este comando!");

    static
		str[ 129 ],
		Box[500]
	;

    Box[0] = EOS;
	strcat(Box, "Item\tQuantia\n");

	if(PlayerInfo[playerid][pLevel ] >= 2){
	    if(playerInventario[ playerid ][ itemId1 ] != -1){
			format(str, 128, "{F5D310}>{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId1 ]][i_Name],  playerInventario[ playerid ][ itemQuant1 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{F5D310}>{FFFFFF} Vazio\n");
	}
	if(PlayerInfo[playerid][pLevel ] >= 3){
		if(playerInventario[ playerid ][ itemId2 ] != -1){
			format(str, 128, "{F5D310}>{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId2 ]][i_Name],  playerInventario[ playerid ][ itemQuant2 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{F5D310}>{FFFFFF} Vazio\n");
	}

	if(PlayerInfo[playerid][pLevel ] >= 4){
		if(playerInventario[ playerid ][ itemId3 ] != -1){
			format(str, 128, "{F5D310}>{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId3 ]][i_Name],  playerInventario[ playerid ][ itemQuant3 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{F5D310}>{FFFFFF} Vazio\n");
	}

	if(PlayerInfo[playerid][pLevel ] >= 5){
		if(playerInventario[ playerid ][ itemId4 ] != -1){
			format(str, 128, "{F5D310}>{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId4 ]][i_Name],  playerInventario[ playerid ][ itemQuant4 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{F5D310}>{FFFFFF} Vazio\n");
	}
	if(PlayerInfo[playerid][pLevel ] >= 6){
		if(playerInventario[ playerid ][ itemId5 ] != -1){
			format(str, 128, "{F5D310}>{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId5 ]][i_Name],  playerInventario[ playerid ][ itemQuant5 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{F5D310}>{FFFFFF} Vazio\n");
	}
	if(PlayerInfo[playerid][pVIP ]){
		if(playerInventario[ playerid ][ itemId6 ] != -1){
			format(str, 128, "{F5D310}> {AFE88C}VIP{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId6 ]][i_Name],  playerInventario[ playerid ][ itemQuant6 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{AFE88C}>{FFFFFF} Vazio\n");

		if(playerInventario[ playerid ][ itemId7 ] != -1){
			format(str, 128, "{F5D310}> {AFE88C}VIP{FFFFFF} %s\t%i\n", ItensDrop[playerInventario[ playerid ][ itemId7 ]][i_Name],  playerInventario[ playerid ][ itemQuant7 ]);
	    	strcat(Box, str);
		}
		else strcat(Box, "{AFE88C}>{FFFFFF} Vazio\n");
	}

	ShowPlayerDialog( playerid, INVENT_MENU, DIALOG_STYLE_TABLIST_HEADERS, "Suas Armas", Box, "Escolher", "Cancelar");

    SetPVarInt(playerid, "ArmaID", 0);
	return true;
}

CMD:rg( playerid ){
	ShowStatusFor(playerid, playerid);
	format(strx, sizeof(strx), "(*) - %s verifica seus proprios documentos!", GetName( playerid ));
    MessageProxPlayer(playerid, Purple, 10.0, strx);
	return true;
}

CMD:mostrarrg(playerid, params[] ){
    new id;

    if(sscanf(params, "u", id)) return ErroMSG(playerid, "Use: /mostrarrg [id]");
	if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");
    if(GetPlayerDistanceFromPlayer(playerid, id) > 10.0) return ErroMSG( playerid, "Chegue mais perto da pessoa!");

	ShowStatusFor(id, playerid);

	static str[ 129 ];
	format(str, sizeof(str), "(*) - %s esta lhe mostrando os seus documentos!", GetName( playerid ));
	SCM(id, Purple, str);

	format(str, sizeof(str), "(*) - %s mostra seus documentos a %s !", GetName( playerid ), GetName( id ));
    MessageProxPlayer(playerid, Purple, 10.0, str);
    SCM(playerid, -1, str);
    return true;
}

CMD:ficha(playerid, params[] )
{
    new id;

    if(sscanf(params, "u", id)) return ErroMSG(playerid, "Use: /ficha [id]");
	if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao encontrado!");
    if(GetPlayerDistanceFromPlayer(playerid, id) > 5.0) return ErroMSG( playerid, "Chegue mais perto do alvo!");
	if(GetPlayerSpecialAction(id) != SPECIAL_ACTION_HANDSUP) return ErroMSG( playerid, "O alvo nao esta em modo (/handsup)!");

	MostrarFichaID(playerid, id);

	static str[ 129 ];
	format(str, sizeof(str), "(*) - %s %s esta verificando os seus documentos!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetName( playerid ));
    SCM(id, Purple, str);

	format(str, sizeof(str), "(*) - %s %s esta verificando os documentos de %s !", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Policial"):("A Policial"), GetName( playerid ), GetName( id ));
    MessageProxPlayer(playerid, Purple, 10.0, str);
	return true;
}

CMD:lc( playerid ){
    ClearChatbox(playerid, 50);
    GameTextForPlayer(playerid, "~w~Chat ~p~Limpo", 4000, 1);
	return true;
}

CMD:minhaconta( playerid )
{
	static
		str2[80];

	format(str2, sizeof(str2), "Conta: {15EABA}%s", PlayerInfo[ playerid ][ pName ]);


	ShowPlayerDialog(playerid, ConfConta, DIALOG_STYLE_LIST, str2,
		"{12A402}> {FFFFFF}Mudar Nome {FFFF00}500 {FFFFFF}Cash\n{12A402}> {FFFFFF}Mudar Senha\n{12A402}> {FFFFFF}Mudar Plataforma\n{12A402}> {FFFFFF}Mudar Sexo\n{12A402}> {FFFFFF}Mudar Email\n{12A402}> {FFFFFF}Celular\n{12A402}> {FFFFFF}Chat\n\
		{12A402}> {FFFFFF}Local de Spawn\n{12A402}> {FFFFFF}Definiçoes e Preferencias", "Confirmar", "Cancelar");
    return true;
}

CMD:meugalao( playerid, params[] ){

	if(GalaoInfo[playerid][pGalao] == 0) return ErroMSG(playerid, "Voce nao possui um galao de gasolina.");

	static
		str[ 128 ],
		acao[50]
	;

    if(sscanf(params, "s[50]", acao)) return SCM(playerid, Verde, "Use: /meugalao | status | usar |");

	if(!strcmp(acao, "status", true)) {
		ClearChatbox( playerid, 1);
		SCM(playerid, -1, "{800080}|_______ {FFFFFF}Status {800080}_______|");
		format(str, 128, "Galao: %d", GalaoInfo[ playerid ][ pGalao ]);
		SCM(playerid, -1, str);
		format(str, 128, "Litros: %d Litros", GalaoInfo[ playerid ][ pLitros ]);
		SCM(playerid, -1, str);
		format(str, 128, "Capacidade: %d Litros", GalaoInfo[ playerid ][ pMax ]);
		SCM(playerid, -1, str);
		SCM(playerid, -1, "{800080}|_______________________|");

		format(strx, sizeof(strx), "(*) - %s esta verificando seu galao de gasolina", GetName( playerid ));
	    MessageProxPlayer(playerid, Purple, 10.0, strx);
	}
	if(!strcmp(acao, "usar", true)){
	    if(GalaoInfo[playerid][pLitros] <= 0) return ErroMSG(playerid, "Voce nao tem nenhum pingo de gasolina no galao :(");
        if(!IsPlayerInAnyVehicle( playerid )) return ErroMSG(playerid, "Voce nao esta em um veiculo.");

        ShowPlayerDialog(playerid, DIALOG_GALAOUSAR, DIALOG_STYLE_INPUT, ""#SERVELOGO" - Galao", "Digite a quantia de litros voce deseja adicionar ao veiculo:\n", "Confirmar", "Cancelar");
	}
	return true;
}

/*==========================================================================
						Sistema de Animes
===========================================================================*/

CMD:deitar(playerid, params[]){
	if(isnull(params)) return ErroMSG(playerid, "Use: /deitar [1-3]");

	if(strval(params) == 1) LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	else if(strval(params) == 2) LoopingAnim(playerid,"BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
	else if(strval(params) == 3) LoopingAnim(playerid,"BEACH","Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
	else ErroMSG(playerid, "Use: /deitar [1-3]");
	return true;
}

CMD:dance(playerid, params[]){
	if(isnull(params)) return ErroMSG(playerid, "Use: /dance [1-4]");

	if(strval(params) == 1) SetPlayerSpecialActionEx(playerid,SPECIAL_ACTION_DANCE1);
	else if(strval(params) == 2) SetPlayerSpecialActionEx(playerid,SPECIAL_ACTION_DANCE2);
	else if(strval(params) == 3) SetPlayerSpecialActionEx(playerid,SPECIAL_ACTION_DANCE3);
	else if(strval(params) == 4) SetPlayerSpecialActionEx(playerid,SPECIAL_ACTION_DANCE4);
	else ErroMSG(playerid, "Use: /deitar [1-4]");
	return true;
}

CMD:cruzarb(playerid, params[]){
	if(isnull(params)) return ErroMSG(playerid, "Use: /cruzarb [1-2]");

	if(strval(params) == 1) LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 1);
	else if(strval(params) == 2) LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
	else ErroMSG(playerid, "Use: /cruzarb [1-2]");
	return true;
}

CMD:strip(playerid, params[]){
	if(isnull(params)) return ErroMSG(playerid, "Use: /strip [1-7]");

	if(strval(params) == 1) LoopingAnim(playerid,"STRIP","strip_A",4.0,1,1,1,1,0);
	else if(strval(params) == 2) LoopingAnim(playerid,"STRIP","strip_B",4.0,1,1,1,1,0);
	else if(strval(params) == 3) LoopingAnim(playerid,"STRIP","strip_C",4.0,1,1,1,1,0);
	else if(strval(params) == 4) LoopingAnim(playerid,"STRIP","strip_D",4.0,1,1,1,1,0);
	else if(strval(params) == 5) LoopingAnim(playerid,"STRIP","strip_E",4.0,1,1,1,1,0);
	else if(strval(params) == 6) LoopingAnim(playerid,"STRIP","strip_F",4.0,1,1,1,1,0);
	else if(strval(params) == 7) LoopingAnim(playerid,"STRIP","strip_G",4.0,1,1,1,1,0);

	else ErroMSG(playerid, "Use: /strip [1-7]");
	return true;
}

CMD:falar(playerid) return LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
CMD:assalto( playerid ) return LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
CMD:sentar( playerid ) return LoopingAnim(playerid, "PED","SEAT_idle", 1.0,1,0,0,0,0);
CMD:punheta( playerid ) return LoopingAnim(playerid,"PAULNMAC","wank_loop",4.0,1,1,1,1,0);
CMD:taichi( playerid ) return LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
CMD:mijar( playerid ) return ApplyAnimation(playerid,"PAULNMAC","Piss_in",4.0,0,0,0,0,0);
CMD:handsup( playerid ) return ApplyAnimation(playerid,"ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
CMD:parar( playerid ) return ClearAnimations(playerid);

//Novas
CMD:beijar( playerid ) return ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0);
CMD:arrombar( playerid ) return ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
CMD:vomitar( playerid ) return ApplyAnimation(playerid,"FOOD","EAT_vomit_P",4.0,0,0,0,0,0);
CMD:bebado( playerid ) return ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 0);
CMD:apontar( playerid ) return ApplyAnimation(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
//CMD:roubar( playerid ) return ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
CMD:acenar( playerid ) return ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
CMD:fodase( playerid ) return ApplyAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
CMD:observar( playerid ) return ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);


CMD:animes(playerid){
    SCM(playerid, 0xA1EC63FF, "~~~~~~~~~~~~ Animaçoes ~~~~~~~~~~~~");
	SCM(playerid, 0xA1EC63FF, "/falar /assalto /sentar /punheta /taichi ");
	SCM(playerid, 0xA1EC63FF, "/mijar /handsup /strip /cruzarb");
	SCM(playerid, 0xA1EC63FF, "/dance /deitar /parar");
	SCM(playerid, 0xA1EC63FF, "~~~~~~~~~~~~ NOVAS ~~~~~~~~~~~~");
	SCM(playerid, 0xA1EC63FF, "/beijar /arrombar /vomitar /bebado /apontar");
	SCM(playerid, 0xA1EC63FF, "/roubar /acenar /fodase /observar");
	SCM(playerid, 0xA1EC63FF, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	return true;
}

/* ================================================================================
							Veiculos nomes
================================================================================ */

CMD:veiculos( playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_veiculosid)
	    return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new letra[5];
	if( sscanf( params, "s[2]", letra ) ) return ErroMSG(playerid, "Use: /veiculos [A-Z]");


	if(strcmp(letra, "a", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos A ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " AT-400: 577 || Andromada: 592");
		SendClientMessage(playerid, Branco, " Admiral: 445 || Alpha: 602 || Ambulan: 416");
		SendClientMessage(playerid, Branco, " Artict1: 435 || Artict2: 450");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos A ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "b", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos B ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " BF-400: 581 || Beagle: 511 || Baggage: 485 || Bandito: 568");
		SendClientMessage(playerid, Branco, " Banshee: 429 || Barracks: 433 || Benson: 499 || Bfinject: 424");
		SendClientMessage(playerid, Branco, " Blade: 536 || Blistac: 496 || Bloodra: 504 || Bobcat: 422");
		SendClientMessage(playerid, Branco, " Boxburg: 609 || Boxville: 498 || Bravura: 401 || Broadway: 575");
		SendClientMessage(playerid, Branco, " Buccanee: 518 || Buffalo: 402 || Bullet: 541 || Bagboxb: 607");
		SendClientMessage(playerid, Branco, " Burrito: 482 || Bus: 431 || Bike: 509 || BMX: 481 || Bagboxa: 606");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos B ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "c", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos C ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " CopBike: 523 || Cropdust: 512 || CoastGuard: 472");
		SendClientMessage(playerid, Branco, " Caddy: 457 || Cadrona: 527 || Camper: 483 || Cement: 524");
		SendClientMessage(playerid, Branco, " Cheetah: 415 || Clover: 542 || Club: 589 || Coach: 437");
		SendClientMessage(playerid, Branco, " Combine: 532 || Comet: 480 || CopCarLS: 596 || CopCar: 599");
		SendClientMessage(playerid, Branco, " CopCarSF: 597 || CopCarLV: 598 || Cft30: 578 || Cozer: 486");
		SendClientMessage(playerid, Branco, " Cargobob: 548 || Cabbie: 438");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos C ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "d", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos D ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Dodo: 593 || Dinghy: 473 || Dumper: 406 || Duneride: 573");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos D ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "e", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos E ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Elegant: 507 || Elegy: 562 || Emperor: 585");
		SendClientMessage(playerid, Branco, " Esperant: 419 || Euros: 587 || Enforcer: 427");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos E ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "f", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos F ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Faggio: 462 || FCR-900: 521 || Freeway: 463 || Fbiranch: 490");
		SendClientMessage(playerid, Branco, " Fbitruck: 528 || Feltze: 533 || Firela: 544 || Firetruck: 407");
		SendClientMessage(playerid, Branco, " Flash: 565 || Flatbed: 455 || Forklift: 530 || Fortune: 526");
		SendClientMessage(playerid, Branco, " Freight: 537 || Farmtr1: 610 ");
		SendClientMessage(playerid, Verdel,"~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos F ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "g", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos G ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Glendale: 466 || Glenshit: 604 || Greenwoo: 492 ");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos G ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "h", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos H ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Hydra: 520 || Hermes: 474 || Hotdog: 588 ");
		SendClientMessage(playerid, Branco, " Hotrina: 502 || Hotrinb: 503 || Hotring: 494 ");
		SendClientMessage(playerid, Branco, " Hustler: 545 || Huntley: 579 || Hotknife: 434");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos H ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "i", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos I ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Infernus: 411 || Intruder: 546");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos I ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "j", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos J ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Jester: 559 || Journey: 508 ");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos J ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "k", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos K ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Kart: 571");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos K ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "l", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos L ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Launch: 595 || Landstal: 400");
		SendClientMessage(playerid, Branco, " Leviathn: 417 || Linerun: 403");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos L ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "m", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos M ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Marquis: 484 || Majestic: 517 || Manana: 410 ");
		SendClientMessage(playerid, Branco, " Merit: 551 || Mesa: 500 || Moonbeam: 418 || Mowerr: 572");
		SendClientMessage(playerid, Branco, " Mrwhoop: 423 || Mule: 414 || Monster: 444 || MonsterA: 556");
		SendClientMessage(playerid, Branco, " MonsterB: 557 || Mountain Bike: 510 || Maverick: 487");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos M ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "n", true) == 0)
	{
		SendClientMessage(playerid, Verdel,"~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos N ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco," NRG-500: 522 || Nevada: 553 || Nebula: 516 || Newsvan: 582");
		SendClientMessage(playerid, Verdel,"~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos N ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "o", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos O ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Oceanic: 467");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos O ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "p", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos P ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " PCJ-600: 461 || Pizzaboy: 448 || Predator: 430");
		SendClientMessage(playerid, Branco, " Packer: 443 || Patriot: 470 || Peren: 404 || Petro: 514");
		SendClientMessage(playerid, Branco, " Phoenix: 603 || Picador: 600 || Pony: 413 || Premier: 426");
		SendClientMessage(playerid, Branco, " Previon: 436 || Primo: 547 || Polmav: 497 || Petrotr: 584");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos P ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "q", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Q ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Quad: 471");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Q ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "r", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos R ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Rustler: 476 || RC Barron: 464 || Reefer: 453");
		SendClientMessage(playerid, Branco, " Rancher: 489 || Rcbandit: 441 || Rccam: 594 ");
		SendClientMessage(playerid, Branco, " Rctiger: 564 || Rdtrain: 515 || Regina: 479 ");
		SendClientMessage(playerid, Branco, " Remingtn: 534 || Rhino: 432 || Rnchlure: 505 || Rcraider: 465");
		SendClientMessage(playerid, Branco, " Romero: 442 || Rumpo: 440 || Raindanc: 563 || Rcgoblin: 501");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos R ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "s", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos S ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Sanchez: 468 || Stuntplane: 513 || Skimmer: 460 || Sparrow: 469");
		SendClientMessage(playerid, Branco, " Shamal: 519 || Speeder: 452 || Squalo: 446 || Sabre: 475");
		SendClientMessage(playerid, Branco, " Sadler: 543 || Sadlshit: 605 || Sandking: 495 || Savanna: 567");
		SendClientMessage(playerid, Branco, " Securica: 428 || Sentinel: 405 || Slamvan: 535 || Solair: 458");
		SendClientMessage(playerid, Branco, " Stafford: 580 || Stallion: 439 || Stratum: 561 || Stretch: 409 ");
		SendClientMessage(playerid, Branco, " Sultan: 560 || Sunrise: 550 || Supergt: 506 || Swatvan: 601 ");
		SendClientMessage(playerid, Branco, " Sweeper: 574 || Streak: 538 || Streakc: 570 || Seasparr: 447");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos S ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "t", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos T ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Tropic: 454 || Tahoma: 566 || Tampa: 499 || Taxi: 420");
		SendClientMessage(playerid, Branco, " Topfun: 459 || Tornado: 576 || Towtruck: 525");
		SendClientMessage(playerid, Branco, " Trash: 408 || Tug: 583 || Turismo: 451 || Tram: 449 ");
		SendClientMessage(playerid, Branco, " Tugstair: 608 ");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos T ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "u", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos U ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Uranus: 558 || Utility: 522 || Utiltr1: 611");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos U ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "v", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos V ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Vortex: 539 || Vincent: 540 || Virgo: 491");
		SendClientMessage(playerid, Branco, " Vcnmav: 488 || Voodoo: 412");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos V ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "x", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos X ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Nao existe veiculos com as inicias da letra 'X'");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos X ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else if(strcmp(letra, "z", true) == 0)
	{
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Z ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, " Zr350: 477");
		SendClientMessage(playerid, Verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Z ~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	else ErroMSG(playerid, "Use: /veiculosid [A-Z]");
	return true;
}

// ==================================================================================
CMD:rotaonibus( playerid )
{
    if(IsAtBlueBusStop(playerid))
    {
        SCM(playerid, Teal, "Blue Bus Rota: East Beach - The Stadium - The Gym - The County General Hospital - Los Santos International Airport - Taxi Stand");
        return 1;
    }
    else if(IsAtBlackBusStop(playerid))
    {
        SCM(playerid, Teal, "Black Bus Rota: Taxi Stand - Police Department - The Bank - All Saints Hospital - Market Station - Santa Maria Beach");
        return 1;
    }
    else
    {
        SendClientMessage(playerid, Vermelho, "Voce esta em um ponto de onibus 'Desconhecido'");
    }
    return 1;
}

CMD:localizaronibus( playerid )
{
    new
		Float:busx,
		Float:busy,
		Float:busz
	;
    if(IsAtBlueBusStop(playerid))
    {
        GetVehiclePos(NPCBlueBus, busx, busy, busz);
        SetPlayerCheckpoint(playerid, busx, busy, busz, 0);
        GameTextForPlayer(playerid, "~w~Procurando ~r~Onibus~w~. . . .", 2000, 3);
        SetTimerEx("CPOff", 3000, 0, "d", playerid, 1);
        return 1;
    }
    else if(IsAtBlackBusStop(playerid))
    {
        GetVehiclePos(NPCBlackBus, busx, busy, busz);
        SetPlayerCheckpoint(playerid, busx, busy, busz, 0);
        GameTextForPlayer(playerid, "~w~Procurando ~r~Onibus~w~. . . .", 2000, 3);
        SetTimerEx("CPOff", 3000, 0, "d", playerid, 2);
        return 1;
    }
    else
    {
        SendClientMessage(playerid, Vermelho, "Voce esta em um ponto de onibus 'Desconhecido'");
    }
    return 1;
}

CMD:agua( playerid ){
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1804.4326, -1297.3082, 13.5169)){
		if(gettime() < GetPVarInt(playerid, "TempoAguaGratis")) return ErroMSG(playerid, "Voce so pode pegar agua gratis a cada 3 minutos !");

		if(PlayerInfo[ playerid ][ pSede ]+10 < 100)
        	PlayerInfo[ playerid ][ pSede ] += 10;
        else
            PlayerInfo[ playerid ][ pSede ] = 100;

        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

		static str[ 129 ];
		format(str, 129, "(>) - Voce esta bebendo um copo de agua!");
		SendClientMessage(playerid, 0xff5555ff, str);
		format(str, 129, "{F763E9}(>) - %s esta bebendo um copo de agua!", GetName( playerid ));
		MessageProxPlayer(playerid, -1, 5.0, str);

		SetPVarInt(playerid, "TempoAguaGratis", gettime() + 180);
	}
    return true;
}

CMD:transferir( playerid, params[]){

	if(PlayerInfo[ playerid ][ pLevel ] < 5) return ErroMSG(playerid, "Voce precisa conquistar level 5+ para enviar dinheiro a outros jogadores!");

	static
		id,
		quantia,
		TempoCmd
	;

	TempoCmd = gettime();
	if( GetPVarInt(playerid, "granacmd") > TempoCmd ) return ErroMSG( playerid, "Espere 5 minutos para usar este comando novamente.");

	if(sscanf(params, "ud", id, quantia)) return ErroMSG(playerid, "Use: /transferir [id] [quantia] - este comando envia dinheiro a outro jogador!");

	if(id == playerid) return true;
    if(!IsPlayerConnected( id ) || !PlayerInfo[ id ][ pLogger ]) return ErroMSG(playerid, "Jogador nao conectado!");

    if(quantia < 0) return true;
	if(quantia > 5000) return ErroMSG(playerid, "Para realizar transferencias acima de 5mil utilize os serviços bancarios!");

	if(GetPlayerDistanceFromPlayer(playerid, id) > 10.0){
		ErroMSG( playerid, "Voce precisa estar perto da pessoa para enviar dinheiro a ela!");
		SCM(playerid, Purple, "Para transferencias de longa distancia utilize os serviços do banco");
		return true;
	}

	static str[ 129 ];
	format(str, sizeof str, "(>) - %s %s entregou a voce a quantia de $%s em dinheiro!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O jogador"):("A jogadora"), GetNameEx( playerid ), FormatNumber(quantia));
	SCM(id, -1, str);
	format(str, sizeof str, "(>) - Voce entregou a quantia de $%s %s %s!", FormatNumber(quantia), PlayerInfo[ id ][ pSex ] == 1 ? ("ao jogador"):("a jogadora"), GetNameEx( id ));
	SCM(playerid, -1, str);

	ActionPlayerGrana(playerid, "-", quantia, 1);
	ActionPlayerGrana(id, "+", quantia, 1);

	format(STRLOG, sizeof(STRLOG), "[%s] %s transferiu a quantia de %i ao jogador %s, dinheiro da mao.", GetDateEx(), GetName( playerid ), quantia, GetName( id ));
	SLog("TansGranaMao.log", STRLOG);

	SetPVarInt(playerid, "granacmd", (TempoCmd + 300));
	return true;
}

CMD:cablock(playerid, params[]){
    if(!PlayerInfo[ playerid ][ pAdmin ]) return true;

	static id, tempo, motivo[60], str[ 129 ];

	if(sscanf(params, "uds[60]", id, tempo, motivo)) return ErroMSG(playerid, "Use: /cablock [id] [tempo] [motivo] - este comando bloquea outro jogado a usar o chat ajuda!");

	if(!IsPlayerLogged(id)) return ErroMSG(playerid, "Este player id nao se encontra conectado no momento!");
	if(tempo > 18000 || !ValorValido(tempo)) return ErroMSG(playerid, "Valor invalido ou acima de 5 horas!");
	if(strlen(motivo) > 50) return ErroMSG(playerid, "Utilize um motivo menor!");

	format(str, sizeof str, "{00AAAA}[ Chat Ajuda ] - %s bloqueou %s de usar o chat, motivo: %s, tempo: %s", GetNameEx( playerid ), GetNameEx( id ), motivo, Convert((tempo*60), 1));
	SendMessageChatAjuda(str);

	BlockCAFor(id, tempo);
	return true;
}

CMD:ca( playerid, params[]){

	static string[ 200 ], text[129];

    if(PlayerInfo[ playerid ][ pBlockCA ]){
        format(string, sizeof(string), "{FFFFFF}Espere {00AAAA}%s {FFFFFF}para usar este comando novamente.", Convert(PlayerInfo[ playerid ][ pBlockCATemp ], 1));
        SCM(playerid, -1, string);
        return true;
    }

    text[0]=EOS;
	if(!sscanf(params, "s[128]", text)){


	    LowerString(text);
        format(string, sizeof(string), "{00AAAA}[ Chat Ajuda ] [Nivel %d] %s (%d): %s", PlayerInfo[ playerid ][ pLevel ], GetNameEx( playerid ), playerid, text);
        SendMessageChatAjuda(string);

		BlockCAFor(playerid, 3);

		//Detectando palavroes
		for(new p = 0; p < sizeof Palavroes; p++){
            if(strfind(params[0], Palavroes[p], true) != -1){
				SCM(playerid, 0xFF0000AA, "Voce foi bloqueado por uso de palavras de baixo calao, tempo: 20 minutos!");
				BlockCAFor(playerid, 20);

				format(string, sizeof(string), "[ Chat Ajuda ] - %s foi bloqueado automaticamente, motivo: palavras de baixo calao!", GetNameEx( playerid ));
				SendMessageChatAjuda(string);
				break;
			}
		}
	}
	return true;
}

CMD:reportar( playerid, params[]){

	new
		Id,
		Motivo[ 80 ]
	;
	if(sscanf(params, "us[80]", Id, Motivo)) return ErroMSG(playerid, "Use: /reportar [id] [motivo]");
	if(strlen(Motivo) > 80) return ErroMSG(playerid, "Simplifique o motivo !");
	if(!IsPlayerConnected( Id ) || !PlayerInfo[ Id ][ pLogger ]) return ErroMSG(playerid, "Player ID invalido !");

	static str[ 129 ];
	ForPlayers(i){
	    if(PlayerInfo[i][pAdmin] >= 1){

			format(str, sizeof(str), "| Server | - [%i] %s reportou [%i] %s motivo: %s", playerid, GetNameEx(playerid), Id, GetNameEx(Id), Motivo);
			SCM(i, 0xFFD700AA, str);
		    PlaySoundForPlayer(i, 1150);
		}
	}
	PlaySoundForPlayer(playerid, 1150);
	SCM(playerid, 0xDAA520AA, "Relatorio enviado aos admins !");
	return true;
}

CMD:duvida( playerid, params[]){

	new
		Motivo[ 80 ]
	;
	if(sscanf(params, "s[80]", Motivo)) return ErroMSG(playerid, "Use: /duvida [texto]");
	if(strlen(Motivo) > 80) return ErroMSG(playerid, "Simplifique a duvida !");

	static str[ 129 ];
	ForPlayers(i){
	    if(!PlayerInfo[i][pAdmin]) continue;

		format(str, sizeof(str), "| Duvidas | - [%i] %s : %s", playerid, GetNameEx(playerid), Motivo);
		SCM(i, 0xFFD700AA, str);
	    PlaySoundForPlayer(i, 1150);
	}
	PlaySoundForPlayer(playerid, 1150);
	SCM(playerid, 0xDAA520AA, "Duvida enviada aos admins !");
	return true;
}
CMD:ajuda( playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_AJUDA, DIALOG_STYLE_LIST, "ESCOLHA UMA OPCAO", "Player\nArmas\nLider\nOrg\nEmprego\nCasa\nEmpresa\nVeiculo\nPortao\nAnimes\nCaca\nCelular", "Selecionar", "Sair");
	return 1;
}

/*CMD:darcnh (playerid)
{
	if(PlayerInfo[ playerid ][ pHabA ] == 1)
	if(PlayerInfo[ playerid ][ pHabB ] == 1)
	if(PlayerInfo[ playerid ][ pHabD ] == 1)
	if(PlayerInfo[ playerid ][ pHabE ] == 1)
	if(PlayerInfo[ playerid ][ pHabAR ] == 1)
	if(PlayerInfo[ playerid ][ pHabN ] == 1)
	if(PlayerInfo[ playerid ][ pHabES ] == 1)
	return 1;
}*/

CMD:ajuda1( playerid, params[])
{
    if(PlayerInfo[playerid][Mobile] == true)
    {
        new ajuda[20];
        if(sscanf(params, "s[20]", ajuda)) return SCM(playerid, Verde, "Use: /ajuda | player | org | animes | lider | emprego | casa | empresa | veiculo | portao | celular | admin | caca | armas |");

        if(!strcmp(ajuda, "player", true)) {
            SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Comandos uteis {FF6600}_________________|");
            SCM(playerid, Branco, "/gps /me, /rg, /andar /transferir /duvida /inventario /ranks");
            SCM(playerid, Branco, "(/g)ritar, (/s)ussurar, /senha, /meugalao, /sairfila, /fila, /capacete /meugalao");
            SCM(playerid, Branco, "/entrar, /sair, /minhaconta /lc /reportar /meubilhete /solicitar ");
            SCM(playerid, Branco, "/levelprofissoes (/lprofs), /sairemprego /servidor /mostrarrg /animes");
            SCM(playerid, Verde, "Construindo ...."); //#Construindo ....);
        }
        else if(!strcmp(ajuda, "armas", true)) {
            SCM(playerid, Laranja, "|_____________________{FFFFFF}Armas {FF6600}______________________|");
            SCM(playerid, Branco, "Para ter uma arma, voce precisa de ter nivel igual ou superior a 2.");
            SCM(playerid, Branco, "Voce pode adiquirir armas simples na loja de armas Ammu Nation (/gps).");
            SCM(playerid, Branco, "Ou comprar de um vendedor de armas!.");
            SCM(playerid, Branco, "Comandos uteis: {E4E754}/inventario /guardarinv /dropa.");
            SCM(playerid, Verde, "Construindo ...."); //#Construindo ....);
        }
        else if(!strcmp(ajuda, "lider", true)){
            if(PlayerInfo[playerid][pCargo] >= 6)
            {
                SendClientMessage(playerid, -1, "{FF6600}|_____________ {FFFFFF}[ Ajuda Lider ] {FF6600}_____________|");
                SendClientMessage(playerid, -1,"Todos seus poderes de lider so podem ser excercidos dentro de sua HQ!");
            }
        }
        else if(!strcmp(ajuda, "org", true)) ShowPlayerAjudaOrg(playerid);
        else if(!strcmp(ajuda, "emprego", true)){
            if(!isPlayerCop(playerid)){
                ShowAjudaEmprego(playerid, PlayerInfo[ playerid ][ pEmprego ]);
            }
            else ShowPlayerAjudaOrg(playerid);
        }
        else if(!strcmp(ajuda, "casa", true)){
            SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Ajuda Casa {FF6600}_________________|");
            SCM(playerid, -1, "Para que? R: Voce precisa de uma casa para ter um local de descanso e tambem se alimentar..");
            SCM(playerid, -1, "Onde Comprar?: R: Va ate uma imobiliaria mais proxima e confira os preços e locais.. /gps");
            SCM(playerid, -1, "Nao tem dinheiro? R: opite pelo aluguel de uma suite no Hotel de LS /gps");
            SCM(playerid, AzulClaro, "Comandos uteis: /casa /gps");
        }
        else if(!strcmp(ajuda, "empresa", true)){
            SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Ajuda Empresa {FF6600}_________________|");
            SCM(playerid, -1, "Para que? R: As empresas servem como meio de negocio e uma forma de 'lucro extra'");
            SCM(playerid, -1, "em sua conta, Empresas costumam ter um valor alto, porem redem Lucros aos 'Proprietarios'");
            SCM(playerid, -1, "dependendo do negocio.");
            SCM(playerid, -1, "uma empresa contem: um Dono apenas que usurfrui do lucro");
            SCM(playerid, -1, "Onde Comprar?: R: Va ate uma imobiliaria mais proxima e confira os preços e locais.. /gps");
            SCM(playerid, AzulClaro, "Comandos uteis: /empresa /gps");
        }
        else if(!strcmp(ajuda, "veiculo", true)){
            SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Ajuda Veiculo {FF6600}_________________|");
            SCM(playerid, -1, "Onde Comprar?: R: Va ate uma concessionaria mais proxima e confira os preços e Modelos.. /gps");
            SCM(playerid, -1, "Nao tem dinheiro? R: opite pelo imprestimo em um banco...");
            SCM(playerid, AzulClaro, "Comandos Veiculares: /motor (Y), /farol (N), /radios");
            SCM(playerid, AzulClaro, "/vportas, /vcapo, /vpmalas /infoveiculo (/painelveiculo /meucarro /meuveiculo)");
        }
        else if(!strcmp(ajuda, "portao", true)){
            SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Ajuda Portao {FF6600}_________________|");
            SCM(playerid, AzulClaro,"Comandos uteis");
            SCM(playerid, -1,"/infoportao");
            SCM(playerid, -1,"/darcopia [id] [portao-id]");
            SCM(playerid, -1,"/tomarchave [nick] [portao-id]");
        }
        else if(!strcmp(ajuda, "animes", true)){
            SCM(playerid, -1, "{800080}|_________________ {FFFFFF}Animes {800080}______________|");
            SCM(playerid, -1, "/sentar /deitar [1-3] /handsup /dance [1-4] /strip [1-3]");
            SCM(playerid, -1, "/punheta /mijar /taichi /cruzarb [1-2] /assalto");
            SCM(playerid, -1, "");
            SCM(playerid, -1, "Para sair do anime pressione 'Espaço'");
        }
        else if(!strcmp(ajuda, "caca", true)){
            SCM(playerid, -1, "{87DC91}~~~~~~~~~~~~~~ {FFFFFF}Ajuda Caça {87DC91}~~~~~~~~~~~~~~");
            SCM(playerid, -1, "{87DC91}{FFFFFF}Para realizar uma caça e preciso um rifle que pode ser encontrado na ammu nation");
            SCM(playerid, -1, "{87DC91}{FFFFFF}e voce vai ate o local de caça usando seu /gps, segue abaixo os comandos uteis de caça:");
            SCM(playerid, -1, "{87DC91}{FFFFFF}/cacar ");
            SCM(playerid, -1, "{87DC91}{FFFFFF}/vendercaca ");
            SCM(playerid, -1, "{87DC91}{FFFFFF}/pegarcervo ");
            SCM(playerid, -1, "{87DC91}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        }
        else if(!strcmp(ajuda, "celular", true)){
            switch(CelularInfo[ playerid ][ pCell ]){
                case 1:
                {
                    ClearChatbox(playerid, 1);
                    SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Ajuda Celular Pre-pago{FF6600}_________________|");
                    SCM(playerid, -1, "Voce possui um celular {FF0000}Pre{FFFFFF}-{FF0000}pago{FFFFFF}, isso significa que voce tem que {FFFF00}'Recarrega-lo'");
                    SCM(playerid, -1, "adicionando {FFFF00}creditos {FFFFFF}que voce pode encontrar em uma loja de ultilidades '{FFFF00}/gps{FFFFFF}'");
                    SCM(playerid, -1, "A cada chamada sera cobrado o preço de: {3C982E}R$ 0,25 {FFFFFF}Centavos por minuto, e a cada SMS o preço de: {3C982E}R$ 0,10 {FFFFFF}Centavos");
                    SCM(playerid, -1, "Acabando seu saldo de creditos voce nao vai mais consseguir ligar ou mandar sms ate que recarregue seu celular .");
                    SCM(playerid, AzulClaro, "Comandos uteis: /ligar, (/des)ligar, /sms, /agenda, /blockcell");
                    ClearChatbox(playerid, 1);
                }
                default:
                {
                    ClearChatbox(playerid, 1);
                    SCM(playerid, -1, "{FF6600}|_________________ {FFFFFF}Ajuda Celular{FF6600}_________________|");
                    SCM(playerid, -1, "Voce nao um celular compre um em qualquer Loja de ultilidades !");
                    SCM(playerid, -1, "Voce pode optar por comprar um Celular {FF0000}Pre{FFFFFF} ou {FF0000}Pos{FFFFFF}{FF0000}pago{FFFFFF}");
                    SCM(playerid, -1, "Ao comprar um celular com algum dos dois planos este menu ira se modificar ....");
                    SCM(playerid, Verde, "use: /gps e va ate a loja de ultilidades ..");
                    ClearChatbox(playerid, 1);
                }
            }
        }
        else if(!strcmp(ajuda, "admin", true)) callcmd::senha( playerid );
        else ErroMSG(playerid, "Use: /ajuda | player | org | emprego | animes | casa | empresa | portao | celular | admin");
    }
    else {
	   ShowPlayerDialog(playerid, DIALOG_AJUDA, DIALOG_STYLE_LIST, "ESCOLHA UMA OPCAO", "Player\nArmas\nLider\nOrg\nEmprego\nCasa\nEmpresa\nVeiculo\nPortao\nAnimes\nCaca\nCelular", "Selecionar", "Sair");
	}
    return 1;
}

/* =================================================================================
      Gangues
 ==================================================================================*/

CMD:usar(playerid, params[])
{

	if(UsandoDrogas[ playerid ]) return ErroMSG(playerid, "Voce ja esta usando drogas manolo(a)!");

    new option[20];
	if(sscanf(params, "s[20]", option)) return SCM(playerid, Verde, "Use: /usar [ maconha | cocaina | crack |]");

    static str[ 80 ];
	if(!strcmp(option, "maconha", true))
	{
		if(!PlayerInfo[ playerid ][ pMaconha ]) return ErroMSG(playerid, "Voce nao possui nenhuma grama de maconha!");

        PlayerInfo[ playerid ][ pMaconha ]--;

		LoopingAnim(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,0);
		SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

		SCM(playerid, AzulClaro, "(>) - Voce bolou um baseado de maconha!");


		format(str, sizeof(str), "* %s bolou um baseado maconha!", GetNameEx( playerid ));
		MessageProxPlayer(playerid, Purple, 10.0, str);

		DrogasUP[ playerid ] = 0;
		UsandoDrogas[ playerid ] = true;
		OnSalvarDados( playerid );
	}
	else if(!strcmp(option, "cocaina", true)) {
	    if(!PlayerInfo[ playerid ][ pCocaina ]) return ErroMSG(playerid, "Voce nao possui nenhuma capsula de cocaina!");

        PlayerInfo[ playerid ][ pCocaina ]--;

		LoopingAnim(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1);

		SCM(playerid, AzulClaro, "(>) - Voce usou uma capsula de cocaina!");


		format(str, sizeof(str), "* %s pega uma capsula de cocaina!", GetNameEx( playerid ));
		MessageProxPlayer(playerid, Purple,10.0, str);

		if(PlayerInfo[ playerid ][ pSede ]+6 < 100)
        	PlayerInfo[ playerid ][ pSede ] += 6;
        else
            PlayerInfo[ playerid ][ pSede ] = 100;

		OnSalvarDados( playerid );

	}
	else if(!strcmp(option, "crack", true)) {
	    if(!PlayerInfo[ playerid ][ pCrack ]) return ErroMSG(playerid, "Voce nao possui nenhuma pedra de crack!");

        PlayerInfo[ playerid ][ pCrack ]--;

		LoopingAnim(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1);

		SCM(playerid, AzulClaro, "(>) - Voce usou uma pedra de crack!");


		format(str, sizeof(str), "* %s usa uma pedra de crack!", GetNameEx( playerid ));
		MessageProxPlayer(playerid, Purple, 10.0, str);

		if(PlayerInfo[ playerid ][ pFome ]+8 < 100)
        	PlayerInfo[ playerid ][ pFome ] += 8;
        else
            PlayerInfo[ playerid ][ pFome ] = 100;

		OnSalvarDados( playerid );
	}
	return true;
}

CMD:venderdrogas( playerid ){
    if(!IsPlayerGang( playerid )) return false;

	SCM(playerid, 0xA1EC63FF, "~~~~~~~~~ Venda de drogas ~~~~~~~~~");
	SCM(playerid, 0xA1EC63FF, "/vendermaconha");
	SCM(playerid, 0xA1EC63FF, "/vendercrack");
	SCM(playerid, 0xA1EC63FF, "/vendercocaina");
	SCM(playerid, 0xA1EC63FF, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	return true;
}


CMD:vendermaconha(playerid, params[]){
	if(!IsPlayerGang( playerid )) return false;
    new
		id,
		quantidade,
		preco
	;
	if(sscanf(params, "uD(-1)D(-1)", id, quantidade, preco)) return SCM(playerid, Verde, "Use: /vendermaconha [id] [quantidade] [preco]");

	if(quantidade == -1 || preco == -1) return SCM(playerid, Verde, "Use: /vendermaconha [id] [quantidade] [preco]");
	if(!PlayerInfo[ id ][ pLogger ]) return ErroMSG(playerid, "O usuario nao esta conectado!");
	if(preco < 0 || (preco/quantidade) > 100) return ErroMSG(playerid, "Voce nao pode cobrar um preço muito abusivo por cada bloco, valores permitido [1-100] por bloco!");
    if(PlayerInfo[ playerid ][ pMaconha ] < quantidade || quantidade < 0) return ErroMSG(playerid, "Voce nao tem essa quantia de maconha manow!");
	if(GetPlayerDistanceFromPlayer(playerid, id) > 4.0) return ErroMSG( playerid, "Chegue mais perto do usuario para lhe entrega a droga!");

	static str[ 129 ];
	format(str, sizeof(str), "{E4EE25}Voce ofereceu %i bloco's de maconha para %s por $%s!", quantidade,  GetNameEx(id), FormatNumber(preco));
	SCM(playerid, -1, str);
	format(str, sizeof(str), "{67D1F5}%s traficante %s esta lhe oferecendo %i bloco's de maconha por $%s, (/aceitar maconha) para comprar!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O"):("A"), GetNameEx(playerid), quantidade, FormatNumber(preco));
	SCM(id, -1, str);

	DrogasOff[ id ] = 1;
	DrogasID[ id ] = playerid;
	DrogasPreco[ id ] = preco;
	DrogasQuant[ id ] = quantidade;

	ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, false, false, false, false, 800);

	return true;
}

CMD:vendercocaina(playerid, params[]){
	if(!IsPlayerGang( playerid )) return false;
    new
		id,
		quantidade,
		preco
	;
	if(sscanf(params, "uD(-1)D(-1)", id, quantidade, preco)) return SCM(playerid, Verde, "Use: /vendercocaina [id] [quantidade] [preco]");

	if(quantidade == -1 || preco == -1) return SCM(playerid, Verde, "Use: /vendercocaina [id] [quantidade] [preco]");
	if(!PlayerInfo[ id ][ pLogger ]) return ErroMSG(playerid, "O usuario nao esta conectado!");
	if(preco < 0 || (preco/quantidade) > 100) return ErroMSG(playerid, "Voce nao pode cobrar um preço muito abusivo por cada capsula, valores permitido [1-100] por capsula!");
    if(PlayerInfo[ playerid ][ pCocaina ] < quantidade || quantidade < 0) return ErroMSG(playerid, "Voce nao tem essa quantia de cocaina manow!");
	if(GetPlayerDistanceFromPlayer(playerid, id) > 4.0) return ErroMSG( playerid, "Chegue mais perto do usuario para lhe entrega a droga!");

	static str[ 129 ];
	format(str, sizeof(str), "{E4EE25}Voce ofereceu %i capsula's de cocaina para %s por $%s!", quantidade,  GetNameEx(id), FormatNumber(preco));
	SCM(playerid, -1, str);
	format(str, sizeof(str), "{67D1F5}%s traficante %s esta lhe oferecendo %i capsula's de cocaina por $%s, (/aceitar cocaina) para comprar!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O"):("A"), GetNameEx(playerid), quantidade, FormatNumber(preco));
	SCM(id, -1, str);

	DrogasOff[ id ] = 2;
	DrogasID[ id ] = playerid;
	DrogasPreco[ id ] = preco;
	DrogasQuant[ id ] = quantidade;

	ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, false, false, false, false, 800);

	return true;
}

CMD:vendercrack(playerid, params[]){
	if(!IsPlayerGang( playerid )) return false;
    new
		id,
		quantidade,
		preco
	;
	if(sscanf(params, "uD(-1)D(-1)", id, quantidade, preco)) return SCM(playerid, Verde, "Use: /vendercrack [id] [quantidade] [preco]");

	if(quantidade == -1 || preco == -1) return SCM(playerid, Verde, "Use: /vendercrack [id] [quantidade] [preco]");
	if(!PlayerInfo[ id ][ pLogger ]) return ErroMSG(playerid, "O usuario nao esta conectado!");
	if(preco < 0 || (preco/quantidade) > 100) return ErroMSG(playerid, "Voce nao pode cobrar um preço muito abusivo por cada pedra, valores permitido [1-100] por pedra!");
    if(PlayerInfo[ playerid ][ pCrack ] < quantidade || quantidade < 0) return ErroMSG(playerid, "Voce nao tem essa quantia de pedras manow!");
	if(GetPlayerDistanceFromPlayer(playerid, id) > 4.0) return ErroMSG( playerid, "Chegue mais perto do usuario para lhe entrega a droga!");

	static str[ 129 ];
	format(str, sizeof(str), "{E4EE25}Voce ofereceu %i pedra's de crack para %s por $%s!", quantidade,  GetNameEx(id), FormatNumber(preco));
	SCM(playerid, -1, str);
	format(str, sizeof(str), "{67D1F5}%s traficante %s esta lhe oferecendo %i pedra's de crack por $%s, (/aceitar crack) para comprar!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O"):("A"), GetNameEx(playerid), quantidade, FormatNumber(preco));
	SCM(id, -1, str);

    DrogasID[ id ] = playerid;
	DrogasOff[ id ] = 3;
	DrogasPreco[ id ] = preco;
	DrogasQuant[ id ] = quantidade;

	ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, false, false, false, false, 800);

	return true;
}


CMD:ver(playerid, params[]){

	new opcao[20];
    if(sscanf(params, "s[20]", opcao)) return true;

	if(!strcmp(opcao, "contrato", true))
    {
		if(GetPVarInt(playerid, "contrato")){

			new Imovel, Valor;

			Imovel = GetPVarInt(playerid, "C_Imovel");
			Valor = GetPVarInt(playerid, "C_Valor");

	        /*SetPVarInt(playerid, "C_ID", playerid);
			SetPVarInt(playerid, "C_Imovel", GetPVarInt(playerid, "Imo_option"));
			SetPVarInt(playerid, "C_Valor", valor);*/


			static str[ 129 ];
			new Box[ 500 ];

			strcat(Box, "{EBFF96}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	        format(str, sizeof(str), "{EBFF96}Casa N: {FFFFFF}%i\n", Imovel);
			strcat(Box, str);

			format(str, sizeof(str), "{EBFF96}Tipo: {FFFFFF}%s\n", HouseInfo[Imovel][hVipHouse] == true ? ("Casa VIP"):("Casa Comum"));
			strcat(Box, str);

			format(str, sizeof(str), "{EBFF96}Preço: {FFFFFF}R$%s\n", FormatNumber(HouseInfo[Imovel][hPrice]));
			strcat(Box, str);

			format(str, sizeof(str), "{EBFF96}Local: {FFFFFF}%s\n", GetAreaForCords(HouseInfo[Imovel][hEntranceX],HouseInfo[Imovel][hEntranceY], HouseInfo[Imovel][hEntranceZ]));
			strcat(Box, str);

			format(str, sizeof(str), "{EBFF96}Valor do Contrato: {FFFFFF}R$%s\n", FormatNumber(Valor));
			strcat(Box, str);

			strcat(Box, "{EBFF96}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			ShowPlayerDialog(playerid, DIALOG_CONTRACT_OP, DIALOG_STYLE_MSGBOX, "Transferencia de Imovel", Box, "Aceitar", "Cancelar");
		}
		if(GetPVarInt(playerid, "contratoenviado")){

			new Veh, Valor;

			Veh = GetPVarInt(playerid, "V_Veiculo");
			Valor = GetPVarInt(playerid, "V_Valor");


			static str[ 129 ];
			new Box[ 500 ];

			strcat(Box, "{42f47d}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	        format(str, sizeof(str), "{c286f9}Veiculo ID: {FFFFFF}%i\n", Veh);
			strcat(Box, str);

	       // format(str, sizeof(str), "{c286f9}Modelo: {FFFFFF}%s\n", SkVeh[VeiculoInfo[Veh][vModel]-400]);
			//strcat(Box, str);

			format(str, sizeof(str), "{c286f9}Valor do Contrato: {FFFFFF}R$%s\n", FormatNumber(Valor));
			strcat(Box, str);

			strcat(Box, "{42f47d}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			ShowPlayerDialog(playerid, DIALOG_CONTRACT_DETRAN, DIALOG_STYLE_MSGBOX, "Transferencia de Veiculo", Box, "Aceitar", "Cancelar");
		}
    }
	return true;
}

CMD:aceitar(playerid, params[]){
	new opcao[20], org;
    if(sscanf(params, "s[20]", opcao)) return SCM(playerid, Verde, "Use: /aceitar | maconha | crack | cocaina | mecanico | taxi | morte | pizza |");

    if(!strcmp(opcao, "mecanico", true)){
	    if(!PlayerInfo[playerid][pRepairOffer]) return ErroMSG( playerid, "Voce nao tem nenhuma oferta de um mecanico.");

		if(PlayerInfo[playerid][pDinheiro] < PlayerInfo[playerid][pRepairValue]) return ErroMSG (playerid, "Voce nao tem dinheiro suficiente.");

        PlayerSolicitou[ playerid ] = 0;

        ForPlayers(i){
			if(PlayerInfo[ i ][ pEmprego ] == Mecanico){
			    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
			}
		}
		if(IsPlayerInAnyVehicle(playerid)){
			SetTimerEx("Concertando", TSegundos(6), false, "i", playerid);
			SCM(playerid, OffBranco, "* Seu veiculo esta sendo concertado, aguarde alguns instantes.");
			Freeze( playerid );
		}
	}
    else if(!strcmp(opcao, "morte", true))
    {
        if(PlayerInfo[ playerid ][ Morreu ] == true)
        {
            PlayerInfo[ playerid ][ Morreu ] = false;
	        KillTimer(AnimeMorte[ playerid ]);
		    KillTimer(EsperandoA_Timer[ playerid ]);

			SistemaHospital(playerid, "Setar");
			SpawnPlayer(playerid);
			SCM(playerid, Purple, "Voce foi levado ao hospital!");
		}
	}
	else if(!strcmp(opcao, "taxi", true)){
	    if(!PlayerInfo[playerid][pTaxiOffer]) return ErroMSG( playerid, "Voce nao tem nenhuma oferta de um taxista.");

		if(PlayerInfo[playerid][pDinheiro] < PlayerInfo[playerid][pTaxiValue]) return ErroMSG (playerid, "Voce nao tem dinheiro suficiente.");

		NoTaxi[playerid] = true;
		PlayerInfo[ playerid ][pTaxiOffer] = 0;
		static str[ 129 ];
		SCM(playerid, Verde, "Voce aceitou a oferta do taxista, assim que sair do carro o valor sera entregue a ele, em caso de abuse use /reportar.");
		format(str, sizeof(str), "%s aceitou sua oferta, cumpra com o combinado para nao ser reportado.", GetNameEx(playerid));
		SCM(Jogador[playerid], VerdeClaro, str);
	}
    else if(!strcmp(opcao, "maconha", true)){
        if(!PlayerInfo[ DrogasID[ playerid ] ][ pLogger ]) return ErroMSG(playerid, "O traficante nao esta mais conectado!");
        if(DrogasOff[ playerid ] != 1) return ErroMSG(playerid, "O traficante nao lhe ofereceu este tipo de droga!");
		if(PlayerInfo[ DrogasID[ playerid ] ][ pMaconha ] < DrogasQuant[ playerid ]) return ErroMSG(playerid, "O traficante nao tem mais esta quantia de drogas para vender!");
		if(GetPlayerGrana( playerid ) < DrogasPreco[ playerid ]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");
		if(GetPlayerDistanceFromPlayer(playerid, DrogasID[ playerid ]) > 4.0) return ErroMSG( playerid, "Chegue mais perto do traficante para pegar a droga!");

        PlayerInfo[ playerid ][ pMaconha ] += DrogasQuant[ playerid ];
        PlayerInfo[ playerid ][ pMaconha ] -= DrogasQuant[ playerid ];
        ActionPlayerGrana(playerid, "-", DrogasPreco[ playerid ], 1);

        org = GetPlayerOrg(playerid);
        CofreOrg[org][Dinheiro] += DrogasPreco[ playerid ];
        SaveCofreOrg(org);
        OnSalvarDados( playerid );

		static str[ 129 ];
		format(str, sizeof(str), "{E4EE25}Voce aceitou %i bloco's de maconha por $%s!", DrogasQuant[ playerid ], FormatNumber(DrogasPreco[ playerid ]));
		SCM(playerid, -1, str);
		format(str, sizeof(str), "{67D1F5}%s %s aceitou seu %i bloco's de maconha por $%s , dinheiro entregue a organizaçao!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O usuario"):("A usuaria"), GetNameEx(playerid), DrogasQuant[ playerid ], FormatNumber(DrogasPreco[ playerid ]));
		SCM(DrogasID[ playerid ], -1, str);

		DrogasID[ playerid ] = -1;
		DrogasOff[ playerid ] = -1;
		DrogasPreco[ playerid ] = -1;
		DrogasQuant[ playerid ] = -1;

		ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, false, false, false, false, 800);

    }
    else if(!strcmp(opcao, "cocaina", true)){
		if(!PlayerInfo[ DrogasID[ playerid ] ][ pLogger ]) return ErroMSG(playerid, "O traficante nao esta mais conectado!");
		if(DrogasOff[ playerid ] != 2) return ErroMSG(playerid, "O traficante nao lhe ofereceu este tipo de droga!");
		if(PlayerInfo[ DrogasID[ playerid ] ][ pCocaina ] < DrogasQuant[ playerid ]) return ErroMSG(playerid, "O traficante nao tem mais esta quantia de drogas para vender!");
		if(GetPlayerGrana( playerid ) < DrogasPreco[ playerid ]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");
		if(GetPlayerDistanceFromPlayer(playerid, DrogasID[ playerid ]) > 4.0) return ErroMSG( playerid, "Chegue mais perto do traficante para pegar a droga!");

        PlayerInfo[ playerid ][ pCocaina ] += DrogasQuant[ playerid ];
        PlayerInfo[ playerid ][ pCocaina ] -= DrogasQuant[ playerid ];
        ActionPlayerGrana(playerid, "-", DrogasPreco[ playerid ], 1);

        org = GetPlayerOrg(playerid);
        CofreOrg[org][Dinheiro] += DrogasPreco[ playerid ];
        SaveCofreOrg(org);
        OnSalvarDados( playerid );

		static str[ 129 ];
		format(str, sizeof(str), "{E4EE25}Voce aceitou %i capsula's de cocaina por $%s!", DrogasQuant[ playerid ], FormatNumber(DrogasPreco[ playerid ]));
		SCM(playerid, -1, str);
		format(str, sizeof(str), "{67D1F5}%s %s aceitou %i capsula's de cocaina por $%s , dinheiro entregue a organizaçao!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O usuario"):("A usuaria"), GetNameEx(playerid), DrogasQuant[ playerid ], FormatNumber(DrogasPreco[ playerid ]));
		SCM(DrogasID[ playerid ], -1, str);

		DrogasID[ playerid ] = -1;
		DrogasOff[ playerid ] = -1;
		DrogasPreco[ playerid ] = -1;
		DrogasQuant[ playerid ] = -1;

		ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, false, false, false, false, 800);

    }
	else if(!strcmp(opcao, "crack", true)){
		if(!PlayerInfo[ DrogasID[ playerid ] ][ pLogger ]) return ErroMSG(playerid, "O traficante nao esta mais conectado!");
		if(DrogasOff[ playerid ] != 3) return ErroMSG(playerid, "O traficante nao lhe ofereceu este tipo de droga!");
		if(PlayerInfo[ DrogasID[ playerid ] ][ pCrack ] < DrogasQuant[ playerid ]) return ErroMSG(playerid, "O traficante nao tem mais esta quantia de drogas para vender!");
		if(GetPlayerGrana( playerid ) < DrogasPreco[ playerid ]) return ErroMSG(playerid, "Voce nao tem dinheiro suficiente!");
		if(GetPlayerDistanceFromPlayer(playerid, DrogasID[ playerid ]) > 4.0) return ErroMSG( playerid, "Chegue mais perto do traficante para pegar a droga!");

        PlayerInfo[ playerid ][ pCrack ] += DrogasQuant[ playerid ];
        PlayerInfo[ playerid ][ pCrack ] -= DrogasQuant[ playerid ];
        ActionPlayerGrana(playerid, "-", DrogasPreco[ playerid ], 1);

        org = GetPlayerOrg(playerid);
        CofreOrg[org][Dinheiro] += DrogasPreco[ playerid ];
        SaveCofreOrg(org);
        OnSalvarDados( playerid );

		static str[ 129 ];
		format(str, sizeof(str), "{E4EE25}Voce aceitou %i pedra's de crack por $%s!", DrogasQuant[ playerid ], FormatNumber(DrogasPreco[ playerid ]));
		SCM(playerid, -1, str);
		format(str, sizeof(str), "{67D1F5}%s %s aceitou %i pedra's de crack por $%s , dinheiro entregue a organizaçao!", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O usuario"):("A usuaria"), GetNameEx(playerid), DrogasQuant[ playerid ], FormatNumber(DrogasPreco[ playerid ]));
		SCM(DrogasID[ playerid ], -1, str);

		DrogasID[ playerid ] = -1;
		DrogasOff[ playerid ] = -1;
		DrogasPreco[ playerid ] = -1;
		DrogasQuant[ playerid ] = -1;

		ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, false, false, false, false, 800);

    }
    else if(!strcmp(opcao, "pizza", true)){
        if(PlayerSolicitou[ playerid ] != PizzaJob) return InfoMSG(playerid, "(>) - Voce nao tem um pedido de pizza, para pedir uma pizza utilize (/solicitar pizza).");

	    static str[ 129 ];
		if(GetPlayerGrana( playerid ) < VALUE_PIZZA ) {
            format(str, sizeof(str), "(>) - Voce nao possui a quantia de {F7A2A0}R$%s", FormatNumber(VALUE_PIZZA));
            SCM(playerid, -1, str);

            SCM(playerid, -1,  "(>) - O jogador(a) parece nao ter dinheiro suficiente para realizar a compra.");
            PlayerSolicitou[ playerid ] = 0;

            skyLoop(i){
				if(PlayerInfo[ i ][ pEmprego ] == PizzaJob){
				    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
			return true;
		}
        PlayerInfo[playerid][pFome] = 100;

		ActionPlayerGrana(playerid, "-", VALUE_PIZZA, 1);
		ActionPlayerGrana(pizzaEntregador[playerid], "+", VALUE_PIZZA, 1);

        RemovePlayerAttachedObject(pizzaEntregador[playerid], PIZZA_INDEX);
		ClearAnimations(pizzaEntregador[playerid]);
        SetPlayerSpecialAction(pizzaEntregador[playerid], SPECIAL_ACTION_NONE);

		PlayerPlaySound(playerid,1139,0.0,0.0,0.0);

        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

		SCM(playerid, Purple, "(>) - Voce comprou a pizza, voce esta comendo uma Pizza.");

		format(str, sizeof(str), "(>) - Voce recebeu R$ %s pela pizza entregue, pode voltar a suas entregas utilizando /cp pizza!", FormatNumber(VALUE_PIZZA));
        SCM(pizzaEntregador[playerid], Purple, str);

        pizzaEntregador[playerid] = INVALID_PLAYER_ID;
        PlayerSolicitou[ playerid ] = 0;

        skyLoop(i){
			if(PlayerInfo[ i ][ pEmprego ] == PizzaJob){
			    SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
			}
		}
	}
	return true;
}

CMD:pegar(playerid, params[]){
	new	option[50];
	if(sscanf(params, "s[50]", option)) return SCM(playerid, Verde, "Use: /pegar emprego");

	if(!strcmp(option, "emprego", true)) {
		if(isPlayerCop(playerid) || PlayerInfo[ playerid ][ pEmprego ] != 0) return ErroMSG(playerid, "Voce ja possui um emprego ( /sairemprego ), ou e membro de alguma corporaçao!");

		static bool:proxJob;
		proxJob = false;

        Loop(jid, sizeof(getJobMenu)){
			if(IsPlayerInRangeOfPoint(playerid, 5.0, getJobMenu[jid][jobPosX], getJobMenu[jid][jobPosY], getJobMenu[jid][jobPosZ])){
		 		if(GetPlayerLevel( playerid ) <  getJobMenu[jid][jobMinLevel]) {
                    SCM(playerid, Verde, "Voce nao possui o level minimo para adiquirir esta profissao!");
					return SCM(playerid, AzulClaro, "Va ate a prefeitura e procure uma profissao adequada a teu nivel.");
				}

				static str_[ 200 ];
				format(str_, 199, "{FFFFFF}Voce tem certeza que deseja se tornar um(a) {81DAF5}%s{FFFFFF}?\nVoce tera que cumprir ao menos, 1 hora de contrato!", EmpregoNome[getJobMenu[jid][jobID]]);

				ShowPlayerDialog(playerid, DIALOG_JOB_ACCEPT, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - Confirmar Escolha", str_, "Confirmar", "Voltar");
				EmpregoEscolhido[ playerid ] = getJobMenu[jid][jobID];
			    proxJob = true;
			}
	  	}
	  	if(!proxJob) return ErroMSG(playerid, "Voce precisa estar em um ponto de emprego para utilizar este comando, utilize /gps ou va ate a prefeitura!");
	}
	else ErroMSG(playerid, "Opçao invalida use /pegar para ver as opçoes validas.");
	return true;
}

//sistema de roubo
new roubosPortoesStatus[MAX_ORGS] = 0;
CMD:explodir(playerid) {
	if(!IsPlayerGang(playerid)) return ErroMSG( playerid, "Apenas organizaçoes criminosas podem usar este comando");
	if(GetPVarInt(playerid, "dinamite") == 0) return ErroMSG( playerid, "Voce precisa de Dinamite para explodir essa grade");
	new Float:x, Float:y, Float:z;
	for(new a=0;a<MAX_LOCAIS_ROUBOS;a++) {
		GetObjectPos(roubosPortoes[a],x,y,z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z)) {
			if(roubosPortoesStatus[a]) return ErroMSG( playerid, "Essa grade ja esta sendo explodida");
			roubosPortoesStatus[a] = 1;
			SetPVarInt(playerid, "dinamite", 0);
			RemovePlayerAttachedObject(playerid, 4);

			ClearAnimations(playerid);

			ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 1, 0);

			SetTimerEx("OnRouboPrepararContagem", 10000, false, "d", playerid);
			SetTimerEx("OnRouboExplodir", 16000, false, "dd", playerid, a);
			return 1;
		}
	}
	return ErroMSG( playerid, "Voce nao esta perto de um cofre");
}

// Roubar
new roubosCofresStatus[MAX_ORGS] = 0;
new roubosCofresTimer1[MAX_ORGS];
new roubosCofresContador[MAX_LOCAIS_ROUBOS];


CMD:roubar(playerid) {

	static
		Float:x,
		Float:y,
		Float:z,
		bool:CountCops,
		bool:Roubolocal
	;

	CountCops = false;
	Roubolocal = false;

	for(new a=0;a<MAX_LOCAIS_ROUBOS;a++){

		GetObjectPos(roubosCofres[a],x,y,z);

		if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z)){
            Roubolocal = true;
			if(!IsPlayerGang(playerid)) return ErroMSG( playerid, "Apenas membros de organizaçoes criminosas podem roubar!");
			if(roubosCofresStatus[a] == 1) return ErroMSG( playerid, "Este cofre ja esta sendo roubado!");
			if(roubosCofresStatus[a] == 2) return ErroMSG( playerid, "Este cofre ja foi roubado recentemente!");

            ForPlayers( a_ ) {
                if(!PlayerInfo[ a_ ][ pOrg ]) continue;

                if(PlayerInfo[ a_ ][ pOrg ] == PM) CountCops = true;

				if(IsPlayerInRangeOfPoint(a_, 30.0, x, y, z)){
                    EmRouboRecente[ a_ ] = true;
                    AlterarNivelProcurado( a_, 3, "+" );
                    SetTimerEx("RemovePlayerRecentRob", TMinutos(3), false, "d", a_);
				}
			}
			if(!CountCops) return ErroMSG(playerid, "e preciso ter ao menos um cop online!");

			roubosCofresStatus[a] = 1;
			Roubando[playerid] = 1;

			// Tempo de roubo
			roubosCofresContador[a] = ROUBO_TEMPO;

			ApplyAnimationEx(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);

			// Anuncios
			format(strx, sizeof(strx), "{%s}%s{ffffff} e membros {%s}%s{ffffff} estao assaltando {ff0000}%s{ffffff} !!!", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], roubosNomes[a]);
            JNNEWS(strx);
			// ---
			OnRoubarCofreContador(playerid, a);
			roubosCofresTimer1[a] = SetTimerEx("OnRoubarCofreContador", 1000, true, "dd", playerid, a);

			for(new p=0; p < sizeof( BombAssalt ); p++){
				PlayerTextDrawShow(playerid, BombAssalt[ p ][ playerid ]);
			}
		}
	}
	if(!Roubolocal) return ErroMSG( playerid, "Voce nao esta em um local de roubo!");

	return true;
}


CMD:dinamite(playerid) {
	for( new i = 0; i < sizeof(PickupEquipar); i++ ) {
		if( IsPlayerInRangeOfPoint( playerid, 2.0, PickupEquipar[i][posX], PickupEquipar[i][posY], PickupEquipar[i][posZ] ) && PlayerInfo[playerid][pOrg] == PickupEquipar[i][orgsID] ) {
			if(!IsPlayerGang(playerid)) return false;
			//if(materiais[GetPlayerOrg(playerid)] < 3) return ErroMSG( playerid, "[Equipamentos] Sua organizaçao nao possui Materiais suficientes");
			if(GetPVarInt(playerid, "dinamite") > 0) return ErroMSG( playerid, "[Equipamentos] Voce so pode carregar uma Dinamite");
			//materiais[PlayerInfo[playerid][pOrg]] -= 3;
			SetPVarInt(playerid, "dinamite", 1);
			SetPlayerAttachedObject(playerid, 4, 1654, 1, 0.1, -0.2, 0, 0, 40, 0, 1, 1, 1);
			return SendClientMessage(playerid, -1, ""#SERVELOGO" Voce acaba de guardar com voce 1 Dinamite");
		}
	}
	return ErroMSG( playerid, ""#SERVELOGO" Voce precisa esta perto do icone de equipamentos da sua organizaçao");
}
/*
*	Organizaçoes
*
*	Comandos relacionados a organizaçoes
*/

/*====== Policia Militar ======*/

CMD:adp2(playerid) {

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1588.5999, -1638.3000, 14.699)){
		AbrirGPM(playerid, 1);
	}
	return true;
}

CMD:adp(playerid)
{
    if(PlayerInfo[playerid][pOrg] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15.0, 1540.09313964, -1627.93298339, 15.18280601))
        {
            AbrirGPM(playerid, 2);
        }
    } else
    if(PlayerInfo[playerid][pOrg] == 2)
    {
        MoveDynamicObject(P_BOPE[2], 2720.39453, -2495.33789, 16.69063, 3);
        SetTimerEx("CloseGate", 5000, false, "iffff", P_BOPE[2], 2720.15845, -2503.78516, 16.69063, 3.0);
    }
	return true;
}

CMD:camera(playerid, params[])
{
	new OrgP = GetPlayerOrg(playerid);
	for( new i = 0; i < sizeof(PickupsCam); i++ )
	{
		if( IsPlayerInRangeOfPoint( playerid, 5.0, PickupsCam[i][PosX], PickupsCam[i][PosY], PickupsCam[i][PosZ] ))
		{
			if(PickupsCam[i][OrgID] == OrgP){
				OnPlayerInCamera(playerid, OrgP);
				break;
			}
		}
	}
	return true;
}



CMD:saircamera(playerid)
{
	if(CameraAtual[playerid] > -1)
    {
		SetPlayerPosEx(playerid, UltimaPosicao[playerid][ UX ], UltimaPosicao[playerid][ UY ], UltimaPosicao[playerid][ UZ ], UltimaPosicao[ playerid ][ UA ], UltimaPosicao[ playerid ][ UInterior ]);
        FreezeEx(playerid, 1);

        KillTimer(KeyTimer[playerid]);
        SetCameraBehindPlayer(playerid);

        for(new tid = 0; tid <= sizeof(CamsTextTwo); tid++) PlayerTextDrawHide(playerid, CamsTextTwo[ playerid ][ tid ]);

		CameraAtual[ playerid ] = -1;
		return true;
	}
	return true;
}

CMD:listasu( playerid, params[] ) {

	new lista[1000], string[128];

	if( !isPlayerCop(playerid) )
	return false;

	for( new i = 0; i < sizeof(reasonList); i++ ) {
		format( string, sizeof(string), "{ff0000}%s{ffffff} - %s\n", reasonList[i][fName], reasonList[i][lName] );
		strcat( lista, string );
	}

	format( string, sizeof(string), "Lista de Delitos Policiais");
	ShowPlayerDialog(playerid, Dinfo,DIALOG_STYLE_MSGBOX , string, lista, "FECHAR","");

	return 1;

}

/**
*	@revisao: 16/01/13
*/
CMD:su( playerid, params[] ) {

	new id, reason[64], Float:x, Float:y, Float:z;
	GetPlayerPos( playerid, x, y, z );

	if( !isPlayerCop(playerid) ) return false;
	if( sscanf( params, "ds[64]", id, reason ) ) return ErroMSG( playerid, "Modo de uso correto: /su [ID_DO_JOGADOR] [MOTIVO]" );
	if( !Equipado[playerid] ) return ErroMSG( playerid, "[Comando /su] Voce esta em modo civil e nao pode usar esse comando." );
	if( isPlayerCop(id) ) return ErroMSG( playerid, "[Comando /su] Voce nao pode usar este comandos em jogadores que sejam policiais" );
	if( !PlayerInfo[id][pLogger] ) return ErroMSG( playerid, "[Comando /su] O ID informado corresponde a um jogador nao existente" );
	if( !verifySu(reason) ) return ErroMSG( playerid, "[Comando /su] Voce deve informar um SU valido. Digite /listasu para ver a lista completa" );
	if( !IsPlayerInRangeOfPoint( id, 25.0, x, y, z ) ) return ErroMSG( playerid, "[Comando /su] Voce so pode usar este comando estando perto do acusado" );
	AlterarNivelProcurado( id, 1, "+" );
	SendCopsNotifyMessage( playerid, id, reason, GetName(playerid) );
	format(strx, sizeof(strx), "# Voce recebeu mais um nivel de procurado de: %s. Motivo: %s", GetName(playerid), reason);
	SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], strx );
	return 1;

}

//	=================================================
//	@nome:		Envia um pedido de reforco para todos da organizaçao
//	@revisao:	01/12/12 [PENDENTE]
//	-------------------------------------------------
CMD:reforco( playerid, params[] ) {

	if( !isPlayerCop(playerid) ) return ErroMSG( playerid, "[Comando /reforco] Apenas organizaçoes policiais podem usar este comando" );

	new Float:x, Float:y, Float:z, string[128];
	GetPlayerPos( playerid, x, y, z );

	ForPlayers(i){
		if( isPlayerCop( i ) && i != playerid ) {
			format( string, sizeof(string), "[Central Policial] O %s %s %s esta solicitando reforços imediatamente!", GetPatentNome( PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo] ) ,GetName(playerid), nomeOrgs[PlayerInfo[playerid][pOrg]] );
			SendClientMessage( i, orgsColor[PlayerInfo[i][pOrg]], string );
			SetPlayerCheckpoint(i, x,y,z, 6);
		}
	}
	SCM(playerid, AzulClaro, "(*) - Seu pedido de reforço foi enviado ..");

	return 1;
}
//	=================================================
//	@nome:		Lista os jogadores com nivel de procurado
//	@revisao:	15/01/13
//	-------------------------------------------------
CMD:procurados(playerid) {
	if( !isPlayerCop(playerid) )
	return ErroMSG( playerid, "[Comando /procurados] Apenas organizaçoes policiais podem usar este comando" );
	new count = 0;
	SendClientMessage( playerid, orgsColor[PlayerInfo[playerid][pOrg]], "-=-=-=-=-=-=-=-=-=-=-=-=-=-= [ Procurados ] =-=-=-=-=-=-=-=-=-=-=-=-=-" );
	ForPlayers(i) {
		if( PlayerInfo[i][pLogger] && PlayerInfo[i][pWanted] ) {
			format( strx, sizeof(strx), "Nome: {%s}%s [%d]{ffffff} |  Organizaçao: {%s}%s{ffffff} | Nivel de Procurado: {ff0000}%d", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(i), i, OrgColorHex[PlayerInfo[i][pOrg]], nomeOrgs[PlayerInfo[i][pOrg]],PlayerInfo[i][pWanted] );
			SendClientMessage( playerid ,Branco, strx );
			count ++;
		}
	}
	format(strx, sizeof(strx), "Total de procurados: {666666}%d", count);
	SendClientMessage( playerid, Branco, strx );
	return 1;
}

CMD:escudo( playerid, params[] ) {
	SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
	return 1;
}

/**
*	@revisao: 21/01/2013
*/

//	=================================================
//	@nome:		Guicha um veiculo
//	@revisao:	01/12/12 [PENDENTE]
//	-------------------------------------------------
CMD:guinchar ( playerid, params[] )
{
    if(PlayerInfo[playerid][pEmprego] == Mecanico){
		new Float:pX,Float:pY,Float:pZ;
		GetPlayerPos(playerid,pX,pY,pZ);
		new Float:vX,Float:vY,Float:vZ;
		new Found=0;
		new vid2=0;
		while((vid2<MAX_VEHICLES)&&(!Found))
        {
			vid2++;
			GetVehiclePos(vid2,vX,vY,vZ);
			if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid2!=GetPlayerVehicleID(playerid)))
            {
            	Found = 1;
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))){
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				}
				else
				{
					AttachTrailerToVehicle(vid2,GetPlayerVehicleID(playerid));
				}
			}
		}
		if(!Found) SendClientMessage(playerid,C_ERROR,"Nao tem nenhum carro perto.");
	} else {
		return ErroMSG(playerid, "Voce nao e um mecanico.");
	}
	return 1;
}

/**
*	@revisado: 13/01/2013
*/
CMD:presos(playerid) {
	new
		lista[500],
		str[150],
		count = 0
	;
	ForPlayers( a ) {
		if(!PresoStatus[a]) continue;
		if(PlayerInfo[ a ][ PresoOrg ]) format(str, sizeof(str), "{%s}%s{ffffff} esta preso em {%s}%s{ffffff} | Tempo restante de pena: {ff0000}%s\n", OrgColorHex[PlayerInfo[a][pOrg]], GetName(a), OrgColorHex[PlayerInfo[ a ][ PresoOrg ]], nomeOrgs[PlayerInfo[ a ][ PresoOrg ]], Convert(PlayerInfo[a][PresoTempo], 1));
		else format(str, sizeof(str), "{%s}%s{ffffff} esta preso na {FFA500}Solitaria{ffffff} | Tempo restante de pena: {FFA500}%s\n", OrgColorHex[PlayerInfo[a][pOrg]], GetName(a), Convert(PlayerInfo[a][PresoTempo], 1));
		strcat(lista, str );
		count++;
	}
	if(count){
		strcat(lista,"\n\n{ffffff}Total de presos: {333333}%d", count);
		ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Lista de Presos", lista, "Fechar", "");
	}
	else ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Lista de Presos", "Nao ha ninguem preso no momento!", "Fechar", "");
	return 1;
}

//	=================================================
//	@nome:		Comandos relacionados ao sistema de telefone
//	@revisao:	01/12/12 [PENDENTE]
//	-			[BUG]
//	-------------------------------------------------
//	--- Desligar o celular
CMD:des( playerid, params[] ) {
	if(!CelularInfo[playerid][LinhaAtiva]) {
		ErroMSG(playerid, "Voce nao esta com uma ligaçao ativa ou em espera" );
		return 1;
	}

	new
		string[ 64 ],
		LID = CelularInfo[ playerid ][ LinhaAtivaID ]
	;

    format( string, sizeof(string), "{FF0000}%s{ffffff} desligou o celular", GetName(playerid) );
	SCM(LID, -1, string);

	SCM(playerid, -1, "{0FF23C}({FFFFFF}Celular{0FF23C}){FFFFFF} - Voce encerrou a chamada!");

	format( string, sizeof(string), "%s desligou o celular", GetName(playerid) );
	MessageProxPlayer(playerid, Purple, 10.0, string);

	if(CelularInfo[ playerid ][ pCell ] ==2) CelularInfo[ playerid ][ PosTemp ] = 0;
	if(CelularInfo[ LID ][ pCell ] == 2) CelularInfo[ playerid ][ PosTemp ] = 0;
	if(CelularInfo[LID][LinhaAtiva]){
		SendClientMessage( LID, -1, string );
  		SetPlayerSpecialActionEx(LID, SPECIAL_ACTION_STOPUSECELLPHONE);
		CelularInfo[LID][LinhaAtiva] = false;
		CelularInfo[LID][LinhaOwner] = 0;
		CelularInfo[playerid][LinhaOwner] = 0;
	}

	CelularInfo[playerid][LinhaAtiva] = false;

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialActionEx(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

	return 1;
}

CMD:at( playerid ) return callcmd::atender( playerid );
CMD:atender( playerid ) {
	if( CelularInfo[playerid][LinhaAtivaID] == INVALID_PLAYER_ID) return ErroMSG(playerid, "Voce nao esta com uma ligaçao ativa ou em espera" );

	new	string[ 64 ],
		LID = CelularInfo[playerid][LinhaAtivaID];

	CelularInfo[playerid][LinhaAtiva] = true;
    CelularInfo[LID][LinhaAtiva] = true;
    CelularInfo[LID][LinhaAtivaID] = playerid;

    CelularInfo[LID][LinhaOwner] = 1;
	KillTimer(CelularInfo[LID][Timer]);
	//CelularInfo[ LID ][ PosTemp ] = 5;

	format( string, sizeof(string), "( Celular ) - %s atendeu o celular. ", GetName(playerid) );
 	ChatProximo(15.0, playerid, string, Purple, Purple , Purple, Purple, Purple);
	SendClientMessage( LID, Branco, string );

	SendClientMessage( playerid, Purple, "( Celular ) - Chamada aceita!");

	if(!IsPlayerInAnyVehicle( playerid )){
		SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_USECELLPHONE);
	}
	return 1;
}

CMD:agenda( playerid, params[] ) {
	new
		id
	;
	if( sscanf( params, "d", id ) ) return ErroMSG(playerid, "Modo correto de uso: /agenda [ ID do Jogador ]" );

	if( !PlayerInfo[id][pLogger] ) return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente" );

    if(PlayerInfo[ playerid ][ pAgenda ] == 0) return ErroMSG(playerid, "Voce nao possui uma agenda, adquira uma na 24/7!");
    if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao possui um celular!");
    if(CelularInfo[ id ][ pCell ] == 0) return ErroMSG(playerid, "O Player nao possui um celular!");

	static str[200];
	format( str, sizeof(str), "{F3F781}Nome:{ffffff} %s\n{F3F781}Numero:{ffffff}%d\n{F3F781}Recebendo SMS: %s\n{F3F781}Recebendo Ligaçoes: %s", GetName(id), CelularInfo[id][pNumero], CelularInfo[id][ pBlockSMS ] == 1 ? ("{FF0000}Nao"):("{01DF01}Sim"), CelularInfo[id][ pBlockCall ]  == 1 ? ("{FF0000}Nao"):("{01DF01}Sim"));
    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Agenda Telefônica", str, "Confirmar", "" );
	return true;
}


CMD:blockcell( playerid, params[]){
	if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao possui um celular!");

	new BlockID;
	BlockID = strval(params);
	if(!BlockID || BlockID != 1 && BlockID != 2) return ErroMSG(playerid, "Use: /blockcell | 1 Chamadas | 2 SMS |" );

	if(BlockID == 1){
		if(CelularInfo[ playerid ][ pBlockCall ] == 1){
			CelularInfo[ playerid ][ pBlockCall ] = 0;
			InfoMSG(playerid, "Voce desbloqueou as chamadas para seu Celular");
		}
		else
		{
			CelularInfo[ playerid ][ pBlockCall ] = 1;
			InfoMSG(playerid, "Voce bloqueou as chamadas para seu Celular");
		}
	}
	if(BlockID == 2){
	    if(CelularInfo[ playerid ][ pBlockSMS ] == 1){
		    CelularInfo[ playerid ][ pBlockSMS ] = 0;
		    InfoMSG(playerid, "Voce desbloqueou os envios de SMS para seu Celular");
		}
		else
		{
		    CelularInfo[ playerid ][ pBlockSMS ] = 1;
		    InfoMSG(playerid, "Voce bloqueou os envios de SMS para seu Celular");
		}
	}
	return true;
}

CMD:sms(playerid, params[]){

    if( PlayerInfo[ playerid ][ pBlockchat ] == true ) return SendClientMessage(playerid, -1, "{FF0000}|_ {FFFF00}ANTI-FLOOD {FF0000}_| {FFFFFF} Seu Chat esta temporariamente BLOQUEADO!"), 1;

    if(CelularInfo[ playerid ][ pCell ] == 0) return ErroMSG(playerid, "Voce nao possui um Celular!" );
    if( CelularInfo[ playerid ][pCredito] <= 0.9 && CelularInfo[ playerid ][ pCell ] != 2) return ErroMSG(playerid, "Seu Saldo e insuficiente para Enviar SMS, por favor recarregue seu celular 8^)" );

	new	numero, id, MSG[ 80 ];
	static string[ 129 ];

    if( sscanf( params, "is[80]", numero, MSG ) ) return ErroMSG(playerid, "Use: /sms [ Numero do jogador ] [Menssagem]" );

    ForPlayers(i) {
		if( !PlayerInfo[i][pLogger] ) continue;
		if( CelularInfo[i][pNumero] == numero ) id = i;
	}
	if( !id ) return ErroMSG(playerid, "O numero informado corresponde a um numero inexistente ou offline" );
	if( numero == CelularInfo[playerid][pNumero] ) return ErroMSG(playerid, "Voce nao pode mandar sms para si mesmo" );

	if(CelularInfo[ id ][ pBlockSMS ] == 1) return ErroMSG(playerid, "Este jogador bloqueou sua caixa de menssagem!" );

	PlayerPlaySound(id, 1085, 0.0, 0.0, 0.0);

    CelularInfo[ playerid ][pCredito] -= 0.10;
    GameTextForPlayer(playerid, "~w~-~g~$0.10 ~w~C~n~de creditos", 1000, 1);
    format(string, sizeof(string), "SMS enviado para %s (Tel: %i): %s", GetName(id), CelularInfo[id][pNumero], MSG);
	SendClientMessage(playerid, 0xFFD700AA, string);

	format(string, sizeof(string), "SMS recebido de %s (Tel: %i): %s", GetName(playerid), CelularInfo[playerid][pNumero], MSG);
	SendClientMessage(id, 0xDAA520AA, string);

	format(string, sizeof(string), "SMS: %s (%d) para: %s (%d): %s", GetName(playerid), playerid, GetName(id), id, MSG);
	ABroadCastPM(Amarelo, string);

	new sky[70];
	format(sky, sizeof(sky), "%s enviou um sms!", GetNameEx( playerid ));
	MessageProxPlayer(playerid, Purple, 10.0, sky);
    return true;
}

CMD:ligar( playerid, params[] ) {

	new
		numero,
		string[128],
		id
	;

	if( PlayerInfo[ playerid ][ pBlockchat ] == true ) return SendClientMessage(playerid, -1, "{FF0000}|_ {FFFF00}ANTI-FLOOD {FF0000}_| {FFFFFF} Seu Chat esta temporariamente BLOQUEADO!"), 1;

	if( sscanf( params, "i", numero ) ) return ErroMSG(playerid, "Modo correto de uso: /ligar [Numero do jogador]" );

    if( CelularInfo[ playerid ][pCredito] <= 0.24 && CelularInfo[ playerid ][ pCell ] != 2) return ErroMSG(playerid, "Seu Saldo e insuficiente para efetuar Chamadas, por favor recarregue seu celular :D" );

	if( CelularInfo[playerid][LinhaAtiva] == true ) return ErroMSG(playerid, "Voce ja esta em uma ligaçao. Digite /des para desligar seu celular" );


	ForPlayers(i) {
		if( !PlayerInfo[i][pLogger] ) continue;
		if( CelularInfo[i][pNumero] == numero ) id = i;
	}

	if( !id ) return ErroMSG(playerid, "O numero informado corresponde a um numero inexistente ou offline" );

	if( numero == CelularInfo[playerid][pNumero] ) return ErroMSG(playerid, "Voce nao pode ligar para si mesmo" );

    if(CelularInfo[ id ][ pBlockCall ] == 1) return ErroMSG(playerid, "Este jogador bloqueou seu aparelho para nao receber chamadas!" );

	if( CelularInfo[ id ][LinhaAtiva] == true ) return ErroMSG(playerid, "Este numero esta ocupado no momento. Tente mais tarde" );


	PlayerPlaySound(id, 1142, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid, 1142, 0.0, 0.0, 0.0);

    CelularInfo[ id ][LinhaAtivaID] = playerid;

    CelularInfo[ playerid ][Timer] = SetTimerEx("TentativasDiscagem", TSegundos(2), true, "i", playerid);

    CelularInfo[ playerid ][ Tentativas ] = 10;
	SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_USECELLPHONE);

	format( string, sizeof(string), "(*) - %s pegou o celular!", GetNameEx( playerid ) );
	ChatProximo(15.0, playerid, string, Purple, Purple, Purple, Purple, Purple);

	format( string, sizeof(string), "{ff0000}[Celular]{ffffff} O jogador {ff0000}%s{ffffff} esta ligando para o seu celular", GetName(playerid) );
	SendClientMessage( id, Branco, string );
	SCM(id, -1, "{ff0000}[Celular]{ffffff} Digite {008800}/at{ffffff} para atender ou {ff0000}/des{ffffff} para recusar" );

 	format( string, sizeof(string), "{ffff00}[Celular] {ffffff}- Voce esta ligando para {ff0000}%s{ffffff}", GetName(id) );
	SendClientMessage( playerid, -1, string );
	SCM(playerid, -1, "{A7CBFA}(>) - Chamando...");

	return 1;
}

CMD:servidor( playerid ){
	ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX , "Informaçoes Servidor",
	"{F1F1D9}Servidor: {F3F59E}"#SERVER_NAME2"\n\
	{F1F1D9}IP fixo: {F3F59E}"#SV_IP"\n\
	{F1F1D9}Site: {F3F59E}"#SV_SITE"\n\
	{F1F1D9}Discord: {F3F59E}"#DISCORD"\n\
    {F1F1D9}Instagran: {F3F59E}"#INSTA"\n\
    {F1F1D9}Facebook: {F3F59E}"#FACE"\n\
	{F1F1D9}GM Versao: {F3F59E}"#GM_VERSAO"", "Fechar","");
	return true;
}
/*
CMD:admins( playerid )
{
	if(!PlayerInfo[ playerid ][ pAdmin ]) return false;
    static
		stv[ 250 ],
		bool:count
	;

	ClearChatbox(playerid, 1);
	SCM(playerid, -1, "|________________ Admins Online ________________|");
	ForPlayers( i ){
		if(PlayerInfo[ i ][ pAdmin ] >= 1 && PlayerInfo[ i ][ pLogger ] == 1){
	        format( stv, sizeof( stv ), "%s (%i) [%s]",	GetName(i), i, PlayerInfo[i][pAWork] == 0 ? ("Jogando"): PlayerInfo[i][pAWork] == 1 ? ("Trabalhando") : PlayerInfo[i][pAWork] == 2 ? ("Ausente") : ("Aus") );
            SCM(playerid, 0x0088CAAA, stv);
			count = true;
	    }
	}
	if(count == false) return SCM(playerid, -1, " {FFFFFF}Nao ha ADM's online no momento.");
	return true;
}*/

CMD:paint(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_PAINTJOB, DIALOG_STYLE_LIST, "Paintjobs", "Estilo 1 \nEstilo 2 \nEstilo 3 \nVoltar", "Pintar!", "Cancelar");
	return 1;
}

CMD:ever(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
     PlayAudioStreamForPlayer(i, "http://35.199.103.187/Music/Evento/Anuncio_Purificacao_Anual.mp3");
	}
	return 1;
}

CMD:ever1(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
     PlayAudioStreamForPlayer(i, "http://35.199.103.187/Music/Evento/Transmissao_de_Emergencia.mp3");
	}
	return 1;
}

CMD:stopi(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
     StopAudioStreamForPlayer(i);
	}
	return 1;
}

CMD:admins(playerid)
{
    new str[126], strDialog[4000], Cont = 0;
    format(str, sizeof(str), "Nome\tStatus\tAvaliacoes\n");
    strcat(strDialog, str);

    foreach(Player, i)
    {
        if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] > 0) //? ("{FF0000}Trancar"): ("{11BD1A}Abrir")
        {
            format (str, sizeof str, "%s[%s]\t{00d900}%s\t{FFFFFF}%d.0\n", GetName(i), adminInfo[PlayerInfo[ i ][ pAdmin ]], PlayerInfo[i][pAWork] == 0 ? ("Jogando"): ("Trabalhando"), PlayerInfo[i][pAvaliacoes]);
            strcat(strDialog, str);
            Cont++;
        }
    }

    new titulo[35];
    format(titulo, sizeof(titulo), "Administradores Online {00d900}%d", Cont);

    if(Cont > 0)
    {
        ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_TABLIST_HEADERS, titulo, strDialog, "Voltar", "Particular");

        } else {

        ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_TABLIST_HEADERS, titulo, strDialog, "Voltar", "");
    }
    return 1;
}

CMD:vips( playerid )
{
    static
		stv[ 250 ],
		bool:count
	;

	ClearChatbox(playerid, 1);
	SCM(playerid, -1, "|________________ Vips Online ________________|");
	ForPlayers( i )
    {
		if(PlayerInfo[ i ][ pVIP ] >= 1)
        {
	        format( stv, sizeof( stv ), "%s (%i) - %s", GetName(i), i, VIPLevel(i));
            SCM(playerid, 0x0088CAAA, stv);
			count = true;
	    }
	}
	if(count == false) return SCM(playerid, -1, " {FFFFFF}Nao ha Vips online no momento.");
	return true;
}

CMD:djs( playerid )
{
    static
		stv[ 250 ],
		bool:count
	;

	ClearChatbox(playerid, 1);
	SCM(playerid, -1, "|________________ DJS Online ________________|");
	ForPlayers( i )
    {
		if(PlayerInfo[ i ][ musica ] >= 1)
        {
	        format( stv, sizeof( stv ), "%s (%i)", GetName(i));
            SCM(playerid, 0x0088CAAA, stv);
			count = true;
	    }
	}
	if(count == false) return SCM(playerid, -1, " {FFFFFF}Nao ha DJS online no momento.");
	return true;
}

CMD:lideres( playerid )
{
	new
		string[ 128 ],
		box[ 1200 ],
		bool:count = false
	;
	ForPlayers( i )
    {
		if(PlayerInfo[i][pLogger] == 1 && PlayerInfo[i][pCargo] == 6 )
		{
			format( string, sizeof(string), "{%s}%s {FFFFFF}({%s}%s{FFFFFF}) | Celular: {D1D1D1}%i\n", OrgColorHex[PlayerInfo[i][pOrg]], GetName(i), OrgColorHex[PlayerInfo[i][pOrg]], nomeOrgs[PlayerInfo[i][pOrg]], CelularInfo[i][pNumero] );
			strcat( box, string );
			count = true;
		}
	}

	return count == true ? (ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX , "Lideres Online:", box, "Fechar","")) : (SendClientMessage(playerid, Vermelho, "Nao ha lideres Onlines no momento"));
}

// == COMANDOS VIP

CMD:venc(playerid)
{
    if(PlayerInfo[playerid][pVIP] >= 1)
    {
        new ExpireIn = PlayerInfo[ playerid ][ pVIPTEMP ];
        new TempoConvert = (ExpireIn-gettime())+gettime();

        new String[256], Str[128];

        format(Str, sizeof(Str), "{ffffff}NICK: {008B00}%s{FFFFFF} - {008B00}%s{FFFFFF}\n", GetName(playerid), VIPLevel(playerid));
        strcat(String, Str);
        format(Str, sizeof(Str), "{ffffff}VENCIMENTO EM: {008B00}%s", timec(TempoConvert));
        strcat(String, Str);
        ShowPlayerDialog(playerid, DIALOG_VIP_INFO, DIALOG_STYLE_MSGBOX, "{EEC900}- Vencimento VIP - SOCIO ", String, "Fechar", #);
    }
    return 1;
}

//PlayerInfo[ id ][ pVIPTEMP ] = (86400*dias)+gettime();


CMD:v(playerid, params[])
{
    if(PlayerInfo[playerid][pVIP] >= 1)
    {
        new texto[128], String[128];
        if(sscanf(params, "s", texto)) return SCM(playerid, -1, "Use: /v [texto]");
        if(strval(texto) > 100) return ErroMSG(playerid, "Texto muito grande, diminua por favor!");
        format(String, sizeof(String), "CHAT-VIP: %s: %s", GetName(playerid), texto);
        ChatVIP(String);
    }
    return 1;
}

Public:ChatVIP(const string[])
{
    foreach(Player, i)
    {
        if(IsPlayerConnected(i) && PlayerInfo[i][pVIP] > 0)
        {
            SendClientMessage(i, COR_VIP, string);
        }
    }
    return 1;
}

CMD:vip(playerid)
{
    if(PlayerInfo[playerid][pVIP] == 1)
    {
        ShowPlayerDialog(playerid, DIALOG_VIP, DIALOG_STYLE_LIST, "PLAYER VIP", "Comandos\nVencimento\nPegar KitVIP\nSacar Beneficios", "Ir", "Fechar");
    } else if(PlayerInfo[playerid][pVIP] == 2)
    {
        ShowPlayerDialog(playerid, DIALOG_VIPMAIS, DIALOG_STYLE_LIST, "PLAYER VIP +", "Comandos\nVencimento\nPegar KitVIP\nCompletar Tanque\nSacar Beneficios", "Ir", "Fechar");
    } else if(PlayerInfo[playerid][pVIP] == 3)
    {
        ShowPlayerDialog(playerid, DIALOG_VIPPLUS, DIALOG_STYLE_LIST, "PLAYER VIP Plus", "Comandos\nVencimento\nPegar KitVIP\nPegar Moto\nPegar Carro\nCompletar Tanque\nSacar Beneficios", "Ir", "Fechar");
    }
    return 1;
}

CMD:socio(playerid)
{
    if(PlayerInfo[playerid][pVIP] > 3)
    {
        ShowPlayerDialog(playerid, DIALOG_SOCIO, DIALOG_STYLE_LIST, "PLAYER SOCIO", "Comandos\nVencimento\nPegar KitVIP\nPegar Jetpack\nCompletar Tanque\nSacar Beneficios", "Ir", "Fechar");
    }
    return 1;
}

CMD:vcriar( playerid, params[] )
{
    if(PlayerInfo[playerid][pVIP] < 4) return 1;

    new
        carid,
        Cor[ 2 ],
        Float:X,
        Float:Y,
        Float:Z
    ;

    if( sscanf(params, "ddd", carid, Cor[ 0 ], Cor[ 1 ]) ) return ErroMSG( playerid, "Modo de uso correto do comando: /cv [ id-veiculo ] [ cor1 ] [ cor2 ]" );

    if( carid < 400|| carid > 611 ) return ErroMSG( playerid, "Escolha entre 400 e 611.");

    GetPlayerPos(playerid, X,Y,Z);

    if(CarrosCriados[ playerid ] != INVALID_VEHICLE_ID) DestroyVehicle(CarrosCriados[ playerid ]);

    CarrosCriados[playerid] = CreateVehicle(carid, X,Y,Z, 0.0, Cor[ 0 ], Cor[ 1 ], 60000);
    PutPlayerInVehicle(playerid, CarrosCriados[playerid], 0);
    SetVehicleEngineState(CarrosCriados[playerid], 0);


    static str[ 129 ];
    format(str, sizeof(str), "{DBDBAD}(>) - Veiculo %d Criado.", carid);
    SendClientMessage(playerid, -1, str );
    return true;
}

CMD:vjet( playerid )
{
    if(PlayerInfo[playerid][pVIP] < 4) return 1;

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) return ErroMSG( playerid, "Voce ja esta usando o Jetpack.");
    if(IsPlayerInAnyVehicle(playerid)) return ErroMSG( playerid, "Voce nao pode usar o Jetpack quando esta dentro de um veiculo.");
    SetPlayerJetpack(playerid);
    SendClientMessage(playerid, C_OFICIAL, "[ Play Style ] Voce acaba de pegar o Jetpack.");
    return 1;
}

CMD:vkit(playerid)
{
    if(PlayerInfo[playerid][pVIP] == 1)
    {
        if(PlayerInfo[playerid][PegouKIT] == true) return ErroMSG(playerid, "Voce ja pegou seu kit VIP. Aguarde para pegar novamente.");

        new Float:colete;
        GetPlayerArmour(playerid, colete);
        SetPlayerColete(playerid, colete+50.0);

        SetPlayerArma(playerid, 8, 50); //katana
        SetPlayerArma(playerid, 24, 50); //desert
        SetPlayerArma(playerid, 27, 200); //shotgun
        SetPlayerArma(playerid, 31, 500); //m4

        SCM(playerid, COR_VIP, "Voce pegou seu kit VIP");
        PlayerInfo[playerid][PegouKIT] = true;

    } else if(PlayerInfo[playerid][pVIP] == 2)
    {
        if(PlayerInfo[playerid][PegouKIT] == true) return ErroMSG(playerid, "Voce ja pegou seu kit VIP. Aguarde para pegar novamente.");

        new Float:colete;
        GetPlayerArmour(playerid, colete);
        SetPlayerColete(playerid, colete+70.0);

        SetPlayerArma(playerid, 8, 50); //katana
        SetPlayerArma(playerid, 24, 50); //desert
        SetPlayerArma(playerid, 32, 200); //TEC
        SetPlayerArma(playerid, 30, 500); //AK

        SCM(playerid, COR_VIP, "Voce pegou seu kit VIP+");

        PlayerInfo[playerid][PegouKIT] = true;

    } else if(PlayerInfo[playerid][pVIP] >= 3)
    {
        if(PlayerInfo[playerid][PegouKIT] == true) return ErroMSG(playerid, "Voce ja pegou seu kit VIP. Aguarde para pegar novamente.");

        SetPlayerColete(playerid, 100.0);
        SetPlayerHealth(playerid, 100.0);

        SetPlayerArma(playerid, 8, 50); //katana
        SetPlayerArma(playerid, 24, 50); //desert
        SetPlayerArma(playerid, 32, 200); //TEC
        SetPlayerArma(playerid, 25, 200); //SHOTGUN
        SetPlayerArma(playerid, 30, 500); //AK
        SetPlayerArma(playerid, 34, 100); //SNIPER

        SCM(playerid, COR_VIP, "Voce pegou seu kit VIP+");

        PlayerInfo[playerid][PegouKIT] = true;
    }
    return 1;
}

CMD:vmoto( playerid)
{
    if(PlayerInfo[playerid][pVIP] < 3) return 1;

    new
        Float:X,
        Float:Y,
        Float:Z
    ;

    GetPlayerPos(playerid, X,Y,Z);

    if(VeiculoVip[ playerid ] != INVALID_VEHICLE_ID) DestroyVehicle(VeiculoVip[ playerid ]);


    VeiculoVip[playerid] = CreateVehicle(522, X,Y,Z, 0.0, 4, 1, 60000);
    PutPlayerInVehicle(playerid, VeiculoVip[playerid], 0);
    SetVehicleEngineState(VeiculoVip[playerid], 0);
	combustivel[VeiculoVip[playerid]] = 100;
	//format(VeiculoInfo[VeiculoVip[playerid]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pName]);

    SendClientMessage(playerid, COR_VIP, "Moto VIP criada.");
    return true;
}

CMD:vcarro( playerid)
{
    if(PlayerInfo[playerid][pVIP] < 3) return 1;

    new
        Float:X,
        Float:Y,
        Float:Z
    ;

    GetPlayerPos(playerid, X,Y,Z);

    if(VeiculoVip[ playerid ] != INVALID_VEHICLE_ID) DestroyVehicle(VeiculoVip[ playerid ]);

    VeiculoVip[playerid] = CreateVehicle(411, X,Y,Z, 0.0, 4, 1, 60000);
    PutPlayerInVehicle(playerid, VeiculoVip[playerid], 0);
    SetVehicleEngineState(VeiculoVip[playerid], 0);
	combustivel[VeiculoVip[playerid]] = 100;
//	format(VeiculoInfo[VeiculoVip[playerid]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pName]);

    SendClientMessage(playerid, COR_VIP, "Carro VIP criado.");
    return true;
}

CMD:vcompletar( playerid)
{
    if(PlayerInfo[playerid][pVIP] < 2) return 1;

    if(!IsPlayerInAnyVehicle( playerid )) return 1;

    abastecendo[playerid] = 1;

    Freeze( playerid );

    InfoMSG(playerid, "- Aguarde um momento !");
    SetTimerEx("OnAbastecer", 5000, false, "ddd", playerid, GetPlayerVehicleID(playerid), 100);
    return 1;
}

// ==============  Sistema de veiculo ===============================
CMD:meuveiculo(playerid) return callcmd::painelveiculo( playerid );
CMD:meucarro( playerid ) return callcmd::painelveiculo( playerid );
CMD:painelveiculo( playerid )
{
/*	if(PlayerInfo[playerid][pVehKey1] == INVALID_VEHICLE_CONCE
		&& PlayerInfo[playerid][pVehKey2] == INVALID_VEHICLE_CONCE
        && PlayerInfo[playerid][pVehKey3] == INVALID_VEHICLE_CONCE
        && PlayerInfo[playerid][pVehKey4] == INVALID_VEHICLE_CONCE
        && PlayerInfo[playerid][pVehKey5] == INVALID_VEHICLE_CONCE
		) return ErroMSG(playerid, "Voce nao possui veiculos!");

	SCM(playerid, -1, "{A3D5FB}| INFO | - painel do veiculo aberto!");

	new strbox[450];

	if(IsAVip( playerid ))
    {
		format(strbox, sizeof(strbox),
		"{7CFAB9}> {FFFFFF}° - Veiculo: {9AFEC5}%s\n\
		{7CFAB9}> {FFFFFF}2Ñ - Veiculo: {9AFEC5}%s\n\
		{7CFAB9}> {FFFFFF}3Ñ - Veiculo: {9AFEC5}%s\n\
		{7CFAB9}> {FFFFFF}4Ñ - Veiculo: {9AFEC5}%s\n\
		{7CFAB9}> {FFFFFF}5Ñ - Veiculo: {9AFEC5}%s",
		PlayerInfo[playerid][pVehKey1] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vModel]-400]):("{D4D6D4}Indisponivel"),
		PlayerInfo[playerid][pVehKey2] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey2]][vModel]-400]):("{D4D6D4}Indisponivel"),
		PlayerInfo[playerid][pVehKey3] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey3]][vModel]-400]):("{D4D6D4}Indisponivel"),
		PlayerInfo[playerid][pVehKey4] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey4]][vModel]-400]):("{D4D6D4}Indisponivel"),
		PlayerInfo[playerid][pVehKey5] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey5]][vModel]-400]):("{D4D6D4}Indisponivel"));

        ShowPlayerDialog(playerid, PAINEL_VEICULO, DIALOG_STYLE_LIST, "..:: Painel Veicular ::..      {FFFFFF}({25FF30} VIP {FFFFFF})", strbox, "Selecionar", "Cancelar");
	}
	else
	{
	    format(strbox, sizeof(strbox),
		"{7CFAB9}> {FFFFFF}° - Veiculo: {9AFEC5}%s\n\
		{7CFAB9}> {FFFFFF}2Ñ - Veiculo: {9AFEC5}%s\n\
		{7CFAB9}> {FFFFFF}3Ñ - Veiculo: {9AFEC5}%s",
		PlayerInfo[playerid][pVehKey1] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vModel]-400]):("{D4D6D4}Indisponivel"),
		PlayerInfo[playerid][pVehKey2] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey2]][vModel]-400]):("{D4D6D4}Indisponivel"),
		PlayerInfo[playerid][pVehKey3] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey3]][vModel]-400]):("{D4D6D4}Indisponivel"));
		ShowPlayerDialog(playerid, PAINEL_VEICULO, DIALOG_STYLE_LIST, "..:: Painel Veicular ::..", strbox, "Selecionar", "Cancelar");
	}*/
	return true;
}

/*CMD:vpmalas( playerid ) {
    static
		Float:veh_pos[3],
		bool:index
	;

	index = false;
	Loop(vid, sizeof VeiculoInfo){
		if(!VeiculoInfo[vid][vIsValid]) continue;

		GetVehiclePos(VeiculoInfo[vid][vVeiculo], veh_pos[0], veh_pos[1], veh_pos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 4.0, veh_pos[0], veh_pos[1], veh_pos[2])){
			if(PlayerInfo[playerid][pVehKey1] == vid ||
				PlayerInfo[playerid][pVehKey2] == vid ||
				PlayerInfo[playerid][pVehKey3] == vid ||
				PlayerInfo[playerid][pVehKey4] == vid ||
				PlayerInfo[playerid][pVehKey5] == vid){

                static str[ 129 ];

                if(GetVehicleParameters(VeiculoInfo[vid][vVeiculo], 5) != 1){
					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce abriu o porta malas do seu veiculo!");
					SetVehicleParams(VeiculoInfo[vid][vVeiculo], 5, 1);

					format(str, sizeof(str), "%s Abre o porta malas de seu veiculo!", GetNameEx( playerid ));
				}
				else {
					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce fechou o porta malas do seu veiculo!");
					SetVehicleParams(VeiculoInfo[vid][vVeiculo], 5, 0);

                    format(str, sizeof(str), "%s Fecha o porta malas de seu veiculo!", GetNameEx( playerid ));
				}

				MessageProxPlayer(playerid, Purple, 10.0, str);

				index = true;
				break;
			}
		}
	}
	if(!index) SCM(playerid, -1, "Voce nao esta perto de nenhum de seus veiculos!");
	return true;
}

CMD:vcapo( playerid ) {
    static
		Float:veh_pos[3],
		bool:index
	;

	index = false;
	Loop(vid, sizeof VeiculoInfo){
		if(!VeiculoInfo[vid][vIsValid]) continue;

		GetVehiclePos(VeiculoInfo[vid][vVeiculo], veh_pos[0], veh_pos[1], veh_pos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 4.0, veh_pos[0], veh_pos[1], veh_pos[2])){
			if(PlayerInfo[playerid][pVehKey1] == vid ||
				PlayerInfo[playerid][pVehKey2] == vid ||
				PlayerInfo[playerid][pVehKey3] == vid ||
				PlayerInfo[playerid][pVehKey4] == vid ||
				PlayerInfo[playerid][pVehKey5] == vid){

                static str[ 129 ];

                if(GetVehicleParameters(VeiculoInfo[vid][vVeiculo], 4) != 1){
					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce abriu o capo do seu veiculo!");
					SetVehicleParams(VeiculoInfo[vid][vVeiculo], 4, 1);

					format(str, sizeof(str), "%s Abre o capo de seu veiculo!", GetNameEx( playerid ));
				}
				else {
					SCM(playerid, -1, "{62C1B2}| Veiculo | - Voce fechou o capo do seu veiculo!");
					SetVehicleParams(VeiculoInfo[vid][vVeiculo], 4, 0);

                    format(str, sizeof(str), "%s Fecha o capo de seu veiculo!", GetNameEx( playerid ));
				}

				MessageProxPlayer(playerid, Purple, 10.0, str);

				index = true;
				break;
			}
		}
	}
	if(!index) SCM(playerid, -1, "Voce nao esta perto de nenhum de seus veiculos!");
	return true;
}

CMD:vportas( playerid ){
    static
		Float:veh_pos[3],
		bool:index
	;

	index = false;
	Loop(vid, sizeof VeiculoInfo){
		if(!VeiculoInfo[vid][vIsValid]) continue;

		GetVehiclePos(VeiculoInfo[vid][vVeiculo], veh_pos[0], veh_pos[1], veh_pos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 4.0, veh_pos[0], veh_pos[1], veh_pos[2])){
			if(PlayerInfo[playerid][pVehKey1] == vid ||
				PlayerInfo[playerid][pVehKey2] == vid ||
				PlayerInfo[playerid][pVehKey3] == vid ||
				PlayerInfo[playerid][pVehKey4] == vid ||
				PlayerInfo[playerid][pVehKey5] == vid){

				if(VeiculoInfo[ vid ][vDoors] == true){
					SetVehicleParams(VeiculoInfo[ vid ][vVeiculo], 3, 1);
					VeiculoInfo[vid][vDoors] = false;

					static str[ 129 ];
					format(str, sizeof(str), "%s tranca as portas de seu veiculo!", GetNameEx( playerid ));
					MessageProxPlayer(playerid, Purple, 10.0, str);

					SCM(playerid, -1, "{72E1F2}[ {FFFFFF}Veiculo {72E1F2}] {FFFFFF}- Voce trancou as portas de seu veiculo!");
				}
    			else {
    			    SetVehicleParams(VeiculoInfo[ vid ][vVeiculo], 3, 0);
					VeiculoInfo[vid][vDoors] = true;

					static str[ 129 ];
					format(str, sizeof(str), "%s destranca as portas de seu veiculo!", GetNameEx( playerid ));
					MessageProxPlayer(playerid, Purple, 10.0, str);

					SCM(playerid, -1, "{72E1F2}[ {FFFFFF}Veiculo {72E1F2}] {FFFFFF}- Voce destrancou as portas de seu veiculo!");
				}
                //OnSalvarVehicle(vid);
				index = true;
				break;
			}
		}
	}
	if(!index) SCM(playerid, -1, "Voce nao esta perto de nenhum de seus veiculos!");
	return true;
}
// =========================
*/
CMD:motor( playerid )
{
    if(!IsPlayerInAnyVehicle( playerid )) return false;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){

        if(GetVehicleParameters(GetPlayerVehicleID(playerid), 0) == 1)
        {
            SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
            SetVehicleFarolState(GetPlayerVehicleID(playerid), 0);
            SendClientMessage(playerid, -1, "{F0E0CE}| VEICULO | Voce desligou o motor do veiculo.");
        }
        else {
            SetVehicleEngineState(GetPlayerVehicleID(playerid), 1);
            SetVehicleFarolState(GetPlayerVehicleID(playerid), 1);
            SendClientMessage(playerid, -1, "{F0E0CE}| VEICULO | Voce ligou o motor do veiculo.");

        }
    }
    return 1;
}

/*
CMD:motor( playerid )
{
	if(!IsPlayerInAnyVehicle( playerid )) return false;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){

        new model = GetVehicleModel( GetPlayerVehicleID( playerid ) );
		if(model == 509 || model == enu510 || model == 481) return false;

	    if(GetVehicleParameters(GetPlayerVehicleID(playerid), 0) == 1)
        {
    		SetVehicleEngineState(GetPlayerVehicleID(playerid), 0);
    		SetVehicleFarolState(GetPlayerVehicleID(playerid), 0);
			SendClientMessage(playerid, -1, "{F0E0CE}Voce desligou o motor do veiculo.");
		}
		else
		{
			Loop(vid, sizeof(VeiculoInfo))
            {
				//if(VeiculoInfo[vid][vIsValid] != true) continue;
                //if(GetPlayerVehicleID( playerid ) != VeiculoInfo[vid][vVeiculo]) return 0;

                if(GetPlayerVehicleID( playerid ) == VeiculoInfo[vid][vVeiculo])
                {
    				if(vid == PlayerInfo[playerid][pVehKey1]
    				|| vid == PlayerInfo[playerid][pVehKey2]
    				|| vid == PlayerInfo[playerid][pVehKey3]
    				|| vid == PlayerInfo[playerid][pVehKey4]
    				|| vid == PlayerInfo[playerid][pVehKey5])
    				{
    				    if(GetPVarInt(playerid, "LigandoVeiculo") != 1)
                        {
    				        static sky[100];
    						format(sky, sizeof(sky), "(*) - %s tenta ligar/desligar o veiculo!", GetNameEx( playerid ));
    						MessageProxPlayer(playerid, Purple, 10.0, sky);
    					    SetPVarInt(playerid, "LigandoVeiculo", 1);
    						SetTimerEx("TentarLigarVeiculo", TSegundos(1), false, "d", playerid);
    						return true;
    					}
    				}
                    else return SCM(playerid, -1, "Voce nao possui a chave deste veiculo!");
                }

			}

			if(GetPVarInt(playerid, "LigandoVeiculo") != 1){

			    SetPVarInt(playerid, "LigandoVeiculo", 1);
				SetTimerEx("TentarLigarVeiculo", TSegundos(1), false, "d", playerid);
			}
		}
	}
	return true;
}*/
/*
CMD:farol(playerid){
    if(!IsPlayerInAnyVehicle( playerid )) return false;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){

        new model = GetVehicleModel( GetPlayerVehicleID( playerid ) );
		if(model == 509 || model == 510 || model == 481) return false;

	    if(GetVehicleParameters(GetPlayerVehicleID(playerid), 1)){
    		SetVehicleFarolState(GetPlayerVehicleID(playerid), 0);
			SendClientMessage(playerid, -1, "{EEEDEC}Farol {EE7764}desligado.");
		}
		else
		{
			if(GetVehicleParameters(GetPlayerVehicleID(playerid), 0) == 1){
                SetVehicleFarolState(GetPlayerVehicleID(playerid), 1);
                SendClientMessage(playerid, -1, "{EEEDEC}Farol {54E98B}ligado.");
			}
		}
	}
	return true;
}

*	Organizaçoes
*
*	Comandos relacionados a jogadores que estao em uma organizaçao
*/

//	=================================================
//	@nome:		Retira o playerid da atual organizaçao
//	@revisao:	01/12/19 [PENDENTE]
//	-------------------------------------------------

CMD:pedircontas( playerid ) {

	if( PlayerInfo[playerid][pOrg] == 0 ) return ErroMSG(playerid, "Voce nao esta em uma organizaçao.");

	// Removendo o jogador de lider
	if( PlayerInfo[playerid][pCargo] == 6 ) {
		format(strx, sizeof(strx), ""#SERVELOGO"  %s nao e mais o Lider da Organizaçao {%s}%s", GetNameEx( playerid ), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]]);
		SendClientMessageToAll(-1, strx );
	}
	else
	{
		format(strx, sizeof(strx), ""#SERVELOGO"  %s nao e mais o membro da Organizaçao {%s}%s", GetNameEx( playerid ), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]]);
		SendClientMessageToAll(-1, strx );
	}

	//======= Spawnar no local onde pediu demissao
	GetPlayerPos(playerid,
		PlayerInfo[ playerid ][UltimaPosX],
		PlayerInfo[ playerid ][UltimaPosY],
		PlayerInfo[ playerid ][UltimaPosZ]
	);
	GetPlayerFacingAngle(playerid, PlayerInfo[ playerid ][UltimaPosA]);
	PlayerInfo[ playerid ][UInt] = GetPlayerInterior(playerid);
	PlayerInfo[ playerid ][UWorld] = GetPlayerVirtualWorld(playerid);
    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

	// Setando as variaveis para Civil
	PlayerInfo[playerid][pOrg] = 0;
	PlayerInfo[playerid][pCargo] = 0;
	DemitirInfoOrg(playerid);

	SpawnPlayer(playerid);

	return 1;
}

CMD:membros( playerid, params[] ) {

	if( !PlayerInfo[playerid][pOrg] ) return false;

	new
		lista[ 500 ],
		string[128]
	;

	ForPlayers( i ) {
		if( PlayerInfo[i][pOrg] == PlayerInfo[playerid][pOrg] ) {
			format( string, sizeof(string), "{D2D1D5}ID: {FFFFFF}%d{D2D1D5} - %s {FFFFFF}%s{D2D1D5}\n", i, GetPatentNome(PlayerInfo[i][pOrg], PlayerInfo[i][pCargo]), GetNameEx(i) );
			strcat( lista, string );
		}
	}
	format( string, sizeof(string), "Membros Online {%s}%s", OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]] );
	ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX , string, lista, "Fechar","");
	return 1;
}

CMD:r( playerid, params[] ) {

	if( PlayerInfo[playerid][pOrg] == 0 ) return 0;

	new texto[101];
	if( sscanf( params, "s[100]", texto ) ) return ErroMSG(playerid, "Use: /r [menssagem]" );

	static str[ 200 ];
	ForPlayers(a){
		if(PlayerInfo[playerid][pOrg] == PlayerInfo[a][pOrg] ) {
			format( str, sizeof(str), "{%s}(%s) %s: %s !", OrgColorHex[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg],PlayerInfo[playerid][pCargo]), GetName(playerid), texto );
			SCM( a, orgsColor[PlayerInfo[playerid][pOrg]], str );
		}
	}
	return true;
}
/**
*	@revisao: 13/01/2013

CMD:gov(playerid, params[]) {

	new texto[81];

	if(!isPlayerCop(playerid)) return false;
	if(sscanf(params, "s[80]", texto)) return ErroMSG( playerid, "Use: /gov [TEXTO]");

	if(strlen(texto) > 80) return ErroMSG(playerid, "Maximo 80 caracteres!");

	static str[ 129 ];
	SendClientMessageToAll(orgsColor[PlayerInfo[playerid][pOrg]], " =-=-=-=-=-=-=-=-=-=- [DEPARTAMENTO POLICIAL - AVISO] -=-=-=-=-=-=-=-=-=-= ");
	format(str, sizeof(str), "{%s}[%s] %s %s:{ffffff} %s", OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo]), GetName(playerid), texto);
	SCMALL( str );
	return true;
}*/


CMD:d(playerid, params[]) {
    if(!PlayerInfo[ playerid ][ pOrg ]) return false;

	new texto[101];

	if(sscanf(params, "s[128]", texto)) return ErroMSG( playerid, "Use: /d [TEXTO]");

	if(strlen(texto) > 100) return ErroMSG(playerid, "Maximo 100 caracteres!");

	static str[ 129 ];
	format(str, sizeof(str), "{FFFFFF}[{%s}%s %s {FFFFFF}] - %s: %s", OrgColorHex[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo]), nomeOrgs[PlayerInfo[playerid][pOrg]], GetNameEx(playerid), texto);

    if(isPlayerCop(playerid)){
		ForPlayers(a) {

		    if(!PlayerInfo[ playerid ][ pOrg ]) continue;
		    if(isPlayerCop( a )){
            	SendClientMessage(a, -1, str );
            }
		}
	}
	else if(IsPlayerGang(playerid)){
		ForPlayers(a) {
		    if(!PlayerInfo[ playerid ][ pOrg ]) continue;
		    if(IsPlayerGang( a )){
				SendClientMessage(a, -1, str );
			}
		}
	}
	return true;
}

CMD:taser( playerid ){
    if(!isPlayerCop( playerid )) return 0;

	if(GetPVarInt(playerid, "Taser") == 1)
	{
        SetPVarInt(playerid, "Taser", 0);
		DeletePVar(playerid, "Taser");
		RemovePlayerAttachedObject(playerid, SlotTaser);
		SendClientMessage(playerid, -1, "Voce desativou o taser.");
	}
	else
	{
	    SetPVarInt(playerid, "Taser", 1);
	    SetPlayerAttachedObject(playerid, SlotTaser, 18642,5,0.102999,0.030999,-0.047000,0.000000,0.000000,0.000000,1.000000,1.000000,1.00000);
	    SendClientMessage(playerid, -1, "Voce ativou o taser.");
	}
	return true;
}


CMD:amarrar( playerid , params[]){

    new id;
	if(sscanf(params, "u", id)) return ErroMSG( playerid, "Use: /amarrar [id]");

	if(!IsPlayerGang(playerid)) return ErroMSG(playerid, "Voce nao e um criminoso!");
    if(IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Nao e possivel amarrar de dentro do carro !");

    if(Amarrado[ id ] == 1) return ErroMSG(playerid, "Suspeito ja esta amarrado !");

	if(GetPlayerWeapon(id) != 0) return ErroMSG(playerid, "Nao da para amarrar uma pessoa armada ne meu camarada!");

	if(GetDistancePlayers(playerid, id) > 3) return ErroMSG(playerid, "Ele nao esta perto de Voce!");

    if(IsPlayerInAnyVehicle(id)) return ErroMSG(playerid, "O alvo esta em um veiculo !");

	if(IsPlayerGang(id)) return ErroMSG(playerid, "Voce nao pode amarrar outros criminosos!");

	static str[ 129 ];
    format(str, sizeof(str), "(*) - Voce foi amarrado pelo criminoso(a) %s por %s por 20 segundos.", GetName( playerid ));
	SendClientMessage(id, AzulClaro, str);

	format(str, sizeof(str), "(*) - Voce amarrou o(a) %s por 20 segundos. fuja !",  GetName( id ));
	SendClientMessage(playerid, AzulClaro, str);

	format(str, sizeof(str), "(*) - %s amarrou %s, para nao fugir.", GetName( playerid ) , GetName( id ));

	ChatProximo(30.0, playerid, str, Purple, Purple, Purple, Purple, Purple);

	GameTextForPlayer(id, "~r~Amarrado", 2500, 3);

	Freeze(id);

	Amarrado[ id ] = 1;
	AmarradoTime[ id ] = 20;

	return true;
}

CMD:imo( playerid ){
	if(!isPlayerCop(playerid)) return ErroMSG(playerid, "Voce nao e um Policial!");
	if(!Equipado[playerid]) return ErroMSG(playerid, "Voce nao esta trabalhando, portanto nao pode realizar essa açao.");
    if(IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Nao e possivel imobilizar de dentro do carro !");
    new suspect = GetClosestPlayer(playerid);
    if(IsPlayerConnected(suspect))
	{
	    if(Imobilizado[suspect] > 0) return ErroMSG(playerid, "Suspeito ja esta Imobilizado !");

		if(GetPlayerWeapon(suspect) != 0) return ErroMSG(playerid, "Nao da para imobilizar uma pessoa armada ne meu camarada!");

		if(GetDistancePlayers(playerid, suspect) < 3)
		{
		    if(IsPlayerInAnyVehicle(suspect)) return ErroMSG(playerid, "O suspeito esta em um carro !");

			if(isPlayerCop(suspect)) return ErroMSG(playerid, "Voce nao pode imobilizar Policiais!");

		    format(strx, sizeof(strx), "[ Policia ] - Voce foi imobilizado por %s por 20 segundos.", GetName( playerid ));
			SendClientMessage(suspect, AzulClaro, strx);

			format(strx, sizeof(strx), "[ Policia ] - Voce imobilizou o(a) %s por 20 segundos.",  GetName( suspect ));
			SendClientMessage(playerid, AzulClaro, strx);

			format(strx, sizeof(strx), "* %s Imobilizou %s, para nao fugir.", GetName( playerid ) , GetName( suspect ));

			ChatProximo(30.0, playerid, strx, Purple, Purple, Purple, Purple, Purple);

			GameTextForPlayer(suspect, "~r~Imobilizado", 2500, 3);

			Freeze(suspect);

			LoopingAnim(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			Imobilizado[suspect] = 1;
			ImobilizadoTime[suspect] = 20;
        }
		else
		{
		    ErroMSG(playerid, "Ele nao esta perto de Voce!");
		    return 1;
		}
	}
	return 1;
}

/**
*	@revisao: 13/01/2013
*/

CMD:prender(playerid, params[]) {

	if(IsPlayerInAnyVehicle( playerid ))
    {
		new vid = GetPlayerVehicleID(playerid);
		Loop( i, sizeof( pickupPrenderData ) )
         {
		    if( IsPlayerInRangeOfPoint( playerid, 5.0, pickupPrenderData[i][posX], pickupPrenderData[i][posY], pickupPrenderData[i][posZ] ))
            {
		        if(PlayerInfo[playerid][pOrg] == pickupPrenderData[i][orgsID] )
                {
				   ForPlayers(a)
                   {
						if(vid ==  GetPlayerVehicleID(a) && !isPlayerCop(a) && PlayerInfo[a][pWanted])
                        {
							SistemaPrisao(a, "darRecompensa", playerid, 1);
							SistemaPrisao(a, "ativarPena", playerid);
							SistemaPrisao(a, "adicionarPena", playerid, 1);
							SistemaPrisao(a, "cumprirPena");

							SpawnPlayer(a);
							break;
						}
					}
				}
			}
		}
	}
	return true;
}

CMD:abastecer(playerid)
{
	for(new i = 1; i < MAX_EMPRESAS; i++)
    {
	    if( IsPlayerInRangeOfPoint( playerid, 10.0, EmpInfo[ i ][ELocalX], EmpInfo[ i ][ELocalY], EmpInfo[ i ][ELocalZ] ))
        {
            if(EmpInfo[i][EType] == 2)
            {
				if(!IsPlayerInAnyVehicle( playerid ) && GalaoInfo[ playerid ][ pGalao ] != 1) return ErroMSG(playerid, "Voce deve estar em um veiculo ou possuir um galao");
                if(abastecendo[ playerid ]) return ErroMSG( playerid, "Voce ja esta sendo abastecido");

				PostoID[ playerid ] = i;
				if(!IsPlayerInAnyVehicle( playerid )) return ShowPlayerDialog( playerid, DIALOG_ABASTECIMENTO_GALAO, DIALOG_STYLE_LIST, "Posto - O que podemos de te ajudar?", "Encher Galao\nEscolher Quantidade", "Aceitar", "Fechar");
                else ShowPlayerDialog( playerid, DIALOG_ABASTECIMENTO_INICIAL, DIALOG_STYLE_LIST, "Posto - O que podemos de te ajudar?", "Completar Tanque\nEscolher Quantidade", "Abastecer", "Fechar");
			}
		}
	}
	return true;
}
//	=================================================
//	@nome:		Cria uma barreira
//	@revisao:	12/01/13
//	-------------------------------------------------

CMD:br(playerid) {
	if( isPlayerCop(playerid) || PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL) {
		if(! Equipado[playerid] ) return ErroMSG(playerid, "Voce esta em modo civil, portanto nao pode realizar essa açao.");
		if( playerBarreiraCount[playerid] == 2 ) return ErroMSG(playerid, "Voce so pode criar 2 barreiras. Digite /rbr para remove-las.");
		if( GetPlayerInterior(playerid) ) return ErroMSG(playerid, "Voce nao pode usar este comando dentro de um interior");
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		playerBarreiraCount[playerid]++;
		playerBarreira[playerid][playerBarreiraCount[playerid]] = (isPlayerCop(playerid) ? CreateObject(981, x, y, z, 0.0, 0.0, a+180) : CreateObject(1358, x, y, z, 0.0, 0.0, a+180));
		if(isPlayerCop(playerid)) format(strx, sizeof(strx), "# Uma Barreira foi posta por %s", GetName(playerid));
		else format(strx, sizeof(strx), "# Um Bloqueio de Lixo foi posto por %s", GetName(playerid));
		SendMessageToProx(30.0, playerid, strx, orgsColor[PlayerInfo[playerid][pOrg]]);
		SetPlayerPos(playerid, x, y+2, z+3);
	}else return false;
	return 1;
}

CMD:rbr(playerid) {
	if( !isPlayerCop(playerid)) return 0;
	if(!PlayerInfo[playerid][pLogger]) return 1;
	if( !playerBarreiraCount[playerid] ) return ErroMSG(playerid, "Voce nao possui barreiras criadas. Use /br");
	for( new a = 0; a <= playerBarreiraCount[playerid]; a++ ) {
		DestroyObject(playerBarreira[playerid][a]);
	}
	playerBarreiraCount[playerid] = 0;
	return SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], "[Comando /br] Todas suas barreiras foram retiradas");
}

//	=================================================
//	@nome:		Cria cone
//	@revisao:	12/01/13
//	-------------------------------------------------



CMD:cone(playerid) {
	if( !isPlayerCop(playerid) && !IsPlayerGang(playerid) ) return 0;
	if(!PlayerInfo[playerid][pLogger]) return 1;
	if( playerConeCount[playerid] == 4 ) return ErroMSG(playerid, "Voce so pode criar 4 cones. Digite /rcone para remove-las.");
	if( GetPlayerInterior(playerid) ) return ErroMSG(playerid, "Voce nao pode usar este comando dentro de um interior");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	playerConeCount[playerid]++;
	playerCone[playerid][playerConeCount[playerid]] = CreateObject(1237, x, y, z-0.9, 0.0, 0.0, 0.0, 0.0);
	SetPlayerPos(playerid, x, y+2, z+3);
	return 1;
}
CMD:rcone(playerid) {
    if(!IsPlayerGang(playerid) && !isPlayerCop(playerid)) return 0;
	if( !playerConeCount[playerid] ) return ErroMSG(playerid, "Voce nao possui cones criados. Use /cone");
	for( new a = 0; a <= playerConeCount[playerid]; a++ ) {
		DestroyObject(playerCone[playerid][a]);
	}
	playerConeCount[playerid] = 0;
	return SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], "[Comando /cone] Todos seus cones foram retirados");
}
//	=================================================
//	@nome:		Envia um aviso em destaque para uma
//				area proxima
//	@revisao:	12/01/13
//	-------------------------------------------------
CMD:m(playerid, params[]) {
	if(!isPlayerCop(playerid)) return false;

	new texto[101];
	if(sscanf(params, "s[100]", texto)) return ErroMSG( playerid, "Use: /m [TEXTO]");

	static str[ 129 ];
	format(str, sizeof(str), "[%s] %s %s: %s!!!", nomeOrgs[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo]), GetName(playerid), texto);
	SendMessageToProx(60.0, playerid, str, Amarelo);
	return 1;

}

CMD:abordar( playerid, params[]){

	if(!isPlayerCop(playerid)) return false;

    new	id, VehicleID;

	if(sscanf(params, "u", id)) return ErroMSG( playerid, "Modo correto de uso: /abordar [ id ]");

	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");
	if(!Equipado[playerid]) return ErroMSG( playerid, "Voce nao esta trabalhando no momento.");
	if(id == playerid) return ErroMSG( playerid, "Voce nao pode abordar a si mesmo");
	if(!IsPlayerInAnyVehicle( playerid )) return ErroMSG( playerid, "Voce precisa estar dentro da veatura para abordar o individuo(a)!");
	if(!IsPlayerCuffed(id)) return ErroMSG( playerid, "Voce precisa algemar o individuo(a) antes!");
    if(GetPlayerDistanceFromPlayer(playerid, id) > 5.0) return ErroMSG( playerid, "Chegue mais perto do alvo!");

    VehicleID = GetPlayerVehicleID(playerid);
	PutPlayerInVehicle(id, VehicleID, 2);

	Freeze( id );

	static str[129];
	format(str, sizeof(str), "[%s] O policial %s te abordou!", nomeOrgs[PlayerInfo[playerid][pOrg]], GetName(playerid));
	SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], str );
	SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], "[ Servidor ] - Individuo(a) abordado com sucesso!" );
	return true;
}

CMD:algemar(playerid, params[]){

	if(!isPlayerCop(playerid)) return false;

	new	id;

	if(sscanf(params, "u", id)) return ErroMSG( playerid, "Modo correto de uso: /algemar [ id ]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");
	if(!Equipado[playerid]) return ErroMSG( playerid, "Voce nao esta trabalhando no momento.");
	if(id == playerid) return ErroMSG( playerid, "Voce nao pode algemar a si mesmo");
	if(IsPlayerInAnyVehicle( id ) || IsPlayerInAnyVehicle( playerid )) return ErroMSG( playerid, "Voce ou jogador informado esta em um veiculo!");
    if(PlayerInfo[ id ][ pHospitalizado ]) return ErroMSG( playerid, "Voce nao pode algemar alguem hospitalizado!");
	if(!PlayerInfo[id][pWanted]) return ErroMSG( playerid, "O jogador informado deve ter ao menos um nivel de procurado");
	if(GetPlayerDistanceFromPlayer(playerid, id) > 5.0) return ErroMSG( playerid, "Chegue mais perto do alvo!");
	if(GetPlayerWeapon( id ) != 0) return ErroMSG( playerid, "Player Armado, use /m e faça o aviso policial!");
	if(IsPlayerCuffed(id)) return ErroMSG( playerid, "Player ja esta algemado!");

 	SetPlayerCuffed(id, true);

	SendClientMessage(playerid, orgsColor[PlayerInfo[playerid][pOrg]], "[ Servidor ] - Individuo(a) algemado com sucesso!" );

	static str[129];
	format(str, sizeof(str), "[%s] %s policial %s acaba de te algemar", nomeOrgs[PlayerInfo[playerid][pOrg]], PlayerInfo[ playerid ][ pSex ] == 1 ? ("O"):("A"), GetName(playerid));
	SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], str );

	format(str, sizeof(str), "(*) - [%s] %s policial %s algema %s!", nomeOrgs[PlayerInfo[playerid][pOrg]], PlayerInfo[ playerid ][ pSex ] == 1 ? ("O"):("A"), GetName( playerid ), GetName( id ));
	MessageProxPlayer(playerid, Purple, 10.0, str);

	return 1;
}

CMD:desalgemar(playerid, params[]){

	if(!isPlayerCop(playerid)) return false;

	new	id;

	if(sscanf(params, "u", id)) return ErroMSG( playerid, "Modo correto de uso: /desalgemar [ id ]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o id de um jogador invalido");
	if(!Equipado[playerid]) return ErroMSG( playerid, "Voce nao esta trabalhando no momento.");
	if(id == playerid) return ErroMSG( playerid, "Voce nao pode dealgemar a si mesmo");
	if(IsPlayerInAnyVehicle( id ) || IsPlayerInAnyVehicle( playerid )) return ErroMSG( playerid, "Voce ou jogador informado esta em um veiculo!");
    if(PlayerInfo[ id ][ pHospitalizado ]) return ErroMSG( playerid, "Voce nao pode algemar alguem hospitalizado!");
	if(GetPlayerDistanceFromPlayer(playerid, id) > 5.0) return ErroMSG( playerid, "Chegue mais perto do jogador!");

    if(!IsPlayerCuffed(id)) return ErroMSG( playerid, "Este jogador nao esta algemado!");

	SetPlayerCuffed(id, false);

	static str[129];
	format(str, sizeof(str), "[%s] O policial %s te desalgemou", nomeOrgs[PlayerInfo[playerid][pOrg]], GetName(playerid));
	SendClientMessage(id, orgsColor[PlayerInfo[playerid][pOrg]], str );

	format(str, sizeof(str), "(*) - [%s] %s policial %s desalgema %s!", nomeOrgs[PlayerInfo[playerid][pOrg]], PlayerInfo[ playerid ][ pSex ] == 1 ? ("O"):("A"), GetName( playerid ), GetName( id ));
	MessageProxPlayer(playerid, Purple, 10.0, str);

	return 1;
}
/**
*	Organizaçoes Policiais
*/
CMD:do(playerid) {
	static CountOwners, CountOrgsPresent;

    CountOwners = 0;
	CountOrgsPresent = 0;

	for( new a = 0; a < MAX_ZONES; a++ ) {
		if( IsPlayerInGangZone(playerid, a) ) {
		    ForPlayers(i){

				if(!PlayerInfo[i][pOrg]) continue;

                if(gangZonesOwners[a] == PlayerInfo[i][pOrg]) CountOwners++;
                if(PlayerInfo[playerid][pOrg] == PlayerInfo[i][pOrg]) CountOrgsPresent++;
			}
			if(CountOwners < 2) return ErroMSG( playerid, "e preciso ter ao menos 2 membros da organizaçao dona do territorio online, para dominar!");
		    if(CountOrgsPresent < 2) return ErroMSG( playerid, "Voce precisa estar com no minimo 3 membros de sua organizaçao para iniciar um dominio!");
			if( !GangZonesPermission(PlayerInfo[playerid][pOrg], a)) return ErroMSG( playerid, "[Comando /do] Sua organizaçao nao pode dominar este territorio");
			if( gangZonesOwners[a] == PlayerInfo[playerid][pOrg] ) return ErroMSG( playerid, "[Comando /do] Esse territorio ja pertence a sua organizaçao");
			if( gangZonesStatus[a] == 1 ) return ErroMSG( playerid, "[Comando /do] Este territorio ja esta sendo dominado");
            if( GZDominioTempo[a] != 0 ) return ErroMSG( playerid, "Esta area foi dominada recentemente e nao pode ser dominada neste momento!");
			if( IsPlayerInAnyVehicle(playerid) ) return ErroMSG( playerid, "[Comando /do] Voce nao pode dominar um territorio dentro de um helicoptero");

			SendClientMessageToAll(Amarelo, "-=-=-=-=-=-=-=-=-=-=[NOTiCIA DE uLTIMA HORA]=-=-=-=-=-=-=-=-=-=-");

			if(!isPlayerCop(playerid)) format(strx, sizeof(strx), "{%s}%s{ffffff} e a {%s}%s{ffffff} estao dominando {%s}%s{ffffff}", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[playerid][pOrg]], gangZonesName[a]);
			else format(strx, sizeof(strx), "{%s}%s{ffffff} e a {%s}%s{ffffff} estao pacificando {%s}%s{ffffff}. Gangues parecem que irao reagir", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[playerid][pOrg]], gangZonesName[a]);
			JNNEWS(strx);

			SendMessageToOrg(PlayerInfo[playerid][pOrg], "-=-=-=-=-=-=-=-=-=-=[NOTIFICAÐaO]=-=-=-=-=-=-=-=-=-=-");
			format(strx, sizeof(strx), "%s %s esta dominando %s. Deem cobertura por 60 segundos", GetPatentNome(PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo]), GetName(playerid), gangZonesName[a]);
			SendMessageToOrg(PlayerInfo[playerid][pOrg], strx );

			gangZonesStatus[a] = 1;
			GangZoneFlashForAll(gangZones[a], orgsColor[PlayerInfo[playerid][pOrg]]);
			SetTimerEx("OnDominarZone", 60000, false, "dd", playerid, a);
			return 1;
		}
	}
	return 1;
}
/*==============================================================================

						COMANDOS ADMINISTRATIVOS

						Comandos Usados apenas por membros da equipe
						Administrativa

================================================================================
*/


CMD:aa( playerid )
{
	if(PlayerInfo[ playerid ][ pAdmin ] < 1) return 0;

	new str[1700];

	if(PlayerInfo[ playerid ][ pAdmin ] >= 1)
	{
		strcat(str, "|{FFFFFF}_{FF0000}Comandos Admin 1\n");
        strcat(str, "{FFFFFF}/administrar /ausentarme | (Chat Admin '!texto') |\n");
		strcat(str, "/kita /jetpack /ir /trazer /tapa /avisar /kick /irpara /vida /colete /veiculosid [A-Z] /irveiculo\n");
	    strcat(str, "/av /a /part /cv /deletcar /setskin /calar /proximo /irsenha /fila /infoportaoid /irportao /informacoesacc\n\n");
	}
	if(PlayerInfo[ playerid ][ pAdmin ] >= 2){
		strcat(str, "|{FFFFFF}_{FF0000}Comandos Admin 2\n");
	    strcat(str, "{FFFFFF}/reparar /repararid /reparar /ban /lchat /zerarfila /desbugar /versms /congelar /descongelar /virar /salvarspawnveicular\n");
	    strcat(str, "/verconceid /matar /cadeia /vidacheck  /tempo /votacao /explodirp /ircasa /irempresa /ip /blockchat /contar /espec /sairespec /aradar\n\n");
	}
	if(PlayerInfo[ playerid ][ pAdmin ] >= 3){
		strcat(str, "|{FFFFFF}_{FF0000}Comandos Admin 3\n");
	    strcat(str, "{FFFFFF}/cnn /ann /darchave /liberarportao /portoesdeletados /darcomb /dargrana /setargrana /setarlevel /darlevel /darexp\n ");
	    strcat(str, "/atendimentos /criarcasa /liberarcasa /mudarcasa /liberarempresa /irpos /desban /setemprego /rpv /destruirveiculos\n ");
        strcat(str, "/ejetar /injetar /carona /vercmds /setplayernome /soltar /rv /rvc /rvcid /puxarveiculo /criarset\n\n");
	}
	if(PlayerInfo[ playerid ][ pAdmin ] >= 4){
		strcat(str, "{FFFFFF}|{FFFFFF}_{FF0000}Comandos Admin 4\n");
	    strcat(str, "{FFFFFF}/lider /relider /gmx /setadmin /criarportao /editarportao /paycmd /kickall /verchatglobal\n");
	    strcat(str, "/crashar /premiomega /megasortear /editar /sethora /deletaracc\n\n");
	}
	if(PlayerInfo[ playerid ][ pAdmin ] >= 5){
		strcat(str, "|{FFFFFF}_{FF0000}Comandos Admin 5\n");
	    strcat(str, "{FFFFFF}/serverpainel /somtest /criargz /savegz /deletargz /criarpickup /savepickup /deletarpickup\n");
	}
	ShowPlayerDialog(playerid, DIALOG_CMDADMIN, DIALOG_STYLE_MSGBOX, "COMANDOS ADMIN", str, "Ok", "");
	return true;
}

CMD:pararmusica( playerid ) return callcmd::stopstream( playerid );
CMD:stopstream( playerid ){
    StopAudioStreamForAll();
	StopAudioStreamForPlayer( playerid );
	SCM(playerid, -1, "Audio desligado.");
	return true;
}

CMD:resetarchatlog( playerid ){
	ResetarArquivo("Chat.log");
	InfoMSG(playerid, "Log resetado!");
	return true;
}

CMD:radios( playerid )
{
	//if(!IsPlayerInAnyVehicle( playerid )) return ErroMSG(playerid, "Voce nao esta em um veiculo.");

    new str[50], strdialog[300];

	Loop(item, sizeof(RadioInfo))
    {
        format(str, sizeof(str), "%s\n", RadioInfo[item][rName]);
        strcat(strdialog, str);
    }

    ShowPlayerDialog(playerid, DIALOG_RADIOS, DIALOG_STYLE_LIST, "Radios", strdialog, "ir", "sair");
    SCM(playerid, -1, "Menu de radios.");

	return true;
}

CMD:mp3( playerid )
{
	//if(!IsPlayerInAnyVehicle( playerid )) return ErroMSG(playerid, "Voce nao esta em um veiculo.");

    new str[50], strdialog[300];

	Loop(item, sizeof(CdsInfo))
    {
        format(str, sizeof(str), "%s\n", CdsInfo[item][rName]);
        strcat(strdialog, str);
    }

    ShowPlayerDialog(playerid, DIALOG_MP3, DIALOG_STYLE_LIST, "CDÒS", strdialog, "Tocar", "sair");
    SCM(playerid, -1, "Menu de CDÒS.");

	return true;
}

CMD:guardarinv( playerid )
{
	if(GetPlayerLevel(playerid) < 2) return ErroMSG(playerid, "Voce precisa alcançar nivel 2 para ultilizar este comando!");
    if(GetPlayerWeapon( playerid ) == 0) return ErroMSG(playerid, "Voce nao tem uma arma para guardar no inventario!");

	if(!GetBlankSpaceToInvent(playerid)) return ErroMSG(playerid, "Voce nao tem espaço livre em seu inventario!");


    static
		weapon,
		wids[2]
	;

    weapon = GetPlayerWeapon( playerid );

	GetPlayerWeaponData(playerid, GetWeaponSlot(weapon), wids[0], wids[1]);
	RemovePlayerWeapon(playerid, weapon);

	switch(GetBlankSpaceToInvent(playerid)){
		case 1: playerInventario[ playerid ][ itemId1 ] = wids[0], playerInventario[ playerid ][ itemQuant1 ] = wids[1];
		case 2: playerInventario[ playerid ][ itemId2 ] = wids[0], playerInventario[ playerid ][ itemQuant2 ] = wids[1];
		case 3: playerInventario[ playerid ][ itemId3 ] = wids[0], playerInventario[ playerid ][ itemQuant3 ] = wids[1];
		case 4: playerInventario[ playerid ][ itemId4 ] = wids[0], playerInventario[ playerid ][ itemQuant4 ] = wids[1];
		case 5: playerInventario[ playerid ][ itemId5 ] = wids[0], playerInventario[ playerid ][ itemQuant5 ] = wids[1];
		case 6: playerInventario[ playerid ][ itemId6 ] = wids[0], playerInventario[ playerid ][ itemQuant6 ] = wids[1];
		case 7: playerInventario[ playerid ][ itemId7 ] = wids[0], playerInventario[ playerid ][ itemQuant7 ] = wids[1];
    }

    if(weapon == PlayerInfo[playerid][pWeapon1]) PlayerInfo[playerid][pWeapon1] = PlayerInfo[playerid][pBullet1] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon2]) PlayerInfo[playerid][pWeapon2] = PlayerInfo[playerid][pBullet2] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon3]) PlayerInfo[playerid][pWeapon3] = PlayerInfo[playerid][pBullet3] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon4]) PlayerInfo[playerid][pWeapon4] = PlayerInfo[playerid][pBullet4] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon5]) PlayerInfo[playerid][pWeapon5] = PlayerInfo[playerid][pBullet5] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon6]) PlayerInfo[playerid][pWeapon6] = PlayerInfo[playerid][pBullet6] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon7]) PlayerInfo[playerid][pWeapon7] = PlayerInfo[playerid][pBullet7] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon8]) PlayerInfo[playerid][pWeapon8] = PlayerInfo[playerid][pBullet8] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon9]) PlayerInfo[playerid][pWeapon9] = PlayerInfo[playerid][pBullet9] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon10]) PlayerInfo[playerid][pWeapon10] = PlayerInfo[playerid][pBullet10] = 0;
    OnSalvarDados( playerid );

	static str[100];
	format(str, sizeof str, "{88D1F5}> Servidor: Voce guardou sua %s com %i balas em seu inventario!", ItensDrop[weapon][i_Name], wids[1]);
	SCM(playerid, -1, str);

    format(str, sizeof(str), "{F763E9}%s meche em seu /inventario!", GetNameEx( playerid ));
	MessageProxPlayer(playerid, -1, 10.0, str);
	return true;
}

CMD:colocarmadeiras(playerid)
{
    if(EmpregoDuty[ playerid ] == Lenhador)
    {
        if(playerCutting[playerid] == true) //&& GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
        {
            Loop(vid, (GetVehiclePoolSize()+1))
            {
                if(GetVehicleModel(vid) != 578) continue;

                new Float:vPos[3];
                GetVehiclePos(vid, vPos[0], vPos[1], vPos[2]);

                if(IsPlayerInRangeOfPoint(playerid, 3.0, vPos[0], vPos[1], vPos[2]))
                {
                    QuantSlices[playerid]--;

                    ApplyAnimationEx(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
                    RemovePlayerAttachedObject(playerid, SlotTrabalhadores);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                    AttachSliceToVehicle(playerid, vid);



                    SCM(playerid, -1, "Madeira adicionada");

                    if(QuantSlices[ playerid ] < 1)
                    {
                        playerCutting[playerid] = false;
                    }
                } else ErroMSG(playerid, "Voce nao esta proximo ao caminhao");
            }
        } else ErroMSG(playerid, "Voce nao iniciou um corte");
    } else ErroMSG(playerid, "Voce nao e um lenhador");
    return 1;
}


CMD:pegarmadeiras(playerid)
{
    if(EmpregoDuty[ playerid ] == Lenhador)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, PosSlices[ playerid ][ 0 ], PosSlices[ playerid ][ 1 ], PosSlices[ playerid ][ 2 ]))
        {
            SetPlayerAttachedObject(playerid, SlotTrabalhadores, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);

            ApplyAnimationEx(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            switch(QuantSlices[ playerid ])
            {
                case 4: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][3]);
                case 3: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][2]);
                case 2: DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][1]);
                case 1:
                {
                    DestroyDynamicObject(objTreeSlices[cuttingTreeId[playerid]][0]);
                    PosSlices[ playerid ][ 0 ] = PosSlices[ playerid ][ 1 ] = PosSlices[ playerid ][ 2 ] = 0.0;
                }
            }
            if(QuantSlices[ playerid ] > 3)
            {
                SCM(playerid, -1, "{96D76E}[ {E8EEF0}Emprego {96D76E}] - {F5F6EC}Leve a madeira ate o caminhao e Aperte o ALT-Esquerdo ou /colocarmadeiras!");
                SCM(playerid, -1, "{96D76E}[ {E8EEF0}Emprego {96D76E}] - {F5F6EC}Depois de carregar o caminhao, venda no checkpoint marcado no mapa.");
                SetPlayerCheckpoint(playerid, -2028.781982, -2396.301513, 30.625000, 5.0);
            }
        }
    }
    return 1;
}

CMD:dropar( playerid )
{
	if(GetPlayerWeapon( playerid ) == 0) return ErroMSG(playerid, "Voce nao tem uma arma para dropar!");

    static
		World,
		Int,
		weapon,
		Float:xPos[3],
		Wids[2]
	;

	World = GetPlayerVirtualWorld( playerid );
	Int = GetPlayerInterior( playerid );
	weapon = GetPlayerWeapon( playerid );

    if(weapon != PlayerInfo[playerid][pWeapon1]
	&& weapon != PlayerInfo[playerid][pWeapon2]
	&& weapon != PlayerInfo[playerid][pWeapon3]
	&& weapon != PlayerInfo[playerid][pWeapon4]
	&& weapon != PlayerInfo[playerid][pWeapon5]
	&& weapon != PlayerInfo[playerid][pWeapon6]
	&& weapon != PlayerInfo[playerid][pWeapon7]
	&& weapon != PlayerInfo[playerid][pWeapon8]
	&& weapon != PlayerInfo[playerid][pWeapon9]
	&& weapon != PlayerInfo[playerid][pWeapon10]) return ErroMSG(playerid, "Esta arma nao pode ser dropada, pois nao lhe pertence!");


	GetPlayerWeaponData(playerid, GetWeaponSlot(weapon), Wids[0], Wids[1]);

	GetPlayerPos( playerid, xPos[0], xPos[1], xPos[2]);

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 850);

	Loop(wid, MAX_WEAPONS)
	{

		if(WeaponData[wid][w_Ativa] == true) continue;

        WeaponData[wid][w_ArmaID] = weapon;
        WeaponData[wid][w_Balas] = Wids[1];

		WeaponData[wid][w_Pickup] = CreateDynamicObject(ItensDrop[WeaponData[wid][w_ArmaID]][i_Model], xPos[0], xPos[1], xPos[2]-1,  93.7, 120.0, 120.0, World, Int, -1, 300.0);
		WeaponData[wid][w_Label] = CreateDynamic3DTextLabel(ItensDrop[WeaponData[wid][w_ArmaID]][i_Name], -1, xPos[0], xPos[1], xPos[2]-1, 15);

        WeaponData[wid][w_PosX] = xPos[0];
        WeaponData[wid][w_PosY] = xPos[1];
        WeaponData[wid][w_PosZ] = xPos[2];

		WeaponData[wid][w_Ativa] = true;

        RemovePlayerWeapon(playerid, weapon);

        break;
	}

    if(weapon == PlayerInfo[playerid][pWeapon1]) PlayerInfo[playerid][pWeapon1] = PlayerInfo[playerid][pBullet1] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon2]) PlayerInfo[playerid][pWeapon2] = PlayerInfo[playerid][pBullet2] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon3]) PlayerInfo[playerid][pWeapon3] = PlayerInfo[playerid][pBullet3] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon4]) PlayerInfo[playerid][pWeapon4] = PlayerInfo[playerid][pBullet4] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon5]) PlayerInfo[playerid][pWeapon5] = PlayerInfo[playerid][pBullet5] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon6]) PlayerInfo[playerid][pWeapon6] = PlayerInfo[playerid][pBullet6] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon7]) PlayerInfo[playerid][pWeapon7] = PlayerInfo[playerid][pBullet7] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon8]) PlayerInfo[playerid][pWeapon8] = PlayerInfo[playerid][pBullet8] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon9]) PlayerInfo[playerid][pWeapon9] = PlayerInfo[playerid][pBullet9] = 0;
    if(weapon == PlayerInfo[playerid][pWeapon10]) PlayerInfo[playerid][pWeapon10] = PlayerInfo[playerid][pBullet10] = 0;
    OnSalvarDados( playerid );

	static str[100];
	format(str, sizeof str, "{88D1F5}> Servidor: voce dropou sua %s com %i balas!", ItensDrop[weapon][i_Name], Wids[1]);
	SCM(playerid, -1, str);
	return true;
}


CMD:premiomega( playerid, params[] )
{
	if(PlayerInfo[ playerid ][ pAdmin ] < comando_premiomega) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static premio, str[ 129 ];
    if( sscanf(params, "i", premio) ) return ErroMSG( playerid, "Use: /premiomega [ Quantia ]" );

	format(str, sizeof(str), "{F3F781}| Mega Sena | - %s %s %s mudou o premio acumulado para R$ %s", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ], FormatNumber(premio));
	SCMALL(str);

    LotoInfo[ LotoValue ] = premio;

    format(STRLOG, sizeof(STRLOG), "[%s] %s alterou o premio da mega sena para %i", GetDateEx(), GetName(playerid), premio);
	SLog("MegaSena.log", STRLOG);
	return true;
}

CMD:megasortear( playerid, params[])
{
	if(PlayerInfo[ playerid ][ pAdmin ] < comando_premiomega) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	LotoSorteio();

    format(STRLOG, sizeof(STRLOG), "[%s] %s sorteou a mega sena ", GetDateEx(), GetName(playerid));
	SLog("MegaSena.log", STRLOG);
	return true;
}

CrashPlayer(giveid) return GameTextForPlayer(giveid, "~~w~~wwwwww", 5000, 0);

CMD:crashar(playerid, params[])
{
    if(PlayerInfo[ playerid ][ pAdmin ] < comando_crashar) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new id; id = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /crashar [ id ]");
    if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");
	if(PlayerInfo[ id ][ pAdmin ] > PlayerInfo[ playerid ][ pAdmin ]) return ErroMSG(playerid, "Este player e um Administrador!");

    CrashPlayer( id );

    InfoMSG(playerid, "Crashado com sucesso!");

    format(STRLOG, sizeof(STRLOG), "[%s] Admin %s Crashou %s", GetDateEx(), GetName( playerid ), GetName( id ));
    SLog("AdminCMD.log", STRLOG);
	return true;
}

CMD:verchatglobal(playerid)
{
    if(PlayerInfo[ playerid ][ pAdmin ] < comando_verchatglobal) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(GetPVarInt(playerid, "ChatGlobal") != 1){
	    InfoMSG(playerid, "Agora voce esta vendo o chat global!");
	    SetPVarInt(playerid, "ChatGlobal", 1);
	}
	else
	{
	    InfoMSG(playerid, "Agora voce esta vendo o chat Distance (normal)!");
	    SetPVarInt(playerid, "ChatGlobal", 0);
	    DeletePVar(playerid, "ChatGlobal");
	}
	return true;
}

CMD:blockchat(playerid, params[])
{
    if(PlayerInfo[ playerid ][ pAdmin ] < comando_blockchat) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new id, temp;

    if(sscanf(params, "ud", id, temp)) return ErroMSG(playerid, "Use: /blockchat [ id ][ Minutos ]");

    if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");

	if(PlayerInfo[ id ][ pAdmin ]) return ErroMSG(playerid, "Este player e um Administrador!");

	BlockChatFor(id, temp);

	format(strx, sizeof(strx), "O Admin %s bloqueou o chat de %s Por %s!", GetName( playerid ), GetName( id ), Convert(temp*60, 1));
	InfoMSGToAll(strx);

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s bloqueou o chat de %s por %s", GetDateEx(), GetName( playerid ), GetName( id ), Convert(temp, 1));
    SLog("AdminCMD.log", STRLOG);

	return true;
}

CMD:ip(playerid, params[])
{
    if(PlayerInfo[ playerid ][ pAdmin ] < comando_ip) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

    new id;
	id = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /ip [ id ]");

    if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");

	if(PlayerInfo[ id ][ pAdmin ] > PlayerInfo[ playerid ][ pAdmin ]) return ErroMSG(playerid, "Este player e um Administrador superior!");

	static str[ 129 ];
	format(str, sizeof(str), "-| %s's IP: %s |-", GetName( id ), GetIPX( id ) );
	InfoMSG(playerid, str);

	return true;
}


CMD:setcar(playerid, params[])
{
    if(PlayerInfo[ playerid ][ pAdmin ] < 4) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(!IsPlayerInAnyVehicle( playerid )) return 0;

    new vid, Float:Pos_v[4];
	vid = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /setcar [ id do veiculo ]");


	GetVehiclePos(GetPlayerVehicleID( playerid ), Pos_v[0], Pos_v[1], Pos_v[2]);
	GetVehicleZAngle(GetPlayerVehicleID( playerid ), Pos_v[3]);

	SetTimerEx("CriarVeiculoX", 2000, false, "dffff", vid, Pos_v[0], Pos_v[1], Pos_v[2], Pos_v[3]);
	//CreateVehicle(vid, Pos_v[0], Pos_v[1], Pos_v[2], Pos_v[3], -1, -1, -1);

	new File:Arquivo;
	static sFile[400];
	Arquivo = fopen("VehiclesSetados.pwn",io_append);
	format(sFile, sizeof sFile, "CreateVehicle(%d, %0.4f, %0.4f, %0.4f, %0.4f, -1, -1, -1); //%s\n\n",
	vid, Pos_v[0], Pos_v[1],Pos_v[2],Pos_v[3], GetNameEx( playerid ));
	fwrite(Arquivo, sFile);
	fclose(Arquivo);
	sFile[0] = EOS;

	InfoMSG(playerid, "Criado com sucesso, o veiculo ira aparecer em instantes!");

	return true;
}

forward CriarVeiculoX(vid, Float:x_pOs, Float:y_pOs, Float:z_pOs, Float:a_pOs);
public CriarVeiculoX(vid, Float:x_pOs, Float:y_pOs, Float:z_pOs, Float:a_pOs){
	CreateVehicle(vid, x_pOs, y_pOs, z_pOs, a_pOs, -1, -1, -1);
}

CMD:rpv(playerid, params[])
{
    if(PlayerInfo[ playerid ][ pAdmin ] < comando_rpv) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

    new id;
	id = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /rpv [ id ]");

    if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");

	if(!IsPlayerInAnyVehicle( id )) return ErroMSG(playerid, "Este player precisa estar em um veiculo!");
    if(PlayerInfo[ id ][ pAdmin ]) return ErroMSG(playerid, "Este player e um Administrador!");

	format(strx, sizeof(strx), "O Admin %s removeu voce de seu veiculo!", GetName(playerid));
	InfoMSG(id, strx);

	format(strx, sizeof(strx), "Voce removeu %s de seu Veiculo!",GetName( id ));
	InfoMSG(playerid, strx);

	RemovePlayerFromVehicle( id );
	return true;
}

CMD:criarpickup(sKy, params[])
{
    if(PlayerInfo[ sKy ][ pAdmin ] < MAX_ADM_LEVEL) return 0;
	new _PicID, Float:_sKY[3]; _PicID = strval(params);

	if(!_PicID) return ErroMSG(sKy, "Use: /criarpickup [ Pickup ID ]");

	GetPlayerPos(sKy, _sKY[0], _sKY[1], _sKY[2]);
	DestroyPickup(PickupSave);
	PickupSave = CreatePickup(_PicID, 1, (_sKY[0]), _sKY[1], _sKY[2], -1);

	InfoMSG(sKy, "Pickup Criado com sucesso.");

	PickID = _PicID;
    PosPick[0] = (_sKY[0]);
    PosPick[1] = _sKY[1];
    PosPick[2] = _sKY[2];
	return true;
}

CMD:deletarpickup(sKy)
{
    if(PlayerInfo[ sKy ][ pAdmin ] < MAX_ADM_LEVEL) return 0;

	DestroyPickup(PickupSave);

	InfoMSG(sKy, "Pickup deletado com sucesso.");
	return true;
}

CMD:savepickup(sKy, params[])
{
    if(PlayerInfo[ sKy ][ pAdmin ] < MAX_ADM_LEVEL) return 0;

    new SaveName[ 20 ];
    if(sscanf(params, "s[20]", SaveName)) return ErroMSG(sKy, "Use: /savepickup [ nome sem espaços ]!");

    new File:Arquivo;
    static sFile[400];

	Arquivo = fopen("PickupCreate.pwn",io_append);
	format(sFile, sizeof sFile, "%s = CreatePickup(%d, 1, %0.4f, %0.4f, %0.4f, -1); //%s\n\n",
	SaveName, PickID, PosPick[0], PosPick[1], PosPick[2], SaveName);
	fwrite(Arquivo, sFile);
	fclose(Arquivo);
	sFile[0] = EOS;

	InfoMSG(sKy, "Salvo com sucesso!");
	return true;
}

CMD:deletargz(sKy, params[])
{
    if(PlayerInfo[ sKy ][ pAdmin ] < MAX_ADM_LEVEL) return 0;

    GangZoneDestroy(GZSave);

    InfoMSG(sKy, "GangZone Removida com sucesso.");
	return true;
}

CMD:criargz(sKy, params[])
{
    if(PlayerInfo[ sKy ][ pAdmin ] < MAX_ADM_LEVEL) return 0;
    new	_Tamanho[ 4 ];
    if(sscanf(params, "dddd", _Tamanho[0], _Tamanho[1], _Tamanho[2], _Tamanho[3])) return ErroMSG(sKy, "/criargz [tamanho OESTE] [tamanho SUL] [tamanho LESTE] [tamanho NORTE]");

    new
		Float:_Px,
		Float:_Py,
		Float:_Pz
	;
	GetPlayerPos(sKy, _Px, _Py, _Pz);
    GangZoneDestroy(GZSave);
	GZSave = GangZoneCreate((_Px-_Tamanho[0]),(_Py-_Tamanho[1]),(_Px+_Tamanho[2]),(_Py+_Tamanho[3]));
	GangZoneShowForPlayer(sKy, GZSave, AzulClaro);

	InfoMSG(sKy, "GangZone criada com sucesso, Use: /savegz para salva-la.");

	PosGZ[0] = (_Px-_Tamanho[0]);
	PosGZ[1] = (_Py-_Tamanho[1]);
	PosGZ[2] = (_Px+_Tamanho[2]);
	PosGZ[3] = (_Py+_Tamanho[3]);

	return true;
}

CMD:savegz(sKy, params[])
{
    if(PlayerInfo[ sKy ][ pAdmin ] < MAX_ADM_LEVEL) return 0;

	new SaveName[ 50 ];
    if(sscanf(params, "s[50]", SaveName)) return ErroMSG(sKy, "Use: /savegz [ nome sem espaços ]!");

    InfoMSG(sKy, "GangZone salva com sucesso, Nao esqueça de /deletargz.");

	new
		sFile[256],
		File:Arquivo
	;
	Arquivo = fopen("GangZoneCreate.pwn",io_append);
	format(sFile, sizeof sFile, "//================[ GangZone Code ]=================\n    new %s;\n    %s = GangZoneCreate(%0.4f,%0.4f,%0.4f,%0.4f);\n\n",
	SaveName, SaveName, PosGZ[0], PosGZ[1], PosGZ[2], PosGZ[3]);
	fwrite(Arquivo, sFile);
	fclose(Arquivo);
	return true;
}

CMD:soundid(pid, sky[])
{
    if(PlayerInfo[ pid ][ pAdmin ] < MAX_ADM_LEVEL) return 0;

	new SoundID;
	SoundID = strval(sky);
	if(!SoundID) return ErroMSG(pid, "Use: /sondid [ Sound ID ]");

	PlaySoundForPlayer(pid, SoundID);

	format(strx, sizeof(strx), ""#SERVELOGO" Voce Esta ouvindo o Sound ID: %i", SoundID);
	SendClientMessage( pid, -1, strx);
	return true;
}

CMD:vercmds( playerid )
{
	if(PlayerInfo[playerid][pAdmin] < comando_vercmds) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(GetPVarInt(playerid, "VendoCMDS") == 1){
		InfoMSG(playerid, "Voce nao esta mais lendo comandos");
		SetPVarInt(playerid, "VendoCMDS", 0);
	}
	else
	{
		InfoMSG(playerid, "Agora voce esta lendo comandos");
		SetPVarInt(playerid, "VendoCMDS", 1);
	}
	return true;
}

CMD:versms( playerid )
{
	if(PlayerInfo[playerid][pAdmin] < comando_versms) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(GetPVarInt(playerid, "VendoSMS") == 1){
		InfoMSG(playerid, "Voce nao esta mais lendo SMS");
		SetPVarInt(playerid, "VendoSMS", 0);
	}
	else
	{
		InfoMSG(playerid, "Agora voce esta lendo SMS");
		SetPVarInt(playerid, "VendoSMS", 1);
	}
	return true;
}

CMD:fila( playerid )
{
    if(PlayerInfo[playerid][pAdmin] < comando_fila) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		bool:Count = false
	;
	ForPlayers(i)
	{
		if(Senha[i] != 0) Count= true;
		if(Count == true) break;
	}
 	if(!Count == true)
		return SendClientMessage(playerid, Vermelho, "Nao ha nenhum jogador na fila de atendimento.");

	SendClientMessage(playerid, Amarelo, "======= {FFFFFF}[ Fila de Atendimento ] {F7E200}=======");
	Loop(s,(Fila+1))
	{
    	ForPlayers(i)
    	{
			if(Senha[ i ] != s) continue;
			format(strx, sizeof strx, "  [ID %d] %s - Senha: %d", i, GetName( i ), Senha[i]);
			SendClientMessage(playerid, Amarelo, strx);
		}
	}
	return 1;
}

CMD:proximo( playerid )
{
	if(PlayerInfo[playerid][pAdmin] < comando_irsenha) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new bool:Count;

	Loop(s,(Fila+1))
	{
		ForPlayers( i )
		{
			if(Senha[i] != s) continue;

			new
				Float:PoS[ 3 ]
			;
			GetPlayerPos(i, PoS[0], PoS[1], PoS[2]);
			SetPlayerPosEx(playerid, PoS[0]+1, PoS[1], PoS[2]+0.5, 0.0, GetPlayerInterior(i));

			Senha[ i ] = 0;

			format(strx, sizeof strx, "O ADM %s [ID %d] veio te ajudar.", GetName( playerid ), playerid);
			SendClientMessage(i, Amarelo, strx);

			format(strx, sizeof strx, "Voce veio atender o jogador %s [ID %d].", GetName( i ), i);
			SendClientMessage(playerid, Amarelo, strx);
			Atendimentos[ playerid ]++;
			Count = true;
			break;
		}
		if(Count) break;
	}
	if(!Count) return ErroMSG(playerid, "Nao ha nenhum jogador na fila de atendimento.");
	return 1;
}

CMD:irsenha(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_irsenha)
		return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	else if(isnull(params))
	    return ErroMSG(playerid, "Use: /irsenha [numero da senha]");
	else if(strval(params) < 1)
		return ErroMSG(playerid, "Nao ha ninguem no servidor com esta senha.");

	new
		bool:Count
	;
	ForPlayers( i )
	{
		if(Senha[ i ] == strval(params))
		{
			new
				Float:PoS[ 3 ]
			;
			GetPlayerPos(i, PoS[0], PoS[1], PoS[2]);
			SetPlayerPosEx(playerid, PoS[0]+1, PoS[1], PoS[2]+0.5, 0.0, GetPlayerInterior(i));

			Senha[ i ] = 0;

			format(strx, sizeof strx, "O ADM %s [ID %d] veio te ajudar.", GetName( playerid ), playerid);
			SendClientMessage(i, Amarelo, strx);

			format(strx, sizeof strx, "Voce veio atender o jogador %s [ID %d].", GetName( i ), i);
			SendClientMessage(playerid, Amarelo, strx);
			Atendimentos[ playerid ]++;
			Count = true;
			break;
		}
	}
	if(!Count) return ErroMSG(playerid, "Nao ha ninguem no servidor com esta senha.");
	return 1;
}

CMD:atendimentos( playerid )
{
	if(PlayerInfo[ playerid ][ pAdmin ] < comando_atendimentos) return ErroMSG(playerid, "Voce nao esta autorizado a usar este comando.");

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	SendClientMessage(playerid, Amarelo, "======= {FFFFFF}[ Numero de Atendimentos por ADM ] {F7E200}=======");

	static str[ 129 ];
	ForPlayers( i )
	{
	    if(!PlayerInfo[ i ][ pAdmin ]) continue;

		format(str, sizeof str, "Play Style RP %s - Atendimentos: %d", GetName( i ), Atendimentos[ i ]);
	    SendClientMessage(playerid, Amarelo, str);
	}
	return 1;
}

CMD:zerarfila( playerid )
{
	if(PlayerInfo[ playerid ][ pAdmin ] < comando_zerarfila) return ErroMSG(playerid, "Voce nao esta autorizado a usar este comando.");

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	Fila = 1;
	ForPlayers( i )
	{
		Senha[ i ] = 0;
	}
	static str[129];
	format(str, sizeof str, "Play Style RP A fila de atendimento foi zerada pelo Admin %s.", GetName( playerid ));
	SendClientMessageToAll(Amarelo, str);
	return 1;
}

CMD:irnpcbus(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_irbus) return 0;
    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta modo Administrativo.");

	new busid;
	if(sscanf(params, "i", busid)) return ErroMSG(playerid, "/irnpcbus [ 1 - 2 ]");

	if(busid == 1){
		PutPlayerInVehicle(playerid, NPCBlueBus, 2);
		SendClientMessage(playerid, Darkaqua, "Voce foi teleportado ate o BlueBus !");
	}
	else if(busid == 2){
        PutPlayerInVehicle(playerid, NPCBlackBus, 2);
		SendClientMessage(playerid, Darkaqua, "Voce foi teleportado ate o BlackBus !");
	}
	else return ErroMSG(playerid, "/irnpcbus [ 1 - 2 ]");
    return 1;
}

CMD:irempresa(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_irprop) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static i;

	i = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /irempresa [ id ].");

	if(EmpInfo[i][EEmpExist] != true) return ErroMSG(playerid, "Empresa nao existente!");

	format(strx, sizeof(strx), "Voce foi teleportado ate a [Propriedade] NÂ° %i!", i);
	InfoMSG(playerid, strx);
	SetPlayerPosEx(playerid, EmpInfo[i][ELocalX], EmpInfo[i][ELocalY], EmpInfo[i][ELocalZ], 0.0, 0);

	return true;
}

CMD:liberarempresa(playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_liberarempresa) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new i, Mot[61], CFile[50], str[129];

	if(sscanf(params, "ds[60]", i, Mot)) return ErroMSG(playerid, "Use: /liberarempresa [id] [Motivo] !");

	if(EmpInfo[i][EEmpExist] != true) return ErroMSG(playerid, "Empresa nao existente!");


	if(GetPlayerID(EmpInfo[i][EDono]) != -1){
        format(str, sizeof(str), "%s %s liberou sua propriedade de NÂ°%i Motivo: %s", adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ], i, Mot);
		InfoMSG(playerid, str);
		PlayerInfo[GetPlayerID(EmpInfo[i][EDono])][pEmpKey] = 999;
		OnSalvarDados(GetPlayerID(EmpInfo[i][EDono]));
	}
	else
	{
		format(CFile, sizeof(CFile), PASTA_CONTAS, EmpInfo[i][EDono]);
		DOF2_SetInt(CFile, "Empresa", 999);
	}

	strmid(EmpInfo[i][EDono], "Ninguem", 0, strlen(EmpInfo[i][EDono]), 255);
	strmid(EmpInfo[i][ESocio], "Ninguem", 0, strlen(EmpInfo[i][ESocio]), 255);

	EmpInfo[i][ELocked] = 0;
	EmpInfo[i][EEstado] = 0;

	UpdateEmpresaLabel(i);
    SaveEmpresa(i);


    format(STRLOG, sizeof(STRLOG), "[%s] Admin %s liberou a Empresa NÂ° %i Motivo: %s", GetDateEx(), GetName( playerid ), i, Mot);
   	SLog("AdminCMD.log", STRLOG);

	format(str, sizeof(str), "Voce liberou a Empresa NÂ°%i Motivo: %s!", i, Mot);
	InfoMSG(playerid, str);

	format(str, sizeof(str), "%s %s liberou a Empresa NÂ°%i Motivo: %s!", adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ], i, Mot);
	SendAdminMessage(Purple, str);
	return true;
}

CMD:editarempresa(playerid, params[])
{
	static
		id,
		item[15],
		valor,
		str[128]
	;

	if(PlayerInfo[playerid][pAdmin] < comando_editarempresa) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "ds[15]d", id, item, valor)) return ErroMSG( playerid, "Use: /editar [ id ] [ Cofre | Level | Preco ] [ valor ]");

	if(EmpInfo[id][EEmpExist] != true) return ErroMSG(playerid, "Empresa nao existente!");


    if(!strcmp(item, "cofre", true))
    {
		if(EmpInfo[id][EEmpExist] != true) return ErroMSG(playerid, "Empresa nao existente!");

		EmpInfo[ id ][ EGrana ] = valor;

		format(str, sizeof(str), "%s %s alterou o cofre da empresa NÂ°%i para %d.", adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ], id, valor);
		SendAdminMessage(Teal, str);
		SCM(playerid, Verde, "Alterado com sucesso");

  		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s alterou o cofre da Empresa NÂ° %i para %d", GetDateEx(), GetName( playerid ), id, valor);
   		SLog("AdminCMD.log", STRLOG);

	    SaveEmpresa( id );
	}
    if(!strcmp(item, "preco", true))
    {
		if(EmpInfo[id][EEmpExist] != true) return ErroMSG(playerid, "Empresa nao existente!");

        if(valor < 0) return ErroMSG(playerid, "Nao e possivel usar valores negativos, tente um numero acima de 0.");

		EmpInfo[ id ][ EPreco ] = valor;

		format(str, sizeof(str), "%s %s alterou o preço da empresa NÂ°%i para %d.", adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ], id, valor);
		SendAdminMessage(Teal, str);
		SCM(playerid, Verde, "Alterado com sucesso");

  		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s alterou o preço da Empresa NÂ° %i para %d", GetDateEx(), GetName( playerid ), id, valor);
   		SLog("AdminCMD.log", STRLOG);

		UpdateEmpresaLabel(id);
	    SaveEmpresa( id );
	}
    if(!strcmp(item, "level", true))
    {
		if(EmpInfo[id][EEmpExist] != true) return ErroMSG(playerid, "Empresa nao existente!");

        if(valor < 0) return ErroMSG(playerid, "Nao e possivel usar valores negativos, tente um numero acima de 0.");

		EmpInfo[ id ][ ELevel ] = valor;

		format(str, sizeof(str), "%s %s alterou o level da empresa NÂ°%i para %d.", adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ], id, valor);
		SendAdminMessage(Teal, str);
		SCM(playerid, Verde, "Alterado com sucesso");

  		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s alterou o level da Empresa NÂ° %i para %d", GetDateEx(), GetName( playerid ), id, valor);
   		SLog("AdminCMD.log", STRLOG);

		UpdateEmpresaLabel(id);
	    SaveEmpresa( id );
	}
	return 1;
}

// ===================   Sistema de portoes   ============================

CMD:criarportao( playerid,params[])
{
	if(PlayerInfo[playerid][pAdmin] < comando_criar_portoes) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(isnull( params ) )
    {
		SCM( playerid, -1, "{F0F2A0}| INFO | - /criarportao [modelo]");
		SCM( playerid, -1, "{F0F2A0}| INFO | - Modelos Mais usados: 969, 971, 980");
	}
	else {
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		PlayerCreateGate( playerid, strval( params ), Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], GetPlayerInterior( playerid ) );
	}
	return true;
}

CMD:editarportao( playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < comando_criar_portoes) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");


	if(sscanf(params, "i", params[0]))  return ErroMSG( playerid, "/editarportao [portao-id]");

	if(!(DOF2_FileExists(FileGate(params[0])) && GateInfo[params[0]][SDono] != 3 )) return ErroMSG( playerid, "Valor invalido, tente novamente!");

	if(!(IsPlayerInRangeOfPoint( playerid, 20.0, GateInfo[params[0]][fPosX], GateInfo[params[0]][fPosY], GateInfo[params[0]][fPosZ] ) )) return ErroMSG( playerid, "Voce esta muito longe do portao!");

	SetPVarInt( playerid, "PastID", params[0]);
	SetPVarInt( playerid, "GateEdit2", GateInfo[params[0]][Id2] );
	GateID[ playerid ] = GateInfo[params[0]][Model];

	ShowIndexFor( playerid );
	return true;
}

CMD:ap( playerid, params[]){

	if(sscanf(params, "d", params[0])) return ErroMSG( playerid, "/ap [portao-id]");

	if(!( DOF2_FileExists(FileGate(params[0])) && GateInfo[params[0]][SDono] != 3 )) return ErroMSG( playerid, "Valor invalido, tente novamente!");

	if(!(IsPlayerOwners( playerid, params[0] ))) return ErroMSG( playerid, "Este portao nao lhe pertence.!");

    if(IsPlayerInRangeOfPoint( playerid, 20.0, GateInfo[params[0]][fPosX], GateInfo[params[0]][fPosY], GateInfo[params[0]][fPosZ] ) )
	{
        MoveDynamicObject( GateInfo[params[0]][Id2], GateInfo[params[0]][aPosX], GateInfo[params[0]][aPosY], GateInfo[params[0]][aPosZ], GateInfo[params[0]][Speed]);
        SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Abrindo..");
    }
    else
    {
        ErroMSG( playerid, "Voce esta muito longe do portao!");
    }

    return true;
}


CMD:fp( playerid, params[]){

	if(sscanf(params, "d", params[0])) return ErroMSG( playerid, "/fp [portao-id]");

	if(!( DOF2_FileExists(FileGate(params[0])) && GateInfo[params[0]][SDono] != 3 )) return ErroMSG( playerid, "Valor invalido, tente novamente!");

	if(!(IsPlayerOwners( playerid, params[0] ))) return ErroMSG( playerid, "Este portao nao lhe pertence.!");

    if(IsPlayerInRangeOfPoint( playerid, 20.0, GateInfo[params[0]][fPosX], GateInfo[params[0]][fPosY], GateInfo[params[0]][fPosZ] ) )
	{
        MoveDynamicObject( GateInfo[params[0]][Id2], GateInfo[params[0]][fPosX], GateInfo[params[0]][fPosY], GateInfo[params[0]][fPosZ], GateInfo[params[0]][Speed]);
        SendClientMessage( playerid, -1, "{A8DE90}| Portao | - Fechando..");
    }
    else
    {
        ErroMSG( playerid, "Voce esta muito longe do portao!");
    }

    return true;
}


CMD:infoportao( playerid ){

	Loop(portao, MAX_GATES)
	{
	    if( DOF2_FileExists(FileGate(portao)) && GateInfo[portao][SDono] != 3 )	{
			if(IsPlayerInRangeOfPoint( playerid, 20.0, GateInfo[portao][fPosX], GateInfo[portao][fPosY], GateInfo[portao][fPosZ] )) {
				static stx_[100];
				SendClientMessage( playerid, -1, "|___________ Info Portao ___________|");
				format(stx_, sizeof(stx_), "{33AAFF}Portao ID: %d | Dono: %s", portao, GateInfo[portao][Dono] );
	        	SendClientMessage( playerid, -1, stx_);
	        	format(stx_, sizeof(stx_), "{33AAFF}Copias da chave com: %s, %s, %s", GateInfo[portao][CopyKey1], GateInfo[portao][CopyKey3], GateInfo[portao][CopyKey3] );
	        	SendClientMessage( playerid, -1, stx_);
	        	SendClientMessage( playerid, -1, "|_________________________________|");
		        return true;
			}
	    }
	}
    ErroMSG( playerid, "Nao tem nenhum portao valido por perto!");
    return true;
}

CMD:infoportaoid( playerid, params[])
{
	new portao;

    if(sscanf(params, "d", portao)) return ErroMSG(playerid, "/infoportaoid [id]");

	if( DOF2_FileExists(FileGate(portao)) && GateInfo[portao][SDono] != 3 )	{
		if(IsPlayerInRangeOfPoint( playerid, 20.0, GateInfo[portao][fPosX], GateInfo[portao][fPosY], GateInfo[portao][fPosZ] )) {
			static stx_[100];
			SendClientMessage( playerid, -1, "|___________ Info Portao ___________|");
			format(stx_, sizeof(stx_), "{33AAFF}Portao ID: %d | Dono: %s", portao, GateInfo[portao][Dono] );
        	SendClientMessage( playerid, -1, stx_);
        	format(stx_, sizeof(stx_), "{33AAFF}Copias da chave com: %s, %s, %s", GateInfo[portao][CopyKey1], GateInfo[portao][CopyKey3], GateInfo[portao][CopyKey3] );
        	SendClientMessage( playerid, -1, stx_);
        	SendClientMessage( playerid, -1, "|__________________________________|");
		}
    }
    else ErroMSG( playerid, "ID invalido!");
	return true;
}

CMD:darchave( playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_portoes) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo administrativo.");

	static
    	plid, gtid, stx_[ 129 ]
    ;

    if( sscanf(params, "ud", plid, gtid) ) return ErroMSG(playerid, "/darchave [id] [portao-id]");


    if(DOF2_FileExists(FileGate(gtid)) && GateInfo[gtid][SDono] != 3)
    {
		if (IsPlayerConnected(plid))
        {
            if(GateInfo[gtid][SDono] == 0)
            {
				format(GateInfo[gtid][Dono], 24, "%s", GetName(plid));
                GateInfo[gtid][SDono] = 1;

                SavingGate(gtid);
				format(stx_, sizeof(stx_), "{33AAFF}O(A) Admin %s te deu a chave do portao: {FFFFFF}%d", GetNameEx( playerid ), gtid);
                SendClientMessage(plid, -1, stx_);
                SendClientMessage( playerid, -1, "{64FF6B}| INFO | - Comando efetuado com sucesso!");
            }
            else
            {
           		ErroMSG(playerid, "Este portao ja tem dono!");
            }
        }
        else
        {
        	ErroMSG(playerid, "Player nao conectado.");
        }
    }
    else ErroMSG(playerid, "Portao invalido, revise os dados informados!");
    return true;
}


CMD:darcopia( playerid, params[]){
    static
    	p, d, stx_[129]
    ;

    if( sscanf(params, "ud", p, d)) return ErroMSG(playerid, "/darcopia [id] [portao-id]");


	if(DOF2_FileExists(FileGate(d)) && GateInfo[d][SDono] != 3 )
    {
        if(strcmp( GateInfo[d][Dono], GetName( playerid ), true) == 0 || PlayerInfo[playerid][pAdmin] >= comando_portoes )
    	{
		    if( strcmp( GateInfo[d][CopyKey1], "Ninguem", true) == 0)
            {
                format(GateInfo[d][CopyKey1], 24, "%s", GetName( p ) );

				format( stx_, sizeof( stx_ ), "{33AAFF}%s te deu uma copia da chave do portao: {FFFFFF}%d", GetNameEx( playerid ), d);
                SendClientMessage( p, -1, stx_     );

                format( stx_, sizeof(   stx_    ), "{33AAFF}voce deu uma copia da chave de seu portao ha: %s", GetNameEx( p ) );
                SendClientMessage( playerid, -1, stx_ );

                SavingGate(d);
                return true;
            }
            if( strcmp( GateInfo[d][CopyKey2], "Ninguem", true) == 0)
            {
                format(GateInfo[d][CopyKey2], 24, "%s", GetName( p ) );

				format( stx_, sizeof( stx_ ), "{33AAFF}%s te deu uma copia da chave do portao: {FFFFFF}%d", GetNameEx( playerid ), d);
                SendClientMessage( p, -1, stx_     );

                format( stx_, sizeof(   stx_    ), "{33AAFF}voce deu uma copia da chave de seu portao ha: %s", GetNameEx( p ) );
                SendClientMessage( playerid, -1, stx_ );

                SavingGate(d);
                return true;
            }
            if( strcmp( GateInfo[d][CopyKey3], "Ninguem", true) == 0)
            {
                format(GateInfo[d][CopyKey3], 24, "%s", GetName( p ) );

				format( stx_, sizeof( stx_ ), "{33AAFF}%s te deu uma copia da chave do portao: {FFFFFF}%d", GetNameEx( playerid ), d);
                SendClientMessage( p, -1, stx_     );

                format( stx_, sizeof(   stx_    ), "{33AAFF}voce deu uma copia da chave de seu portao ha: %s", GetNameEx( p ) );
                SendClientMessage( playerid, -1, stx_ );

                SavingGate(d);
                return true;
            }
            ErroMSG(playerid, "O limite de chaves foi excedido!");
        }
        else
        {
        	ErroMSG(playerid, "Voce nao e dono deste portao.");
        }
    }
    else
    {
		ErroMSG(playerid, "Portao invalido, tente novamente!");
    }
	return true;
}

CMD:tomarchave( playerid, params[]){


	new
            nick[24], d, stx_[129]
    ;

    if( sscanf(params, "s[24]d", nick, d) ) return ErroMSG(playerid, "/tomarchave [nick] [portao-id]");

    if(DOF2_FileExists(FileGate(d)) && GateInfo[d][SDono] != 3 )
    {
        if(strcmp( GateInfo[d][Dono], GetName( playerid ), true) == 0 || PlayerInfo[playerid][pAdmin] >= comando_portoes )
	    {
            if( strcmp(GateInfo[d][CopyKey1], nick, true) == 0)
            {
                format(GateInfo[d][CopyKey1], 24, "Ninguem");
                format( stx_, sizeof( stx_ ), "{33AAFF}Voce tomou a chave de {FFFFFF}%s {33AAFF}agora ele(a) nao tem acesso a chave do portao!", nick);
                SendClientMessage( playerid, -1, stx_ );
                SavingGate(d);
                return true;
            }
            if( strcmp(GateInfo[d][CopyKey2], nick, true) == 0)
            {
                format(GateInfo[d][CopyKey2], 24, "Ninguem");
                format( stx_, sizeof( stx_ ), "{33AAFF}Voce tomou a chave de {FFFFFF}%s {33AAFF}agora ele(a) nao tem acesso a chave do portao!", nick);
                SendClientMessage( playerid, -1, stx_ );
                SavingGate(d);
                return true;
            }
            if( strcmp(GateInfo[d][CopyKey3], nick, true) == 0)
            {
                format(GateInfo[d][CopyKey3], 24, "Ninguem");
                format( stx_, sizeof( stx_ ), "{33AAFF}Voce tomou a chave de {FFFFFF}%s {33AAFF}agora ele(a) nao tem acesso a chave do portao!", nick);
                SendClientMessage( playerid, -1, stx_ );
                SavingGate(d);
                return true;
            }
            ErroMSG(playerid, "O nome informado nao corresponde entre os que possui a chave. verifique se digitou o nome corretamente!");
        }
        else
        {
        	ErroMSG(playerid, "Voce nao e dono deste portao.");
        }
    }
    else
    {
    	ErroMSG(playerid, "Portao invalido, tente novamente!");
    }
    return true;
}

CMD:liberarportao( playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_portoes) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo administrativo.");

    static d, p, stx_[129];

    if(isnull( params ) ) return ErroMSG(playerid, "/liberarportao [portao-id]");

	d = strval(params);

	if(DOF2_FileExists(FileGate(d)))
	{
        if(GateInfo[d][SDono] != 3 )
        {
        	DestroyDynamicObject(GateInfo[d][Id2] );
        }
        p = CreateDynamicObject(GateInfo[d][Model], GateInfo[d][fPosX], GateInfo[d][fPosY], GateInfo[d][fPosZ], GateInfo[d][fPosRX], GateInfo[d][fPosRY], GateInfo[d][fPosRZ], -1, -1, -1, 200.0);
        GateInfo[d][Id2] = p;

		format(GateInfo[d][Dono], 24, "Ninguem");
		format(GateInfo[d][CopyKey1], 24, "Ninguem");
		format(GateInfo[d][CopyKey2], 24, "Ninguem");
		format(GateInfo[d][CopyKey3], 24, "Ninguem");

		GateInfo[d][SDono] = 0;

	    SavingGate(d);
        format( stx_, sizeof( stx_ ), "{33AAFF}O(A) Admin %s liberou o portao: {FFFFFF}%d", GetNameEx( playerid ), d);
        SendClientMessageToAll(-1, stx_ );

    }
    else ErroMSG(playerid, "Portao invalido, tente novamente!");
    return true;
}

CMD:irportao( playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < comando_portoes) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo administrativo.");

	if(isnull( params ) ) return ErroMSG(playerid, "/irportao [id]");

	if(DOF2_FileExists(FileGate(strval( params ))))
	{
		SetPlayerInterior( playerid, GateInfo[strval( params )][IntID] );
		SetPlayerPos( playerid, GateInfo[strval( params )][fPosX]+2, GateInfo[strval( params )][fPosY]+2, GateInfo[strval( params )][fPosZ] );
	}
	else
	{
		ErroMSG(playerid, "Portao ID invalido.");
	}
	return true;
}
// =================== Fim sistema de portoes =====================

/*==============================================
				veiculos					*/
CMD:irveiculo(playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_irveiculo) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static
		Float:x_v,
		Float:y_v,
		Float:z_v,
		vid,
		str[ 129 ]
	;
	if(isnull( params ) ) return ErroMSG(playerid, "/irveiculo [id]");

    vid = strval( params );
	//if(!VeiculoInfo[ vid ][vIsValid]) return ErroMSG(playerid, "veiculo invalido!");

	//GetVehiclePos(VeiculoInfo[vid][vVeiculo], x_v, y_v, z_v);

	SetPlayerPosEx(playerid, x_v, (y_v+1), z_v, 0.0, 0, 0, 2);
	format(str, sizeof(str), "{FAEF9C}| INFO | - Voce foi ate o veiculo id: %i", vid);
	SCM(playerid, -1, str);
	return true;
}

CMD:infoveiculo(playerid){
   /* static
		Float:x_v,
		Float:y_v,
		Float:z_v,
		bool:Result,
		str[ 129 ]
	;
	new Box[ 900 ];

	Result = false;

	Loop(vid, sizeof( VeiculoInfo )) {

	    if(!VeiculoInfo[ vid ][vIsValid]) continue;

		GetVehiclePos(VeiculoInfo[vid][vVeiculo], x_v, y_v, z_v);

		if(IsPlayerInRangeOfPoint(playerid, 5.0, x_v, y_v, z_v)){
			strcat(Box, "{800080}|_________________________|\n");
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Veiculo ID: {DCD7D7}%i\n", VeiculoInfo[vid][vID]);
			strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Modelo: {DCD7D7}%s\n", SkVeh[VeiculoInfo[vid][vModel]-400]);
			strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Placa: {DCD7D7}%s\n", VeiculoInfo[vid][vPlaca]);
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Proprietario: {DCD7D7}%s\n", VeiculoInfo[vid][vDono]);
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Documentos: {DCD7D7}%s\n", VeiculoInfo[vid][vDoc] == 1 ? ("Pagos"):("Atrasado"));
    		strcat(Box, str);*/
			/*format(str, sizeof(str), "{2DFEE6}{FFFFFF}Seguro: {DCD7D7}%s\n", VeiculoInfo[vid][vSeguro] == 1 ? ("Possui"):("Nao possui"));
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Alarme: {DCD7D7}%s\n", VeiculoInfo[vid][vAlarme] == true ? ("Possui"):("Nao possui"));
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Som: {DCD7D7}%s\n", VeiculoInfo[vid][vRadio] == true ? ("Possui"):("Nao possui"));
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Suspensao: {DCD7D7}%s\n", VeiculoInfo[vid][vSuspensao] == 1 ? ("Hidraulica"):("Fixa"));
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}GPS: {DCD7D7}%s\n", VeiculoInfo[vid][vGPS] == true ? ("Possui"):("Nao possui"));
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Portas: {DCD7D7}%s\n", VeiculoInfo[vid][vDoors] == true ? ("Tracadas"):("Abertas"));
    		strcat(Box, str);
    		format(str, sizeof(str), "{2DFEE6}{FFFFFF}Nitro: {DCD7D7}%s\n", VeiculoInfo[vid][vNitro] != 0 ? ("Possui"):("Nao possui"));
    		strcat(Box, str);
			format(str, sizeof(str), "{2DFEE6}{FFFFFF}Combustivel: {DCD7D7}%i\n", VeiculoInfo[vid][vCombustivel]);
    		strcat(Box, str);
			strcat(Box, "{800080}|_________________________|\n");

			ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Informaçoes do veiculo", Box, "Confirmar","");
			Result = true;
			return true;
		}
	}
 	if(!Result) ErroMSG(playerid, "Voce nao esta proximo a nenhum veiculo da concessionaria!");*/
    return true;
}


//========== Fim sistema de veiculos ===========


CMD:houseint(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_criarcasa) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(isnull( params )) return ErroMSG(playerid, "Use: /houseint [id]");

    if(strval(params) > (sizeof(InteriorHouse)-1) || 0 > strval(params)) return ErroMSG(playerid, "Interior invalido.");

    if(GetPlayerInterior( playerid ) == 0) GetPlayerPos(playerid, PPos[ playerid ][0], PPos[ playerid ][1], PPos[ playerid ][2]);

 	if(strval(params) == 0){
 		SetPlayerPosEx(playerid, PPos[ playerid ][0], PPos[ playerid ][1], PPos[ playerid ][2], 0.0, 0); // Spawn
	}
	else SetPlayerPosEx(playerid, InteriorHouse[ (strval(params)) ][h_Px], InteriorHouse[ (strval(params)) ][h_Py], InteriorHouse[ (strval(params)) ][h_Pz], 0.0, InteriorHouse[ (strval(params)) ][h_Int]);
	return true;
}

CMD:ircasa(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_irprop) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(isnull(params)) return ErroMSG(playerid, "Use: /ircasa [id]");

	new	Hid = strval(params);

	if(!HouseExist(Hid)) return ErroMSG(playerid, "Casa Invalida/inexistente.");
    if(HouseInfo[Hid][hOwned] == 3) return ErroMSG(playerid, "Casa Invalida/deletada.");

	format(strx, sizeof(strx), "Voce foi teleportado ate a casa N:%i!", Hid);
	InfoMSG(playerid, strx);
	SetPlayerPosEx(playerid, HouseInfo[Hid][hEntranceX], HouseInfo[Hid][hEntranceY], HouseInfo[Hid][hEntranceZ], 0.0, 0);
	return true;
}

CMD:mudarcasa(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_criarcasa) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static
		Hid,
		Float:_Sky[3]
	;
	Hid = strval(params);

	if(isnull(params)) return ErroMSG(playerid, "Use: /mudarcasa [id]");

	if(!HouseExist(Hid) || HouseInfo[Hid][hOwned] == 3) {
		ErroMSG(playerid, "Casa Invalida/inexistente.");
		return true;
	}
	else
	{
        GetPlayerPos(playerid, _Sky[0], _Sky[1], _Sky[2]);
		HouseInfo[Hid][hEntranceX] = _Sky[0];
		HouseInfo[Hid][hEntranceY] = _Sky[1];
		HouseInfo[Hid][hEntranceZ] = _Sky[2];

		DestroyDynamicPickup(HousePickup[Hid]);
        Delete3DTextLabel(HouseLabel[Hid]);
        //DestroyDynamicMapIcon(HouseIcon[Hid]);

		/*if(HouseInfo[Hid][hOwned] == 1){

	        HousePickup[Hid] = CreateDynamicPickup(1272, 1, HouseInfo[Hid][hEntranceX],HouseInfo[Hid][hEntranceY],HouseInfo[Hid][hEntranceZ],0, 0, -1, 15.0);

	        format(_slabel, sizeof(_slabel), "[Casa NÂ°%i]", Hid);
	        HouseLabel[Hid] = CreateDynamic3DTextLabel(_slabel, -1, HouseInfo[Hid][hEntranceX], HouseInfo[Hid][hEntranceY], (HouseInfo[Hid][hEntranceZ]+0.75), 30.0, 0, 0);
		} else {
            HousePickup[Hid] = CreateDynamicPickup(1273, 1, HouseInfo[Hid][hEntranceX],HouseInfo[Hid][hEntranceY],HouseInfo[Hid][hEntranceZ],0, 0, -1, 15.0);

	        format(_slabel, sizeof(_slabel), "[Casa NÂ°%i]\n[A VENDA]", Hid);
	        HouseLabel[Hid] = CreateDynamic3DTextLabel(_slabel, -1, HouseInfo[Hid][hEntranceX], HouseInfo[Hid][hEntranceY], (HouseInfo[Hid][hEntranceZ]+0.75), 30.0, 0, 0);
		}*/
		LoadHouseID(Hid);
		format(strx, sizeof(strx), "Voce mudou a casa N: %i para: %s!", Hid, GetPlayerArea( playerid ));
		InfoMSG(playerid, strx);

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s mudou o Casa N: %i de local, novo local: %s, Pos: %f, %f, %f", GetDateEx(), GetName( playerid ), Hid, GetPlayerArea( playerid ), _Sky[0],_Sky[1],_Sky[2]);
    	SLog("AdminCMD.log", STRLOG);
        SaveHouse(Hid);
	}
	return true;
}

CMD:liberarcasa(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_criarcasa) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new	Hid;
	Hid = strval(params);

	if(isnull(params)) return ErroMSG(playerid, "Use: /liberarcasa [id]");

	if(!HouseExist(Hid)) return ErroMSG(playerid, "Casa Invalida/inexistente.");

	if(HouseInfo[Hid][hOwned] != 1 && HouseInfo[Hid][hOwned] != 3) return ErroMSG(playerid, "Esta casa nao tem um morador.");

    HouseInfo[Hid][hOwned] = 0;
	DestroyDynamicPickup(HousePickup[Hid]);
    Delete3DTextLabel(HouseLabel[Hid]);
    //DestroyDynamicMapIcon(HouseIcon[Hid]);

	strmid(HouseInfo[Hid][hOwner], "Ninguem", 0, strlen("Ninguem"), 255);
    SaveHouse(Hid);

	/*HousePickup[Hid] = CreateDynamicPickup(1273, 1, HouseInfo[Hid][hEntranceX],HouseInfo[Hid][hEntranceY],HouseInfo[Hid][hEntranceZ],0, 0, -1, 15.0);
    format(_slabel, sizeof(_slabel), "[Casa NÂ°%i]\n[A VENDA]", Hid);
    HouseLabel[Hid] = CreateDynamic3DTextLabel(_slabel, -1, HouseInfo[Hid][hEntranceX], HouseInfo[Hid][hEntranceY], (HouseInfo[Hid][hEntranceZ]+0.75), 30.0, 0, 0);
*/
    LoadHouseID(Hid);

	format(strx, sizeof(strx), "Voce Liberou a casa NÂ°%i !", Hid);
	InfoMSG(playerid, strx);

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s liberou a Casa NÂ° %i ", GetDateEx(), GetName( playerid ), Hid);
	SLog("AdminCMD.log", STRLOG);
	return true;
}

CMD:deletarcasa(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_criarcasa) return 0;
	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		Hid
	;
	Hid = strval(params);

	if(isnull(params)) return ErroMSG(playerid, "Use: /deletarcasa [id]");

	if(!HouseExist(Hid)) return ErroMSG(playerid, "Casa Invalida/inexistente.");
	if(HouseInfo[Hid][hOwned] == 1) return ErroMSG(playerid, "Esta casa tem um morador.");
	if(HouseInfo[Hid][hOwned] == 3) return ErroMSG(playerid, "Esta casa ja se encontra deletada.");

    HouseInfo[Hid][hOwned] = 3;
    HouseInfo[Hid][hLocked] = 1;

	DestroyDynamicPickup(HousePickup[Hid]);
    Delete3DTextLabel(HouseLabel[Hid]);

	strmid(HouseInfo[Hid][hOwner], "Ninguem", 0, strlen("Ninguem"), 255);
    SaveHouse(Hid);

	format(strx, sizeof(strx), "Voce deletou a casa NÂ° %i !", Hid);
	InfoMSG(playerid, strx);

    format(strx, sizeof strx, "Admin CMD: %s deletou a casa NÂ° %i", GetName( playerid ), Hid);
	SendAdminMessage(Purple, strx);

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s deletou a Casa NÂ° %i ", GetDateEx(), GetName( playerid ), Hid);
	SLog("AdminCMD.log", STRLOG);
	return true;
}

CMD:criarcasa(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_criarcasa)
	    return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static
	    preco, interior, viphouse,
	    Float:CPos[ 3 ]
	;

	if(sscanf(params, "ddd", preco, interior, viphouse)) return ErroMSG(playerid, "Use: /criarcasa [Preço] [InteriorID] [vip 1 sim] (/houseint)");

	GetPlayerPos( playerid, CPos[ 0 ], CPos[ 1 ], CPos[ 2 ] );

	if(interior > (sizeof(InteriorHouse)-1) || 1 > interior) return ErroMSG(playerid, "Interior invalido /houseint");
	if(viphouse != 1 && viphouse != 0) return ErroMSG(playerid, "Valor casa vip deve variar entre 1 e 0 apenas!");

	CreateNewHouse(playerid, CPos[ 0 ], CPos[ 1 ], CPos[ 2 ], preco, interior, viphouse);

    return true;
}

CMD:darmaterial(playerid, params[]) {

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new value;
	sscanf(params, "d", value);
	PlayerInfo[playerid][pMateriais] += value;
	format(strx, sizeof(strx), "Total de Materiais: %d", PlayerInfo[playerid][pMateriais]);
	SendClientMessage(playerid, C_ERROR, strx );
	// new orgid, value;
	// if(sscanf(params, "dd", orgid, value)) return ErroMSG( playerid, "Modo correto de uso: /darmaterial [ID_DA_ORGANIZAÐaO] [QUANTIDADE]");
	// if(orgid > 28 || orgid < 1) return ErroMSG( playerid, "[Comando /darmaterial] Voce informou o ID de uma organizaçao inexistente");
	// if(materiais[PlayerInfo[playerid][pOrg]] < value) return ErroMSG( playerid, "[Comando /darmaterial] Voce nao possui essa quantia de materiais");
	// if(value <= 0 || value > 1000) return ErroMSG( playerid, "[Comando /material] Informe um valor de materiais valido. (1 a 1000)");
	// materiais[orgid] += value;
	// materiais[PlayerInfo[playerid][pOrg]] -= value;
	// format(str, sizeof(str), "# Voce vendeu com sucesso %d materiais para a organizaçao %s", value, nomeOrgs[orgid]);
	// SendClientMessage(playerid, C_OFICIAL, strx );
	return 1;
}

/* Teste*/
CMD:netstatus(playerid)
{
    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		stats[400+1]
	;
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
	ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "My NetworkStats", stats, "Okay", "");
	return true;
}

CMD:setskin( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_setskin) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		id,
		skin
	;
	if(sscanf(params, "dd", id, skin)) return ErroMSG(playerid, "Use:: /setskin [ id ] [Skin iD]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente");
	if(skin < 0 || skin > 299) return ErroMSG(playerid, "O ID da skin deve ser entre 0 e 299");

	PlayerInfo[id][pSkin] = skin;
	SetPlayerSkinEx(id, skin);

	format(strx, sizeof(strx), ""#SERVELOGO" Voce alterou a skin de %s para %d", GetName(id), skin);
	SendClientMessage(playerid, C_ADMIN, strx );
	format(strx, sizeof(strx), ""#SERVELOGO" Sua skin foi alterada para skin ID: %d por %s", skin, GetName(playerid));
	SendClientMessage(id, -1, strx );
	return 1;
}
CMD:tapa( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_tapa) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new
		id
	;
	if( sscanf(params, "u", id) )
	return ErroMSG(playerid, "Modo correto de uso: /tapa [ id do jogador ]" );

	if( !PlayerInfo[id][pLogger] )
	return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente" );

	else
	{
		TapaFor(id, 10);
        PlaySoundForPlayer(id, 1190);
		format( strx, sizeof(strx), ""#SERVELOGO" Voce deu um tapa no jogador %s", GetName(id) );
		SendClientMessage( playerid, C_ADMIN, strx );
		format( strx, sizeof(strx), ""#SERVELOGO" Voce levou um tapa do Admin %s", GetName(playerid) );
		SendClientMessage( id, C_ADMIN, strx );
	}
	return 1;
}

CMD:explodirp( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_explodirp) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new
		id
	;
	if( sscanf(params, "u", id) )
	return ErroMSG(playerid, "Modo correto de uso: /explodirp [ id do jogador ]" );

	if( !PlayerInfo[id][pLogger] )
	return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente" );

	else
	{
		ExplodirPlayer(playerid);
		format( strx, sizeof(strx), ""#SERVELOGO" Voce Explodiu o jogador %s", GetName(id) );
		SendClientMessage( playerid, C_ADMIN, strx );
		format( strx, sizeof(strx), ""#SERVELOGO" Voce foi explodido pelo Admin %s", GetName(playerid) );
		SendClientMessage( id, C_ADMIN, strx );
	}
	return 1;
}


CMD:repararid( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_repararid) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new
		id
	;
	if( sscanf(params, "d", id) )
	return ErroMSG(playerid, "Modo correto de uso: /repararid [ID_DO_JOGADOR]" );
	if( !PlayerInfo[id][pLogger] )
	return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente" );
	if( !IsPlayerInAnyVehicle(id) )
	return ErroMSG(playerid, "O jogador informado nao esta em um veiculo" );
	else {

		RepairVehicle(GetPlayerVehicleID(id));
		format( strx, sizeof(strx), ""#SERVELOGO" Voce reparou o carro de %s", GetName(id) );
		SendClientMessage( playerid, C_ADMIN, strx );
		SendClientMessage( id, C_ADMIN, ""#SERVELOGO" Seu carro foi reparado" );
	}
	return 1;
}

CMD:reparar( playerid ) {
	if(PlayerInfo[playerid][pAdmin] < comando_repararid) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(!IsPlayerInAnyVehicle( playerid ) ) return ErroMSG(playerid, "Voce precisa estar em um veiculo" );
	else
	{
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage( playerid, -1, ""#SERVELOGO" Seu carro foi reparado" );
	}
	return 1;
}

CMD:virar( playerid ) {
	if(PlayerInfo[playerid][pAdmin] < comando_virar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(!IsPlayerInAnyVehicle( playerid ) ) return ErroMSG(playerid, "Voce precisa estar em um veiculo" );
	else
	{
		FlipCarid(GetPlayerVehicleID(playerid));
		SendClientMessage( playerid, -1, "| SERVER | - Seu carro foi virado." );
	}
	return 1;
}
//	=================================================
//	@revisao:	01/12/12
//	-------------------------------------------------
CMD:setar( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_setar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new
		id
	;
	if( sscanf(params, "u", id) ) return ErroMSG(playerid, "Modo correto de uso: /setar [ id ]" );
	else if( !PlayerInfo[id][pLogger] ) return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente" );
	else if( PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin] ) return ErroMSG(playerid, "Voce nao pode usar este comando em membros da equipe com cargo superior ao seu" );
	else {
		format( strx, sizeof(strx), "Voce setou o jogador %s para seu local de nascimento", GetName(id) );
		SendClientMessage( playerid, C_ADMIN, strx );
		SendClientMessage( id, C_ADMIN, ""#SERVELOGO" Voce foi teleportado para seu local de nascimento" );
		SpawnPlayer(id);
	}
	return 1;
}

CMD:votacao(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_votacao) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
	    pergunta[ 30 ]
	;
	if(sscanf(params, "s[30]", pergunta)) return ErroMSG(playerid, "Use: /votacao [pergunta]");
	if(!Votacao[iniciada])
	{
		Votacao[iniciada] = true;
		Votacao[sim] = 0;
		Votacao[nao] = 0;

		ClearChatboxToAll(3);
		SendClientMessageToAll(Laranja, "|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|");
		format(strx, sizeof strx, "Pergunta: %s", pergunta);
		SendClientMessageToAll(VerdeClaro, strx);

		SendClientMessageToAll(Laranja, "---------------------------------------------");
		SendClientMessageToAll(0xa5b1A3AA, "--> Se voce concorda digite: 'sim'");
		SendClientMessageToAll(0xa5b1A3AA, "--> Se voce descorda digite: 'nao'");
		SendClientMessageToAll(Laranja, "---------------------------------------------");

		GameTextForAll("~r~Enquete ~p~Iniciada!", 6000, 3);

		ForPlayers( i )
		{
			Votou[ i ] = false;
		}
	}
	else
	{
		ErroMSG(playerid, "Ja existe uma votaçao em andamento!");
	}
	return true;
}

CMD:encerrar( playerid )
{
	if(PlayerInfo[playerid][pAdmin] < comando_votacao) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

    if(Votacao[iniciada])
	{
		SendClientMessageToAll(Laranja, "|_________ {FFFFFF}RESULTADO {FF6600}_________|");
		format(strx, sizeof(strx), "{FF0000}{FFFFFF}Resultado: %s", Votacao[sim] == Votacao[nao] ? ("{FF0000}Empate"): Votacao[sim] > Votacao[nao] ? ("{a5b1A3}A maioria votou em Sim"): Votacao[sim] < Votacao[nao] ? ("{a5b1A3}A maioria votou em nao"):("GL"));
		SendClientMessageToAll(-1, strx);

		format(strx, sizeof strx, "%d jogador(es) votaram em sim.", Votacao[sim]);
		SendClientMessageToAll(0xa5b1A3AA, strx);

		format(strx, sizeof strx, "%d jogador(es) votaram em nao.", Votacao[nao]);
		SendClientMessageToAll(0xa5b1A3AA, strx);

		format(strx, sizeof strx, "Esta enquete teve {FF6600}%d {FFFFFF}votos!",Votacao[total]);
		SendClientMessageToAll(Branco, strx);

		Votacao[iniciada] = false;
		Votacao[sim] = 0;
		Votacao[nao] = 0;
		Votacao[total] = 0;

  		ForPlayers( i )
		{
			Votou[i] = false;
		}

		SendClientMessageToAll(Laranja, "|_____________________________|");
		GameTextForAll("~r~Votacao ~r~encerrada!", 6000, 3);
	}
	else
	{
		ErroMSG( playerid, "Nao existe nenhuma votaçao em andamento...");
	}
	return true;
}

CMD:desbugar( playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_desbugar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		id
	;
	if( sscanf(params, "u", id) ) return ErroMSG(playerid, "use: /desbugar [ id ]" );
	if( !PlayerInfo[id][pLogger] ) return ErroMSG(playerid, "Voce informou o ID de um jogador inexistente" );

    format( strx, sizeof(strx), "Voce desbugou o jogador %s !", GetName(id) );
	SendClientMessage( playerid, C_ADMIN, strx );
	SendClientMessage( id, C_ADMIN, ""#SERVELOGO" Voce foi desbugado" );

    DesbugPlayer( id );
	return true;
}

CMD:sethora(playerid, params[]){
    if(PlayerInfo[ playerid ][ pAdmin ] < comando_sethora) return 0;
    if(PlayerInfo[ playerid ][pAWork] != 1 && PlayerInfo[ playerid ][pAdmin] < MAX_ADM_LEVEL)
	    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(strval(params) > sizeof(Horarios)) return ErroMSG(playerid, "Horario nao permitido.");

    Hora_Servidor = strval(params);

	TempoServidor();

	static str[ 150 ];
    format( str, sizeof(str), "| Servidor | %s Admin %s mudou o horario do servidor para %i horas", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid), strval(params));
	SendAdminMessage(cadm, str );
	return true;
}


CMD:tempo(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < comando_tempo) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		tid
	;

	if( sscanf(params, "d", tid) ) return ErroMSG(playerid, "use: /tempo [ id ]" );

	if(tid < 0|| tid > 45) return ErroMSG(playerid, "Tempo varia entre 0 e 45");

	SetWeather( tid );

	static str[129];
	format(str, sizeof(str), "| Servidor | %s %s mudou o clima do servidor para: %i", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O Administrador"):("A Administradora"), GetNameEx( playerid ), tid);
	SendClientMessageToAll(cadm, str);
	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s Mudou o tempo do servidor para %d ", GetDateEx(), GetName(playerid), tid);
    SLog("AdminCMD.log", STRLOG);

	return true;
}

CMD:kita( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_kita) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	GivePlayerWeaponEx(playerid, 46, 1);
	GivePlayerWeaponEx(playerid, 24, 99999);
	GivePlayerWeaponEx(playerid, 31, 99999);
	GivePlayerWeaponEx(playerid, 29, 99999);
	GivePlayerWeaponEx(playerid, 25, 99999);
	GivePlayerWeaponEx(playerid, 27, 99999);
	GivePlayerWeaponEx(playerid, 4, 1);
	GivePlayerWeaponEx(playerid, 34, 99999);
	GivePlayerWeaponEx(playerid, 42, 99999);
	return 1;
}

CMD:congelar(playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_congelar) return 0;

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new id;
	id = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /congelar [id]!");
	if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");
	if(id != INVALID_PLAYER_ID){
	    if(PlayerInfo[ id ][ pAdmin ] > PlayerInfo[ playerid ][ pAdmin ]) return ErroMSG(playerid, "Voce nao pode congelar um Admin !");

        Freeze( id );
	    InfoMSG(playerid, "Congelado com Sucesso!");

     	format(strx, sizeof(strx), ""#SERVELOGO" O(a) Admin %s (%d) Congelou voce", GetName(playerid), playerid);
		SendClientMessage( id, -1, strx);
	}
	return true;
}

CMD:descongelar(playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_congelar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new id;
	id = strval(params);
	if(isnull(params)) return ErroMSG(playerid, "Use: /descongelar [id]!");
	if(!IsPlayerConnected(id)) return ErroMSG(playerid, "Player nao conectado!");
	if(id != INVALID_PLAYER_ID){
        if(PlayerInfo[ id ][ pAdmin ] > PlayerInfo[ playerid ][ pAdmin ]) return ErroMSG(playerid, "Voce nao pode congelar um Admin !");

	    UnFreeze( id );
	    InfoMSG(playerid, "Descongelado com Sucesso!");

	    format(strx, sizeof(strx), ""#SERVELOGO" O(a) Admin %s (%d) Descongelou voce", GetName(playerid), playerid);
		SendClientMessage( id, -1, strx);
	}
	return true;
}

CMD:health( playerid ) return SetPlayerVida(playerid, PlayerInfo[ playerid ][ pVida ]);
CMD:forcespawn( playerid ) return SpawnPlayer( playerid );

CMD:darweapon(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_congelar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new id, idarma;

	if(sscanf(params, "ud", id, idarma)) return ErroMSG(playerid, "Use: /darweapon [id] [ Arma-id ]");

    if(!IsValidWeapon(idarma)) return ErroMSG(playerid, "Arma invalida!");

    SetPlayerArma(id, idarma, 500);

	SCM(playerid, Verde, "Comando Efetuado com sucesso!");
	return true;
}

CMD:vida(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_vida) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
	    id, Float:quantidade
	;
	if(sscanf(params, "uf", id, quantidade)) return ErroMSG(playerid, "Use: /vida [id] [Quantidade]");
    if(quantidade < 1.0 || quantidade > 100.0) return ErroMSG(playerid, "Use valores entre 1.0 e 100.0");

	if(IsPlayerConnected( id ))
	{
		SetPlayerVida( id, quantidade);

		format(strx, sizeof(strx), ""#SERVELOGO" O(a) Admin %s (%d) alterou sua vida para: %0.2f", GetName(playerid), playerid, quantidade);
		SendClientMessage( id, -1, strx);

		SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
	}
	else
	{
		ErroMSG(playerid, "Jogador nao conectado!");
	}
	return true;
}

CMD:colete(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_colete) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
	    id, Float:quantidade
	;
	if(sscanf(params, "uf", id, quantidade)) return ErroMSG(playerid, "Use: /colete [id] [Quantidade]");
    if(quantidade < 0.0 || quantidade > 100.0) return ErroMSG(playerid, "Use valores entre 0.0 e 100.0");

	if(IsPlayerConnected( id ))
	{
		SetPlayerColete( id, quantidade);

		format(strx, sizeof(strx), ""#SERVELOGO" O(a) Admin %s (%d) alterou seu colete para: %02f", GetName(playerid), playerid, quantidade);
		SendClientMessage( id, -1, strx);

		SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
	}
	else
	{
		ErroMSG(playerid, "Jogador nao conectado!");
	}
	return true;
}


CMD:contar( playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_contar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
    static
		tempo,
		str[ 129 ]
	;

	if(sscanf(params, "d", tempo)) return ErroMSG(playerid, "Use: /contar [ segundos ]");

	format(str, 129, "%s Admin %s iniciou uma contagem global de %s", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), PlayerInfo[ playerid ][ pName ], Convert(tempo, 1));
	CreateCountdown(tempo, 1);
	return true;
}

CMD:av( playerid, params[] )
{
	new
		texto[ 129 ]
	;

	if(PlayerInfo[playerid][pAdmin] < comando_av) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");


	if( sscanf(params, "s[128]", texto) )
	{
		ErroMSG( playerid, "Modo de uso correto do comando: /av [ mensagem ]" );
	}
	else
	{
		format( strx, sizeof( strx ), "%s", texto );

		ClearChatboxToAll(1);
		SendClientMessageToAll( Branco, ADMAVISO );
		SendClientMessageToAll( Branco, strx );
	}
	return 1;
}

CMD:a( playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_a) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
    static
		texto[ 100 ],
		str[ 150 ]
	;

	if(sscanf(params, "s[100]", texto)) return ErroMSG(playerid, "Use: /a [texto]");

	if(strlen(texto) > 100) return ErroMSG(playerid, "texto muito longo, diminua em partes!");

	format(str, sizeof(str), "{97BBD3}(>) - [%s] %s: %s", adminInfo[PlayerInfo[ playerid ][ pAdmin ]], GetName(playerid), texto);
	SCMALL(str);
	return true;
}

CMD:part( playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_part) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
    static
		texto[ 100 ],
		str[ 150 ],
		id
	;

	if(sscanf(params, "us[100]", id, texto)) return ErroMSG(playerid, "Use: /part [id] [texto]");

	if(strlen(texto) > 100) return ErroMSG(playerid, "texto muito longo, diminua em partes!");

    SCM(playerid, -1, "{E1EF76}(>) - Particular enviada com sucesso!");
	format(str, sizeof(str), "{E1EF76}Particular: %s: %s", GetName(playerid), texto);
	SCM(id, -1, str);

	PlaySoundForPlayer(id, 1150);
	return true;
}

CMD:ann( playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_ann) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
    static
		texto[ 64 ],
		str[ 100 ]
	;

	if(sscanf(params, "s[64]", texto)) return ErroMSG(playerid, "Use: /ann [texto]");

	format(str, sizeof(str), "~w~%s", texto);
	GameTextForAll(str, 5000, 3);
	return true;
}

CMD:cnn( playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_ann) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
    new
		texto[ 64 ],
		tmp[100]
	;

	if(sscanf(params, "s[64]", texto)) return ErroMSG(playerid, "Use: /cnn [texto]");

	if(strlen(texto) > 63) return ErroMSG(playerid, "Escreva menssagens com ate 63 caracteres!");

	ForPlayers(i){
	    if(PlayerInfo[i][pLogger]){
	        if(Anuncios != Text:INVALID_TEXT_DRAW)
			{
				format( tmp, sizeof( tmp ), "~w~GL ~r~Aviso ~w~: %s", texto);
				TextDrawSetString(Anuncios, tmp );
			}
			TextDrawShowForPlayer(i, Anuncios);
			SetTimerEx("HideTextAnuncio", TMinutos(1), false, "i", i);
		}
	}
	return true;
}

CMD:calar(playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_calar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");
	new
	    id,
		Motivo[ 64 ]
	;

	if(sscanf(params, "us[63]", id, Motivo)) return ErroMSG(playerid, "Use: /calar [id] [motivo]");

    if(PlayerInfo[ id ][ pBlockchat ] == true){
    	PlayerInfo[ id ][ pBlockchat ] = false;
        PlayerInfo[ id ][ pBlockTemp ] = 0;

		format(strx, sizeof(strx), "O Player %s foi descalado pelo Admin %s", GetName( id ), GetName( playerid ));
		SendClientMessageToAll(Amarelo, strx);
		SLog("AdminCMD.log", strx);
	}
	else{
	    PlayerInfo[ id ][ pBlockchat ] = true;

		format(strx, sizeof(strx), "O Player %s foi Calado pelo Admin %s, Motivo: %s", GetName( id ), GetName( playerid ), Motivo);
		SendClientMessageToAll(Amarelo, strx);
		SLog("AdminCMD.log", strx);
	}
	return true;
}

CMD:ausentarme( playerid ){
    if(PlayerInfo[playerid][pAdmin] < comando_ausentarme) return 0;
    if( PlayerInfo[playerid][pAWork] == 3){
    	format(strx, sizeof(strx), "O %s %s saiu do modo Ausente /admins para detalhes", adminInfo[PlayerInfo[playerid][pAdmin]], GetName( playerid ));
        InfoMSGToAll(strx);

        PlayerInfo[playerid][pAWork] = GetPVarInt(playerid, "UltimoEstado");
        SetPlayerVirtualWorld(playerid, 0);

        UnFreeze( playerid );
	}
    else
    {
        SetPVarInt(playerid, "UltimoEstado", PlayerInfo[playerid][pAWork]);

		format(strx, sizeof(strx), "O %s %s entrou em modo Ausente /admins para detalhes", adminInfo[PlayerInfo[playerid][pAdmin]], GetName( playerid ));
        InfoMSGToAll(strx);

		PlayerInfo[playerid][pAWork] = 3;
        SetPlayerVirtualWorld(playerid, 1);
		SetCameraBehindPlayer(playerid);
		Freeze( playerid );
    }
	return true;
}

forward AceitarMortePQP(playerid);

public AceitarMortePQP(playerid){
    TempoMortePQP[playerid] = 1;

    return 1;
}
//copiar onplayerdeath tambem
//Sistema de Morte atualizado
CMD:aceitarmorte(playerid, params[])
{
    //if((gettime() - timeOfDeath[playerid]) < 60) return SendClientMessage(playerid, -1, "VocÐº deve esperar Um Minuto para aceitar sua morte");
    if(TempoMortePQP[playerid] == 0) return SendClientMessage(playerid, -1, "Você deve esperar Um Minuto para aceitar sua morte");


    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z);

    /*if(PedMorto[playerid] == 1)
    PedMorto[playerid] = 0;*/

    TempoMortePQP[playerid] = 0;

    PlayerInfo[ playerid ][ pHospitalizado ] = 1;
    PlayerInfo[ playerid ][ pHospTemp ] = 120;//RandomEx(40, 75);

    PlayerInfo[ playerid ][ Morreu ] = true;

    fadeIn(playerid, 3000);
    //TextDrawHideForPlayer(playerid, Textdraw0);
    return 1;
}
/*
CMD:reviver(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < comando_reviver) return SendClientMessage(playerid, -1, "VocÐº nÐ³o Ð¹ Administrador!"); // Substitua por sua variÐ±vel de Admin
    if(sscanf(params, "u", text)) return SendClientMessage(playerid, -1, "SINTAXE: /reviver [ID]");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z);
	if(PedMorto[playerid] == 1)
	PedMorto[playerid] = 0;
	SetPlayerHealth(playerid, 100);
	return 1;
}*/


new TraProibido[MAX_PLAYERS];

CMD:tra( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_administrar) return 0;
	/**
	*	Trabalhando
	*/
	if( !PlayerInfo[playerid][pAWork] ) {
		PlayerInfo[playerid][pAWork] = 1;
		format( strx, sizeof(strx), "%s %s {15EABA}%s{ffffff} esta agora {15EABA}trabalhando{ffffff}.",
		PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), adminInfo[PlayerInfo[ playerid ][ pAdmin]], GetName(playerid) );

		SetPVarInt(playerid, "beforeWorkSkin", GetPlayerSkin(playerid));
		if(PlayerInfo[playerid][pSex] == 1){
			SetPlayerSkinEx(playerid, 217);
		}
		else SetPlayerSkinEx(playerid, 211);
		VidaADM[playerid] = SetTimerEx("VidaInfinitaADM", 10 , true, "d", playerid);

		SetPlayerColor(playerid, C_ADMIN);

        if(PlayerInfo[playerid][pAdmin] < 5){
            SendClientMessage(playerid, -1, "Voce ficara proibido de sair do modo trabalho por 30 minutos!");

            TraProibido[playerid] = 1;
            SetTimerEx("SairModoTra", 1000*60*30, false, "d", playerid);
        }    
        if(PlayerInfo[playerid][pAdmin] == 8){
            SendClientMessage(playerid, -1, "Cargo Fundador detectado! Voce ficaria com dinheiro infinito ate que saia do modo trabalho!");

            DinheiroAntesTrab[playerid] = GetPlayerMoney(playerid);

            GivePlayerMoney(playerid, 99999999);
        }


	}
	else if( PlayerInfo[playerid][pAWork] ) {

        if(TraProibido[playerid] == 1)
            return SendClientMessage(playerid, -1, "Voce esta proibido de sair do modo trabalho por 30 minutos.");

        if(PlayerInfo[playerid][pAdmin] == 8){

            ResetPlayerMoney(playerid);

            GivePlayerMoney(playerid, DinheiroAntesTrab[playerid]);

        }

		SetPlayerColor(playerid, Branco);
		SetPlayerSkinEx( playerid, GetPVarInt(playerid, "beforeWorkSkin") );
		ResetPlayerWeapons(playerid);
		KillTimer(VidaADM[playerid]);
		PlayerInfo[playerid][pAWork] = 0;

		format( strx, sizeof(strx), "%s %s {15EABA}%s{ffffff} esta agora {15EABA}Jogando{ffffff}.",
		PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), adminInfo[PlayerInfo[ playerid ][ pAdmin]], GetName(playerid) );
	}
	SendClientMessageToAll( Branco, strx );
	return 1;
}

forward SairModoTra(playerid);

public SairModoTra(playerid){

    TraProibido[playerid] = 0;
    return 1;
}

forward VidaInfinitaADM(playerid);
public VidaInfinitaADM(playerid)
{
	SetPlayerHealth(playerid,99999);
	SetPlayerArmour(playerid,99999);
	return 1;
}

CMD:vidacheck(playerid, params[]){
	static id;

    if( PlayerInfo[playerid][pAdmin] < comando_vidacheck ) return 0;
	if( sscanf(params, "u", id) ) return ErroMSG( playerid, "Use: /vidacheck [id]" );
	if( !PlayerInfo[id][pLogger] ) return ErroMSG( playerid, "player id invalido!" );

    static str[ 129 ], Float:health;

    health = PlayerInfo[ id ][ pVida ];
    SetPlayerVida(id, (health-5));

    SetTimerEx("PlayerHealthHack", TSegundos(2), false, "dd", playerid, id);

	format(str, sizeof(str), "{FEDD8B}<!> - Voce esta realizando um teste de Healt-Hack em %s - [%f]", GetName(id), health);
	SCM(playerid, -1, str);
	return true;
}

CMD:espec(playerid, params[]){
	new
		id,
	    Float:xPoS[3]
	;

    if( PlayerInfo[playerid][pAdmin] < comando_espectate ) return 0;
	if( sscanf(params, "u", id) ) return ErroMSG( playerid, "Use: /espec [id]" );
	if( !PlayerInfo[id][pLogger] )	return ErroMSG( playerid, "player id invalido!" );
	if( PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin] ) return ErroMSG( playerid, "Voce nao pode usa este comando em membros da equipe com cargo superior ao seu" );
	if(Espectype[ playerid ]) return ErroMSG( playerid, "Voce ja esta espectando alguem use: /sairespec" );

	GetPlayerPos(playerid, xPoS[0], xPoS[1], xPoS[2]);
    UPosEspec[ playerid ][0] = xPoS[0];
	UPosEspec[ playerid ][1] = xPoS[1];
	UPosEspec[ playerid ][2] = xPoS[2];
	UPosInt[ playerid ] = GetPlayerInterior(playerid);
	UPosVirt[ playerid ] = GetPlayerVirtualWorld(playerid);
	PlayerEspec[ playerid ] = id;
	EstavaEspectando[ playerid ] = true;


	TogglePlayerSpectating(playerid, true);


    SetPlayerInterior(playerid, GetPlayerInterior(id));

	if(IsPlayerInAnyVehicle(id))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
		Espectype[ playerid ] = ADMIN_SPEC_TYPE_VEHICLE;
	}
	else
	{
        Espectype[ playerid ] = ADMIN_SPEC_TYPE_PLAYER;
		PlayerSpectatePlayer(playerid, id);
	}
	static str[ 129 ];
	format( str, sizeof(str), "{D5F17A}<!> %s esta em modo espectador em: %s !", GetName(playerid), GetName(id));
	SendAdminMessage( -1, str);

	PlaySoundForPlayer(playerid, 1057);
	return true;
}

CMD:sairespec( playerid ){
    if( PlayerInfo[playerid][pAdmin] < comando_espectate ) return 0;
	if(!Espectype[ playerid ]) return ErroMSG( playerid, "Voce nao esta em modo espectador" );

    TogglePlayerSpectating(playerid, false);
	PlayerEspec[ playerid ] = INVALID_PLAYER_ID;
	Espectype[ playerid ] = 0;
	SCM(playerid, -1, "{AABEC3}Voce saiu do modo espectador!");
	return true;
}

CMD:informacoesacc( playerid, params[] ) {

	new conta[ MAX_PLAYER_NAME ];

    if( PlayerInfo[playerid][pAdmin] < comando_infoaccount ) return 0;
	if( sscanf(params, "s[22]", conta) ) return ErroMSG( playerid, "Use: /informacoesacc [nick/nome]");

    static cFile[100];
	format(cFile, 100, PASTA_CONTAS, conta);

    if(!DOF2_FileExists(cFile)) return ErroMSG(playerid, "Esta conta nao existe no diretorio!");

	static
		str[ 129 ],
		admin,
		level,
		vip,
		viptemp,
		ultimologin[ 50 ]
	;

	format( ultimologin, sizeof(ultimologin), "%s", DOF2_GetString(cFile, "LastLogin"));
	level = DOF2_GetInt(cFile, "Level");
	admin = DOF2_GetInt(cFile, "Admin");
	vip = DOF2_GetInt(cFile, "VIP");
	viptemp = DOF2_GetInt(cFile, "TempoVip");

	new ExpireIn = viptemp;
    new TempoConvert = (ExpireIn-gettime())+gettime();

	new box[ 300 ];

	strcat(box, "{800080}|___________________________|\n");
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Conta: %s\n", conta);
	strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Ultimo login: %s\n", ultimologin);
	strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Admin: %s\n", adminInfo[admin]);
	strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Vip: %s\n", vip == 1 ? ("sim"):("nao"));
	strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Vip tempo: %s\n", timec(TempoConvert));
	strcat(box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Level: %i\n", level);
	strcat(box, str);
	strcat(box, "\n\n#Construindo!\n");
	strcat(box, "{800080}|___________________________|");

	ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	"Informaçoes da conta", box, "Confirmar", "");

	return true;
}

CMD:deletaracc( playerid, params[] ) {

	new conta[ MAX_PLAYER_NAME ], razao[ 100 ];

    if( PlayerInfo[playerid][pAdmin] < comando_deletaracc ) return 0;
	if( sscanf(params, "s[22]s[100]", conta, razao) ) return ErroMSG( playerid, "Use: /deletaracc [nick/nome] [ motivo ]" );
	if(strlen(razao) > 99) return ErroMSG( playerid, "Motivo muito longo!" );

	DeleteAccount(playerid, conta, razao);
	return true;
}

DeleteAccount(playerid, nick[], motivo[]){

    static cFile[100];
	format(cFile, 100, PASTA_CONTAS, nick);

    if(!DOF2_FileExists(cFile)) return ErroMSG(playerid, "Esta conta nao existe no diretorio!");

	new id = GetPlayerID(nick);

	if(id != -1){
		SCM(id, -1, "Sua conta foi deletada por um administrador, em caso de engano, tire uma print 'F8' e reporte em nosso forum !");
		Kick(id);
	}
    DOF2_RemoveFile(cFile);

	static str[ 129 ];
	format(str, sizeof(str), "{FEDD8B}<!> - [%s] - %s deletou a conta %s motivo: %s", GetDateEx(), GetName(playerid), nick, motivo);
	SendAdminMessage(-1, str);
	format(STRLOG, sizeof(STRLOG), "[%s] %s deletou a conta %s motivo: %s.", GetDateEx(), GetName(playerid), nick, motivo);
	SLog("ContasRemovidas.log", STRLOG);
	return true;
}

CMD:banaviso( playerid, params[] ) {

	new
		id,
		reason[ 64 ],
		str[ 129 ]
	;

	if( PlayerInfo[playerid][pAdmin] < comando_avisarban ) return 0;
	if( sscanf(params, "us[64]", id, reason) ) return ErroMSG( playerid, "Use: /banaviso [ id ] [ motivo ]" );
	else if( !PlayerInfo[id][pLogger] )	return ErroMSG( playerid, "Player inexistente" );
	else if( PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin] ) return ErroMSG( playerid, "Voce nao pode usa este comando em membros da equipe com cargo superior ao seu" );
	else
	{
        format(STRLOG, sizeof STRLOG, "[%s] %s Admin %s deu aviso de ban em %s, Motivo: %s!", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetDateEx(), GetName(playerid), GetName( id ), reason);
		SLog("BanAvisos.log", STRLOG);
		PlayerInfo[id][BanAviso]++;

        format( str, sizeof(str), "| Servidor | %s Admin %s deu um aviso de Ban em %s, Motivo: %s  (%i/3)", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid), GetName(id), reason, PlayerInfo[id][BanAviso] );
		SendAdminMessage(cadm, str );

		if(PlayerInfo[id][BanAviso] >= 3){

			format( str, sizeof(str), "{33AAFF}| Servidor | %s %s foi %s, Motivo: Tres Avisos de Ban.", PlayerInfo[id][pSex] == 1 ? ("O jogador"): ("A jogadora"), GetName(id), PlayerInfo[id][pSex] == 1 ? ("banido"): ("banida"));
			SCMALL(str);

			format(STRLOG, sizeof STRLOG, "[%s] %s foi banido, Motivo: Tres Avisos de Ban.", GetDateEx(), GetName( id ));
			SLog("Ban.log", STRLOG);

    		BanPlayer( id, -1, "Tres Avisos de Bans");

		}
		else
		{
			format( str, sizeof(str), "| Servidor | %s Admin %s te deu um aviso de Ban, Motivo: %s  (%i/3)", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid), reason, PlayerInfo[id][BanAviso] );
			SCM( id, cadm, str );
		}
		OnSalvarDados( id );
	}
	return 1;
}

CMD:avisar( playerid, params[] ) {

	new
		id,
		reason[ 64 ],
		str[ 129 ]
	;

	if( PlayerInfo[playerid][pAdmin] < comando_avisar ) return 0;
	if( sscanf(params, "us[64]", id, reason) ) return ErroMSG( playerid, "Use: /avisar [ id ] [ motivo ]" );
	else if( !PlayerInfo[id][pLogger] )	return ErroMSG( playerid, "Player inexistente" );
	else if( PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin] ) return ErroMSG( playerid, "Voce nao pode usa este comando em membros da equipe com cargo superior ao seu" );
	else
	{
		format(STRLOG, sizeof STRLOG, "[%s] O Admin %s Avisou %s, Motivo: %s!", GetDateEx(), GetName(playerid), GetName( id ), reason);
		SLog("Avisos.log", STRLOG);
		PlayerInfo[id][KickAviso]++;

		format( str, sizeof(str), "| Servidor | %s Admin %s deu um kickaviso em %s, Motivo: %s  (%i/3)", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid), GetName(id), reason, PlayerInfo[id][KickAviso] );
		SendAdminMessage(cadm, str );

		if(PlayerInfo[id][KickAviso] >= 3)
		{
            format( str, sizeof(str), "| Servidor | %s %s foi %s,  Motivo: (3/3)", PlayerInfo[id][pSex] == 1 ? ("O jogador"): ("A jogadora"), GetName(id), PlayerInfo[id][pSex] == 1 ? ("kickado"): ("kickada"));
			SendClientMessageToAll( cadm, str );
			Kick( id );
		}
		else
		{
		    format( str, sizeof(str), "| Servidor | %s %s recebeu um aviso de %s,  Motivo: %s", PlayerInfo[id][pSex] == 1 ? ("O jogador"): ("A jogadora"), GetName(id), GetName(playerid), reason);
			SendClientMessageToAll( cadm, str );
		}
	}
	return 1;
}

CMD:playername( playerid, params[] ) {

	new id;

	if( PlayerInfo[playerid][pAdmin] < comando_kick ) return 0;
	if( sscanf(params, "u", id) ) return ErroMSG( playerid, "Use: /playername [ ID ]" );

	if( !PlayerInfo[id][pLogger] )	return ErroMSG( playerid, "[Comando /kick] Voce informou o ID de um jogador inexistente" );

	format( strx, sizeof(strx), "Jogador: %s ID: %i", GetName(id), id);
	SCM(playerid, Branco, strx );
	return 1;
}

CMD:kick( playerid, params[] ) {

	new
		id,
		reason[ 64 ]
	;

	if( PlayerInfo[playerid][pAdmin] < comando_kick ) return 0;
	if( sscanf(params, "us[64]", id, reason) ) return ErroMSG( playerid, "Modo correto de uso: /kick [ ID ] [MOTIVO]" );
	else if( !PlayerInfo[id][pLogger] )	return ErroMSG( playerid, "Voce informou o ID de um jogador inexistente" );
	else if( PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin] ) return ErroMSG( playerid, "Voce nao pode usa este comando em membros da equipe com cargo superior ao seu." );
	else if(id == playerid) return ErroMSG( playerid, "Voce nao pode kickar voce mesmo." );
	else if( strlen(reason) > 19 ) return ErroMSG( playerid, "[Comando /kick] Digite um motivo menor. Exemplos: Drive By, Cheater, Divulgaçao" );
	else
	{
	    static str[ 129 ];
		format( str, sizeof(str), "| Servidor | %s %s foi %s %s admin %s, Motivo: %s", PlayerInfo[playerid][pSex] == 1 ? ("O jogador"): ("A jogadora"), GetName(id), PlayerInfo[playerid][pSex] == 1 ? ("kickado"): ("kickada"), PlayerInfo[playerid][pSex] == 1 ? ("pelo"): ("pela"), GetName(playerid), reason );
		SendClientMessageToAll( cadm, str );

		format(STRLOG, sizeof STRLOG, "[%s] %s Kickou %s, Motivo: %s!", GetDateEx(), GetName(playerid), GetName( id ), reason);
		SLog("Kick.log", STRLOG);

		Kick( id );
	}
	return 1;
}

CMD:kickall( playerid, params[] ) {

	static reason[ 64 ];

	if( PlayerInfo[playerid][pAdmin] < comando_kickall ) return 0;
	if( sscanf(params, "s[64]", reason) ) return ErroMSG( playerid, "Use: /kickall [ Motivo ]" );

	format( strx, sizeof(strx), "%s Admin %s kickou todos do servidor, Motivo: %s", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid), reason );
	SendClientMessageToAll( cadm, strx );

	ForPlayers( i ){
	    if(PlayerInfo[playerid][pAdmin] < 1){
		    Kick( i );
		}
	}
	format(STRLOG, sizeof STRLOG, "[%s] %s Admin %s Kickou Todos do servidor, Motivo: %s!", GetDateEx(), PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid), reason);
	SLog("Kick.log", STRLOG);

	return 1;
}

CMD:ban( playerid, params[] )
{
	new	id, razao[100];
	if( sscanf(params, "us[99]", id, razao) )
        return SendClientMessage( playerid, -1, ""#SERVELOGO" Modo correto de uso: /ban [ id ] [ motivo ]" );

	if( PlayerInfo[playerid][pAdmin] < comando_ban ) return 0;


    if( !PlayerInfo[id][pLogger] )
		return SendClientMessage( playerid, -1, ""#SERVELOGO" Voce informou o ID de um jogador inexistente" );

	if( PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin] )
		return ErroMSG( playerid, ""#SERVELOGO" Voce nao pode usa este comando em membros da equipe com cargo superior ao seu" );

	static str[ 129 ];
	format( str, sizeof(str), "SERVIDOR - O jogador %s foi BANIDO %s admin %s", GetName(id), PlayerInfo[playerid][pSex] == 1 ? ("pelo"): ("pela"), GetName(playerid));
	SendClientMessageToAll( cadm, str );

	format(STRLOG, sizeof STRLOG, "[%s] %s Baniu %s, Motivo: %s", GetDateEx(), GetName(playerid), GetName( id ), razao);
	SLog("Ban.log", STRLOG);

    BanPlayer( id, playerid, razao);
	return true;
}

CMD:desban( playerid, params[] )
{
	new
		nomebanned[ MAX_PLAYER_NAME ]
	;
	if( PlayerInfo[playerid][pAdmin] < comando_desban ) return 0;

    if( sscanf(params, "s[24]", nomebanned) )
        return SendClientMessage( playerid, -1, "Use: /desban [ nome ]" );

	DesbanPlayer(playerid, DESBAN_NAME, nomebanned);
	return true;
}

CMD:trazer( playerid, params[] ) {
	if( PlayerInfo[playerid][pAdmin] < comando_trazer ) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		id,
		intI,
		tmpcar,
		Float:x,
		Float:y,
		Float:z
	;
	if( sscanf(params, "d", id) ) return ErroMSG( playerid, "Modo de uso correto do comando: /trazer [ id jogador ]" );
	if(PlayerInfo[id][pLogger] != 1) return ErroMSG( playerid, "Voce informou o ID de um jogador inexistente" );
	if(id == playerid) return ErroMSG( playerid, "Voce nao pode trazer ate voce mesmo." );

	GetPlayerPos( playerid, x, y, z );
	intI = GetPlayerInterior(playerid);

    SetPlayerPosEx(id, x,y,z, 0.0, intI);

	if (GetPlayerState(id) == 2) {
		tmpcar = GetPlayerVehicleID(id);
		SetVehiclePos(tmpcar, x,y,z); LinkVehicleToInterior(tmpcar, intI);
		PutPlayerInVehicle(id, tmpcar, 0);
	}

	format(strx, sizeof(strx), ""#SERVELOGO" O(a) Admin %s (%d) puxou voce ate sua posiçao", GetName(playerid), playerid);
	SendClientMessage( id, -1, strx);

	SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
	return 1;
}

//	=================================================
//	@revisao:	01/12/12
//	-------------------------------------------------
CMD:ir( playerid, params[] ) {
	if(PlayerInfo[playerid][pAdmin] < comando_ir) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		id,
		intI,
		tmpcar,
		Float:x,
		Float:y,
		Float:z
	;
	if( sscanf(params, "d", id) )
		return ErroMSG( playerid, "Modo de uso correto do comando: /ir [ ID ]" );

	if( PlayerInfo[id][pLogger] != 1) return ErroMSG( playerid, "Voce informou o ID de um jogador inexistente" );
	if(id == playerid) return ErroMSG( playerid, "Voce nao pode ir ate voce mesmo." );

	GetPlayerPos( id, x, y, z );
	intI = GetPlayerInterior(id);

	SetPlayerPosEx(playerid, x,y,z, 0.0, intI);

	if (GetPlayerState(playerid) == 2) {
		tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, x,y,z); LinkVehicleToInterior(tmpcar, intI);
		PutPlayerInVehicle(playerid, tmpcar, 0);
	}
	format(strx, sizeof(strx), ""#SERVELOGO" O(a) Admin %s (%d) foi ate voce", GetName(playerid), playerid);
	SendClientMessage( id, -1, strx);

	SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
	return 1;
}

//	=================================================
//	@revisao:	01/12/12
//	-------------------------------------------------
CMD:irpara( playerid, params[] ) {
	if( PlayerInfo[playerid][pAdmin] < comando_irpara ) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		lugar[64],
		tmpcar,
		world
	;
	world = GetPlayerVirtualWorld(playerid);

	if( sscanf(params, "s[64]", lugar) )
		return ErroMSG( playerid, "Modo de uso correto do comando: /irpara [ls/monte/aerols/favelals/sf/lv]" );

	if( !strcmp(lugar, "ls", true) ) {
		SetPlayerPosEx(playerid, 1483.4935,-1744.4109,13.1186, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1483.4935,-1744.4109,13.1186); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar,world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else if( !strcmp(lugar, "aerols", true) ) {
		SetPlayerPosEx(playerid, 1894.4800,-2493.2834,13.5391, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1894.4800,-2493.2834,13.5391); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar,world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else if( !strcmp(lugar, "monte", true) ) {
		SetPlayerPosEx(playerid, -2306.4448,-1643.8375,483.6970, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -2306.4448,-1643.8375,483.6970); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar,world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else if( !strcmp(lugar, "favelals", true) ) {
		SetPlayerPosEx(playerid, 2172.3095, -1014.4801, 62.9663, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2172.3095, -1014.4801, 62.9663); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else if( !strcmp(lugar, "sf", true) ) {
		SetPlayerPosEx(playerid, -2027.9758, 143.7007, 28.8359, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -2027.9758, 143.7007, 28.8359); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar,world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else if( !strcmp(lugar, "lv", true) ) {
		SetPlayerPosEx(playerid, 2026.9259, 1921.7620, 12.3375, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2026.9259, 1921.7620, 12.3375); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar,world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else if( !strcmp(lugar, "ilha", true) ) {
		SetPlayerPosEx(playerid, 850.816467,-2051.016601,12.867187, 0.0, 0);

		if (GetPlayerState(playerid) == 2) {
			tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 850.816467,-2051.016601,12.867187); LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar,world);
			PutPlayerInVehicle(playerid, tmpcar, 0);
			FreezeEx(playerid, 1);
		}
	}
	else ErroMSG( playerid, "Use: /irpara para saber os lugares disponiveis" );
	return 1;
}

CMD:lchat( playerid, params[] ) {
	if( PlayerInfo[playerid][pAdmin] < comando_lchat ) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	ClearChatboxToAll(50);
	GameTextForAll("~w~Chat ~p~Limpo", 4000, 1);

	return 1;
}

CMD:gmx( playerid, params[] ) {
	if( PlayerInfo[playerid][pAdmin] < comando_gmx ) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		reason[64],
		message[256],
		date[32],
		year,
		month,
		day,
		hour,
		minute,
		second
	;

	if( sscanf( params, "s[64]", reason ) )
	return ErroMSG( playerid, "Use: /gmx [MOTIVO]" );

	getdate( year, month, day );
	gettime( hour, minute, second );
	format( date, sizeof(date), "%d/%d/%d - %d:%d:%d", day, month, year, hour, minute, second );
	format( message, sizeof(message), "{FFFFFF}O servidor esta sendo reiniciado, nao e preciso que saia\ndo jogo. O servidor voltara em alguns segundos.\n\nData: {C1FFF5}%s{FFFFFF}\nAutor: {C1FFF5}%s{FFFFFF}\nMotivo: {C1FFF5}%s{FFFFFF}", date, GetName(playerid), reason );

	SaveHouses();
//	SaveVehicles();

	ForPlayers( i ){
		if( PlayerInfo[ i ][ pLogger ] ){
			ShowPlayerDialog( i, Dinfo, DIALOG_STYLE_MSGBOX, "..:: Servidor reiniciando ::..", message, "Fechar", "" );
		}
	}

    SetTimer("Gmx", 500, false);
	return 1;
}

Public:Gmx()
{
    SendRconCommand("gmx");
    return 1;
}

public ReiniciarServidor()
{
    gettime(hora, minuto, segundo);
    if(hora == 06 && minuto == 00 && segundo == 00) //Nesse caso o servidor irÐ± reiniciar Ð°s 6:00 da manhÐ³
    {
        SendRconCommand("gmx");
    }
}

CMD:paycmd(playerid) {
	if(PlayerInfo[playerid][pAdmin] < comando_paycmd) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	ForPlayers(i){
		if(PlayerInfo[ i ][ pLogger ] == 1){
	    	PlayerInfo[ i ][ pMinutosUP ] = 59;
	    	PlayerInfo[ i ][ pSegundosUP ] = 59;
	    	SetSalario(i);
		}
	}
	static str[100];
	format(str, sizeof(str), "{F3F781}| Servidor | - %s %s %s adiantou o salario de todos !", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), adminInfo[PlayerInfo[ playerid ][ pAdmin ]], PlayerInfo[ playerid ][ pName ]);
	SCMALL(str);
	return 1;
}

CMD:serverpainel( playerid ){
    if(PlayerInfo[playerid][pAdmin] < comando_serverpainel) return 0;

	ShowPlayerDialog(playerid, DIALOG_SERVEROWNER, DIALOG_STYLE_LIST, ""#SERVELOGO" - Painel", "Server Name\nMap Name\nSite/Werbul\nLimite de NPC's\nLigar FilterScript\nDesligar FilterScript\nGMX\nTrancar Servidor\nReload Log\nLimite de Ping", "Confirmar", "Cancelar");
	return true;
}

CMD:darvip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
        return SendClientMessage(playerid, -1, "Voce nao tem permissao!");
	new
		id,
		dias,
        nivel;

    if(sscanf(params, "udd", id, nivel, dias)) return ErroMSG(playerid, "Use: /darvip [ Player ID ] [NIVEL] [Dias]");
    if(!IsPlayerConnected( id ) || PlayerInfo[playerid][pLogger] != 1) return ErroMSG(playerid, "Player nao conectado!");

	if(dias < 0 || dias > 365 ) return ErroMSG(playerid, "O limite de dias varia de 1 a 365 APENAS!");

	if(dias > 0)
    {
	    PlayerInfo[ id ][ pVIP ] = nivel;
    	PlayerInfo[ id ][ pVIPTEMP ] = (86400*dias)+gettime();

		format(strx, sizeof(strx), "Voce setou %s de %s para por %d dias.", VIPLevel(id), GetName( id ), dias);
	    InfoMSG(playerid, strx);
	    format(strx, sizeof(strx), "O(A) Admin %s setou voce para %s por %d dias.", GetName(playerid), VIPLevel(id), dias);
	    InfoMSG(id, strx);
    }
    else {

        PlayerInfo[ id ][ pVIP ] = 0;
    	PlayerInfo[ id ][ pVIPTEMP ] = 0;

        format(strx, sizeof(strx), "Voce removeu o Vip de %s.", GetName( id ));
	    InfoMSG(playerid, strx);
	    format(strx, sizeof(strx), "O(A) Admin %s removeu seu vip.", GetName(playerid));
	    InfoMSG(id, strx);
	}
    OnSalvarDados( id );
    return 1;
}

CMD:darorg(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_darorg) return 0;

    new id, tipo;

    if(sscanf(params, "ui", id, tipo)) return ErroMSG(playerid, "Use: /darorg [ Player ID ] [dar= 1, tirar= 0]");
    if(!IsPlayerConnected( id ) || PlayerInfo[playerid][pLogger] != 1) return ErroMSG(playerid, "Player nao conectado!");

    if(tipo > 0)
    {
        PlayerInfo[ id ][ Organizador ] = 1;

        format(strx, sizeof(strx), "Voce setou Organizador para %s.", GetName( id ));
        InfoMSG(playerid, strx);
        format(strx, sizeof(strx), "O(A) Admin %s setou voce como organizador. Use /evento", GetName(playerid));
        InfoMSG(id, strx);
    }
    else {

        PlayerInfo[ id ][ Organizador ] = 0;

        format(strx, sizeof(strx), "Voce removeu o organizador de %s.", GetName( id ));
        InfoMSG(playerid, strx);
        format(strx, sizeof(strx), "O(A) Admin %s removeu seu organizador.", GetName(playerid));
        InfoMSG(id, strx);
    }
    OnSalvarDados( id );
    return 1;
}

CMD:setplayernome( playerid, params[]){
    if(PlayerInfo[playerid][pAdmin] < comando_mudarnome) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		Nome[ MAX_PLAYER_NAME ],
		id
	;
	if(sscanf(params, "us", id, Nome)) return ErroMSG(playerid, "Use: /setplayernome [ id ] [nome]");
    if(!IsPlayerConnected( id ) || PlayerInfo[id][pLogger] != 1) return ErroMSG(playerid, "Player nao connectado!");
	if(IsPlayerNPC(id)) return false;
    static str[ 129 ], cFile[ 50 ], cFile2[ 50 ];

    format(cFile2, sizeof(cFile2), "%s", PlayerInfo[ id ][ pName ]);
	format(cFile, sizeof(cFile), PASTA_CONTAS, Nome);

    if(strlen(Nome) > 20 || strlen(Nome) < 3) return ErroMSG(playerid, "Seu novo nick e muito grande ou pequeno demais !");

	Loop(i, sizeof(NicksInvalidos)){
		if(strfind(Nome, NicksInvalidos[ i ], true) != -1) return ErroMSG(playerid, "Novo nick e invalido em nosso servidor !");
	}
	Loop(texto, strlen(Nome)){
		if(Nome[texto] == ' ') return ErroMSG(playerid, "e proibido uso de 'ESPAÐO' entre os caracteres do novo nick.");
	}
	if(DOF2_FileExists(cFile)) return ErroMSG(playerid, "Este nick ja esta em uso.");

	static ToyFile[128];
 	format(ToyFile, sizeof ToyFile, PASTA_ACESSORIOS, cFile2);
 	if(DOF2_FileExists(ToyFile)){
 	    DOF2_RenameFile(ToyFile, cFile);
	}

	DOF2_RenameFile(CI( id ), cFile);

	format(PlayerInfo[ id ][pName], MAX_PLAYER_NAME, "%s", Nome);
	SetPlayerName(id, Nome);

    if(PlayerInfo[ id ][ pHouse1 ] != 999){
		strmid(HouseInfo[PlayerInfo[ id ][ pHouse1 ]][hOwner], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
        SaveHouse(PlayerInfo[ id ][ pHouse1 ]);
	}
	if(PlayerInfo[ id ][ pHouse2 ] != 999){
		strmid(HouseInfo[PlayerInfo[ id ][ pHouse2 ]][hOwner], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
	    SaveHouse(PlayerInfo[ id ][ pHouse2 ]);
	}
    if(PlayerInfo[ id ][ pEmpKey ] != 999){
		strmid(EmpInfo[PlayerInfo[ id ][ pEmpKey ]][EDono], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
        SaveEmpresa(PlayerInfo[ id ][ pEmpKey ]);
	}
   /* if(PlayerInfo[id][pVehKey1] != INVALID_VEHICLE_CONCE) {
 	    format(VeiculoInfo[PlayerInfo[id][pVehKey1]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pName]);
 		OnSalvarVehicle(PlayerInfo[id][pVehKey1]);
	}
	if(PlayerInfo[id][pVehKey2] != INVALID_VEHICLE_CONCE){
		format(VeiculoInfo[PlayerInfo[id][pVehKey2]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pName]);
 		OnSalvarVehicle(PlayerInfo[id][pVehKey2]);
	}
	if(PlayerInfo[id][pVehKey3] != INVALID_VEHICLE_CONCE){
    	format(VeiculoInfo[PlayerInfo[id][pVehKey3]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pName]);
 		OnSalvarVehicle(PlayerInfo[id][pVehKey3]);
	}
	if(PlayerInfo[id][pVehKey4] != INVALID_VEHICLE_CONCE){
    	format(VeiculoInfo[PlayerInfo[id][pVehKey4]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pName]);
        OnSalvarVehicle(PlayerInfo[id][pVehKey4]);
	}
	if(PlayerInfo[id][pVehKey5] != INVALID_VEHICLE_CONCE){
		format(VeiculoInfo[PlayerInfo[id][pVehKey5]][vDono], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pName]);
        OnSalvarVehicle(PlayerInfo[id][pVehKey5]);
	}*/

	new i = PlayerInfo[ id ][ pOrg ];
	if(i != 0){
	    if(strcmp(cFile2, InfoOrg[i][Lider], true) == 0){
			strmid(InfoOrg[i][Lider], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
            DOF2_SetString(FileOrg(i), "Lider", InfoOrg[i][Lider]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][SubLider], true ) == 0){
			strmid(InfoOrg[i][SubLider], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
            DOF2_SetString(FileOrg(i), "SubLider1", InfoOrg[i][SubLider]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][SubLider2],true ) == 0){
			strmid(InfoOrg[i][SubLider2], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "SubLider2", InfoOrg[i][SubLider2]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2,InfoOrg[i][Membro1], true ) == 0){
			strmid(InfoOrg[i][Membro1], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro1", InfoOrg[i][Membro1]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro2], true) == 0){
			strmid(InfoOrg[i][Membro2], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro2", InfoOrg[i][Membro2]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro3], true) == 0){
		    strmid(InfoOrg[i][Membro3], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro3", InfoOrg[i][Membro3]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro4], true) == 0){
			strmid(InfoOrg[i][Membro4], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro4", InfoOrg[i][Membro4]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro5], true) == 0){
			strmid(InfoOrg[i][Membro5], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro5", InfoOrg[i][Membro5]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro6], true) == 0){
        	strmid(InfoOrg[i][Membro6], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro6", InfoOrg[i][Membro6]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro7], true) == 0){
			strmid(InfoOrg[i][Membro7], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
            DOF2_SetString(FileOrg(i), "Membro7", InfoOrg[i][Membro7]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro8], true) == 0){
			strmid(InfoOrg[i][Membro8], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro8", InfoOrg[i][Membro8]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro9], true) == 0){
			strmid(InfoOrg[i][Membro1], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro9", InfoOrg[i][Membro9]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro10], true) == 0){
			strmid(InfoOrg[i][Membro10], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro10", InfoOrg[i][Membro10]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro11], true) == 0){
			strmid(InfoOrg[i][Membro11], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro11", InfoOrg[i][Membro11]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro12], true) == 0){
			strmid(InfoOrg[i][Membro12], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro12", InfoOrg[i][Membro12]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro13], true) == 0){
			strmid(InfoOrg[i][Membro13], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro13", InfoOrg[i][Membro13]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro14], true) == 0){
			strmid(InfoOrg[i][Membro14], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro14", InfoOrg[i][Membro14]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro15], true) == 0){
			strmid(InfoOrg[i][Membro15], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro15", InfoOrg[i][Membro15]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro16], true) == 0){
			strmid(InfoOrg[i][Membro16], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro16", InfoOrg[i][Membro16]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro17], true) == 0){
			strmid(InfoOrg[i][Membro17], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro17", InfoOrg[i][Membro17]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro18], true) == 0){
			strmid(InfoOrg[i][Membro18], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro18", InfoOrg[i][Membro18]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro19], true) == 0){
			strmid(InfoOrg[i][Membro19], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro19", InfoOrg[i][Membro19]);
			DOF2_SaveFile();
		}
		else if(strcmp(cFile2, InfoOrg[i][Membro20], true) == 0){
			strmid(InfoOrg[i][Membro20], PlayerInfo[id][pName], 0, strlen(PlayerInfo[id][pName]), 255);
			DOF2_SetString(FileOrg(i), "Membro20", InfoOrg[i][Membro20]);
			DOF2_SaveFile();
		}
	}

	OnSalvarDados( id );

	format(str, sizeof( str ), "Voce alterou seu nome de usuario de %s para %s", cFile2, PlayerInfo[ id ][ pName ]);
	SCM(playerid, -1, str);

    format(str, sizeof( str ), "%s %s alterou seu nome de usuario para %s", PlayerInfo[ playerid ][ pSex ] == 1 ? ("O admin"):("A admin"), GetNameEx( playerid ), PlayerInfo[ id ][ pName ]);
	SCM(id, -1, str);

	format(STRLOG, sizeof(STRLOG), "[%s] %s mudou o nome/nick de %s para: %s.", GetDateEx(), GetNameEx( playerid ), cFile2, PlayerInfo[ id ][ pName ]);
	SLog("Nick.log", STRLOG);

	GameTextForPlayer(playerid, "~w~Modificado com~n~sucesso", 3000, 1);
	PlaySoundForPlayer(playerid, 1057);
	PlaySoundForPlayer(id, 1057);

	return true;
}


CMD:viraradmin(playerid)
{
    if((strcmp(PlayerInfo[playerid][pName], SERVER_OWNER1, true)== 0
		|| strcmp(PlayerInfo[playerid][pName], SERVER_OWNER3, true) == 0) && PlayerInfo[playerid][pLogger] > 0)
	{
	    PlayerInfo[playerid][pAdmin] = 5;
		SCM(playerid, -1, "{C6D1A9}Setado Com sucesso!");
		OnSalvarDados( playerid );
	}
	return true;
}

CMD:daradmin(playerid, params[]) {
	static id,
		level
	;

    if(PlayerInfo[playerid][pAdmin] < 7)
        return SendClientMessage(playerid, -1, "Voce nao tem permissao!");

	if(sscanf(params, "ud", id, level))
		return ErroMSG( playerid, "Use: /setadmin [ id ] [ Level ]");

	if(!PlayerInfo[id][pLogger])
		return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

    if(!(strcmp(PlayerInfo[playerid][pName], SERVER_OWNER1, true)== 0)){
		if(strcmp(PlayerInfo[id][pName], SERVER_OWNER1, true)== 0
			|| strcmp(PlayerInfo[id][pName], SERVER_OWNER3, true) == 0)
				return ErroMSG( playerid, "Voce nao pode Modificar o admin de um OWNER");
	}
	if(level < 0 || level > 8)
		return ErroMSG( playerid, ""#SERVELOGO" Informe um level entre 0 a 8");

	PlayerInfo[id][pAdmin] = level;

	if(level > 0){
		format(strx, sizeof(strx), ""#SERVELOGO" Voce Promoveu o jogador %s nivel de administraçao %s (level %d)", GetName(id), adminInfo[level], level);
		SendClientMessage(playerid, C_ADMIN, strx );

		format(strx, sizeof(strx), ""#SERVELOGO" %s lhe Promoveu a Admin %s (level %d)", GetName(playerid), adminInfo[level], level);
		SendClientMessage(id, C_ADMIN, strx );
	}
	else
	{

		SetPlayerColor(id, Branco);

		SetPlayerSkinEx( id, PlayerInfo[ id ][ pSkin ] );
		PlayerInfo[id][pAWork] = 0;
        ResetPlayerWeapons(id);

		format(strx, sizeof(strx), ""#SERVELOGO" Voce removeu o jogador %s da administraçao!", GetName(id));
		SendClientMessage(playerid, C_ADMIN, strx );

		format(strx, sizeof(strx), ""#SERVELOGO" %s %s removeu seu level administrativo",  adminInfo[PlayerInfo[playerid][pAdmin]], GetName(playerid));
		SendClientMessage(id, C_ADMIN, strx );
	}
	format(STRLOG, sizeof(STRLOG),"[%s] %s mudou level administrativo de %s para %s !", GetDateEx(), GetName( playerid ), GetName( id ), adminInfo[level]);
	SLog("ADMSet.log", STRLOG);
	OnSalvarDados( id );

	return 1;
}

CMD:tirarcadeia(playerid, params[]) {

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new presoid;

	if(sscanf(params, "ud", presoid)) return ErroMSG(playerid, "Use: /tirarcadeia [id]");

	if(!PresoStatus[ presoid ]) return ErroMSG(playerid, "Este player nao esta preso !");

    static str[ 129 ];
	if(!PlayerInfo[ presoid ][ PresoOrg ]) format(str, sizeof(str), "Voce soltou %s que estava preso na Solitaria por %s!",PlayerInfo[ presoid ][ pName ], Convert(PlayerInfo[presoid][PresoTempo], 1));
	else format(str, sizeof(str), "Voce soltou %s que estava preso na %s por %s!",PlayerInfo[ presoid ][ pName ], nomeOrgs[PlayerInfo[ presoid ][ PresoOrg ]], Convert(PlayerInfo[presoid][PresoTempo], 1));

	SCM(playerid, C_ADMIN, str );
	format(str, sizeof(str), "%s Admin %s te tirou da cadeia!", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), PlayerInfo[ playerid ][ pName ]);
	SCM(presoid, C_ADMIN, str );

	SistemaPrisao(presoid, "Soltar");
	return 1;
}

CMD:cadeia(playerid, params[]) {

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		presoid,
		minP
	;
	if(sscanf(params, "ud", presoid, minP)) return ErroMSG(playerid, "Use: /cadeia [id] [Minutos]");

	if(!IsPlayerConnected(presoid) || PlayerInfo[ presoid ][ pLogger ] != 1) return ErroMSG(playerid, "Este player nao esta conectado !");

	SistemaPrisao(presoid, "ativarpena");
	SistemaPrisao(presoid, "adicionarPena", 0, 3, minP);
	SistemaPrisao(presoid, "cumprirPena");

	format(strx, sizeof(strx), "Voce prendeu %s %s na solitaria por %s!", PlayerInfo[presoid][pSex] == 1 ? ("o jogador"): ("a jogadora"), PlayerInfo[ presoid ][ pName ], Convert((minP*60), 1));
	SCM(playerid, C_ADMIN, strx );
	format(strx, sizeof(strx), "%s Admin %s te prendeu na solitaria por %s!", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), PlayerInfo[ playerid ][ pName ], Convert((minP*60), 1));
	SCM(presoid, C_ADMIN, strx );
	return 1;
}

CMD:matar( playerid, params[] ) {

	if(PlayerInfo[playerid][pAdmin] < comando_matar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		id
	;

	if( sscanf( params, "u", id ) )
		return ErroMSG( playerid, ""#SERVELOGO" Modo de uso correto do comando: /matar [ id ]" );

	if( !PlayerInfo[id][pLogger] )
		return ErroMSG( playerid, ""#SERVELOGO" O ID informado deve corresponder a de um jogador conectado. " );

	//if(id == playerid) return ErroMSG( playerid, "Voce nao pode trazer ate voce mesmo." );

    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin])
		return ErroMSG( playerid, ""#SERVELOGO" Nao pode matar um administrador superior a voce. " );

    SetPlayerVida(id, 0.0);

	format( strx, sizeof(strx), ""#SERVELOGO" O jogador %s foi morto com sucesso.", GetName(id) );
	SendClientMessage( playerid, C_OFICIAL, strx );

	format( strx, sizeof(strx), ""#SERVELOGO" Voce foi morto por %s", GetName(playerid) );
	SendClientMessage( id, C_OFICIAL, strx );
	return 1;
}

CMD:setlider( playerid, params[] ) {
	new
		id,
		org
	;

	if(PlayerInfo[playerid][pAdmin] < comando_lider) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if( sscanf(params, "ud", id, org) )
		return ErroMSG( playerid, ""#SERVELOGO" Modo de uso correto do comando: /setlider [ id ] [ Org ID ]" );

	if( org < 1 || org > sizeof(nomeOrgs) ) {
		format( strx, sizeof(strx), ""#SERVELOGO" O ID da Org deve ser entre 1 e %d", (sizeof(nomeOrgs)-1) );
		return SendClientMessage( playerid, C_ERROR, strx );
	}
	if( !PlayerInfo[id][pLogger] )
		return ErroMSG( playerid, ""#SERVELOGO" o Player precisa estar conectado para receber o Lider." );

    if(PlayerInfo[id][pEmprego] != 0 )
		return ErroMSG( playerid, ""#SERVELOGO" o player nao pode estar em um emprego." );

	if(PlayerInfo[id][pOrg] != 0) return ErroMSG(playerid, "Este player ja se encontra em uma 'Organizaçao'");

	if(strcmp(InfoOrg[org][Lider], "Ninguem", true) == 0){
    	ConviteInfoOrg(GetName(id), org, 6);
	}
	else
	{
	    ErroMSG(playerid, "Esta Organizaçao ja contem um lider! /relider");
	    return true;
	}
    // --- Setando variaveis do jogador ---
	PlayerInfo[id][pOrg] = org;
	PlayerInfo[id][pCargo] = 6;
	liderSpawnOrg[id] = true;

	SendClientMessage(playerid, -1, ""#SERVELOGO" Setado com sucesso!");

	format( strx, sizeof(strx), ""#SERVELOGO" %s [%d] se tornou o Lider da Organizaçao {%s}%s", GetName( id ), id , OrgColorHex[ org ], nomeOrgs[ org ]);
	SendClientMessageToAll(-1, strx );

	format( strx, sizeof(strx), ""#SERVELOGO" Voce agora pertence a organizaçao: {%s}%s", OrgColorHex[ org ], nomeOrgs[org] );
	SendClientMessage( id, orgsColor[org], strx );
    OnSalvarDados(id);

	//SpawnPlayer(id);
    if(liderSpawnOrg[ playerid ])
    {
        id = PlayerInfo[playerid][pOrg];
        SetPlayerPosEx(playerid, orgsRespawnPoint[id][orpX], orgsRespawnPoint[id][orpY], orgsRespawnPoint[id][orpZ], orgsRespawnPoint[id][orpA], orgsRespawnPoint[id][orpInt], 0 , 2);
        liderSpawnOrg[ playerid ] = false;
    }
    CheckInfoOrg(playerid);

	//SetPlayerColor(id, Branco);
	return 1;
}

CMD:relider( playerid, params[] )
{
	if(PlayerInfo[playerid][pAdmin] < comando_relider) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new
		org
	;
	if( sscanf(params, "d", org) ) return ErroMSG( playerid, "Modo de uso correto do comando: /relider [ id Organizaçao ]" );

	if( org < 1 || org >= sizeof(nomeOrgs) ) {
		format( strx, sizeof(strx), "O ID da Org deve ser entre 1 e %d", (sizeof(nomeOrgs)-1) );
		return ErroMSG(playerid, strx);
	}

    if(!strcmp(DOF2_GetString(FileOrg(org), "Lider"), "Ninguem", true))
		return ErroMSG( playerid, "Esta organizaçao nao possui um lider");

	Loop(i, GetMaxPlayers()){
	    if(PlayerInfo[i][pLogger]){
			if(!strcmp(GetName( i ), DOF2_GetString(FileOrg(org), "Lider"), true)) {
				callcmd::pedircontas(i);
				DemitirInfoOrg(i);
			}
		}
	}
	strmid(InfoOrg[org][Lider], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
    DOF2_SetString(FileOrg(org), "Lider", "Ninguem");
   	DOF2_SaveFile();

    format(strx, sizeof(strx), ""#SERVELOGO" Voce retirou o lider da organizaçao {%s}%s", OrgColorHex[org], nomeOrgs[org]);
	SendClientMessage(playerid, -1, strx );
	return 1;
}

//	=================================================
//	@revisao:	01/12/12
//	-------------------------------------------------
/*CMD:rvc( playerid ){
   	if(PlayerInfo[playerid][pAdmin] < comando_respawncarros) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static str[ 128 ];

	for(new v = 0; v < MAX_VEHICLES_CONCE; v++)	{
		if(!IsVehicleOccupied(VeiculoInfo[ v ][vVeiculo])) SetVehicleToRespawn(VeiculoInfo[ v ][vVeiculo] );
 	}

	format( str, sizeof(str), ""#SERVELOGO" Todos os veiculos da concessionaria voltaram para seus locais de inicio. - %s", GetNameEx( playerid ) );
	SCMALL( str );
	return true;
}
*//*
CMD:rvcid( playerid, params[] ) {
   	if(PlayerInfo[playerid][pAdmin] < comando_respawncarros) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static veh, str[ 128 ];

	if( sscanf(params, "d", veh) ) return ErroMSG( playerid, "Modo de uso correto do comando: /rvcid [ conce-id ]" );

 	if(veh >= MAX_VEHICLES_CONCE) return ErroMSG(playerid, "Veiculo ID invalido!");

	if(!IsVehicleOccupied(VeiculoInfo[ veh ][vVeiculo])) SetVehicleToRespawn(VeiculoInfo[ veh ][vVeiculo] );

	format( str, sizeof(str), ""#SERVELOGO" Veiculo id %d voltou ao seu local de respawn.", veh );
	SCM(playerid, -1, str );
	return true;
}

CMD:puxarveiculo(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_respawncarros) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static
		veh,
		str[128],
		intI,
		Float:posP[3]
	;

	if( sscanf(params, "d", veh) ) return ErroMSG( playerid, "Modo de uso correto do comando: /puxarveiculo [ conce-id ]" );

 	if(veh >= MAX_VEHICLES_CONCE) return ErroMSG(playerid, "Veiculo ID invalido!");

	if(IsVehicleOccupied(VeiculoInfo[ veh ][vVeiculo])) return ErroMSG(playerid, "Voce nao pode puxar um veiculo com motorista dentro.");

	GetPlayerPos( playerid, posP[0], posP[1], posP[2] );
	intI = GetPlayerInterior(playerid);

	SetVehiclePos(VeiculoInfo[ veh ][vVeiculo], posP[0], posP[1], posP[2]);
	LinkVehicleToInterior(VeiculoInfo[ veh ][vVeiculo], intI);

	format( str, sizeof(str), ""#SERVELOGO" Voce puxou o veiculo id %d ate sua posiçao atual.", veh );
	SCM(playerid, -1, str );
	return true;
}*/

CMD:salvarspawnveicular(playerid, params[]){

    if(PlayerInfo[playerid][pAdmin] < comando_savespawnveh) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static
		veh,
		str[128]
	;

	if( sscanf(params, "d", veh) ) return ErroMSG( playerid, "Modo de uso correto do comando: /salvarspawnveicular [ conce-id ]" );

 	if(veh >= MAX_VEHICLES_CONCE) return ErroMSG(playerid, "Veiculo ID invalido!");
    if(!IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta dentro de um veiculo!");


	new
		Float:c_x,
		Float:c_y,
		Float:c_z,
		Float:c_a
	;

	GetVehiclePos(GetPlayerVehicleID(playerid), c_x, c_y, c_z);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), c_a);

	/*VeiculoInfo[veh][vLocalX] = c_x;
	VeiculoInfo[veh][vLocalY] = c_y;
	VeiculoInfo[veh][vLocalZ] = c_z;
	VeiculoInfo[veh][vLocalA] = c_a;*/

//	OnSalvarVehicle(veh);

	format( str, sizeof(str), ""#SERVELOGO" Voce salvou este local para respawn do veiculo id %d.", veh );
	SCM(playerid, -1, str );
	return true;
}

CMD:verconceid(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < comando_savespawnveh) return 0;

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
            return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

  /*  static
        str[128]
    ;*/

    if(!IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta dentro de um veiculo!");

    //format( str, sizeof(str), ""#SERVELOGO" Veiculo id: %d. Dono: %s", VeiculoInfo[ GetPlayerVehicleID(playerid) ][vVeiculo], VeiculoInfo[ GetPlayerVehicleID(playerid) ][vDono]);
    //SCM(playerid, -1, str );
    return true;
}

CMD:rv( playerid )
{
	if(PlayerInfo[playerid][pAdmin] < comando_respawncarros) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	static str[ 128 ];

	for(new v = 2; v < MAX_VEHICLES; v++)
	{
		if(!IsVehicleOccupied(v))
        {
			if(!TrailersCaminhoes(v)) SetVehicleToRespawn(v);
		}
	}

	format( str, sizeof(str), ""#SERVELOGO" Todos os veiculos voltaram para seus locais de inicio. - %s", GetNameEx( playerid ) );
	SCMALL( str );
	return 1;
}

CMD:deletcar(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < comando_deletcar) return 0;

    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(CarrosCriados[ playerid ] == INVALID_VEHICLE_ID) return ErroMSG(playerid, "Voce nao criou nenhum veiculo!");

	DestroyVehicle(CarrosCriados[ playerid ]);

    CarrosCriados[playerid] = INVALID_VEHICLE_ID;

	SendClientMessage(playerid, -1, "{DBDBAD}(>) - Veiculo destruido!" );
	return true;
}

CMD:aradar(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < comando_radar) return 0;

    new String_COMANDOS[220]; //
    format(String_COMANDOS, sizeof String_COMANDOS, "");

    strcat(String_COMANDOS, "{009900}ADMIN MASTER - RADAR\n\n"); // 24 celulas
    strcat(String_COMANDOS, "{CECECE}/criarradar {FFFFFF}- Criar um radar.\n");
    strcat(String_COMANDOS, "{CECECE}/editarradar {FFFFFF}- Editar um radar.\n");
    strcat(String_COMANDOS, "{CECECE}/deletarradar {FFFFFF}- Deletar radar.\n");
    strcat(String_COMANDOS, "{CECECE}/irradar {FFFFFF}- Ir a um radar.\n");

    ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Comandos radar", String_COMANDOS, "Ok", "");
    return 1;
}

CMD:criarradar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_radar) return 0;

    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, -1, "Use /criarradar [velocidade]");

    Criar_Radar(playerid, TOTALRADAR+1, params[0]);
    return 1;
}

CMD:irradar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_radar) return 0;

    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, -1, "Use /irradar [id]");

    Ir_Radar(playerid, params[0]);
    return 1;
}

CMD:editarradar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_radar) return 0;

    if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, -1, "Use /editarradar [id] [velocidade]");

    Editar_Radar(playerid, params[0], params[1]);
    return 1;
}

CMD:deletarradar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_radar) return 0;

    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, -1, "Use /deletarradar [id]");

    Deletar_Radar(playerid, params[0]);
    return 1;
}

CMD:cv( playerid, params[] ) {

	if(PlayerInfo[playerid][pAdmin] < comando_cv) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "VocÐº nÐ³o estÐ± em modo Administrativo.");

	new
		carid,
		Cor[ 2 ],
		Float:X,
		Float:Y,
		Float:Z
	;

	if( sscanf(params, "ddd", carid, Cor[ 0 ], Cor[ 1 ]) ) return ErroMSG( playerid, "Modo de uso correto do comando: /cv [ id-veiculo ] [ cor1 ] [ cor2 ]" );

	if( carid < 400|| carid > 611 ) return ErroMSG( playerid, "Escolha entre 400 e 611.");

	GetPlayerPos(playerid, X,Y,Z);

    if(CarrosCriados[ playerid ] != INVALID_VEHICLE_ID) DestroyVehicle(CarrosCriados[ playerid ]);

	CarrosCriados[playerid] = CreateVehicle(carid, X,Y,Z, 0.0, Cor[ 0 ], Cor[ 1 ], 60000);
	PutPlayerInVehicle(playerid, CarrosCriados[playerid], 0);
	combustivel[CarrosCriados[playerid]] = 100;

	static str[ 129 ];
	format(str, sizeof(str), "{DBDBAD}(â¢) - Veiculo %d Criado.", carid);
	SendClientMessage(playerid, -1, str );
	return true;
}

cmd:sv(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_sv) return 0;

    new coment[50];
    if(sscanf(params, "s[50]", coment)) return SendClientMessage(playerid, -1, "Use /sv [nome do local]");

    new Float:x, Float:y, Float:z, Float:rot;

    if(IsPlayerInAnyVehicle(playerid))
    {
        new vid = GetPlayerVehicleID(playerid);
        new vmod = GetVehicleModel(vid);

        GetVehiclePos(vid, x, y, z);
        GetVehicleZAngle(vid, rot);

        new String[180], File:Csalvos = fopen("logs/Salvos.txt", io_append);
        format(String, sizeof(String), "AddStaticVehicleEx(%d,%f,%f,%f,%f,random(126),random(126),120);\\%s\r\n", vmod, x, y, z, rot, coment);
        fwrite(Csalvos, String);
        fclose(Csalvos);

        SendClientMessage(playerid, -1, "Carro criado com sucesso !");

        } else {

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, rot);

        new String[150], File:Csalvos = fopen("logs/Salvos.txt", io_append);
        format(String, sizeof(String), "%s,%f,%f,%f,%f\r\n", coment, x, y, z, rot);
        fwrite(Csalvos, String);
        fclose(Csalvos);

        SendClientMessage(playerid, -1, "Coordenada salva com sucesso !");
    }
    return 1;
}

CMD:criarset(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_criarset) return 0;

    if(!IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Voce precisa estar dentro do veiculo selecionado");

    new Cor1, Cor2;
    if(sscanf(params, "dd", Cor1, Cor2)) return SendClientMessage(playerid, -1, "Use /criarset [cor1] [cor2]");

    new File:arquivo = fopen("VeiculosSET.txt", io_append),
        modelo = GetVehicleModel(GetPlayerVehicleID(playerid)),
        Float:spawn[3],
        Float:angulo,
        linha[150]
    ;

    SendClientMessage(playerid, Verde, "Voce criou um set com sucesso, ira aparecer em 5 segundos");

    GetVehiclePos(GetPlayerVehicleID(playerid), spawn[0], spawn[1], spawn[2]);
    GetVehicleZAngle(GetPlayerVehicleID(playerid), angulo);

    SetTimerEx("CriarSetV", 5000, false, "ddffffdd", playerid, modelo, spawn[0], spawn[1], spawn[2], angulo, Cor1, Cor2);

    format(linha, 150, "%i,%f,%f,%f,%f,%i,%i\n", modelo, spawn[0], spawn[1], spawn[2], angulo, Cor1, Cor2);
    fwrite(arquivo, linha);
    fclose(arquivo);
    return 1;
}

CMD:jetpack( playerid, params[] )
{
	if(PlayerInfo[playerid][pAdmin] < comando_jetpack) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) return ErroMSG( playerid, "Voce ja esta usando o Jetpack.");
	if(IsPlayerInAnyVehicle(playerid)) return ErroMSG( playerid, "Voce nao pode usar o Jetpack quando esta dentro de um veiculo.");
	SetPlayerJetpack(playerid);
	SendClientMessage(playerid, C_OFICIAL, "[ Play Style ] Voce acaba de pegar o Jetpack.");
	return 1;
}

CMD:injetar(playerid, params[]){

	if(PlayerInfo[playerid][pAdmin] < comando_carona) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL) return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new id, VehicleID;

	if(sscanf(params, "u", id)) return ErroMSG(playerid, "Use: /carona [id]");

	if(id == playerid) return ErroMSG(playerid, "Voce nao pode dar uma carona para voce mesmo.");

	if(PlayerInfo[ id ][ pLogger ] != 1) return ErroMSG(playerid, "Player nao conectado.");

	if(!IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Voce nao esta em um veiculo.");

	VehicleID = GetPlayerVehicleID(playerid);
	PutPlayerInVehicle(id, VehicleID, 1);

	static string[60];
	format(string, sizeof(string), "O(A) Admin %s (%d) te deu uma carona!", GetNameEx(playerid), playerid);
	SCM(id, cadm, string);

	SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");

	return true;
}

CMD:carona(playerid, params[]){

	if(PlayerInfo[playerid][pAdmin] < comando_carona) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL) return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new id, VehicleID;

	if(sscanf(params, "u", id)) return ErroMSG(playerid, "Use: /carona [id]");

	if(id == playerid) return ErroMSG(playerid, "Voce nao pode pegar uma carona com voce mesmo.");

	if(PlayerInfo[ id ][ pLogger ] != 1) return ErroMSG(playerid, "Player nao conectado.");

	if(!IsPlayerInAnyVehicle(id)) return ErroMSG(playerid, "Player nao esta em um veiculo.");

	VehicleID = GetPlayerVehicleID(id);
	PutPlayerInVehicle(playerid, VehicleID, 1);

	static string[60];
	format(string, sizeof(string), "O(A) Admin %s (%d) entrou em seu veiculo!", GetNameEx(playerid), playerid);
	SCM(id, cadm, string);

	SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");

	return true;
}

CMD:ejetar(playerid, params[]){

	if(PlayerInfo[playerid][pAdmin] < comando_ejetar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL) return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new id;

	if(sscanf(params, "u", id)) return ErroMSG(playerid, "Use: /ejetar [id]");

	if(id == playerid) return ErroMSG(playerid, "Voce nao pode ejetar voce mesmo.");

	if(PlayerInfo[ id ][ pLogger ] != 1) return ErroMSG(playerid, "Player nao conectado.");

	if(!IsPlayerInAnyVehicle(id)) return ErroMSG(playerid, "O(A) Player nao esta em um veiculo.");

	RemovePlayerFromVehicle(id);

	static string[60];
	format(string, sizeof(string), "O(A) Admin %s (%d) te ejetou do veiculo", GetNameEx(playerid), playerid);
	SCM(id, cadm, string);

	SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");

	return true;
}

CMD:darcomb(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_darcomb) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	new id, quantidade;
    if(sscanf(params, "ud", id, quantidade)) return ErroMSG( playerid, "Use: /darcomb [ id ] [ quantia ]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	if(!IsPlayerInAnyVehicle(id)) return ErroMSG( playerid, "O Player nao esta em um veiculo!");
	if(!(100 > quantidade > 0)) return ErroMSG( playerid, "Quantidade Invalida!");

	if(combustivel[GetPlayerVehicleID(id)]+quantidade > 100){
	    combustivel[GetPlayerVehicleID(id)] = 100;
	}
	else combustivel[GetPlayerVehicleID(id)] += quantidade;

    format(strx, sizeof(strx), ""#SERVELOGO" O Admin %s lhe forneceu %i de Combustivel", GetNameEx( playerid ), quantidade);
    SCM(id, -1, strx);
    return true;
}


CMD:dardj(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessage(playerid, -1, "Voce nao tem permissao!");

    new id, tipo;

    if(sscanf(params, "ui", id, tipo)) return ErroMSG(playerid, "Use: /dardj [ Player ID ] [dar= 1, tirar= 0]");
    if(!IsPlayerConnected( id ) || PlayerInfo[playerid][pLogger] != 1) return ErroMSG(playerid, "Player nao conectado!");

    if(tipo > 0)
    {
        PlayerInfo[ id ][ musica ] = 1;

        format(strx, sizeof(strx), "Voce setou o Cargo DJ para %s.", GetName( id ));
        InfoMSG(playerid, strx);
        format(strx, sizeof(strx), "O(A) Admin %s setou voce como DJ. Use /tocarmusica", GetName(playerid));
        InfoMSG(id, strx);
    }
    else {

        PlayerInfo[ id ][ musica ] = 0;

        format(strx, sizeof(strx), "Voce removeu o Cargo DJ de %s.", GetName( id ));
        InfoMSG(playerid, strx);
        format(strx, sizeof(strx), "O(A) Admin %s removeu seu DJ.", GetName(playerid));
        InfoMSG(id, strx);
    }
    OnSalvarDados( id );
    return 1;
}

CMD:dargrana(playerid, params[])
{
	new
		id,
		valor
	;

	if(PlayerInfo[playerid][pAdmin] < comando_dargrana) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "ud", id, valor)) return ErroMSG( playerid, "Use: /dargrana [ id ] [ quantia ]");
	if(!IsPlayerConnected(playerid)) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	ActionPlayerGrana(id, "+", valor, 0);
	OnSalvarDados( id );

	format(strx, sizeof(strx), "[ Play Style ] Voce enviou $%d para o jogador %s", valor, GetName(id));
	SendClientMessage(playerid, C_OFICIAL, strx );
	format(strx, sizeof(strx), "O Admin %s lhe forneceu $%d",  GetName(playerid), valor);
	SendClientMessage(id, C_OFICIAL, strx );

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s deu a %s a quantia de %i de dinheiro.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
    SLog("AdminCMD.log", STRLOG);
	return 1;
}

CMD:darexp(playerid, params[])
{
	new
		id,
		valor
	;

	if(PlayerInfo[playerid][pAdmin] < comando_darexp) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "ud", id, valor)) return ErroMSG( playerid, "Use: /darexp [ id ] [ quantia ]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	PlayerInfo[ id ][ pExp ] += valor;
    OnSalvarDados( id );

	format(strx, sizeof(strx), "[ Play Style ] Voce deu %d exp para o jogador %s", valor, GetName(id));
	SendClientMessage(playerid, C_OFICIAL, strx );

	format(strx, sizeof(strx), "[ Play Style ] Voce recebeu %d exp do Admin %s", valor, GetName(playerid));
	SendClientMessage(id, C_OFICIAL, strx );

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s deu a %s a quantia de %i exp.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
    SLog("AdminCMD.log", STRLOG);
	return 1;
}

CMD:darcash(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
        return SendClientMessage(playerid, -1, "Voce nao tem permissao!");
	new
		id,
		valor
	;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "ud", id, valor)) return ErroMSG( playerid, "Uso correto do comando: /darcash [ id ] [ quantia ]");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	PlayerInfo[id][Cash] += valor;
    OnSalvarDados( id );

	format(strx, sizeof(strx), "[ Play Style ] - Voce deu %d de cash para o jogador %s", valor, GetName(id));
	SendClientMessage(playerid, 0xB291FFFF, strx );

	format(strx, sizeof(strx), "[ Play Style ] Parabens, voce recebeu %d de cash", valor);
	SendClientMessage(id, 0xC0C700FF, strx );

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s deu a %s a quantia de %i cash.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
    SLog("AdminCMD.log", STRLOG);

    format(STRLOG, sizeof(STRLOG), "[%s] Admin %s deu a %s a quantia de %i cash.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
    SLog("Cash.log", STRLOG);
	return 1;
}

CMD:darlevel(playerid, params[])
{
	new
		id,
		valor
	;

	if(PlayerInfo[playerid][pAdmin] < comando_darlevel) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "ud", id, valor)) return ErroMSG( playerid, "Uso correto do comando: /darlevel [ id ] [ quantia ]");
	if(!IsPlayerConnected(playerid)) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	PlayerInfo[id][pLevel] += valor;
    OnSalvarDados(id);

	format(strx, sizeof(strx), "[ Play Style ] Voce deu %d Leveis para o jogador %s", valor, GetName(id));
	SendClientMessage(playerid, C_OFICIAL, strx );

	format(strx, sizeof(strx), "[ Play Style ] Voce recebeu %d Leveis do Admin %s", valor, GetName(playerid));
	SendClientMessage(id, C_OFICIAL, strx );

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s deu a %s a quantia de %i Leveis.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
    SLog("AdminCMD.log", STRLOG);
	return 1;
}

CMD:setarlevel(playerid, params[])
{
	new
		id,
		valor
	;

	if(PlayerInfo[playerid][pAdmin] < comando_darlevel) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "ud", id, valor)) return ErroMSG( playerid, "Uso correto do comando: /setargrana [ id ] [ quantia ]");

	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	PlayerInfo[id][pLevel] = valor;
	OnSalvarDados( id );

	format(strx, sizeof(strx), "[ Play Style ] Voce setou %d Leveis para o jogador %s", valor, GetName(id));
	SendClientMessage(playerid, C_OFICIAL, strx );

	format(strx, sizeof(strx), "O Admin %s setou seu level para %d ", GetName(playerid), valor);
	SendClientMessage(id, C_OFICIAL, strx );

	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s Setou a %s a quantia de %i Leveis.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
    SLog("AdminCMD.log", STRLOG);
	return 1;
}


CMD:soltar(playerid, params[]){
    new
		id,
		local[10]
	;

	if(PlayerInfo[playerid][pAdmin] < comando_soltar) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "us[10]", id, local)) return ErroMSG( playerid, "Use: /soltar [ id ] [ local ] > Hospital ou cadeia");
	if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

	static str[ 129 ];
    if(!strcmp(local, "hospital", true)){
        if(!PlayerInfo[ id ][ pHospTemp ]) return ErroMSG(playerid, "Este player nao esta hospitalizado!");

		PlayerInfo[ id ][ pHospTemp ] = 5;

    	format(str, sizeof str, "%s foi liberado com sucesso!", GetName(id));
    	SCM(playerid, Purple, str);

    	SCM(id, Purple, "* Voce foi liberado!");
	}
	else if(!strcmp(local, "cadeia", true)){
	    if(!PlayerInfo[ id ][ PresoTempo ]) return ErroMSG(playerid, "Este player nao esta preso!");

    	PlayerInfo[ id ][ PresoTempo ] = 5;

    	format(str, sizeof str, "%s foi solto com sucesso!", GetName(id));
    	SCM(playerid, Purple, str);

    	SCM(id, Purple, "* Voce foi solto!");
	}
	return true;
}

CMD:editar(playerid, params[])
{
	static
		id,
		acao[15],
		valor,
		str[ 129 ]
	;

	if(PlayerInfo[playerid][pAdmin] < comando_editarid) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(sscanf(params, "us[15]d", id, acao, valor)){
		Params:ErroMSG( playerid, "Use: /editar [ id ] [ coldre | galao | emprego | celular | grana | fome | sede | level | vida | colete | skin ] [ valor ]");
	}
	else if(!strcmp(acao, "coldre", true))
    {
        if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        if(valor != 0 && valor != 1) return ErroMSG(playerid, "Valores permitidos: 1 e 0");

		PlayerInfo[ id ][ pColdre ] = valor;

		format(strx, sizeof(strx), "[ Play Style ] Voce editou o Coldre de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, C_OFICIAL, strx );

		format(strx, sizeof(strx), "| Admin | - %s editou seu coldre para %d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, strx );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou o coldre de %s para %i", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);

	    OnSalvarDados( id );
	}
	else if(!strcmp(acao, "celular", true))
    {
        if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        if(valor != 0 && valor != 1) return ErroMSG(playerid, "Valores permitidos: 1 e 0");

		CelularInfo[ id ][ pCell ] = valor;

        CelularInfo[ id ][pNumero] = (1000 + random(9999));

		format(strx, sizeof(strx), "[ Play Style ] Voce editou o celular de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, C_OFICIAL, strx );

		format(strx, sizeof(strx), "| Admin | - %s editou seu celular para %d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, strx );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou o celular de %s para %i", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);

	    OnSalvarDados( id );
	}
	else if(!strcmp(acao, "galao", true))
    {
        if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        if(valor != 0 && valor != 1) return ErroMSG(playerid, "Valores permitidos: 1 e 0");

		GalaoInfo[ id ][ pGalao ] = valor;

		if(valor == 0){ GalaoInfo[ id ][ pMax ] = 0; } else { GalaoInfo[ id ][ pMax ] = 15; }

		format(strx, sizeof(strx), "[ Play Style ] Voce editou o galao de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, C_OFICIAL, strx );

		format(strx, sizeof(strx), "| Admin | - %s editou seu galao para %d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, strx );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou o galao de %s para %i", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);

	    OnSalvarDados( id );
	}
	else if(!strcmp(acao, "grana", true))
    {
 		if(valor > 100000000 || 0 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        ActionPlayerGrana(id, "=", valor);

		OnSalvarDados( id );

		format(str, sizeof(str), "[ Play Style ] Voce editou a grana de %s para $%d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );


		format(str, sizeof(str), "| Admin | - %s editou seu dinheiro para $%d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou a grana de %s para %i.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);
	}
	else if(!strcmp(acao, "emprego", true))
    {
		if(PlayerInfo[ playerid ][ pAdmin ] < comando_setemprego) return 0;

	    if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
		    return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

		if(!IsPlayerConnected(id) || PlayerInfo[ id ][ pLogger ] != 1) return ErroMSG(playerid, "Player nao conectado!");

		if(valor > sizeof(EmpregoNome) || 0 > valor) return ErroMSG(playerid, "Profissao invalida!");

	    format(strx, sizeof(strx), ""#SERVELOGO" Voce mudou a Profissao de: {FFFF00}%s (%s) {FFFFFF}Para: {FFFF00}%s", GetName( id ), EmpregoNome[PlayerInfo[ id ][ pEmprego ]], EmpregoNome[valor]);
		SendClientMessage(playerid, -1, strx);

		format(strx, sizeof(strx), "O(a) Admin %s (%d) Mudou sua profissao para: {FFFF00}%s", GetName(playerid), playerid, EmpregoNome[valor]);
		SendClientMessage( id, -1, strx);

        EncerrarTimerProfissao( id );
		PlayerInfo[ id ][ pEmprego ] = valor;
		CarregarProfissao( id );
	}
	else if(!strcmp(acao, "fome", true))
    {
 		if(valor > 100 || 0 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        PlayerInfo[id][pFome] = valor;

		OnSalvarDados( id );

		format(str, sizeof(str), "[ Play Style ] Voce editou a fome de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );


		format(str, sizeof(str), "| Admin | - %s editou sua fome para $%d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou a fome de %s para %i.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);
	}
	else if(!strcmp(acao, "sede", true))
    {
 		if(valor > 100 || 0 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        PlayerInfo[id][pSede] = valor;

		OnSalvarDados( id );

		format(str, sizeof(str), "[ Play Style ] Voce editou a sede de %s para $%d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );


		format(str, sizeof(str), "| Admin | - %s editou sua sede para %d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou a sede de %s para %i.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);
	}
	else if(!strcmp(acao, "level", true))
    {
 		if(valor > 100 || 0 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        PlayerInfo[id][pLevel] = valor;

		OnSalvarDados( id );

		format(str, sizeof(str), "[ Play Style ] Voce editou o level de %s %d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );


		format(str, sizeof(str), "| Admin | - %s editou seu level para %d ", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou o level de %s para %i.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);
	}
	else if(!strcmp(acao, "skin", true))
    {
 		if(valor > 311 || 0 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

        PlayerInfo[id][pSkin] = valor;
		SetPlayerSkinEx(id, valor);

		OnSalvarDados( id );

		format(str, sizeof(str), "[ Play Style ] Voce editou a skin de %s: %d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );


		format(str, sizeof(str), "| Admin | - %s editou sua skin para %d.", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s editou a skin de %s para %i.", GetDateEx(), GetName( playerid ), GetName( id ), valor);
	    SLog("AdminCMD.log", STRLOG);
	}
	else if(!strcmp(acao, "vida", true))
    {
 		if(valor > 100 || 1 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

		SetPlayerVida( id, valor);

		format(str, sizeof(str), "[ Play Style ] Voce editou a vida de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );

		format(str, sizeof(str), "| Admin | - %s editou sua vida para %d.", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

	}
	else if(!strcmp(acao, "colete", true))
    {
 		if(valor > 100 || 1 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

		SetPlayerColete( id, valor);

		format(str, sizeof(str), "[ Play Style ] Voce editou colete de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );

		format(str, sizeof(str), "| Admin | - %s editou seu colete para %d.", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

	}
	else if(!strcmp(acao, "exp", true))
    {
 		if(valor > 100 || 1 > valor) return ErroMSG( playerid, "valor invalido");

		if(!PlayerInfo[id][pLogger]) return ErroMSG( playerid, "Voce informou o ID de um jogador invalido");

		PlayerInfo[id][pExp] = valor;

		format(str, sizeof(str), "[ Play Style ] Voce editou o exp de %s para %d", GetName(id), valor);
		SendClientMessage(playerid, cadm, str );

		format(str, sizeof(str), "| Admin | - %s editou seu exp para %d.", GetName(playerid), valor);
		SendClientMessage(id, C_OFICIAL, str );

	}
	else goto Params;
	return true;
}


CMD:irpos(playerid, params[]){
    new
		Float:CX,
		Float:CY,
		Float:CZ,
		xInt, World
	;
	if(PlayerInfo[playerid][pAdmin] < comando_irpos) return 0;

	if(PlayerInfo[playerid][pAWork] != 1 && PlayerInfo[playerid][pAdmin] < MAX_ADM_LEVEL)
	    	return ErroMSG(playerid, "Voce nao esta em modo Administrativo.");

	if(!sscanf(params, "fffdd", CX, CY, CZ, xInt, World))
	{
		SetPlayerPosEx(playerid,CX, CY, CZ,0.0, xInt);
		SetPlayerVirtualWorld(playerid, World);
		SendClientMessage(playerid, -1, "[ Play Style ] Voce foi ate a posiçao:");
		format( strx, sizeof( strx ), "%f,%f,%f,%d, %i", CX, CY, CZ, xInt, World);
		SendClientMessage(playerid, -1, strx );
	}
	else ErroMSG( playerid, "Use: /irpos [x,y,z,interior, World]");
	return true;
}

/* =============================================================================
						Comandos de sistema
			Comandos utilizados para açoes do sistema em geral
	==========================================================================*/

CMD:logar( playerid )
{
	if( IsPlayerConnected(playerid) && !PlayerInfo[playerid][pLogger] )
    {
		//if(PlayerInfo[playerid][Mobile] == true)
       // {
         //   ShowPlayerDialog(playerid, DIALOG_LOGAR_MOBILE, DIALOG_STYLE_PASSWORD, ""#SERVELOGO" - Login Mobile", "\nSeja bem-vindo novamente!\n\nInsira sua senha de acesso abaixo!\n","Logar","Voltar");

         //   } else {

        ChamarTextEntrada(playerid, 1);

        //}
	}
	return 1;
}

CMD:registrar( playerid )
{
	if( IsPlayerConnected(playerid) && !PlayerInfo[playerid][pLogger] )
    {
        //if(PlayerInfo[playerid][Mobile] == true)
        //{
           // ShowPlayerDialog(playerid, DIALOG_REGISTRO_MOBILE, DIALOG_STYLE_INPUT,""#SERVELOGO" - Registro Mobile", "\nSeja bem-vindo!\n\nInsira uma senha para poder registrar sua conta.\n","Registrar","Voltar");

//} else {

        ChamarTextEntrada(playerid, 2);
	    //}
	}
    return 1;
}

Public:ChamarTextEntrada(playerid, type)
{
    if(type == 1)
    {
        new strnome[24];
        format(strnome, sizeof(strnome), "%s", GetName(playerid));
        PlayerTextDrawSetString(playerid, Entrada[ 13 ][ playerid ], strnome);

        Loop(o, sizeof(Entrada)) { PlayerTextDrawShow(playerid, Entrada[ o ][ playerid ]); }
        SelectTextDraw(playerid, 0xff0000FF);

        PlayerTextDrawSetString(playerid, Entrada[ 7 ][ playerid ], "Voce ja possue uma conta registrada");
        PlayerTextDrawSetString(playerid, Entrada[ 8 ][ playerid ], "LOGAR");

        TextDrawHideForPlayer( playerid, DistanceCaca);
    } else if(type == 2)
    {
        new strnome[24];
        format(strnome, sizeof(strnome), "%s", GetName(playerid));
        PlayerTextDrawSetString(playerid,Entrada[ 13 ][ playerid ], strnome);

        Loop(o, sizeof(Entrada)) { PlayerTextDrawShow(playerid, Entrada[ o ][ playerid ]); }
        SelectTextDraw(playerid, 0xff0000FF);

        PlayerTextDrawSetString(playerid, Entrada[ 7 ][ playerid ], "Voce nao possue uma conta registrada");
        PlayerTextDrawSetString(playerid, Entrada[ 8 ][ playerid ], "REGISTRAR");

        TextDrawHideForPlayer( playerid, DistanceCaca);
    }
    return 1;
}

/*
	========================================================
			Funçoes abrir / fechar portao
	========================================================
*/

new
	GateTimer[ 100 ]
;

forward openGate(playerid, obj);
public openGate(playerid, obj)
{
    new
		Float:x,
		Float:y,
		Float:z
	;

	if( GateTimer[obj] == 1 ) return 0;
	GateTimer[ obj ] = 1;

	GetObjectPos( obj, x, y, z );
	MoveObject(obj, x, y, z + 5, 4.0);

	return SetTimerEx( "closeGate", 3000, 0, "di", playerid, obj);
}

forward closeGate(playerid, obj);
public closeGate(playerid, obj)
{
	new
		Float:x,
		Float:y,
		Float:z
	;

	GetObjectPos( obj, x, y, z );
	MoveObject(obj, x, y, z - 5, 4.0);

	return SetTimerEx( "resetGateTime", 2500, 0, "i", obj );
}

Public:resetGateTime(obj) return GateTimer[ obj ] = 0;


/* ========================================
			OnServerUpdate()

		Atualiza o horario do servidor
========================================== */


new
	DateT[5]
;

#define MAX_DISTANCIA 80.0

Public:OnServerUpdate(i)
{
	new
		tmp[ 100 ],
		Ping
	;

	getdate(DateT[0], DateT[1], DateT[2]);
	gettime(DateT[3], DateT[4]);


    if(!IsPlayerNPC(i))
    {
		Ping = GetPlayerPing( i );
        if(Ping > PingLimite_Servidor){
			if(Ping != 65535){

			    format(tmp, sizeof(tmp), "{FFFA82}| PING | - %s esta com ping muito alto e foi kickado. ", GetNameEx( i ));
				SendClientMessageToAll(-1, tmp);

				printf("Ping Kick: %s ultrapassou o limite de ping do servidor, ping registrado: %i/%i", GetName( i ), Ping, PingLimite_Servidor );
				Kick( i );
			}
		}
		if(PlayerInfo[ i ][pLogger])
        {
			new string[256];
			new year, month, day;
			new hour, minute, second;
			new strmes[24];
			if(PlayerInfo[ i ][pTutorial])
            {
				getdate(year, month, day);
				gettime(hour, minute, second);

				if(month == 1)
				{
				    format(strmes, sizeof(strmes), "01");
				}
				if(month == 2)
				{
				    format(strmes, sizeof(strmes), "02");
				}
				if(month == 3)
				{
				    format(strmes, sizeof(strmes), "03");
				}
				if(month == 4)
	            {
				    format(strmes, sizeof(strmes), "04");
				}
				if(month == 5)
				{
				    format(strmes, sizeof(strmes), "05");
				}
				if(month == 6)
				{
				    format(strmes, sizeof(strmes), "06");
				}
				if(month == 7)
				{
				    format(strmes, sizeof(strmes), "07");
				}
				if(month == 8)
				{
				    format(strmes, sizeof(strmes), "08");
				}
				if(month == 9)
				{
				    format(strmes, sizeof(strmes), "09");
				}
				if(month == 10)
				{
				    format(strmes, sizeof(strmes), "10");
				}
				if(month == 11)
				{
				    format(strmes, sizeof(strmes), "11");
				}
				if(month == 12)
				{
				    format(strmes, sizeof(strmes), "12");
				}
			    format(string, sizeof(string), "~r~ONLINE: %d/50", totalon);
			    TextDrawSetString(BPSBRO[35], string);

			    format(string, sizeof(string), "~r~%02d/%02d/%04d", day, month, year);
			    TextDrawSetString(BPSBRO[38], string);

			    format(string, sizeof(string), "~r~%02d:%02d:%02d", hour, minute, second);
			    TextDrawSetString(BPSBRO[37], string);

			    format(string, sizeof(string), "~r~Cash: %d", PlayerInfo[i][Cash]);
			    TextDrawSetString(BPSBRO[36], string);

                if(PlayerInfo[ i ][ pBlockCA ])
                {

				    PlayerInfo[ i ][ pBlockCATemp ]--;

					if(!PlayerInfo[ i ][ pBlockCATemp ]){
					    PlayerInfo[ i ][ pBlockCA ] = false;
					    PlayerInfo[ i ][ pBlockCATemp ] = 0;
                        SendClientMessage(i, -1, ""#SERVELOGO" Voce foi liberado para utilizar o chat ajuda novamente!");
					}
				}
				if(!PresoStatus[ i ])
                {
					if(!PlayerInfo[ i ][ pHospitalizado ])
                    {
						if(PlayerInfo[i][pAWork] != 3)
                        {
				            if(!PlayerAFK{ i })
                            {
				                PlayerInfo[i][ pSegundosUP ]--;

				                if(PlayerInfo[i][ pSegundosUP ] <= 0){
				                    PlayerInfo[i][ pMinutosUP ]--;
				                    PlayerInfo[i][ pSegundosUP ] = 59;
								}

								if(PlayerInfo[i][ pMinutosUP ] <= 0){
					        		SetSalario(i);

					        		PlayerInfo[i][ pMinutosUP ] = 59;
					        		PlayerInfo[i][ pSegundosUP ] = 59;
								}
							}
						}
					}

		            GetPlayerPos(i, PlayerCurrentPos[0], PlayerCurrentPos[1], PlayerCurrentPos[2]);
					if(!floatcmp(PlayerCurrentPos[0], PlayerLastPos[i][LastX]) && !floatcmp(PlayerCurrentPos[1], PlayerLastPos[i][LastY])){
						PlayerAfkTicks[i]++;
					}
					else
					{
						PlayerAfkTicks[i] = 0;
						PlayerAFK{ i } = false;
					}
					PlayerLastPos[i][LastX] = PlayerCurrentPos[0];
					PlayerLastPos[i][LastY] = PlayerCurrentPos[1];
					PlayerLastPos[i][LastZ] = PlayerCurrentPos[2];

					if(PlayerAfkTicks[i] == MAX_AFK_TIME*60 && PlayerInfo[i][pLogger] == 1)
                    {
						SCM(i, -1, "{49E2F0}O sistema detectou sua ausencia e pausou seu relogio UP!");

						PlayerAFK{ i } = true;

						PlayerTextDrawSetString(i, UPText[ i ][ 0 ], "pause");


					}
				}

				format( tmp, sizeof(tmp), "~w~%02d~y~:~w~%02d", DateT[3], DateT[4]);
				TextDrawSetString(Date[ i ], tmp);

				VerificarLocal(i);
			}
			if(Imobilizado[i])
            {
				if(ImobilizadoTime[i] > 0)
                {
		            ImobilizadoTime[i] -= 1;
				}
				else
				{
					UnFreeze( i );
					Imobilizado[i] = 0;
					StopLoopingAnim( i );
				}
			}
			if(Amarrado[ i ])
            {
				if(AmarradoTime[i] > 0){
		            AmarradoTime[i]--;
				}
				else
				{
					UnFreeze( i );
					Imobilizado[i] = 0;
				}
			}

			if(PlayerInfo[ i ][ CfgRelogioUP ] == true && !PresoStatus[ i ] && !PlayerInfo[ i ][ pHospitalizado ])
            {
			    if(!PlayerAFK{ i })
                {
				    static
						st_[ 50 ],
						stx[ 50 ],
						stx2[ 50 ]
					;

					if(PlayerInfo[ i ][ pMinutosUP ] < 10) format(stx2,sizeof( stx2 ),"0%i", PlayerInfo[ i ][ pMinutosUP ]);
				    else format(stx2,sizeof( stx2 ), "%i", PlayerInfo[ i ][ pMinutosUP ]);

				    if(PlayerInfo[ i ][ pSegundosUP ] < 10) format(stx,sizeof( stx ),"0%i", PlayerInfo[ i ][ pSegundosUP ]);
				    else format(stx,sizeof( stx ),"%i", PlayerInfo[ i ][ pSegundosUP ]);


				    format(st_,sizeof( st_ ),"~r~UP:%s:%s", stx2, stx);
					PlayerTextDrawSetString(i, UPText[ i ][ 0 ], st_);
				}
			}

			if(CNHTest[ i ] == 4 )
            {
                if(PlayerInfo[i][Mobile] == false)
                {
	                if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID( i )) && AutoEscolaAviso[ i ] == 1)
                    {
						if(IsPlayerInAnyVehicle( i ))
                        {
							SetVehicleToRespawn(GetPlayerVehicleID( i ));
					        ClearChatbox(i, 5);
						    SCM(i, -1, "{1F5FD5}[ Auto Escola ] - Voce falhou na segunda etapa do exame por perder sua carga!");
							GameTextForPlayer(i, "~r~Falhou", 1000, 1);

							ExameQuestID[ i ] = 0;
							ExamePoints[ i ] = 0;
							AutoEscolaProgresso[ i ] = 0;
			                AutoEscolaAviso[ i ] = 0;
			        		CNHTest[ i ] = 0;

							PlaySoundForPlayer(i, 1055);

			                SetCameraBehindPlayer(i);
			                SetPlayerPos(i, -2039.353271,-126.431694,-50.914062);
							SetPlayerVirtualWorld(i, 0);
							//SetPlayerInterior(i, 3);

							UnFreeze( i );
						}
	                }
	                else if(IsTrailerAttachedToVehicle(GetPlayerVehicleID( i )))
                    {
	                    if(!AutoEscolaAviso[ i ])
                        {
	                    	AutoEscolaAviso[ i ] = 1;
	                    	CriarRotaAutoEscolaTipoE( i );
	                    	SetTimerEx("DestravarRaceCP", 1000, false, "ii", i, RaceChecksAutoEscolaTipoE[i][0]);
						}
					}
                }
            }

			//Petroleiros
			if(TraillerAttach[ i ] && EmpregoDuty[ i ] == Petroleiro)
            {
                //
                if(PlayerInfo[i][Mobile] == false)
                {
	                if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID( i )))
                    {
	                    if(TraillerCount[ i ] <= 0){
	                        if(GetPVarInt(i, "CheckPetrol") == 1) DisablePlayerCheckpoint( i );

	                        SetPVarInt(i, "CheckPetrol", 0);
							PlayerTextDrawHide(i, TimerTruck[ i ]);
	                        TraillerAttach[ i ] = false;
	                        TraillerComb[ i ] = 0;
							PetroleiroMoney[ i ] = 0;
							_SecurityPetrol[ i ] = 0;
							TraillerCount[ i ] = 0;
							GameTextForPlayer(i, "~w~Voce ~r~falhou", 3000, 1);
						}
						else {
						    PlayerTextDrawShow(i, TimerTruck[ i ]);

							static str[80];
						    format(str, sizeof str, "Tempo: ~r~%d", TraillerCount[ i ]);
						    PlayerTextDrawSetString(i, TimerTruck[ i ], str);
						    TraillerCount[ i ]--;
						}
					}
					else {
					    PlayerTextDrawHide(i, TimerTruck[ i ]);
						TraillerCount[ i ] = 30;
					}
                } else if(PlayerInfo[i][Mobile] == true)
                {
                    if(IsPlayerInAnyVehicle(i))
                    {
                        PlayerTextDrawShow(i, TimerTruck[ i ]);

                        static str[80];
                        format(str, sizeof str, "Tempo: ~r~%d", TraillerCount[ i ]);
                        PlayerTextDrawSetString(i, TimerTruck[ i ], str);
                        TraillerCount[ i ]--;

                        } else {

                        PlayerTextDrawHide(i, TimerTruck[ i ]);
                        TraillerCount[ i ] = 30;
                    }
                }
			}
			else if(Cacando{i}){
				new Float:dist;
                dist = GetPlayerDistanceFromPoint(i, CacaObjects[CacaID{i}][0], CacaObjects[CacaID{i}][1], CacaObjects[CacaID{i}][2]);
		        if(dist > 900.0) dist = 900.0;
		        SetPlayerProgressBarValue(i, CacaDistance[ i ], floatabs(dist-900));
 			}
			else if(Mineirando[ i ]){
			    if(Mineirando[ i ] >= 100){
			        DestroyPlayerProgressBar(i, ProgressMineirador[i]);
    				Mineirando[ i ]=0;
    				ClearAnimations(i);
    				SortRecompensa(i);
				}
				else {
					PlayerPlaySound(i, 1135, 0.0, 0.0, 0.0);
				    Mineirando[ i ] += 4;
                	SetPlayerProgressBarValue(i, ProgressMineirador[i], Mineirando[i]);
				}
			}
			else if(RotaBusFailed[ i ]){
			    if(IsPlayerInAnyVehicle(i)){
					Loop(v, sizeof(Onibus)){
     	    			if(GetPlayerVehicleID(i) == Onibus[v]){
							RotaBusFailedTemp[ i ] = 30;
				    		RotaBusFailed[ i ] = false;

				    		PlayerTextDrawHide(i, TimerTruck[ i ]);
							return true;
						}
					}
				}
			    if(RotaBusFailedTemp[ i ] <= 0){
					RotaBusFailedTemp[ i ] = 30;
		    		RotaBusFailed[ i ] = false;
		    		EmpregoDuty[ i ] = 0;
		            TransportMoney[ i ] = 0;

		            if(OnibusRoute[ i ] != 0){
				        CheckBus[i] = 0;
						TransportMoney[i] = 0;
				        OnibusRoute[ i ] = 0;
				    	DisablePlayerCheckpoint( i );
					}

		    		PlayerTextDrawHide(i, TimerTruck[ i ]);
		    		GameTextForPlayer(i, "~w~Voce ~r~falhou", 3000, 1);
		    		SetPlayerSkinEx(i, PlayerInfo[ i ][ pSkin ]);
				}
				else
				{
					PlayerTextDrawShow(i, TimerTruck[ i ]);

					static str[80];
					format(str, sizeof str, "Tempo: ~r~%d", RotaBusFailedTemp[ i ]);
					PlayerTextDrawSetString(i, TimerTruck[ i ], str);

					RotaBusFailedTemp[ i ]--;
				}
			}
			else if(RotaFailed[ i ]){
			    if(IsPlayerInAnyVehicle(i)){
				    Loop(id, sizeof(TrukersLixeiros)){
			    		if(GetPlayerVehicleID(i) == TrukersLixeiros[id]){
							RotaFailedTemp[ i ] = 30;
				    		RotaFailed[ i ] = false;

				    		PlayerTextDrawHide(i, TimerTruck[ i ]);
				    		return true;
						}
					}
				}
			    if(RotaFailedTemp[ i ] <= 0){
					RotaFailedTemp[ i ] = 30;
		    		RotaFailed[ i ] = false;
		    		EmpregoDuty[ i ] = 0;
		            TrashMoney[ i ] = 0;

                    if(TrashCheck[ i ] != 0){
						DestroyTrashObjects(i);
						TrashMoney[ i ] = 0;
						TrashCheck[ i ] = 0;
						TrashRoute[ i ] = 0;
						DisablePlayerCheckpoint( i );
					}

		    		PlayerTextDrawHide(i, TimerTruck[ i ]);
		    		GameTextForPlayer(i, "~w~Voce ~r~falhou", 3000, 1);
		    		SetPlayerSkinEx(i, PlayerInfo[ i ][ pSkin ]);
				}
				else
				{
					PlayerTextDrawShow(i, TimerTruck[ i ]);

					static str[80];
					format(str, sizeof str, "Tempo: ~r~%d", RotaFailedTemp[ i ]);
					PlayerTextDrawSetString(i, TimerTruck[ i ], str);

					RotaFailedTemp[ i ]--;
				}
			}
		}
	}
	return 1;
}


Public:VerificarLocal( playerid )
{
    if(PlayerInfo[ playerid ][ pEmprego ] == Petroleiro && EmpregoDuty[ playerid ])
    {
		if(IsPlayerInPlace(playerid, -1120.0850, -760.2822, -970.0850, -600.2822))
        {
		    //if(IsTrailerAttachedToVehicle(GetPlayerVehicleID( playerid )))
            //{
		        TextDrawSetString(TextAreas, "/carregar");
				TextDrawShowForPlayer(playerid, TextAreas);
			//}
		}
		else {
			TextDrawHideForPlayer(playerid, TextAreas);
		}
	}
	if(PlayerInfo[ playerid ][ pEmprego ] == Lenhador && EmpregoDuty[ playerid ])
	{
	    if(IsPlayerInPlace(playerid, -2072.347656, -2440.809814, -1932.712402, -2362.799804))
        {
		    TextDrawSetString(TextAreas, "/vendermadeiras");
			TextDrawShowForPlayer(playerid, TextAreas);
		} //GangZoneCreate(-2072.347656, -2440.809814, -1932.712402, -2362.799804);
		else {
            TextDrawHideForPlayer(playerid, TextAreas);
		}
	}
}

/*CMD:cactor(playerid)
{
    new Float:minhapos[4];

    GetPlayerPos(playerid, minhapos[0], minhapos[1], minhapos[2]);
    GetPlayerFacingAngle(playerid, minhapos[3]);

    SCM(playerid, -1, "criado");

    SetTimerEx("criadoido", 2000, false, "iffff", playerid, minhapos[0], minhapos[1], minhapos[2], minhapos[3]);
    return 1;
}

Public:criadoido(playerid, Float:minhaposX, Float:minhaposY, Float:minhaposZ, Float:minhaposA)
{
    CreateDynamicActor(20, minhaposX, minhaposY, minhaposZ, minhaposA);
    return 1;
}*/



forward SelectOrgSkin(playerid);
public SelectOrgSkin(playerid)
{
    GetPlayerPos(playerid, posAnterior[playerid][0], posAnterior[playerid][1], posAnterior[playerid][2]);
    intAnterior[playerid] = GetPlayerInterior(playerid);

    DestroyDynamicActor(ActorSkin[playerid]);

    //SetPlayerInterior( playerid, 14 );
    SetPlayerVirtualWorld(playerid, (playerid+1));

    SetPlayerCameraPos(playerid, 2605.96, -1263.48, 80.82);
    SetPlayerCameraLookAt(playerid, 2606.27, -1269.47, 80.75);

    SelectTextDraw(playerid, 0xFF000FF);

    TextDrawShowForPlayer(playerid, EscolherSkinOrg[playerid][0]);
    TextDrawShowForPlayer(playerid, EscolherSkinOrg[playerid][1]);
    TextDrawShowForPlayer(playerid, EscolherSkinOrg[playerid][2]);

    CreateDynamicActor(0, 2606.2554,-1267.7814,81.1481,5.8937);
    SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));

	return 1;
}

stock TirarTextSkinOrg(playerid)
{
    TextDrawHideForPlayer(playerid, EscolherSkinOrg[playerid][0]);
    TextDrawHideForPlayer(playerid, EscolherSkinOrg[playerid][1]);
    TextDrawHideForPlayer(playerid, EscolherSkinOrg[playerid][2]);
    return 1;
}

stock SendMessageToOrg(orgid, const text[])
{
	Loop(a, GetMaxPlayers())
	{
		if(PlayerInfo[a][pOrg] == orgid) {
			SendClientMessage(a, orgsColor[orgid], text);
		}
	}
}

MessageProxPlayer(id, cor, Float:distancia, const text[])
{
	new Float:ProxPos[3];
	GetPlayerPos(id, ProxPos[0], ProxPos[1], ProxPos[2]);
	ForPlayers(i){
		if(!IsPlayerInRangeOfPoint(i, distancia, ProxPos[0], ProxPos[1], ProxPos[2]) || i == id) continue;
		SendClientMessage(i, cor, text);
	}
}

stock SendMessageToProx(Float:prox, referencia, const texto[], cor = 0xffffffff) {
	new Float:x,Float:y,Float:z;
	GetPlayerPos(referencia, x, y, z);
	ForPlayers(a){
		if(!IsPlayerInRangeOfPoint(a, prox, x, y, z)) continue;
		SendClientMessage(a, cor, texto);
	}
}

forward ABroadCastPM(COLOR, const striN[]);
public ABroadCastPM(COLOR, const striN[]){
	ForPlayers(i){
	    if(PlayerInfo[ i ][ pAdmin ] > 0){
			if(GetPVarInt(i, "VendoSMS") == 1){
				SendClientMessage(i, COLOR, striN);
			}
		}
	}
	return true;
}

stock JNNEWS(message[])
{
	static
	    Jstr[300]
	;
	ClearChatboxToAll(1);
	SendClientMessageToAll(Verde, "|______________________ [ GL News ] ______________________|");
	format(Jstr, sizeof(Jstr), "%s", message);
    ClearChatboxToAll(1);
	return SendClientMessageToAll(Verde, Jstr);
}

//SendAdminMessage()
forward SendAdminMessage(color, const stext[]);
public SendAdminMessage(color, const stext[]){
	ForPlayers(i){
	    if(PlayerInfo[i][pAdmin] >= 1){
		    SCM(i, color, stext);
		}
	}
	return true;
}

forward SAMCMD(color, const stext[]);
public SAMCMD(color, const stext[]){
	ForPlayers(i){
		if(PlayerInfo[i][pAdmin] >= comando_vercmds){

			if(GetPVarInt(i, "VendoCMDS") == 1) {
				SCM(i, color, stext);
			}
		}
	}
	return true;
}

forward SendEmpregoMSG(emprego, COLOR, const strG[]);
public SendEmpregoMSG(emprego, COLOR, const strG[])
{
	ForPlayers( i ){
		if (PlayerInfo[i][pEmprego] == emprego && EmpregoDuty[ i ] == emprego)
		{
			SendClientMessage(i, COLOR, strG);
		}
	}
	return true;
}

forward SendCopsNotifyMessage(playerid, id, reason[], relator[]);
public SendCopsNotifyMessage(playerid, id, reason[], relator[]) {

	new string[ 129 ];

	ForPlayers(i) {
		if( isPlayerCop(i) ){
			SendClientMessage( i, orgsColor[PlayerInfo[i][pOrg]],"-=-=-=-=-=-=-=-=-=-=-=-= [ Central Policial - Delito ] =-=-=-=-=-=-=-=-=-=-=-=-" );
			format( string, sizeof(string), "{ffffff}Acusado: {%s}%s(%d){ffffff} | Delito: {%s}%s{ffffff} | Flagrado por: {%s}%s", OrgColorHex[PlayerInfo[i][pOrg]], GetName( id ), id, OrgColorHex[PlayerInfo[i][pOrg]], reason, OrgColorHex[PlayerInfo[i][pOrg]], relator );
			SendClientMessage( i, -1, string );
		}
	}
	return 1;
}

forward verifySu(r[]);
public verifySu(r[]) {
	for( new i = 0; i < sizeof(reasonList); i++ ) {
		if( strcmp(r, reasonList[i][fName], true) == 0 )
		return true;
	}
	return false;
}

stock isPlayerCop( id ) {

    new org = PlayerInfo[ id ][pOrg];
    switch(org) {
		case PM, BOPE: return true;
	}
	return false;
}

stock IsPlayerGang(playerid) {
	new org = PlayerInfo[playerid][pOrg];
	switch(org) {
	    case 0: return true;
		case CV, PCC: return true;
	}
	return false;
}

stock AbrirGPM(playerid, portaid){
	if(PlayerInfo[playerid][pOrg] == PM || PlayerInfo[playerid][pAdmin] == MAX_ADM_LEVEL){
		if(portaid == 0){ //Porta Principal
		    MoveDynamicObject(P_PM[0], 243.30000305176, 72.5, 1005.0999755859, 2);
		    SetTimerEx("CloseGate", 5000, false, "iffff", P_PM[0], 245.5000, 72.7998, 1005.0999, 3.0);
		}
		else if(portaid == 1){ //Porta Garagem fundos
            MoveDynamicObject(P_PM[1], 1597.9000244141, -1638.5, 14.699999809265, 2);
		    SetTimerEx("CloseGate", 5000, false, "iffff", P_PM[1], 1588.5999, -1638.3000, 14.699, 3.0);
		}
		else if(portaid == 2){ //Porta Garagem principal
            MoveDynamicObject(P_PM[2], 1540.18725585, -1617.09155273, 15.18280601, 2);
		    SetTimerEx("CloseGate", 5000, false, "iffff", P_PM[2], 1540.09313964, -1627.93298339, 15.18280601, 3.0);
		}
		GameTextForPlayer(playerid, "~g~Aberto!", 1000, 1);
		SCM(playerid, Purple, "Aberto Com sucesso! 5 segundos para o fechamento!");
	}
	else ErroMSG(playerid, "Voce nao e um Oficial da PM ou Advogado!");
	return true;
}

stock AbrirGBope(playerid, portaid){
	if(PlayerInfo[playerid][pOrg] == BOPE || PlayerInfo[playerid][pAdmin] == MAX_ADM_LEVEL){
		if(portaid == 0){ //Porta Escritorio
		    MoveDynamicObject(P_BOPE[0], 1938.70203, 1175.32593, 21.21913, 2);
		    SetTimerEx("CloseGate", 5000, false, "iffff", P_BOPE[0], 1938.68042, 1176.86377, 21.21913, 3.0);
		}
		else if(portaid == 1){ //Porta de Acesso as celas
            MoveDynamicObject(P_BOPE[1], 1933.59705, 1165.20313, 17.23829, 2);
		    SetTimerEx("CloseGate", 5000, false, "iffff", P_BOPE[1], 1932.21631, 1165.18909, 17.23829, 3.0);
		}
		else if(portaid == 2){ //Portao Central
		    MoveDynamicObject(P_BOPE[2], 2720.39453, -2495.33789, 16.69063, 3);
		    SetTimerEx("CloseGate", 5000, false, "iffff", P_BOPE[2], 2720.15845, -2503.78516, 16.69063, 3.0);
		}
		GameTextForPlayer(playerid, "~g~Aberto!", 1000, 1);
		SCM(playerid, Purple, "Aberto Com sucesso! 5 segundos para o fechamento!");
	}
	else ErroMSG(playerid, "Voce nao e um Oficial do BOPE ou Advogado!");
	return true;
}

forward CloseGate(gateid, Float:closex, Float:closey, Float:closez, Float:speed);
public CloseGate(gateid, Float:closex, Float:closey, Float:closez, Float:speed)
{
	MoveDynamicObject(gateid, Float:closex, Float:closey, Float:closez, speed);
}

Public:IsAVip(playerid)
{
    if(PlayerInfo[playerid][pVIP] >= 1)
    	return true;
	return false;
}



//CarregarActores()
CarregarActores(){

	Loop(actorid,  sizeof(Actores))
    {
        Actor[ actorid ] = CreateActor(Actores[actorid][ac_id], Actores[actorid][ac_x], Actores[actorid][ac_y], Actores[actorid][ac_z], Actores[actorid][ac_r]);
	}

    ActorLabel[0] = Create3DTextLabel("{FFB0F9}Jaque\n\n{DEE1E1}Precisa de ajuda?\nAperte 'F'", -1, 1074.8849, -1790.4553, 13.9985, 30.0, 0, 1);
}

stock LoadPortoesHQs()
{
    /* =========================================================================
								Portoes
	========================================================================= */

	/*P_LSPD[1] =
	P_LSPD[2] = CreateObject(2930,250.60000610,64.19999695,1005.09997559,0.00000000,0.00000000,0.00000000); //portao - lspd recepcao
	P_LSPD[4] = CreateObject(2930,248.00000000,75.00000000,1005.09997559,0.00000000,0.00000000,181.82373047); //portao - lspd armarios
	P_LSPD[5] = CreateObject(18553,244.80000305,76.69999695,1004.20001221,0.00000000,0.00000000,0.00000000); //portao - lspd central
*/
    P_PM[0] = CreateDynamicObject(2930, 245.5000, 72.7998, 1005.0999, 0.0, 0.0, 89.4342); //portao - lspd corredor
    //P_PM[1] = CreateDynamicObject(980, 1588.5999, -1638.3000, 14.6999, 0.0, 0.0, 0.0); //portao - garagem pm
    //P_PM[2] = CreateDynamicObject(980, 1540.09313964, -1627.93298339, 15.18280601, 0.0, 0.0, 90.0); //portao - garagem pm principal

    P_BOPE[0] = CreateDynamicObject(1495, 1938.68042, 1176.86377, 21.21913,   0.00000, 0.00000, 270.13815); //Porta BOPE
	P_BOPE[1] = CreateDynamicObject(1495, 1932.21631, 1165.18909, 17.23829,   0.00000, 0.00000, 0.00000); //Porta Cadeia BOPE
	P_BOPE[2] = CreateDynamicObject(2990, 2720.15845, -2503.78516, 16.69063,   0.00000, 0.00000, 268.20892); //Portao principal
}

//LoadJobsLocations()
LoadJobsLocations(){
	Loop(jid, sizeof(getJobMenu)){
        //CreateDynamic3DTextLabel( getJobMenu[jid][jobDescrition], -1, getJobMenu[jid][jobPosX], getJobMenu[jid][jobPosY], getJobMenu[jid][jobPosZ], 25);
        Create3DTextLabel( getJobMenu[jid][jobDescrition], -1, getJobMenu[jid][jobPosX], getJobMenu[jid][jobPosY], getJobMenu[jid][jobPosZ], 20.0, 0, 0);
        CreateDynamicPickup(1239, 1, getJobMenu[jid][jobPosX], getJobMenu[jid][jobPosY], getJobMenu[jid][jobPosZ], 0);
	}
}

//LoadPickupsFromMenus()
LoadPickupsFromMenus()
{
    // AUTO ESCOLA
    CreateDynamicPickup(1239, 1, -2039.353271,-126.431694,-50.914062, 0);

	static strlabel[ 200 ];
    //	Criaçao dos Pickup de Menus
	Loop(i, sizeof(PickupFix) )
	{
	    //CreateDynamicPickup(PickupFix[i][PModel], PickupFix[i][PStyle], PickupFix[i][Px], PickupFix[i][Py], PickupFix[i][Pz], 0);
        AddStaticPickup(PickupFix[i][PModel], PickupFix[i][PStyle], PickupFix[i][Px], PickupFix[i][Py], PickupFix[i][Pz], 0);
		Create3DTextLabel( PickupFix[i][PickupName], PickupFix[i][CorPick], PickupFix[i][Px], PickupFix[i][Py], (PickupFix[i][Pz] + 0.20), 20.0, 0, 0);
	}

	//	Criaçao dos Pickup de Empregos
	Loop(i, sizeof(PickupEmprego) )
	{
	    CreateDynamicPickup(PickupEmprego[i][PModel], PickupEmprego[i][PStyle], PickupEmprego[i][Px], PickupEmprego[i][Py], PickupEmprego[i][Pz], 0);
		Create3DTextLabel( PickupEmprego[i][PickupName], PickupEmprego[i][CorPick], PickupEmprego[i][Px], PickupEmprego[i][Py], (PickupEmprego[i][Pz] + 0.20), 20.0, 0, 0);
	}

	// Criaçao de Pickup de Orgs ( Trabalhar )
	Loop(i, sizeof(PickupOrg) ) {
	    CreateDynamicPickup(PickupOrg[i][PModel], PickupOrg[i][PStyle], PickupOrg[i][Px], PickupOrg[i][Py], PickupOrg[i][Pz], 0);
		Create3DTextLabel( PickupOrg[i][PickupName], PickupOrg[i][CorPick], PickupOrg[i][Px], PickupOrg[i][Py], (PickupOrg[i][Pz] + 0.20), 20.0, 0, 0);
	}

	//	Criaçao dos Pickup de entrada

	Loop(i, sizeof(PickupFixEntrada) ) {
	    CreateDynamicPickup(PickupFixEntrada[i][PickupModel], PickupFixEntrada[i][PickupStyle], PickupFixEntrada[i][posX], PickupFixEntrada[i][posY], PickupFixEntrada[i][posZ], 0);
		Create3DTextLabel( PickupFixEntrada[i][EntradaName], PickupFixEntrada[i][TextColor], PickupFixEntrada[i][posX], PickupFixEntrada[i][posY], (PickupFixEntrada[i][posZ] + 0.50), 20.0, 0, 0);
	}

    Loop(i, sizeof(VehProf) ) {
        CreateDynamicPickup(VehProf[i][vePickup], 1, VehProf[i][veX], VehProf[i][veY], VehProf[i][veZ], 0);
        Create3DTextLabel( VehProf[i][veText], 0xffffffff, VehProf[i][veX], VehProf[i][veY], (VehProf[i][veZ] + 0.50), 20.0, 0, 0);
    }

	//Sistema de empresas
    Loop(i, sizeof( PickupFixEntradaEmp )){
		CreateDynamicPickup(PickupFixEntradaEmp[i][E_pickup], -1, PickupFixEntradaEmp[i][E_entradax], PickupFixEntradaEmp[i][E_entraday], PickupFixEntradaEmp[i][E_entradaz], 0);
		//CreateDynamicMapIcon(PickupFixEntradaEmp[i][E_entradax], PickupFixEntradaEmp[i][E_entraday], PickupFixEntradaEmp[i][E_entradaz], PickupFixEntradaEmp[i][E_icone], 0, -1, -1, -1, 200.0);
        Create3DTextLabel("Saida!\nuse /sair ou aperte 'F'", 0xFFFFFF99, PickupFixEntradaEmp[i][E_saidax], PickupFixEntradaEmp[i][E_saiday], (PickupFixEntradaEmp[i][E_saidaz] + 0.20), 20.0, 0, 0 );
	}

	//Criaçao Pickups Saidas
	Loop(i, sizeof(PickupFixSaida) ) {
	    Create3DTextLabel( PickupFixSaida[i][SaidaName], PickupFixSaida[i][SPcolor], PickupFixSaida[i][PX], PickupFixSaida[i][PY], (PickupFixSaida[i][PZ] + 0.30), 20.0, 0, 0);
	}

	// Criaçao de TextLabel
	Loop(textid, sizeof( Text3DLabel )){

	    Create3DTextLabel( Text3DLabel[textid][T3dText], 0xFFFFFF99, Text3DLabel[textid][T3dx], Text3DLabel[textid][T3dy], Text3DLabel[textid][T3dz], Text3DLabel[textid][Tdist], 0, 0);
	}

    //AddStaticPickup(1239, 1, 593.487548,-1250.483276,18.236093, 0);// detran imobiliaria

	//	Criaçao dos Pickup de equipar
    Loop(i, sizeof(PickupEquipar) ) {
		format(strlabel, sizeof(strlabel), "%s\n{FFFFFF}Digite '{FF0000}/equipar{FFFFFF}' para utilizar", PickupEquipar[i][pickText]);
		CreateDynamicPickup(PickupEquipar[i][pickIco], 1, PickupEquipar[i][posX],PickupEquipar[i][posY], PickupEquipar[i][posZ], PickupEquipar[i][intID]);
		Create3DTextLabel( strlabel, 0x008080FF, PickupEquipar[i][posX], PickupEquipar[i][posY], (PickupEquipar[i][posZ] + 0.50), 20.0, 0, 0 );
	}

	//	Criaçao dos Pickup de gerenciar procurados

	Loop(i, sizeof(pickupProcuradosData) ) {
		format(strlabel, sizeof(strlabel), "%s\n{FFFFFF}Pressione '{FF0000}F{FFFFFF}' para utilizar", pickupProcuradosData[i][pickText]);
		CreateDynamicPickup(pickupProcuradosData[i][pickIco], 1, pickupProcuradosData[i][posX],pickupProcuradosData[i][posY], pickupProcuradosData[i][posZ], PickupEquipar[i][intID]);
		Create3DTextLabel( strlabel, 0x008080FF, pickupProcuradosData[i][posX], pickupProcuradosData[i][posY], (pickupProcuradosData[i][posZ] + 0.50), 20.0, 0, 0 );
	}

	//	Prender jogador - Organizaçoes Policiais

	for( new i = 0; i < sizeof(pickupPrenderData); i++ ) {
		format(strlabel, sizeof(strlabel), "%s\nDigite /prender", pickupPrenderData[i][pickText]);
		CreateDynamicPickup(pickupPrenderData[i][pickIco], 1, pickupPrenderData[i][posX],pickupPrenderData[i][posY], pickupPrenderData[i][posZ], pickupPrenderData[i][intID]);
		Create3DTextLabel( strlabel, 0x00808099, pickupPrenderData[i][posX], pickupPrenderData[i][posY], (pickupPrenderData[i][posZ] + 0.50), 20.0, 0, 0 );
	}

	//	Criaçao dos Pickup de infoorg

	Loop(i, sizeof(pickupInfoorgData) ) {
	    format(strlabel, sizeof(strlabel), "%s\n{FFFFFF}Pressione '{FF0000}F{FFFFFF}' para utilizar", pickupInfoorgData[i][pickText]);
		CreateDynamicPickup(pickupInfoorgData[i][pickIco], 1, pickupInfoorgData[i][posX],pickupInfoorgData[i][posY], pickupInfoorgData[i][posZ], pickupInfoorgData[i][intID]);
		Create3DTextLabel( strlabel, 0x00808099, pickupInfoorgData[i][posX], pickupInfoorgData[i][posY], (pickupInfoorgData[i][posZ] + 0.50), 20.0, 0, 0 );
	}

	 //Criaçao Pickups das cameras

	Loop(i, sizeof(PickupsCam) ) {
        format(strlabel, sizeof(strlabel), "{%s}%s\n{FFFFFF}/Camera", OrgColorHex[PickupsCam[i][ OrgID ]], PickupsCam[i][ PickupText ]);
        CreateDynamicPickup(PickupsCam[i][PickupID], 1, PickupsCam[i][PosX], PickupsCam[i][PosY], PickupsCam[i][PosZ], 0);
		Create3DTextLabel( strlabel, 0xFFFFFF99, PickupsCam[i][PosX], PickupsCam[i][PosY], PickupsCam[i][PosZ], 20.0, 0, 0 );
	}

	//Criaçao dos Menus de alistamento e informaçoes basicas de organizaçoes

	Loop(i, sizeof(PicksCandidatos)){
		CreateDynamicPickup(1239, 1, PicksCandidatos[i][CanX], PicksCandidatos[i][CanY], PicksCandidatos[i][CanZ], 0);
		Create3DTextLabel( "Informaçoes\nPressione '{FF0000}F{FFFFFF}'", 0xFFFFFF99, PicksCandidatos[i][CanX], PicksCandidatos[i][CanY], PicksCandidatos[i][CanZ], 20.0, 0, 0 );
	}
}

stock ResetVarsFor( playerid ){
	if(CortandoArvore{ playerid }){
	    CortandoArvore{ playerid } = 0;
		PodeClicar[ playerid ] = false;
		ProgressoCorte[ playerid ] = 0;
		CortouArvore[ playerid ] = 0;

		DestroyPlayerProgressBar(playerid, ProgressCorte[playerid]);
		PlayerTextDrawHide(playerid, TextLenhadores[playerid]);

		KillTimer(TimerCorte[ playerid ]);
	}
	gPlayerUsingLoopingAnim[ playerid ] = 0;
	gPlayerAnimLibsPreloaded[ playerid ] = 0;
	InAnim[ playerid ] = 0;
	TutorialStatus[ playerid ] = 0;
    EmpregoEscolhido[ playerid ] = 0;
    EmpregoDuty[ playerid ] = 0;
    TrashMoney[ playerid ] = 0; TrashCheck[ playerid ] = 0; TrashRoute[ playerid ] = 0; TrashObjects[ playerid ][0] = INVALID_OBJECT_ID; TrashObjects[ playerid ][1] = INVALID_OBJECT_ID;
	TransportMoney[ playerid ] = 0; CheckBus[ playerid ] = 0;
	CarteiroMoney[playerid] = 0; CartCheck[playerid] = 0; RotaSelecionada[playerid] = 0, PegouPacotes[playerid] = false, CarteiroMoney[playerid] = 0;
	PediuTaxi[playerid] = false, Localizado[playerid] = false;
	LocalizadoPos[playerid][0] = 0.0, LocalizadoPos[playerid][1] = 0.0, LocalizadoPos[playerid][2] = 0.0, Jogador[playerid] = 0;
	TaxiMoney[ playerid ] = 0, MecanicoMoney[playerid] = 0, InicioRota[playerid] = false, PediuMecanico[playerid] = 0;

    DrogasUP[ playerid ] = 0;
	UsandoDrogas[ playerid ] = false;


	// Sistema de Cassino

	ValorFicha[ playerid ] = 0;
	NumeroApostado[ playerid ] = 0;
	Apostado[ playerid ] = 0;

	LadoApostado[ playerid ] = 0;
	LadoApostado2[ playerid ] = 0;
	LadoDado[ playerid ] = 0;


	//Spawn Lider Org
	liderSpawnOrg[ playerid ] = false;

	// Raspadinha
	RaspadinhaInfo[playerid][pRaspNum] = 0; RaspadinhaInfo[playerid][pRaspValue] = 0;

	//Taxi
    InTaxi[ playerid ]=false, Cliente[playerid] = INVALID_PLAYER_ID, PrecoTotalCorrida[playerid] = 0, TaxiOwn[playerid] = INVALID_PLAYER_ID;

    PlayerInfo[ playerid ][ pVida ] = 0.0;
    PlayerInfo[ playerid ][ pColete ] = 0.0;

    PlayerInfo[ playerid ][ pAdmin ] = 0;
    PlayerInfo[ playerid ][ pAWork ] = 0;
    PlayerInfo[ playerid ][ pVIP ] = 0;
    PlayerInfo[ playerid ][ pVIPTEMP ] = 0;
    PlayerInfo[ playerid ][ Cash ] = 0;
	PlayerInfo[ playerid ][ pErrouSenha ] = 0;
	PlayerInfo[ playerid ][ pLogger ] = 0;
	PlayerInfo[ playerid ][ pLevel ] = 0;
	PlayerInfo[ playerid ][ pDinheiro ] = 0;
	PlayerInfo[ playerid ][ pSalario ] = 0;
	PlayerInfo[ playerid ][ pExp ] = 0;
	PlayerInfo[ playerid ][ pSenhaAtiva ] = 0;
	PlayerInfo[ playerid ][ pWanted ] = 0;
	PlayerInfo[ playerid ][ PresoTempo ] = 0;
	PlayerInfo[ playerid ][ PresoOrg ] = 0;
	PlayerInfo[ playerid ][ KickAviso ] = 0;
    PlayerInfo[ playerid ][ BanAviso ] = 0;
	PlayerInfo[ playerid ][ _Aviso ] = 0;
	PlayerInfo[ playerid ][ _TAlert ] = 0;
	PlayerInfo[ playerid ][ pBlockchat ] = false;
	PlayerInfo[ playerid ][ pBlockTemp ] = 0;
	PlayerInfo[ playerid ][ pHouse1 ] = 999;
	PlayerInfo[ playerid ][ pHouse2 ] = 999;
	PlayerInfo[ playerid ][ pHouseEnter ] = -1;
	PlayerInfo[ playerid ][ pWorld ] = 0;
	PlayerInfo[ playerid ][ pWalkingStyle ] = 0;
	PlayerInfo[ playerid ][ pEmprego ] = 0;
	PlayerInfo[ playerid ][ pBilheteMega ] = 0;
	PlayerInfo[ playerid ][ pColdre ] = 0;
	PlayerInfo[ playerid ][ CfgColdreAtivo ] = false;
    PlayerInfo[ playerid ][ CfgVelocimetro ] = false;
    PlayerInfo[ playerid ][ CfgRelogioUP ] = false;
    PlayerInfo[ playerid ][ CfgCash ] = false;
    PlayerInfo[ playerid ][ CfgChatKill ] = false;
    PlayerInfo[ playerid ][ pChatABlock ] = false;
    PlayerInfo[ playerid ][ pChatCA ] = false;
    PlayerInfo[ playerid ][ pTextABlock ] = false;
    PlayerInfo[ playerid ][ Morreu ] = false;
    PlayerInfo[ playerid ][ pPlanoSaude ] = false;
    PlayerInfo[ playerid ][UsandoCapacete] = false;

    PlayerInfo[ playerid ][ pBlockCA ] = false;
	PlayerInfo[ playerid ][ pBlockCATemp ] = 0;

    PlayerInfo[ playerid ][ pHospitalizado ] = 0;
    PlayerInfo[ playerid ][ pHospTemp ] = 0;
    PlayerInfo[ playerid ][ pTutorial ] = 0;

	/*PlayerInfo[ playerid ][ pVehKey1 ] = INVALID_VEHICLE_CONCE;
    PlayerInfo[ playerid ][ pVehKey2 ] = INVALID_VEHICLE_CONCE;
    PlayerInfo[ playerid ][ pVehKey3 ] = INVALID_VEHICLE_CONCE;
    PlayerInfo[ playerid ][ pVehKey4 ] = INVALID_VEHICLE_CONCE;
    PlayerInfo[ playerid ][ pVehKey5 ] = INVALID_VEHICLE_CONCE;*/

    PlayerInfo[ playerid ][ pWeapon1 ] = 0;
	PlayerInfo[ playerid ][ pWeapon2 ] = 0;
	PlayerInfo[ playerid ][ pWeapon3 ] = 0;
	PlayerInfo[ playerid ][ pWeapon4 ] = 0;
	PlayerInfo[ playerid ][ pWeapon5 ] = 0;
	PlayerInfo[ playerid ][ pWeapon6 ] = 0;
	PlayerInfo[ playerid ][ pWeapon7 ] = 0;
	PlayerInfo[ playerid ][ pWeapon8 ] = 0;
	PlayerInfo[ playerid ][ pWeapon9 ] = 0;
	PlayerInfo[ playerid ][ pWeapon10 ] = 0;
	PlayerInfo[ playerid ][ pWeapon11 ] = 0;
	PlayerInfo[ playerid ][ pWeapon12 ] = 0;

    PlayerInfo[ playerid ][ pBullet1 ] = 0;
    PlayerInfo[ playerid ][ pBullet2 ] = 0;
    PlayerInfo[ playerid ][ pBullet3 ] = 0;
    PlayerInfo[ playerid ][ pBullet4 ] = 0;
    PlayerInfo[ playerid ][ pBullet5 ] = 0;
    PlayerInfo[ playerid ][ pBullet6 ] = 0;
    PlayerInfo[ playerid ][ pBullet7 ] = 0;
    PlayerInfo[ playerid ][ pBullet8 ] = 0;
    PlayerInfo[ playerid ][ pBullet9 ] = 0;
    PlayerInfo[ playerid ][ pBullet10 ] = 0;
    PlayerInfo[ playerid ][ pBullet11 ] = 0;
    PlayerInfo[ playerid ][ pBullet12 ] = 0;

    PlayerInfo[ playerid ][ pHabA ] = 0;
    PlayerInfo[ playerid ][ pHabB ] = 0;
    PlayerInfo[ playerid ][ pHabD ] = 0;
    PlayerInfo[ playerid ][ pHabE ] = 0;
    PlayerInfo[ playerid ][ pHabAR ] = 0;
    PlayerInfo[ playerid ][ pHabN ] = 0;
    PlayerInfo[ playerid ][ pHabES ] = 0;

    PlayerInfo[ playerid ][ pLutas ] = 0;

    PlayerInfo[ playerid ][UltimaPosX] = 0.0;
	PlayerInfo[ playerid ][UltimaPosY] = 0.0;
	PlayerInfo[ playerid ][UltimaPosZ] = 0.0;
	PlayerInfo[ playerid ][UltimaPosA] = 0.0;
	PlayerInfo[ playerid ][UInt] = 0;
	PlayerInfo[ playerid ][UWorld] = 0;

    //Level nas profissoes
	PlayerInfo[ playerid ][ pProfLevel ][ 1 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 2 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 3 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 4 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 5 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 6 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 7 ] = 0;
	PlayerInfo[ playerid ][ pProfLevel ][ 8 ] = 0;

	PlayerInfo[ playerid ][ pMinutosUP ] = 60;
	PlayerInfo[ playerid ][ pSegundosUP ] = 60;

    PlayerInfo[playerid][pEmpKey] = 999;

	PlayerInfo[ playerid ][ pCheckGPS ] = 0;
    PlayerInfo[ playerid ][ pCheck ] = 0;

    PlayerInfo[ playerid ][ pMaconha ] = 0;
    PlayerInfo[ playerid ][ pCrack ] = 0;
    PlayerInfo[ playerid ][ pCocaina ] = 0;
    
    PlayerInfo[ playerid ][ musica ] = 0;

	//Profs

 	PlayerInfo[ playerid ][ PrimeiraVezMO ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezPetro ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezLix ] 		= 0;
 	PlayerInfo[ playerid ][ PrimeiraVezCart ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezMec ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezMin ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezTax ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezAdv ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezPara ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezLenh ] 		= 0;
    PlayerInfo[ playerid ][ PrimeiraVezEPizza ] 	= 0;

    PlayerInfo[ playerid ][ pFichas ] = 0;

	//== Inventario ==
    playerInventario[ playerid ][ itemId1 ] = -1;
    playerInventario[ playerid ][ itemId2 ] = -1;
    playerInventario[ playerid ][ itemId3 ] = -1;
    playerInventario[ playerid ][ itemId4 ] = -1;
    playerInventario[ playerid ][ itemId5 ] = -1;
    playerInventario[ playerid ][ itemId6 ] = -1;
    playerInventario[ playerid ][ itemId7 ] = -1;

    playerInventario[ playerid ][ itemQuant1 ] = -1;
    playerInventario[ playerid ][ itemQuant2 ] = -1;
    playerInventario[ playerid ][ itemQuant3 ] = -1;
    playerInventario[ playerid ][ itemQuant4 ] = -1;
    playerInventario[ playerid ][ itemQuant5 ] = -1;
    playerInventario[ playerid ][ itemQuant6 ] = -1;
    playerInventario[ playerid ][ itemQuant7 ] = -1;
    // ===============

	ConquistasInfo[ playerid ][ sNovato ] = 0;
	ConquistasInfo[ playerid ][ sMotorista ] = 0;
	ConquistasInfo[ playerid ][ sTrabalhador ] = 0;

	ContaInfo[ playerid ][ cCell ] = 0.0;
	ContaInfo[ playerid ][ cBanco ] = 0;
	ContaInfo[ playerid ][ cAvisado ] = 0;
	ContaInfo[ playerid ][ cBlock ] = false;

	CelularInfo[ playerid ][ LinhaAtiva ] = false;
    CelularInfo[ playerid ][ LinhaAtivaID ] = INVALID_PLAYER_ID;
    CelularInfo[ playerid ][ Tentativas ] = 0;
    CelularInfo[ playerid ][ pBlockCall ] = 0;
    CelularInfo[ playerid ][ pBlockSMS ] = 0;

    PrimeiroSpawn_{ playerid } = true;
    PlayerAFK{ playerid } = false;

	SelecionouArma[playerid] = 0;

	PegouArma[playerid] = 0;
	ProcuradoDividas[ playerid ] = 0;

	EmRouboRecente[ playerid ] = false;
	PetroleiroMoney[ playerid ] = 0;
	TraillerAttach[ playerid ] = false;
	TraillerComb[ playerid ] = 0;
	_SecurityPetrol[ playerid ] = 0;
	TraillerCount[ playerid ] = 0;

	ComprandoArma[ playerid ] = -1;

    InBus[ playerid ] = 0;
    Amarrado[ playerid ] = 0;
	AmarradoTime[ playerid ] = 0;

	ProcuradoStatus[ playerid ] = false;
	ProcuradoTemp[ playerid ] = 0;
	CameraAtual[ playerid ] = -1;
	TimerBlockChat[ playerid ] = 0;
    TransferenciaID[ playerid ] = INVALID_PLAYER_ID;
    GateID[ playerid ] = -1;
    OnibusRoute[ playerid ] = 0;
    PostoID[ playerid ] = 0;
    VehKeyID[ playerid ] = 0;
    MenuConceType[ playerid ] = 0;
    AimbotWarnings[ playerid ] = 0;
    RodaOriginal[ playerid ] = 0;
    TuningVehicleID[ playerid ] = INVALID_VEHICLE_ID;
    TuningCompraID[ playerid ] = 0;
    V_@Conce[ playerid ] = 0;
    CNHTest[ playerid ] = 0;
	ExameQuestID[ playerid ] = 0;
	ExamePoints[ playerid ] = 0;
    AutoEscolaProgresso[ playerid ] = 0;
    AutoEscolaAviso[ playerid ] = 0;
    DrogasID[ playerid ] = -1;
	DrogasOff[ playerid ] = -1;
	DrogasPreco[ playerid ] = -1;
	DrogasQuant[ playerid ] = -1;
	Mineirando[ playerid ] = 0;
	MinerioValue[ playerid ] = 0;
	MinerioType[ playerid ] = 0;
	ContratoID[ playerid ] = INVALID_PLAYER_ID;
	TempoCOffer[ playerid ] = 0;
	ContratoValor[ playerid ] = 0;
	PlayerSolicitou[ playerid ] = 0;
	RotaFailed[ playerid ] = false;
	RotaFailedTemp[ playerid ] = 30;
    UPosEspec[ playerid ][0] = 0.0;
	UPosEspec[ playerid ][1] = 0.0;
	UPosEspec[ playerid ][2] = 0.0;
	UPosInt[ playerid ] = 0;
	UPosVirt[ playerid ] = 0;
	PlayerEspec[ playerid ] = INVALID_PLAYER_ID;
	EstavaEspectando[ playerid ] = false;
	Espectype[ playerid ] = 0;
	Equipado [ playerid ] = 0;

	RotaBusFailed[ playerid ] = false;
	RotaBusFailedTemp[ playerid ] = 30;

	if(GetPVarInt(playerid, "CheckConceLS") == 1) DisablePlayerCheckpoint(playerid);
	if(GetPVarInt(playerid, "CheckPetrol") == 1) DisablePlayerCheckpoint(playerid);

    SetPVarInt( playerid, "checkParaquedasBug", 1); //Weapon Hack saindo do aviao

    //SetPVarInt( playerid, "AvisadoMF",  0);
    SetPVarInt( playerid, "UsouDorgas", 0);
    SetPVarInt( playerid, "Contrato", 0);
	SetPVarInt( playerid, "C_ID", INVALID_PLAYER_ID);
	SetPVarInt( playerid, "C_Imovel", -1);
	SetPVarInt( playerid, "C_Valor", -1);

    DeletePVar( playerid, "OptionMaker");
	DeletePVar( playerid, "OptionValue");
    DeletePVar( playerid, "CheckConceLS");
    DeletePVar( playerid, "CheckPetrol");
    DeletePVar( playerid, "PastID");
    DeletePVar( playerid, "GateEdit2");
    DeletePVar( playerid, "ultimoShoot");
	DeletePVar( playerid, "ultimaDeath");
	DeletePVar( playerid, "IsAdmin");
	DeletePVar( playerid, "VendoSMS");
	DeletePVar( playerid, "VendoCMDS");
	DeletePVar( playerid, "UltimoEstado");
	DeletePVar( playerid, "Taser");
	DeletePVar( playerid, "ChatGlobal");
	DeletePVar( playerid, "LigandoVeiculo");
	DeletePVar( playerid, "EditandoPatente");
	DeletePVar( playerid, "MenuOrg");
	DeletePVar( playerid, "CheckGPSVeh");
	DeletePVar( playerid, "granacmd");

	//Chars
    PegouCaca{playerid} = false;
	CacaID{playerid} = 0;
	Cacando{playerid} = false;
	CacaProgress{playerid} = 0;
	CacandoTemp{playerid} = 0;

	GivePlayerMoney(playerid, 0);
	SetPlayerScore(playerid, 0);
    ClickPlayerResult[ playerid ] = INVALID_PLAYER_ID;
    Loop(i, MAX_PLAYER_ATTACHED_OBJECTS) RemovePlayerAttachedObject(playerid, i);
    Loop(slot, WEAPON_SLOTs) Weapons[ playerid ][ slot ] = 0;

	KillTimer(PlayerInfo[ playerid ][ pTimerF ]);
	KillTimer(PlayerInfo[ playerid ][ pTimerS ]);

	OnibusRoute[playerid] = 0;
	CheckBus[playerid] = 0;

	CurrentVehicle[ playerid ] = 0;
 	VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;

	DesativarRacesAETB( playerid );
    DesativarRacesAETD( playerid );
    DesativarRacesAETE( playerid );

    DeleteRaceChecksAETE(playerid);
    DeleteRaceChecksAETB(playerid);
    DeleteRaceChecksAETD(playerid);
}

ShowMapIconsFor()
{

	/* ===== Sistema de MapIcons ===== */

	//Bases
	CreateDynamicMapIcon(1554.4966,-1675.8794,16.1953, 30, -1);				// PM
    CreateDynamicMapIcon(1937.3502, 1179.7147, 22.2679, 30, -1);             // bope
    CreateDynamicMapIcon(2453.523437,-1987.461914,13.554044, 58, -1);             // cv
    CreateDynamicMapIcon(2155.438476,-875.014892,92.213562, 59, -1);             // pcc

	//Publicos
	CreateDynamicMapIcon(1480.5723, -1769.7255, 18.3671, 35, -1);			// Prefeitura
	CreateDynamicMapIcon(1022.577331,-1121.674316,23.872047, 25, -1);				// Cassino
	CreateDynamicMapIcon(-1633.1360, -2239.2366, 31.4766, 16, -1); 				//Caçadores
    CreateDynamicMapIcon(1794.3041,-1281.3175,13.6328, 24, -1);             // imobiliaria detran
    CreateDynamicMapIcon(593.487548,-1250.483276,18.236093, 24, -1);           // imobiliaria detran mobile

	//Empregos
	CreateDynamicMapIcon(-497.482574,-56.150737,60.545181, 19, -1);			// Lenhador
	CreateDynamicMapIcon(674.5178, 828.6192, -38.9920, 42, -1);			// Minerador



}


//SetPlayerSpecialActionEx()
SetPlayerSpecialActionEx(id, action){
    if(!InAnim[id]){
		SetPlayerSpecialAction(id, action);
	}
	return true;
}

//LoopingAnim()
LoopingAnim(playerid, animlib[], animname[], Float:SpeeD, looping, lockx, locky, lockz, lp)
{
    if(!InAnim[playerid])
     {
		gPlayerUsingLoopingAnim[playerid] = 1;
		ApplyAnimation(playerid, animlib, animname, SpeeD, looping, lockx, locky, lockz, lp);

//		SendClientMessage(playerid, -1, "{F3F781}| Servidor | - para sair do anime pressione 'Espaço'.");
	}
	return true;
}

//ApplyAnimationEx()
ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
    InAnim[ playerid ] = 1;
	return true;
}

//StopLoopingAnim()
StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
	InAnim[ playerid ] = 0;

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	UnFreeze( playerid );
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

//Sistema de Cameras

stock AddCamera(name[ 50 ], id, Organizacao, Float:X, Float:Y, Float:Z, Float:Angulo, intcam)
{
    if(CamsTotal >= MAX_CAM) return 0;

    format(CameraName[ id ], 50, "%s", name);

    CameraFloat[ id ][ 0 ] = X;
    CameraFloat[ id ][ 1 ] = Y;
    CameraFloat[ id ][ 2 ] = Z;
    CameraFloat[ id ][ 3 ] = Angulo;

	CameraFloat2[ id ][ 0 ] = X;
    CameraFloat2[ id ][ 1 ] = Y;
    CameraFloat2[ id ][ 2 ] = Z-10;

	CameraInterior[ id ] = intcam;
	CameraOwner[ id ] = Organizacao;
    return CamsTotal++;
}

stock MoveCameraFor(playerid)
{
    CamerFloat[playerid][0] = CameraFloat2[CameraAtual[playerid]][0] + (floatmul(CameraRadius[playerid], floatsin(-CameraDegres[playerid], degrees)));
    CamerFloat[playerid][1] = CameraFloat2[CameraAtual[playerid]][1] + (floatmul(CameraRadius[playerid], floatcos(-CameraDegres[playerid], degrees)));
    SetPlayerCameraLookAt(playerid, CamerFloat[playerid][0], CamerFloat[playerid][1], CamerFloat[playerid][2]);
}

stock SetPlayerToCamera(playerid, CamID)
{
	new
	    stick[ 70 ]
	;
	if(CamID >= CamsTotal) return SendClientMessage(playerid, 0xFF0000AA, "Camera Invalida.");
    if(CameraOwner[ CamID ] != PlayerInfo[playerid][pOrg]) return SendClientMessage(playerid, 0xFF0000AA, "Voce nao tem Permissao!");

	GetPlayerPos(playerid, UltimaPosicao[playerid][ UX ], UltimaPosicao[playerid][ UY ], UltimaPosicao[playerid][ UZ ]);
    GetPlayerFacingAngle(playerid, UltimaPosicao[ playerid ][ UA ]);
    UltimaPosicao[ playerid ][ UInterior ] = GetPlayerInterior( playerid );

    format(stick, sizeof( stick ), "~r~%s", CameraName[ CamID ]);
    PlayerTextDrawSetString(playerid, CamsTextTwo[ playerid ][6], stick);

	KillTimer(KeyTimer[playerid]);

	CameraAtual[playerid] = CamID;
	Freeze( playerid );

	SetPlayerInterior(playerid, CameraInterior[ CamID ]);
	SetPlayerPos(playerid, CameraFloat[ CamID ][0], CameraFloat[ CamID ][1], -100.0);
    SetPlayerCameraPos(playerid, CameraFloat[ CamID ][0], CameraFloat[ CamID ][1], CameraFloat[ CamID ][2]);
    SetPlayerCameraLookAt(playerid, CameraFloat2[ CamID ][0], (CameraFloat2[ CamID ][1]+0.2), CameraFloat2[ CamID ][2]);

	CamerFloat[ playerid ][ 0 ] = CameraFloat2[ CamID ][0];
    CamerFloat[ playerid ][ 1 ] = CameraFloat2[ CamID ][1]+0.2;
    CamerFloat[ playerid ][ 2 ] = CameraFloat2[ CamID ][2];
    CameraRadius[ playerid ] = 12.5;

	CameraDegres[ playerid ] = CameraFloat[ CamID ][3];

	MoveCameraFor(playerid);

	KeyTimer[playerid] = SetTimerEx("CheckKeyPress", 75, true, "i", playerid);

	for(new cp=0; cp <= sizeof(CamsTextTwo); cp++){
  		PlayerTextDrawShow(playerid, CamsTextTwo[ playerid ][ cp ]);
 	}

	return 1;
}

Public:CheckKeyPress(playerid)
{
    new keys,
		CimaBaixo,
		EsqDir
	;

	GetPlayerKeys(playerid, keys, CimaBaixo, EsqDir);

	if(CameraAtual[playerid] > -1)
    {
        if(EsqDir == KEY_RIGHT)
        {
            if(keys == KEY_SPRINT)
            {
            	CameraDegres[playerid] = (CameraDegres[playerid] - 2.0);
            }
            else
            {
                CameraDegres[playerid] = (CameraDegres[playerid] - 0.5);
            }
            if(CameraDegres[playerid] < 0)
            {
                CameraDegres[playerid] = 359;
            }
            MoveCameraFor(playerid);
        }
        if(EsqDir == KEY_LEFT)
        {
            if(keys == KEY_SPRINT)
            {
            	CameraDegres[playerid] = (CameraDegres[playerid] + 2.0);
            }
            else
            {
                CameraDegres[playerid] = (CameraDegres[playerid] + 0.5);
            }
            if(CameraDegres[playerid] >= 360)
        	{
            	CameraDegres[playerid] = 0;
            }
            MoveCameraFor(playerid);
        }
        if(CimaBaixo == KEY_UP)
        {
            if(CameraRadius[playerid] < 25)
            {
                if(keys == KEY_SPRINT)
                {
                    CameraRadius[playerid] =  (CameraRadius[playerid] + 0.5);
                	MoveCameraFor(playerid);
              	}
                else
                {
                    CameraRadius[playerid] =  (CameraRadius[playerid] + 0.1);
                	MoveCameraFor(playerid);
                }
            }
		}
        if(CimaBaixo == KEY_DOWN)
        {
            if(keys == KEY_SPRINT)
            {
                if(CameraRadius[playerid] >= 0.6)
            	{
                	CameraRadius[playerid] =  (CameraRadius[playerid] - 0.5);
                    MoveCameraFor(playerid);
                }
            }
            else
            {
            	if(CameraRadius[playerid] >= 0.2)
            	{
                	CameraRadius[playerid] =  (CameraRadius[playerid] - 0.1);
                    MoveCameraFor(playerid);
                }
            }
		}
        if(keys == KEY_CROUCH)
        {
        	callcmd::saircamera(playerid);
        }
    }

    MoveCameraFor(playerid);
}

Public:OnPlayerInCamera(id, Org)
{
	switch(Org){
	    case PM: return ShowPlayerDialog(id, CamPM, DIALOG_STYLE_LIST, ""#SERVELOGO" - Cameras PM", "Portao Principal\nEstacionamento Interno\nPouso Helis", "Selecionar", "Cancelar");
        case BOPE: return ShowPlayerDialog(id, CamBOPE, DIALOG_STYLE_LIST, ""#SERVELOGO" - Cameras BOPE", "Portao Principal\nEstacionamento externo\nFrente HQ", "Selecionar", "Cancelar");
	    case CV: return  ShowPlayerDialog(id, CamCV, DIALOG_STYLE_LIST, ""#SERVELOGO" - Cameras CV", "HQ Geral", "Selecionar", "Cancelar");
	    case PCC: return  ShowPlayerDialog(id, CamPCC, DIALOG_STYLE_LIST, ""#SERVELOGO" - Cameras PCC", "HQ Geral", "Selecionar", "Cancelar");
	}
	return false;
}
Public:pararMusica(id) {
	PlayerPlaySound(id, 1069, 0.0, 0.0, 0.0);
	return 1;
}

// Entrada no Tutorial
Public:OnEntrarTutorial(playerid) {

    static sTRX[50], STRx[600];

    switch( TutorialStatus[playerid] )
    {
		/*case 110:
		{
			PlayerInfo[playerid][pQuestID] = 0;
			PlayerInfo[playerid][pQuestAcert] = 0;

			PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
   			Freeze( playerid );

			SetPlayerPos(playerid, 363.0773, 154.3276, 1025.7964+10.0);
			SetPlayerCameraPos(playerid, 363.0773, 154.3276, 1025.7964);
			SetPlayerCameraLookAt(playerid, 363.0884, 153.9999, 1025.7964);
			SetPlayerInterior(playerid, 3);

			format(sTRX, sizeof(sTRX), "%s\n%s\n%s", QuestData[0][Resposta1], QuestData[0][Resposta2], QuestData[0][Resposta3]);
			format(STRx, sizeof(STRx), "{FFFFA8}%s", QuestData[0][QuestTitle]);

			ShowPlayerDialog(playerid, DIALOG_QUEST, DIALOG_STYLE_LIST, STRx, sTRX, "Proxima", "Quit");
		}*/
        case 1:
		{


			CreatePlayerRank(playerid);

            SetPlayerVirtualWorld(playerid, 1); // Trocando o Mundo

			// IREI REPENSAR StopAudioStreamForPlayer( playerid ); // tirando a musica de abertura

			// PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
   			Freeze( playerid );
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1558.7385,-1675.7007,16.1953);
			SetPlayerCameraPos(playerid, 1506.7966,-1645.9325,22.3203);
			SetPlayerCameraLookAt(playerid, 1537.1453,-1670.2620,12.6740);

			ShowPlayerDialog(playerid, DIALOG_TUTORIAL_SEX, DIALOG_STYLE_MSGBOX , ""#SERVELOGO" - Genero","\n\n{FFFFFF}Informe Seu Genero {FF0000}( {FFFFFF}Sexo {FF0000}).\n\n","Feminino","Masculino");
		}
		case 2:
		{
			// PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
			Freeze( playerid );
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1558.7385,-1675.7007,16.1953);
			SetPlayerCameraPos(playerid, 1506.7966,-1645.9325,22.3203);
			SetPlayerCameraLookAt(playerid, 1537.1453,-1670.2620,12.6740);

            ShowPlayerDialog(playerid, CfgIdade, DIALOG_STYLE_INPUT, ""#SERVELOGO" - Idade", "{FFFFFF}Por favor insira sua idade:", "Proximo", "Voltar");
		}

		case 3: {
			ClearChatbox(playerid, 20);

			// PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
			Freeze( playerid );

			SetPlayerPos(playerid, 1558.7385,-1675.7007,16.1953);
			SetPlayerCameraPos(playerid, 1506.7966,-1645.9325,22.3203);
			SetPlayerCameraLookAt(playerid, 1537.1453,-1670.2620,12.6740);

            ShowPlayerDialog(playerid, DIALOG_TUTORIAL_KNOW, DIALOG_STYLE_INPUT , "Como voce encontrou o servidor?" ,"Voce possue algum codigo de indicacao ?\nDigite abaixo para ja iniciar com bonus:","Ir","Nao possuo");
		}
		case 4:
		{
			// ClearChatbox(playerid, 20);

			// PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);
			Freeze( playerid );
			SetPlayerPos(playerid, 1483.8164,-1727.4125,13.3828);
			SetPlayerCameraPos(playerid,1483.8164,-1727.4125,13.3828);
			SetPlayerCameraLookAt(playerid,1481.0267,-1772.1371,19.4570);
			ShowPlayerDialog(playerid, EmailCfg, DIALOG_STYLE_INPUT, ""#SERVELOGO" - Email", "\n\n{FFFFFF}Digite seu e-mail para contato abaixo para finalizar o registro.\n\nEle pode vir a ser util, caso perca senha, ou para receber noticias do servidor.\nMelhores provedores: yahoo, live", "Proximo", "Voltar");
		}
		case 5: {
            ClearChatbox(playerid, 20);

			// PlayerPlaySound(playerid,1187, 0.0, 0.0, 0.0);

            if(PlayerInfo[ playerid ][ pSex ] == 1)
            {
            	//if(!response) return OnEntrarTutorial(playerid);

				PlayerInfo[ playerid ] [ pSkin ] = 170;

				//GameTextForPlayer(playerid, "~w~Personagem Escolhido", 3000, 1);
				PlayerInfo[playerid][pSkin] = 170;

				TutorialStatus[playerid]++;

				SetTimerEx("OnEntrarTutorial", 700, false, "d", playerid);

				} else {

				//if(!response) return OnEntrarTutorial(playerid);

				PlayerInfo[ playerid ] [ pSkin ] = 56;

				//GameTextForPlayer(playerid, "~w~Personagem Escolhido", 3000, 1);
				PlayerInfo[playerid][pSkin] = 56;

				TutorialStatus[playerid]++;

				SetTimerEx("OnEntrarTutorial", 700, false, "d", playerid);
			}
		}
		case 6: {

            ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);



            SetPlayerCameraPos(playerid, 1416.5039, -883.1823, 67.8758);
			SetPlayerCameraLookAt(playerid, 1416.4595, -882.1793, 68.0606);

			SetPlayerPos(playerid, 1416.5039, -883.1823, 62.0000);

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[0][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[0][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 5000, false, "d", playerid);
       	}
       	case 7: {

            ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            SetPlayerCameraPos(playerid, 1416.5039, -883.1823, 67.8758);
			SetPlayerCameraLookAt(playerid, 1416.4595, -882.1793, 68.0606);

			SetPlayerPos(playerid, 1416.5039, -883.1823, 62.0000);

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[1][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[1][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 10000, false, "d", playerid);
       	}
       	case 8: {

            ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            SetPlayerCameraPos(playerid, 1416.5039, -883.1823, 67.8758);
			SetPlayerCameraLookAt(playerid, 1416.4595, -882.1793, 68.0606);

			SetPlayerPos(playerid, 1416.5039, -883.1823, 62.0000);

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[2][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[2][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 10000, false, "d", playerid);
       	}

		case 9: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            SetPlayerCameraPos(playerid, 1057.6704, -1788.9122, 17.3873);
			SetPlayerCameraLookAt(playerid, 1058.6454, -1789.1486, 17.1522);

			SetPlayerPos(playerid, 1047.8733, -1786.9371, GetPointZPos(1047.8733, -1786.9371));

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[3][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[3][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 10000, false, "d", playerid);
       	}
       	case 10: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            SetPlayerCameraPos(playerid, 1351.1816, -1739.7766, 17.0688);

			SetPlayerCameraLookAt(playerid, 1351.2162, -1740.7800, 16.8987);

			SetPlayerPos(playerid, 1351.3247, -1735.9521, GetPointZPos(1351.3247, -1735.9521));

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[4][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[4][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 10000, false, "d", playerid);
       	}
       	case 11: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            SetPlayerCameraPos(playerid, 1468.4694, -1702.6909, 37.3382);
			SetPlayerCameraLookAt(playerid, 1468.7072, -1703.6660, 36.9082);

			SetPlayerPos(playerid, 1466.2952, -1680.2344, GetPointZPos(1466.2952, -1680.2344));

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[5][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[5][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 10000, false, "d", playerid);
       	}
       	case 12: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            /*SetPlayerCameraPos(playerid, 1876.64, -1115.81, 25.89);
			SetPlayerCameraLookAt(playerid, 1872.30, -1111.69, 25.39);

			SetPlayerPos(playerid, 1876.64, -1115.81, GetPointZPos(1876.64, -1115.81));*/

            SetPlayerCameraPos(playerid, 2179.0708, -1184.8549, 41.0987);
            SetPlayerCameraLookAt(playerid, 2178.0679, -1184.8170, 40.6386);

            SetPlayerPos(playerid, 2179.0708, -1184.8549, GetPointZPos(2179.0708, -1184.8549));

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[6][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[6][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 10000, false, "d", playerid);
       	}
        case 13: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            SetPlayerCameraPos(playerid, 1416.5039, -883.1823, 67.8758);
			SetPlayerCameraLookAt(playerid, 1416.4595, -882.1793, 68.0606);

			SetPlayerPos(playerid, 1416.5039, -883.1823, 62.0000);

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[7][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[7][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 8000, false, "d", playerid);
       	}
       	case 14: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

			format(sTRX, sizeof(sTRX), "%s", InfoBasic[8][Title]);

			format(STRx, sizeof(STRx), "%s", InfoBasic[8][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 8000, false, "d", playerid);
       	}
       	case 15: {

			ClearChatbox(playerid, 20);

			// PlaySoundForPlayer(playerid, 1187);

            format(sTRX, sizeof(sTRX), "%s", InfoBasic[9][Title]);
			format(STRx, sizeof(STRx), "%s", InfoBasic[9][Context]);

			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 2 ], sTRX);
			PlayerTextDrawSetString(playerid, TextTutorial[ playerid ][ 3 ], STRx);

			Freeze( playerid );

            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 0 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 1 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 2 ]);
            PlayerTextDrawShow(playerid, TextTutorial[ playerid ][ 3 ]);

            SetTimerEx("PassarTutorial", 4000, false, "d", playerid);
       	}
    }
	return true;
}

Public:PassarTutorial( playerid ){

    TutorialStatus[playerid]++;

	if( TutorialStatus[playerid] > 15 ){

	    PlayerTextDrawHide(playerid, TextTutorial[ playerid ][ 0 ]);
	    PlayerTextDrawHide(playerid, TextTutorial[ playerid ][ 1 ]);
	    PlayerTextDrawHide(playerid, TextTutorial[ playerid ][ 2 ]);
	    PlayerTextDrawHide(playerid, TextTutorial[ playerid ][ 3 ]);

	    fadeIn(playerid, 1000);

		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pTutorial] = 1;
		PlayerInfo[playerid][pLogger] = 1;
		PlayerInfo[playerid][pInicio] = 1;
		PlayerInfo[playerid][pHouse1] = 999;
		PlayerInfo[playerid][pHouse2] = 999;
		PlayerInfo[playerid][pEmpKey] = 999;
		PlayerInfo[playerid][ pMinutosUP ] = 59;
    	PlayerInfo[playerid][ pSegundosUP ] = 59;
		/*PlayerInfo[ playerid ][ pVehKey1 ] = INVALID_VEHICLE_CONCE;
		PlayerInfo[ playerid ][ pVehKey2 ] = INVALID_VEHICLE_CONCE;
		PlayerInfo[ playerid ][ pVehKey3 ] = INVALID_VEHICLE_CONCE;
		PlayerInfo[ playerid ][ pVehKey4 ] = INVALID_VEHICLE_CONCE;
		PlayerInfo[ playerid ][ pVehKey5 ] = INVALID_VEHICLE_CONCE;*/

		PlayerInfo[playerid][pFome] = (60+random(40));
		PlayerInfo[playerid][pSede] = (60+random(40));
        PlayerInfo[playerid][CfgVelocimetro] = true;
        PlayerInfo[playerid][CfgRelogioUP] = true;
        PlayerInfo[playerid][CfgCash] = true;
        PlayerInfo[playerid][CfgChatKill] = false;
        PlayerInfo[playerid][pChatABlock] = true;
        PlayerInfo[playerid][pTextABlock] = true;
        PlayerInfo[playerid][pChatCA] = true;

		PlayerInfo[playerid][pSpawnType] = 3;
		PlayerInfo[playerid][pVida] = 100.0;
		PlayerInfo[playerid][pColete] = 0.0;

        ActionPlayerGrana(playerid, "+", 500);
        ActionPlayerBank(playerid, "+", (QuantiaMin-500));

		// --- Salva as informaçoes colhetadas no tutorial ---
		DOF2_SetString(CI(playerid), "DescobertaDoServer", PlayerInfo[playerid][pKnow]);
		DOF2_SetString(CI(playerid), "Email", PlayerInfo[ playerid ][ pEmail ]);
		DOF2_SetInt(CI(playerid), "Tutorial", PlayerInfo[playerid][pTutorial]);
		DOF2_SetInt(CI(playerid), "Sexo", PlayerInfo[playerid][pSex]);
		DOF2_SetInt(CI(playerid), "Skin", PlayerInfo[playerid][pSkin]);
		DOF2_SetInt(CI(playerid), "Idade", PlayerInfo[ playerid ][ pIdade ]);
		DOF2_SetInt(CI(playerid), "Casa1", PlayerInfo[playerid][pHouse1]);
		DOF2_SetInt(CI(playerid), "Casa2", PlayerInfo[playerid][pHouse2]);
		DOF2_SetInt(CI(playerid), "SpawnType", PlayerInfo[playerid][pSpawnType]);
		DOF2_SetInt(CI(playerid), "Empresa", PlayerInfo[playerid][pEmpKey]);
        DOF2_SetInt(CI(playerid), "Cash", 0);

        /*DOF2_SetInt(CI(playerid), "Veiculo1", -1);
        DOF2_SetInt(CI(playerid), "Veiculo2", -1);
        DOF2_SetInt(CI(playerid), "Veiculo3", -1);
        DOF2_SetInt(CI(playerid), "Veiculo4", -1);
        DOF2_SetInt(CI(playerid), "Veiculo5", -1);*/

		DOF2_SetBool(CI(playerid), "AnunciosChat", PlayerInfo[playerid][pChatABlock]);
		DOF2_SetBool(CI(playerid), "AnunciosConexoes", PlayerInfo[playerid][pTextABlock]);
		DOF2_SetBool(CI(playerid), "ChatCA", PlayerInfo[playerid][pChatCA]);

		DOF2_SetBool(CI(playerid), "CfgVelo", PlayerInfo[playerid][CfgVelocimetro]);
		DOF2_SetBool(CI(playerid), "CfgRUP", PlayerInfo[playerid][CfgRelogioUP]);
        DOF2_SetBool(CI(playerid), "CfgCash", PlayerInfo[playerid][CfgCash]);
        DOF2_SetBool(CI(playerid), "CfgChatKill", PlayerInfo[playerid][CfgChatKill]);

        //Set de spawn ultimo login no spawn :D

		static randSpawnIndex;

		randSpawnIndex =  random(sizeof(spawnNewbies));//RandomEx(0,(sizeof(spawnNewbies)-1));


        PlayerInfo[ playerid ][UltimaPosX] = spawnNewbies[randSpawnIndex][orpX];
		PlayerInfo[ playerid ][UltimaPosY] = spawnNewbies[randSpawnIndex][orpY];
		PlayerInfo[ playerid ][UltimaPosZ] = spawnNewbies[randSpawnIndex][orpZ];
		PlayerInfo[ playerid ][UltimaPosA] = spawnNewbies[randSpawnIndex][orpA];
		PlayerInfo[ playerid ][UInt] = spawnNewbies[randSpawnIndex][orpInt];
		PlayerInfo[ playerid ][UWorld] = 0;

     	SetTimerEx("OnVerificarTutorial", 2000, false, "d", playerid);
	}
	else {
		OnEntrarTutorial(playerid);
	}
    return true;
}

/*Public:Concertando( playerid ){
	new sK[ 128 ];

 	PlayerTextDrawHide(playerid, TMecanico[0][playerid]);
 	PlayerTextDrawHide(playerid, TMecanico[1][playerid]);
	PlayerTextDrawHide(playerid, TMecanico[2][playerid]);
	PlayerTextDrawHide(playerid, TMecanico[3][playerid]);
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
	format( sK, sizeof( sK ), "Mecanico %s [%d]: Veiculo concertado com sucesso, com isso foi descontado R$"#PRECO_MECANICO" de seu bolso.", GetNameEx( playerid ), playerid);
	ChatProximo(20.0, playerid, sK, 0x33CCFFAA, 0x33CCFFAA, 0x33CCFFAA, 0x33CCFFAA, 0x33CCFFAA);
	UnFreeze( playerid );
 	ActionPlayerGrana(playerid, "-", 5000, 1);
	return true;
}*/


Public:Concertando( playerid )
{
	new zString[ 128 ];

	GetPlayerVehicleID(playerid);
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	format( zString, sizeof( zString ), "O mecanico %s reparou o veiculo de %s por %s.", GetNameEx(Jogador[playerid]), GetNameEx( playerid ), FormatNumber(PlayerInfo[playerid][pRepairValue]));
	ChatProximo(20.0, playerid, zString, 0x33CCFFAA, 0x33CCFFAA, 0x33CCFFAA, 0x33CCFFAA, 0x33CCFFAA);
	UnFreeze( playerid );
 	ActionPlayerGrana(playerid, "-", PlayerInfo[playerid][pRepairValue], 1);
 	MecanicoMoney[ Jogador[playerid] ] = PlayerInfo[playerid][pRepairValue];
 	PlayerInfo[ Jogador[playerid] ][ pSalario ] += 10;
 	ActionPlayerGrana(Jogador[playerid], "+", MecanicoMoney[Jogador[playerid]], 1);
	return true;
}

Public:AutoSpawnEx(playerid) return SpawnPlayer( playerid );

Public:RegistrarMobile(playerid, pass[])
{
    if(!DOF2_FileExists(CI(playerid)))
    {
        DOF2_CreateFile(CI(playerid));
    }
    DOF2_SetString(CI(playerid), "Senha", pass);

    strmid(PlayerInfo[playerid][pSenha], pass, 0, strlen( pass ), 255);

    OnVerificarTutorial( playerid );
    return 1;
}

Public:Registrar(playerid, pass[])
{
	if(!DOF2_FileExists(CI(playerid)))
	{
		DOF2_CreateFile(CI(playerid));
	}
	DOF2_SetString(CI(playerid), "Senha", pass);

	//format(PlayerInfo[playerid][pSenha], MAX_SENHA, "%s", pass);

	strmid(PlayerInfo[playerid][pSenha], pass, 0, strlen( pass ), 255);

    Loop(o, sizeof(Entrada)){ PlayerTextDrawHide(playerid, Entrada[ o ][ playerid ]);}
    CancelSelectTextDraw(playerid);

    OnVerificarTutorial( playerid );
	return 1;
}

Public:OnVerificarLoginMobile(id, pass[])
{
    new str[100], cFile[50];

    format(str, sizeof str, "%s", Encriptar(pass));
    format(cFile, 50, PASTA_CONTAS, GetName( id ));

    if(strcmp(DOF2_GetString(cFile, "Senha"), str, true) == 0 || PlayerInfo[ id ][ pSenhaAtiva ] == 1 && strcmp(DOF2_GetString(cFile, "CodigoRecuperacao"), pass, true) == 0)
    {
        fadeIn(id, 1000);

        SetTimerEx("LoadAccountFor", 2000, false, "d", id);

        ForPlayers(i)
        {
            if(PlayerInfo[i][pLogger])
            {
                if(PlayerInfo[i][pTextABlock])
                {
                    if(Anuncios != Text:INVALID_TEXT_DRAW)
                    {
                        format( str, sizeof( str ), "~y~%s: ~w~entrou no servidor.", GetName( id ));
                        TextDrawSetString(Anuncios, str);
                    }
                    TextDrawShowForPlayer(i, Anuncios);
                    SetTimerEx("HideTextAnuncio", TMinutos(1), false, "i", i);
                }
            }
        }

        PlayerInfo[ id ][pEmpLabel] = CreateDynamic3DTextLabel(" ", -1, 0.0, 0.0, 0.4, 20.0, id, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
    }
    else
    {
        PlayerInfo[ id ][ pErrouSenha ] ++;
        ErroMSG(id, "Senha digitada Incorreta!");
        PlayerTextDrawShow(id, Entrada[14][id]);

        #if defined MailerUser
            if(PlayerInfo[ id ][ pErrouSenha ] >= 5)
            {

                ShowPlayerDialog(id, REmail, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - Recuperaçao de Senha", "\n\n{FFFFFF}Clique em {FF0000}'{FFFFFF}Enviar{FF0000}'{FFFFFF} Para Confirmar o Envio do codigo de recuperaçao ao Seu Email.\n\n", "Enviar", "Cancelar");
                PlayerInfo[ id ][ pErrouSenha ] = 0;

                ShowPlayerEmail( id );
                return true;
            }
            callcmd::logar( id );
        #else

            if(PlayerInfo[ id ][ pErrouSenha ] >= 3)
            {
                Kick( id );
                PlayerInfo[ id ][ pErrouSenha ] = 0;
                return true;
            }
            ErroMSG(id, "Senha digitada Incorreta! ");

            PlayerTextDrawShow(playerid, Entrada[14][playerid]);
            //SelectTextDraw(playerid, 0x33CCFFFF);

            callcmd::logar( playerid );
        #endif
    }
    return 1;
}

Public:OnVerificarLogin(id, pass[])
{
	new str[100], cFile[50];

	format(str, sizeof str, "%s", Encriptar(pass));
	format(cFile, 50, PASTA_CONTAS, GetName( id ));

	if(strcmp(DOF2_GetString(cFile, "Senha"), str, true) == 0 || PlayerInfo[ id ][ pSenhaAtiva ] == 1 && strcmp(DOF2_GetString(cFile, "CodigoRecuperacao"), pass, true) == 0)
	{
		Loop(o, sizeof(Entrada)){ PlayerTextDrawHide(id, Entrada[ o ][ id ]);}
        CancelSelectTextDraw(id);

		fadeIn(id, 1000);

		SetTimerEx("LoadAccountFor", 2000, false, "d", id);

        ForPlayers(i)
        {
		    if(PlayerInfo[i][pLogger])
		    {
		        if(PlayerInfo[i][pTextABlock])
		        {
			        if(Anuncios != Text:INVALID_TEXT_DRAW)
					{
						format( str, sizeof( str ), "~y~%s: ~w~entrou no servidor.", GetName( id ));
						TextDrawSetString(Anuncios, str);
					}
					TextDrawShowForPlayer(i, Anuncios);
					SetTimerEx("HideTextAnuncio", TMinutos(1), false, "i", i);
				}
			}
		}

		PlayerInfo[ id ][pEmpLabel] = CreateDynamic3DTextLabel(" ", -1, 0.0, 0.0, 0.4, 20.0, id, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
  	}
	else
	{
        PlayerInfo[ id ][ pErrouSenha ] ++;
        ShowPlayerDialog(id, DIALOG_LOGAR, DIALOG_STYLE_PASSWORD, "Login", "Insira sua senha de acesso abaixo!","Ir","Voltar");
       // PlayerTextDrawShow(id, Entrada[14][id]);

		#if defined MailerUser
			if(PlayerInfo[ id ][ pErrouSenha ] >= 5)
			{
                Loop(o, sizeof(Entrada)){ PlayerTextDrawHide(id, Entrada[ o ][ id ]);}
                CancelSelectTextDraw(id);

				ShowPlayerDialog(id, REmail, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - Recuperaçao de Senha", "\n\n{FFFFFF}Clique em {FF0000}'{FFFFFF}Enviar{FF0000}'{FFFFFF} Para Confirmar o Envio do codigo de recuperaçao ao Seu Email.\n\n", "Enviar", "Cancelar");
	            PlayerInfo[ id ][ pErrouSenha ] = 0;

				ShowPlayerEmail( id );
	            return true;
	        }
			//callcmd::logar( id );
		#else

		    if(PlayerInfo[ id ][ pErrouSenha ] >= 3)
			{
				Kick( id );
				PlayerInfo[ id ][ pErrouSenha ] = 0;
				return true;
			}
			ErroMSG(id, "Senha digitada Incorreta!");
            ShowPlayerDialog(id, DIALOG_LOGAR, DIALOG_STYLE_PASSWORD, "Login", "Insira sua senha de acesso abaixo!","Ir","Voltar");
			//callcmd::logar( id );
		#endif
	}
	return 1;
}
/*
CarregarVeiculosPlayer(playerid)
{
    if(PlayerInfo[playerid][pVehKey1] != INVALID_VEHICLE_CONCE) LoadVeiculos(PlayerInfo[playerid][pVehKey1]);
    if(PlayerInfo[playerid][pVehKey2] != INVALID_VEHICLE_CONCE) LoadVeiculos(PlayerInfo[playerid][pVehKey2]);
    if(PlayerInfo[playerid][pVehKey3] != INVALID_VEHICLE_CONCE) LoadVeiculos(PlayerInfo[playerid][pVehKey3]);
    if(PlayerInfo[playerid][pVehKey4] != INVALID_VEHICLE_CONCE) LoadVeiculos(PlayerInfo[playerid][pVehKey4]);
    if(PlayerInfo[playerid][pVehKey5] != INVALID_VEHICLE_CONCE) LoadVeiculos(PlayerInfo[playerid][pVehKey5]);

    return 1;
}

DestruirVeiculosPlayer(playerid)
{
    if(PlayerInfo[playerid][pVehKey1] != INVALID_VEHICLE_CONCE) DestroyVehicle(VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vVeiculo]);
    if(PlayerInfo[playerid][pVehKey2] != INVALID_VEHICLE_CONCE) DestroyVehicle(VeiculoInfo[PlayerInfo[playerid][pVehKey2]][vVeiculo]);
    if(PlayerInfo[playerid][pVehKey3] != INVALID_VEHICLE_CONCE) DestroyVehicle(VeiculoInfo[PlayerInfo[playerid][pVehKey3]][vVeiculo]);
    if(PlayerInfo[playerid][pVehKey4] != INVALID_VEHICLE_CONCE) DestroyVehicle(VeiculoInfo[PlayerInfo[playerid][pVehKey4]][vVeiculo]);
    if(PlayerInfo[playerid][pVehKey5] != INVALID_VEHICLE_CONCE) DestroyVehicle(VeiculoInfo[PlayerInfo[playerid][pVehKey5]][vVeiculo]);
    return 1;
}
*/
Public:LoadAccountFor(id)
{

    new string[800];
    format(string, sizeof(string), "\
    {ff0000}======================================================================\n\n\
    {BDBDBD}%s %s.\nCom a pandemia do COVID-19 muitos servicos estao com lentidao ou paralisados\n\
    Entao, informamos que podem haver instabilidades na Host causando Lag e Delay.\n\
    Contamos com a compreensao de todos e estamos na torcida que tudo volte ao normal.\n\n\n\
    {FFFFFF}O servidor esta sendo criado do 0, entao seu feedback e muito importante para nos.\n\
    Serao lancadas DLCs, mega atualizacoes com titulos previamente avisados.\n\
    Estamos na Pre-Alpha. Fique de olho nas novidades e Discord {ffff00}/servidor{FF0000}\n\n\
    L{FF0000}V {FFFFFF}RPG 2020.\n\
    {ff0000}======================================================================", GetSaudacao(), GetName(id));
    ShowPlayerDialog(id, Dinfo, DIALOG_STYLE_MSGBOX, "AVISO IMPORTANTE", string, "OK", "");

	//SetPlayerColor(id, Branco);
	static cFile[100];
	format(cFile, 100, PASTA_CONTAS, PlayerInfo[ id ][ pName ]);

	format(PlayerInfo[id][pEmail], 50, DOF2_GetString(cFile, "Email"));
	format(PlayerInfo[id][pLastLogin], 50, DOF2_GetString(cFile, "LastLogin"));

	strmid(PlayerInfo[id][pSenha], DOF2_GetString(cFile, "Senha"), 0, strlen( DOF2_GetString(cFile, "Senha") ), 255);

	PlayerInfo[id][pLevel] = DOF2_GetInt(cFile, "Level");
	PlayerInfo[id][pExp] = DOF2_GetInt(cFile, "Exp");
	PlayerInfo[id][pFome] = DOF2_GetInt(cFile, "Fome");
	PlayerInfo[id][pSede] = DOF2_GetInt(cFile, "Sede");
	PlayerInfo[id][pVida] = DOF2_GetFloat(cFile, "Vida");
    PlayerInfo[id][pColete] = DOF2_GetFloat(cFile, "Colete");
    PlayerInfo[id][Organizador] = DOF2_GetInt(cFile, "Organizador");

	PlayerInfo[id][pDinheiro] = DOF2_GetInt(cFile, "Dinheiro");
	PlayerInfo[id][pBanco] = DOF2_GetInt(cFile, "Banco");
	PlayerInfo[id][pSalario] = DOF2_GetInt(cFile, "Salario");
	PlayerInfo[id][pEmprego] = DOF2_GetInt(cFile, "Emprego");
	PlayerInfo[id][pOrg] = DOF2_GetInt(cFile, "Org");
	PlayerInfo[id][pCargo] = DOF2_GetInt(cFile, "Cargo");
	PlayerInfo[id][pAdmin] = DOF2_GetInt(cFile, "Admin");
	PlayerInfo[id][pVIP] = DOF2_GetInt(cFile, "VIP");
    PlayerInfo[id][TemBeneficio] = DOF2_GetInt(cFile, "TemBeneficio");
    PlayerInfo[id][pMultas] = DOF2_GetInt(cFile, "Multas");

    PlayerInfo[id][Cash] = DOF2_GetInt(cFile, "Cash");
    PlayerInfo[id][CasaCash] = DOF2_GetInt(cFile, "CasaCash");
    PlayerInfo[id][VeiculoCash] = DOF2_GetInt(cFile, "VeiculoCash");
    PlayerInfo[id][EmpresaCash] = DOF2_GetInt(cFile, "EmpresaCash");
    PlayerInfo[id][CriarCasaCash] = DOF2_GetInt(cFile, "CriarCasaCash");
    PlayerInfo[id][CriarSetCash] = DOF2_GetInt(cFile, "CriarSetCash");

	PlayerInfo[id][pVIPTEMP] = DOF2_GetInt(cFile, "TempoVip");
	PlayerInfo[id][BanAviso] = DOF2_GetInt(cFile, "BanAviso");
	PlayerInfo[id][pTutorial] = DOF2_GetInt(cFile, "Tutorial");
	PlayerInfo[id][ pMinutosUP ] = DOF2_GetInt(cFile, "MinutosUP");
	PlayerInfo[id][ pSegundosUP ] = DOF2_GetInt(cFile, "SegundosUP");
	PlayerInfo[id][pSkin] = DOF2_GetInt(cFile, "Skin");
	PlayerInfo[id][pWanted] = DOF2_GetInt(cFile, "Procurado");
	PlayerInfo[id][PresoTempo] = DOF2_GetInt(cFile, "PresoTempo");
	PlayerInfo[id][PresoOrg] = DOF2_GetInt(cFile, "PresoPlace");
	PlayerInfo[id][pSex] = DOF2_GetInt(cFile, "Sexo");
	PlayerInfo[id][pMateriais] = DOF2_GetInt(cFile, "Materiais");
	PlayerInfo[id][pWalkingStyle] = DOF2_GetInt(cFile, "AndarStyle");
	PlayerInfo[id][pIdade] = DOF2_GetInt(cFile, "Idade");
	PlayerInfo[id][pCapacete] = DOF2_GetInt(cFile, "Capacete");
	PlayerInfo[id][pGPS] = DOF2_GetInt(cFile, "GPS");
	PlayerInfo[id][pAgenda] = DOF2_GetInt(cFile, "Agenda");
	PlayerInfo[id][pSpawnType] = DOF2_GetInt(cFile, "SpawnType");
	PlayerInfo[id][pHouse1] = DOF2_GetInt(cFile, "Casa1");
	PlayerInfo[id][pHouse2] = DOF2_GetInt(cFile, "Casa2");
	PlayerInfo[id][pHouseEnter] = DOF2_GetInt(cFile, "HouseEnter");
    PlayerInfo[id][pEmpKey] = DOF2_GetInt(cFile, "Empresa");
    PlayerInfo[id][pBlockchat] = DOF2_GetBool(cFile, "ChatBlock");
    PlayerInfo[id][pBlockTemp] = DOF2_GetInt(cFile, "CBlockTempo");
    PlayerInfo[id][pBilheteMega] = DOF2_GetInt(cFile, "MegaSenaNum");
    PlayerInfo[id][pHospitalizado] = DOF2_GetInt(cFile, "Hospitalizado");
    PlayerInfo[id][pHospTemp] = DOF2_GetInt(cFile, "TempoHosp");
    PlayerInfo[id][pPlanoSaude] = DOF2_GetBool(cFile, "PlanoSaude");

	PlayerInfo[id][pColdre] = DOF2_GetInt(cFile, "Coldre");
    PlayerInfo[id][CfgColdreAtivo] = DOF2_GetBool(cFile, "CfgColdre");
    PlayerInfo[id][pChatABlock] = DOF2_GetBool(cFile, "AnunciosChat");
    PlayerInfo[id][pTextABlock] = DOF2_GetBool(cFile, "AnunciosConexoes");
    PlayerInfo[id][pChatCA] = DOF2_GetBool(cFile, "ChatCA");

    PlayerInfo[id][pBlockCA] = DOF2_GetBool(cFile, "CABlocked");
    PlayerInfo[id][pBlockCATemp] = DOF2_GetInt(cFile, "CABlockTemp");

    PlayerInfo[id][CfgVelocimetro] = DOF2_GetBool(cFile, "CfgVelo");
    PlayerInfo[id][CfgRelogioUP] = DOF2_GetBool(cFile, "CfgRUP");
    PlayerInfo[id][CfgCash] = DOF2_GetBool(cFile, "CfgCash");
    PlayerInfo[id][CfgChatKill] = DOF2_GetBool(cFile, "CfgChatKill");

	//UltimaPosiçao Registrada
	PlayerInfo[ id ][UltimaPosX] = DOF2_GetFloat(cFile, "UltimaPosX");
	PlayerInfo[ id ][UltimaPosY] = DOF2_GetFloat(cFile, "UltimaPosY");
	PlayerInfo[ id ][UltimaPosZ] = DOF2_GetFloat(cFile, "UltimaPosZ");
	PlayerInfo[ id ][UltimaPosA] = DOF2_GetFloat(cFile, "UltimaPosA");
	PlayerInfo[ id ][UInt] = DOF2_GetInt(cFile, "UltimoInt");
	PlayerInfo[ id ][UWorld] = DOF2_GetInt(cFile, "UltimoWorld");


    //Level das Profissoes
    PlayerInfo[id][ pProfLevel ][ Lixeiro ] = DOF2_GetInt(cFile, "LixeiroLevel");
	PlayerInfo[id][ pProfLevel ][ Taxista ] = DOF2_GetInt(cFile, "TaxistaLevel");
	PlayerInfo[id][ pProfLevel ][ Minerador ] = DOF2_GetInt(cFile, "MineradorLevel");
	PlayerInfo[id][ pProfLevel ][ MOnibus ] = DOF2_GetInt(cFile, "MotBusLevel");
	PlayerInfo[id][ pProfLevel ][ Petroleiro ] = DOF2_GetInt(cFile, "Petroleiro");
	PlayerInfo[id][ pProfLevel ][ Carteiro ] = DOF2_GetInt(cFile, "Carteiro");
	PlayerInfo[id][ pProfLevel ][ Mecanico ] = DOF2_GetInt(cFile, "MecanicoLevel");
	PlayerInfo[id][ pProfLevel ][ Advogado ] = DOF2_GetInt(cFile, "AdvogadoLevel");
    PlayerInfo[id][ pProfLevel ][ Paramedico ] = DOF2_GetInt(cFile, "ParamedicoLevel");
	PlayerInfo[id][ pProfLevel ][ Lenhador ] = DOF2_GetInt(cFile, "LenhadorLevel");

	//== Inventario ====
	playerInventario[ id ][ itemId1 ] = DOF2_GetInt(cFile, "ItemInventario1");
    playerInventario[ id ][ itemId2 ] = DOF2_GetInt(cFile, "ItemInventario2");
    playerInventario[ id ][ itemId3 ] = DOF2_GetInt(cFile, "ItemInventario3");
    playerInventario[ id ][ itemId4 ] = DOF2_GetInt(cFile, "ItemInventario4");
    playerInventario[ id ][ itemId5 ] = DOF2_GetInt(cFile, "ItemInventario5");
    playerInventario[ id ][ itemId6 ] = DOF2_GetInt(cFile, "ItemInventario6");
    playerInventario[ id ][ itemId7 ] = DOF2_GetInt(cFile, "ItemInventario7");

    playerInventario[ id ][ itemQuant1 ] = DOF2_GetInt(cFile, "ItemInvQuant1");
    playerInventario[ id ][ itemQuant2 ] = DOF2_GetInt(cFile, "ItemInvQuant2");
    playerInventario[ id ][ itemQuant3 ] = DOF2_GetInt(cFile, "ItemInvQuant3");
    playerInventario[ id ][ itemQuant4 ] = DOF2_GetInt(cFile, "ItemInvQuant4");
    playerInventario[ id ][ itemQuant5 ] = DOF2_GetInt(cFile, "ItemInvQuant5");
    playerInventario[ id ][ itemQuant6 ] = DOF2_GetInt(cFile, "ItemInvQuant6");
    playerInventario[ id ][ itemQuant7 ] = DOF2_GetInt(cFile, "ItemInvQuant7");

	//==================

	/*PlayerInfo[id][pVehKey1] = DOF2_GetInt(cFile, "Veiculo1");
    PlayerInfo[id][pVehKey2] = DOF2_GetInt(cFile, "Veiculo2");
    PlayerInfo[id][pVehKey3] = DOF2_GetInt(cFile, "Veiculo3");
    PlayerInfo[id][pVehKey4] = DOF2_GetInt(cFile, "Veiculo4");
    PlayerInfo[id][pVehKey5] = DOF2_GetInt(cFile, "Veiculo5");*/

	PlayerInfo[id][pWeapon1] = DOF2_GetInt(cFile, "Weapon1");
	PlayerInfo[id][pBullet1] = DOF2_GetInt(cFile, "Balas1");
	PlayerInfo[id][pWeapon2] = DOF2_GetInt(cFile, "Weapon2");
	PlayerInfo[id][pBullet2] = DOF2_GetInt(cFile, "Balas2");
	PlayerInfo[id][pWeapon3] = DOF2_GetInt(cFile, "Weapon3");
	PlayerInfo[id][pBullet3] = DOF2_GetInt(cFile, "Balas3");
	PlayerInfo[id][pWeapon4] = DOF2_GetInt(cFile, "Weapon4");
	PlayerInfo[id][pBullet4] = DOF2_GetInt(cFile, "Balas4");
	PlayerInfo[id][pWeapon5] = DOF2_GetInt(cFile, "Weapon5");
	PlayerInfo[id][pBullet5] = DOF2_GetInt(cFile, "Balas5");
	PlayerInfo[id][pWeapon6] = DOF2_GetInt(cFile, "Weapon6");
	PlayerInfo[id][pBullet6] = DOF2_GetInt(cFile, "Balas6");
	PlayerInfo[id][pWeapon7] = DOF2_GetInt(cFile, "Weapon7");
	PlayerInfo[id][pBullet7] = DOF2_GetInt(cFile, "Balas7");
	PlayerInfo[id][pWeapon8] = DOF2_GetInt(cFile, "Weapon8");
	PlayerInfo[id][pBullet8] = DOF2_GetInt(cFile, "Balas8");
	PlayerInfo[id][pWeapon9] = DOF2_GetInt(cFile, "Weapon9");
	PlayerInfo[id][pBullet9] = DOF2_GetInt(cFile, "Balas9");
	PlayerInfo[id][pWeapon10] = DOF2_GetInt(cFile, "Weapon10");
	PlayerInfo[id][pBullet10] = DOF2_GetInt(cFile, "Balas10");
	/*PlayerInfo[id][pWeapon11] = DOF2_GetInt(cFile, "Weapon11");
	PlayerInfo[id][pBullet11] = DOF2_GetInt(cFile, "Balas11");
	PlayerInfo[id][pWeapon12] = DOF2_GetInt(cFile, "Weapon12");
	PlayerInfo[id][pBullet12] = DOF2_GetInt(cFile, "Balas12");*/

	PlayerInfo[id][pHabA] = DOF2_GetInt(cFile, "HabA");
	PlayerInfo[id][pHabB] = DOF2_GetInt(cFile, "HabB");
	PlayerInfo[id][pHabD] = DOF2_GetInt(cFile, "HabD");
	PlayerInfo[id][pHabE] = DOF2_GetInt(cFile, "HabE");
	PlayerInfo[id][pHabAR] = DOF2_GetInt(cFile, "HabAR");
	PlayerInfo[id][pHabN] = DOF2_GetInt(cFile, "HabN");
	PlayerInfo[id][pHabES] = DOF2_GetInt(cFile, "HabES");

	// Sistema de Lutas
	PlayerInfo[id][pLutas] = DOF2_GetInt(cFile, "Luta");

    PlayerInfo[id][pMaconha] = DOF2_GetInt(cFile, "Maconha");
    PlayerInfo[id][pCrack] = DOF2_GetInt(cFile, "Crack");
    PlayerInfo[id][pCocaina] = DOF2_GetInt(cFile, "Cocaina");

 	PlayerInfo[ id ][ PrimeiraVezMO ] = DOF2_GetInt(cFile, "PrimeiraVezMO");
    PlayerInfo[ id ][ PrimeiraVezPetro ] = DOF2_GetInt(cFile, "PrimeiraVezPetro");
    PlayerInfo[ id ][ PrimeiraVezLix ] = DOF2_GetInt(cFile, "PrimeiraVezLix");
 	PlayerInfo[ id ][ PrimeiraVezCart ] = DOF2_GetInt(cFile, "PrimeiraVezCart");
    PlayerInfo[ id ][ PrimeiraVezMec ] = DOF2_GetInt(cFile, "PrimeiraVezMec");
    PlayerInfo[ id ][ PrimeiraVezMin ] = DOF2_GetInt(cFile, "PrimeiraVezMin");
    PlayerInfo[ id ][ PrimeiraVezTax ] = DOF2_GetInt(cFile, "PrimeiraVezTax");
    PlayerInfo[ id ][ PrimeiraVezAdv ] = DOF2_GetInt(cFile, "PrimeiraVezAdv");
    PlayerInfo[ id ][ PrimeiraVezPara ] = DOF2_GetInt(cFile, "PrimeiraVezPara");
    PlayerInfo[ id ][ PrimeiraVezLenh ] = DOF2_GetInt(cFile, "PrimeiraVezLenh");
    PlayerInfo[ id ][ PrimeiraVezEPizza ] = DOF2_GetInt(cFile, "PrimeiraVezEPizza");

    PlayerInfo[ id ][ pFichas ] = DOF2_GetInt(cFile, "Fichas");

    PlayerInfo[ id ][ musica ] = DOF2_GetInt(cFile, "Musica");

    //Dividas
    ProcuradoDividas[ id ] = DOF2_GetInt(cFile, "P_Dividas");

    //Outros
	GalaoInfo[id][pGalao] = DOF2_GetInt(cFile, "Galao");
	GalaoInfo[id][pLitros] = DOF2_GetInt(cFile, "LGalao");
	GalaoInfo[id][pMax] = DOF2_GetInt(cFile, "MGalao");

	CelularInfo[id][pCell] = DOF2_GetInt(cFile, "Celular");
	CelularInfo[id][pNumero] = DOF2_GetInt(cFile, "Numero");
	CelularInfo[id][pBlockCall] = DOF2_GetInt(cFile, "CallBlock");
	CelularInfo[id][pBlockSMS] = DOF2_GetInt(cFile, "SMSBlock");
	CelularInfo[id][pCredito] = DOF2_GetFloat(cFile, "Creditos");

	ConquistasInfo[ id ][ sNovato] = DOF2_GetInt(cFile, "Novato");
	ConquistasInfo[ id ][ sMotorista] = DOF2_GetInt(cFile, "Motorista");
	ConquistasInfo[ id ][ sTrabalhador ] = DOF2_GetInt(cFile, "Trabalhador");


	ContaInfo[id][cBanco] = DOF2_GetInt(cFile, "DivBanco");
	ContaInfo[id][cCell] = DOF2_GetFloat(cFile, "DivCell");
	ContaInfo[ id ][ cAvisado ] = DOF2_GetInt(cFile, "DivAvisado");
	ContaInfo[ id ][ cBlock ] = DOF2_GetBool(cFile, "Block");

	if(DOF2_GetInt(cFile, "MinutosJogados") > 0)
    {
        PlayerInfo[id][ pMinutosUP ] = DOF2_GetInt(cFile, "MinutosJogados");
        DOF2_SetInt(cFile, "MinutosJogados", 0);
	}
	SetSenha2Ativa(id, 0);

   	if(PlayerInfo[id][pVida] < 1.0)
    {
		PlayerInfo[id][pVida] = 100.0;
	}
	PlayerInfo[id][pLogger] = 1;

    //CarregarVeiculosPlayer(id);

	UpdateStatsRank(id, 1); // online

	OnVerificarTutorial( id );

	return 1;
}

Public:OnVerificarTutorial(id)
{

    if( PlayerInfo[id][pTutorial] == 1 )
    {

		static str[129];
		StopAudioStreamForPlayer(id);

		TextDrawShowForPlayer(id,BPSBRO[0]); TextDrawShowForPlayer(id,BPSBRO[1]); TextDrawShowForPlayer(id,BPSBRO[2]);
		TextDrawShowForPlayer(id,BPSBRO[3]); TextDrawShowForPlayer(id,BPSBRO[4]); TextDrawShowForPlayer(id,BPSBRO[5]);
		TextDrawShowForPlayer(id,BPSBRO[6]); TextDrawShowForPlayer(id,BPSBRO[7]); TextDrawShowForPlayer(id,BPSBRO[8]);
		TextDrawShowForPlayer(id,BPSBRO[9]); TextDrawShowForPlayer(id,BPSBRO[10]); TextDrawShowForPlayer(id,BPSBRO[11]);
		TextDrawShowForPlayer(id,BPSBRO[12]); TextDrawShowForPlayer(id,BPSBRO[13]); TextDrawShowForPlayer(id,BPSBRO[14]);
		TextDrawShowForPlayer(id,BPSBRO[15]); TextDrawShowForPlayer(id,BPSBRO[16]); TextDrawShowForPlayer(id,BPSBRO[17]);
		TextDrawShowForPlayer(id,BPSBRO[18]);
		TextDrawShowForPlayer(id,BPSBRO[19]); TextDrawShowForPlayer(id,BPSBRO[20]); TextDrawShowForPlayer(id,BPSBRO[21]);
		TextDrawShowForPlayer(id,BPSBRO[22]); TextDrawShowForPlayer(id,BPSBRO[23]); TextDrawShowForPlayer(id,BPSBRO[24]);
		TextDrawShowForPlayer(id,BPSBRO[25]); TextDrawShowForPlayer(id,BPSBRO[26]); TextDrawShowForPlayer(id,BPSBRO[27]);
		TextDrawShowForPlayer(id,BPSBRO[28]); TextDrawShowForPlayer(id,BPSBRO[29]); TextDrawShowForPlayer(id,BPSBRO[30]);
		TextDrawShowForPlayer(id,BPSBRO[31]); TextDrawShowForPlayer(id,BPSBRO[32]); TextDrawShowForPlayer(id,BPSBRO[33]);
		TextDrawShowForPlayer(id,BPSBRO[34]); TextDrawShowForPlayer(id,BPSBRO[35]); TextDrawShowForPlayer(id,BPSBRO[36]);
	    TextDrawShowForPlayer(id,BPSBRO[38]);
		TextDrawShowForPlayer(id,BPSBRO[39]); TextDrawShowForPlayer(id,BPSBRO[40]); TextDrawShowForPlayer(id,BPSBRO[41]); TextDrawShowForPlayer(id,BPSBRO[37]);

//		TextDrawShowForPlayer(id, Date[ id ]);


		PlayerTextDrawShow(id, TextVida[ 1 ][ id ]);
        PlayerTextDrawShow(id, TextVida[ 2 ][ id ]);


	    PlayerTextDrawShow(id, TextFome[ 0 ][ id ]);
	    PlayerTextDrawShow(id, TextFome[ 1 ][ id ]);
	    PlayerTextDrawShow(id, TextFome[ 2 ][ id ]);
	    PlayerTextDrawShow(id, TextFome[ 3 ][ id ]);

		PlayerTextDrawShow(id, TextSede[ 0 ][ id ]);
		PlayerTextDrawShow(id, TextSede[ 1 ][ id ]);
		PlayerTextDrawShow(id, TextSede[ 2 ][ id ]);
		PlayerTextDrawShow(id, TextSede[ 4 ][ id ]);

        if(PlayerInfo[ id ][ CfgRelogioUP ] == true){
			PlayerTextDrawShow(id, UPText[ id ][ 0 ]);
		}

        if(PlayerInfo[ id ][ pBlockchat ] == true)
        {
			TimerBlockChat[ id ] = SetTimerEx(#DesblockChatFor, TSegundos(1), false, #i, id);
        }
        StopAudioStreamForPlayer( id );

        AtualizarTempoSedeFome( id );

        SetPlayerVida(id, PlayerInfo[ id ][ pVida ]);
        SetPlayerColete(id, PlayerInfo[ id ][ pColete ]);
        GivePlayerMoney(id, PlayerInfo[ id ][ pDinheiro ]);

        ClearChatbox( id, 10);
        format(str, 128, "{FF6600}|_____________ {FFFFFF}Bem vindo %s {FF6600}____________|", PlayerInfo[id][pName]);
        SCM(id, -1, str);
        //format(str, 128, "{FFFFFF}%s", GetSaudacao());
        //SCM(id, Amarelo, str);
        format(str, 128, "{FFFFFF}%s, %s",GetSaudacao(), GetDate());
		SCM(id, Amarelo, str);
		format(str, 128, "{FFFFFF}Seu Ultimo Login: %s", PlayerInfo[id][pLastLogin]);
		SCM(id, Amarelo, str);
		SCM(id, Amarelo, "Sua presenca e muito importante aqui ! | DIVIRTA-SE |");

		if(PlayerInfo[ id ][ pVIP ] > 0)
        {
	        if(PlayerInfo[ id ][ pVIPTEMP ] < gettime())
            {
	            PlayerInfo[ id ][ pVIP ] = 0;
	            PlayerInfo[ id ][ pVIPTEMP ] = 0;

                if(PlayerInfo[ id ][ pVIP ] < 3)
                {
                    InfoMSG( id, "Seu VIP expirou, Obrigado por contribuir com o Servidor!");
                    } else {
                    InfoMSG( id, "Seu Socio expirou, Obrigado por contribuir com o Servidor!");
                }
			}
			else
			{
			    new ExpireIn = PlayerInfo[ id ][ pVIPTEMP ];
	            new TempoConvert = (ExpireIn-gettime())+gettime();

                if(PlayerInfo[ id ][ pVIP ] <= 3)
                {
                    format(str, sizeof(str), "O seu VIP ira expirar em %s", timec(TempoConvert));
                    } else {
                    format(str, sizeof(str), "O seu Socio ira expirar em %s", timec(TempoConvert));
                }
	            SCM( id, Purple, str);
			}
		}

		SCM(id, -1, "{FF6600}|__________________________________________|");

		if(GetPlayerLevel(id) < 4){
	        SCM(id, -1, "{93D1CA}Em caso de duvidas peca ajuda a outros players no (chat ajuda), utilize /ca [ duvida ]");
            SCM(id, -1, "{93D1CA}Voce pode tambem solicitar ajuda administrativa utilizando /ajuda > admin!");
		}
		SetPlayerWantedLevel(id, (PlayerInfo[id][pWanted]+ProcuradoDividas[ id ]));

        getdate( ano, mes, dia );
		gettime( hora, minuto, segundo );
		format( PlayerInfo[id][pLastLogin], 128, "%02d/%02d/%d - %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo );

		//SetSpawnInfo( id, NO_TEAM, PlayerInfo[id][pSkin], orgsRespawnPoint[PlayerInfo[id][pOrg]][orpX],orgsRespawnPoint[PlayerInfo[id][pOrg]][orpY],orgsRespawnPoint[PlayerInfo[id][pOrg]][orpZ], 0, 0, 0, 0, 0, 0, 0 );
		SpawnPlayer(id);
		fadeOut(id, 5000);
		LoadPlayerToys(id);

		/*GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon1 ], PlayerInfo[ id ][ pBullet1 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon2 ], PlayerInfo[ id ][ pBullet2 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon3 ], PlayerInfo[ id ][ pBullet3 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon4 ], PlayerInfo[ id ][ pBullet4 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon5 ], PlayerInfo[ id ][ pBullet5 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon6 ], PlayerInfo[ id ][ pBullet6 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon7 ], PlayerInfo[ id ][ pBullet7 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon8 ], PlayerInfo[ id ][ pBullet8 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon9 ], PlayerInfo[ id ][ pBullet9 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon10 ], PlayerInfo[ id ][ pBullet10 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon11 ], PlayerInfo[ id ][ pBullet11 ]);
		GivePlayerWeaponEx(id, PlayerInfo[ id ][ pWeapon12 ], PlayerInfo[ id ][ pBullet12 ]);*/

	//	VerificItems( id );

		CarregarProfissao( id );

        SetPlayerToys(id);

        // Sistema de Lutas
        SetPlayerFightingStyle(id, PlayerInfo[id][pLutas]);
        SetPlayerWalkingStyle(id, PlayerInfo[ id ][ pWalkingStyle ]);

        if(PlayerInfo[id][pAWork] )
        {
            if(PlayerInfo[id][pSex] == 1)
            {
                SetPlayerSkinEx(id, 217);
            }
            else SetPlayerSkinEx(id, 211);

            SetPlayerColor(id, C_ADMIN);
        }
        else SetPlayerSkinEx(id, PlayerInfo[id][pSkin]);

		//Verificaçao
		PlayerInfo[id][pTimerCheat] = SetTimerEx("OnPlayerCheater", 1000, true, "d", id);
	}
	else
	{
		// --- Entre no tutorial ---
		SpawnPlayer(id);
        fadeOut(id, 2000);
		TutorialStatus[id] = 1;

		OnEntrarTutorial( id );
	}

	return 1;
}

updateMoney(playerid){
    if(GetPlayerMoney(playerid) < PlayerInfo[playerid][pDinheiro]){
        PlayerInfo[playerid][pDinheiro] = GetPlayerMoney(playerid);
	}
	return true;
}

Public:OnPlayerCheater(playerid)
{
	if(PlayerInfo[playerid][pLogger])
    {
	    if(PlayerInfo[playerid][pDinheiro] < GetPlayerMoney(playerid)){
    		new moneyDiference = (GetPlayerMoney(playerid)-PlayerInfo[playerid][pDinheiro]);
		    GivePlayerMoney(playerid, -moneyDiference );
		}
		if(PlayerInfo[playerid][pLevel] != GetPlayerScore(playerid)){
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel] );
		}
		if(GetPlayerVida(playerid) > PlayerInfo[ playerid ][ pVida ]){
		    SetPlayerVida(playerid, PlayerInfo[ playerid ][ pVida ]);
	    }
		if(GetPlayerColete(playerid) > PlayerInfo[ playerid ][ pColete ]){
			SetPlayerColete(playerid, PlayerInfo[ playerid ][ pColete ]);
		}

        if(!AvisoAdminEnviado[ playerid ])
        {
            new str[128];
            if(GetPlayerPing(playerid) > PingLimite_Servidor && !IsPlayerNPC( playerid )) {

                format(str, sizeof(str), "{FFFA82}| PING | - %s esta com ping muito alto e foi kickado. ", GetNameEx( playerid ));
                SendClientMessageToAll(-1, str);
                Kick( playerid );

                AvisoAdminEnviado[ playerid ] = 1;
                SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
            }
            if(PlayerInfo[ playerid ][ pAdmin ] == 0)
            {
                if(GetPlayerSpecialAction(playerid) == 2){
                    format(str, sizeof(str), "| Anti Cheater | - %s foi banido por uso nao permitido de JetPack.", PlayerInfo[ playerid ][ pName ]);
                    SendAdminMessage(cadm, str);

                    format(STRLOG, sizeof(STRLOG), "[%s] %s foi banido Motivo: JetPack.", GetDateEx(), GetName(playerid));
                    SLog("Ban.log", STRLOG);

                    SendClientMessage(playerid, -1, ""#SERVELOGO" Voce foi banido por {FF0000}JetPack!");
                    BanPlayer( playerid, -1, "JetPack");

                    AvisoAdminEnviado[ playerid ] = 1;
                    SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
                }
            }
            if( GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 35)
            {
                if(PlayerInfo[ playerid ][ pAdmin ] == 0 || PlayerInfo[playerid][NoEvento] == 0)
                {

                    RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));

                    format(str, sizeof(str), "| Anti Cheater | - %s foi banido por usar Weapon Hack.", PlayerInfo[ playerid ][ pName ]);
                    SendAdminMessage(cadm, str);

                    format(STRLOG, sizeof(STRLOG), "[%s] %s foi banido Motivo: Weapon Hack.", GetDateEx(), GetName(playerid));
                    SLog("Ban.log", STRLOG);

                    SendClientMessage(playerid, -1, ""#SERVELOGO" Voce foi banido por {FF0000}Weapon Hack!");
                    BanPlayer( playerid, -1, "Weapon Hack");

                    AvisoAdminEnviado[ playerid ] = 1;
                    SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
                }
            }
        }

		AtualizarTextVida(playerid);
		AtualizarRankLabels(playerid);
		AtualizarTextFomeSede(playerid);
		CheckWeapons(playerid);
	}
	return true;
}

CarregarProfissao( id ){

	switch(PlayerInfo[ id ][ pEmprego ]){
		case Mecanico: TimerPMecanico[ id ] = 	SetTimerEx("MecanicosMapa", 4000, true, "d", id);
		case Paramedico: TimerPMedico[ id ] = 	SetTimerEx("ParamedicosMapa", 4000, true, "d", id);
		case Taxista: TimerPTaxista[ id ] = 	SetTimerEx("TaxistaMapa", 4000, true, "d", id);
		case PizzaJob: timerEntregadores[id] =  SetTimerEx("EntregadorPizzasMapa", 4000, true, "d", id);
	}
}

EncerrarTimerProfissao( id ){
    switch(PlayerInfo[ id ][ pEmprego ]){
        case Mecanico: 		KillTimer(TimerPMecanico[ id ]);
		case Paramedico: 	KillTimer(TimerPMedico[ id ]);
		case Taxista: 		KillTimer(TimerPTaxista[ id ]);
		case PizzaJob: 		KillTimer(timerEntregadores[ id ]);
	}
}

Public:TaxistaMapa( playerid ){
	ForPlayers(i){
		if(!PediuTaxi[ i ]) continue;
		SetPlayerMarkerForPlayer(playerid, i, 0xFFFF84AA);
	}
}

Public:MecanicosMapa( playerid ){
	ForPlayers(i){
		if(PlayerSolicitou[ i ] != Mecanico) continue;
		SetPlayerMarkerForPlayer(playerid, i, 0xCC77FFAA);
	}
}

Public:ParamedicosMapa( playerid ){
	ForPlayers(i){
		if(PlayerSolicitou[ i ] != Paramedico) continue;
		SetPlayerMarkerForPlayer(playerid, i, 0x63E999AA);
	}
}

Public:EntregadorPizzasMapa( playerid ){
	ForPlayers(i){
		if(PlayerSolicitou[ i ] != PizzaJob) continue;
		SetPlayerMarkerForPlayer(playerid, i, 0x63E999AA);
	}
}

/*
VerificItems( id ) {
	static vid, past[50];

	if(PlayerInfo[id][pVehKey1] != -1){

		vid = PlayerInfo[id][pVehKey1];

        format(past, sizeof past, PASTA_VEICULOS, vid);

	    if(!DOF2_FileExists(past)){
	        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 1 foi ressetado, por via de duvidas consulte um administrador!");
            PlayerInfo[id][pVehKey1] = -1;
		}
		else {
		    if(!(!strcmp(VeiculoInfo[vid][vDono], GetName( id ), true))) {
		        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 1 foi ressetado, por via de duvidas consulte um administrador!");
            	PlayerInfo[id][pVehKey1] = -1;
			}
		}
		OnSalvarDados( id );
	}
	if(PlayerInfo[id][pVehKey2] != -1){

		vid = PlayerInfo[id][pVehKey2];

        format(past, sizeof past, PASTA_VEICULOS, vid);

	    if(!DOF2_FileExists(past)){
	        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 2 foi ressetado, por via de duvidas consulte um administrador!");
            PlayerInfo[id][pVehKey2] = -1;
		}
		else {
		    if(!(!strcmp(VeiculoInfo[vid][vDono], GetName( id ), true))) {
		        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 2 foi ressetado, por via de duvidas consulte um administrador!");
            	PlayerInfo[id][pVehKey2] = -1;
			}
		}
		OnSalvarDados( id );
	}
	if(PlayerInfo[id][pVehKey3] != -1){

		vid = PlayerInfo[id][pVehKey3];

        format(past, sizeof past, PASTA_VEICULOS, vid);

	    if(!DOF2_FileExists(past)){
	        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 3 foi ressetado, por via de duvidas consulte um administrador!");
            PlayerInfo[id][pVehKey3] = -1;
		}
		else {
		    if(!(!strcmp(VeiculoInfo[vid][vDono], GetName( id ), true))) {
		        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 3 foi ressetado, por via de duvidas consulte um administrador!");
            	PlayerInfo[id][pVehKey3] = -1;
			}
		}
		OnSalvarDados( id );
	}
	if(PlayerInfo[id][pVehKey4] != -1){

		vid = PlayerInfo[id][pVehKey4];

        format(past, sizeof past, PASTA_VEICULOS, vid);

	    if(!DOF2_FileExists(past)){
	        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 4 foi ressetado, por via de duvidas consulte um administrador!");
            PlayerInfo[id][pVehKey4] = -1;
		}
		else {
		    if(!(!strcmp(VeiculoInfo[vid][vDono], GetName( id ), true))) {
		        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 4 foi ressetado, por via de duvidas consulte um administrador!");
            	PlayerInfo[id][pVehKey4] = -1;
			}
		}
		OnSalvarDados( id );
	}
	if(PlayerInfo[id][pVehKey5] != -1){

		vid = PlayerInfo[id][pVehKey5];

        format(past, sizeof past, PASTA_VEICULOS, vid);

	    if(!DOF2_FileExists(past)){
	        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 5 foi ressetado, por via de duvidas consulte um administrador!");
            PlayerInfo[id][pVehKey5] = -1;
		}
		else {
		    if(!(!strcmp(VeiculoInfo[vid][vDono], GetName( id ), true))) {
		        SCM(id, AzulClaro, "(>) - Seu veiculo de numero 5 foi ressetado, por via de duvidas consulte um administrador!");
            	PlayerInfo[id][pVehKey5] = -1;
			}
		}
		OnSalvarDados( id );
	}
	return true;
}
*/
/*=============================================================================
					 OnSalvarDados()

	Salva os dados do jogador no diretorio de contas do servidor!
==============================================================================*/


/*Public:OnSalvarDados2(playerid) {

    if(!IsPlayerConnected( playerid ) || IsPlayerNPC( playerid )) return true;

    new Count = GetTickCount();

	if(PlayerInfo[playerid][pLogger] >= 1){

		new cFile[50];

		format(cFile, 100, "Contas2/%s.ini", PlayerInfo[playerid][pName]);

		new File: hFile = fopen(cFile, io_write);
		if (hFile)
		{
			new var[60];

			format(var, 60, "Email=%s\n", PlayerInfo[playerid][pEmail]);fwrite(hFile, var);
   			format(var, 60, "Senha=%s\n", PlayerInfo[playerid][pSenha]);fwrite(hFile, var);
			format(var, 32, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
			format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
            format(var, 32, "Exp=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);

			fclose(hFile);
		}
		printf("OnplayerSave2: %d milessegundos", GetTickCount()-Count);
	}
	return true;
}
*/

/*
saveWeapons(id)
{

	static wep, ammo;

    Loop(slot, 12)
    {

        GetPlayerWeaponData(id, slot, wep, ammo);

		if( PlayerInfo[ id ][ pWeapon1 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon1 ], PlayerInfo[ id ][ pBullet1 ]);
        else if( PlayerInfo[ id ][ pWeapon2 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon2 ], PlayerInfo[ id ][ pBullet2 ]);
        else if( PlayerInfo[ id ][ pWeapon3 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon3 ], PlayerInfo[ id ][ pBullet3 ]);
        else if( PlayerInfo[ id ][ pWeapon4 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon4 ], PlayerInfo[ id ][ pBullet4 ]);
        else if( PlayerInfo[ id ][ pWeapon5 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon5 ], PlayerInfo[ id ][ pBullet5 ]);
        else if( PlayerInfo[ id ][ pWeapon6 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon6 ], PlayerInfo[ id ][ pBullet6 ]);
        else if( PlayerInfo[ id ][ pWeapon7 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon7 ], PlayerInfo[ id ][ pBullet7 ]);
        else if( PlayerInfo[ id ][ pWeapon8 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon8 ], PlayerInfo[ id ][ pBullet8 ]);
        else if( PlayerInfo[ id ][ pWeapon9 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon9 ], PlayerInfo[ id ][ pBullet9 ]);
        else if( PlayerInfo[ id ][ pWeapon10 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon10 ], PlayerInfo[ id ][ pBullet10 ]);
        else if( PlayerInfo[ id ][ pWeapon11 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon11 ], PlayerInfo[ id ][ pBullet11 ]);
        else if( PlayerInfo[ id ][ pWeapon12 ] != 0) GetPlayerWeaponData(id, slot, PlayerInfo[ id ][ pWeapon12 ], PlayerInfo[ id ][ pBullet12 ]);
    }

	return true;
}*/

saveWeapons(id)
{
	GetPlayerWeaponData(id, 1, PlayerInfo[ id ][ pWeapon1 ], PlayerInfo[ id ][ pBullet1 ]);
    GetPlayerWeaponData(id, 2, PlayerInfo[ id ][ pWeapon2 ], PlayerInfo[ id ][ pBullet2 ]);
    GetPlayerWeaponData(id, 3, PlayerInfo[ id ][ pWeapon3 ], PlayerInfo[ id ][ pBullet3 ]);
    GetPlayerWeaponData(id, 4, PlayerInfo[ id ][ pWeapon4 ], PlayerInfo[ id ][ pBullet4 ]);
    GetPlayerWeaponData(id, 5, PlayerInfo[ id ][ pWeapon5 ], PlayerInfo[ id ][ pBullet5 ]);
    GetPlayerWeaponData(id, 6, PlayerInfo[ id ][ pWeapon6 ], PlayerInfo[ id ][ pBullet6 ]);
    GetPlayerWeaponData(id, 7, PlayerInfo[ id ][ pWeapon7 ], PlayerInfo[ id ][ pBullet7 ]);
    GetPlayerWeaponData(id, 8, PlayerInfo[ id ][ pWeapon8 ], PlayerInfo[ id ][ pBullet8 ]);
    GetPlayerWeaponData(id, 9, PlayerInfo[ id ][ pWeapon9 ], PlayerInfo[ id ][ pBullet9 ]);
    GetPlayerWeaponData(id, 10, PlayerInfo[ id ][ pWeapon10 ], PlayerInfo[ id ][ pBullet10 ]);
	return true;
}

Public:OnSalvarDados(id)
{

    if(!IsPlayerConnected( id ) || IsPlayerNPC( id )) return true;

    new cFile[100];

	format(cFile, 100, PASTA_CONTAS, PlayerInfo[id][pName]);

	//new Count = GetTickCount();

    if(PlayerInfo[id][pLogger] >= 1){
		if(!DOF2_FileExists(cFile)) DOF2_CreateFile(cFile);

		DOF2_SetString(cFile, "Email", PlayerInfo[id][pEmail]);
		DOF2_SetString(cFile, "Senha", PlayerInfo[id][pSenha]);
        DOF2_SetString(cFile, "LastLogin", PlayerInfo[id][pLastLogin]);

		DOF2_SetInt(cFile, "Level", PlayerInfo[id][pLevel]);
		DOF2_SetInt(cFile, "Exp", PlayerInfo[id][pExp]);
		DOF2_SetInt(cFile, "Fome", PlayerInfo[id][pFome]);
		DOF2_SetInt(cFile, "Sede", PlayerInfo[id][pSede]);
        DOF2_SetInt(cFile, "Organizador", PlayerInfo[id][Organizador]);

		DOF2_SetFloat(cFile, "Vida", PlayerInfo[id][pVida]);
    	DOF2_SetFloat(cFile, "Colete", PlayerInfo[id][pColete]);

		DOF2_SetInt(cFile, "Dinheiro", PlayerInfo[id][pDinheiro]);
		DOF2_SetInt(cFile, "Banco", PlayerInfo[id][pBanco]);
		DOF2_SetInt(cFile, "Salario", PlayerInfo[id][pSalario]);
		DOF2_SetInt(cFile, "Emprego", PlayerInfo[id][pEmprego]);
		DOF2_SetInt(cFile, "Org", PlayerInfo[id][pOrg]);
		DOF2_SetInt(cFile, "Cargo", PlayerInfo[id][pCargo]);
		DOF2_SetInt(cFile, "Admin", PlayerInfo[id][pAdmin]);
		DOF2_SetInt(cFile, "VIP", PlayerInfo[id][pVIP]);
        DOF2_SetInt(cFile, "TemBeneficio", PlayerInfo[id][TemBeneficio]);
        DOF2_SetInt(cFile, "Multas", PlayerInfo[id][pMultas]);

        DOF2_SetInt(cFile, "Cash", PlayerInfo[id][Cash]);
        DOF2_SetInt(cFile, "CasaCash", PlayerInfo[id][CasaCash]);
        DOF2_SetInt(cFile, "VeiculoCash", PlayerInfo[id][VeiculoCash]);
        DOF2_SetInt(cFile, "EmpresaCash", PlayerInfo[id][EmpresaCash]);
        DOF2_SetInt(cFile, "CriarCasaCash", PlayerInfo[id][CriarCasaCash]);
        DOF2_SetInt(cFile, "CriarSetCash", PlayerInfo[id][CriarSetCash]);

		DOF2_SetInt(cFile, "TempoVip", PlayerInfo[id][pVIPTEMP]);
		DOF2_SetInt(cFile, "BanAviso", PlayerInfo[id][BanAviso]);
		DOF2_SetInt(cFile, "Tutorial", PlayerInfo[id][pTutorial]);
		DOF2_SetInt(cFile, "MinutosUP", PlayerInfo[id][ pMinutosUP ]);
		DOF2_SetInt(cFile, "SegundosUP", PlayerInfo[id][ pSegundosUP ]);
		DOF2_SetInt(cFile, "Skin", PlayerInfo[id][pSkin]);
		DOF2_SetInt(cFile, "Procurado", PlayerInfo[id][pWanted]);
		DOF2_SetInt(cFile, "PresoTempo", PlayerInfo[id][PresoTempo]);
		DOF2_SetInt(cFile, "PresoPlace", PlayerInfo[id][PresoOrg]);
		DOF2_SetInt(cFile, "Sexo", PlayerInfo[id][pSex]);
		DOF2_SetInt(cFile, "Materiais", PlayerInfo[id][pMateriais]);
		DOF2_SetInt(cFile, "AndarStyle", PlayerInfo[id][pWalkingStyle]);
		DOF2_SetInt(cFile, "Idade", PlayerInfo[id][pIdade]);
		DOF2_SetInt(cFile, "Capacete", PlayerInfo[id][pCapacete]);
		DOF2_SetInt(cFile, "GPS", PlayerInfo[id][pGPS]);
		DOF2_SetInt(cFile, "Agenda", PlayerInfo[id][pAgenda]);
		DOF2_SetInt(cFile, "SpawnType", PlayerInfo[id][pSpawnType]);
		DOF2_SetInt(cFile, "Casa1", PlayerInfo[id][pHouse1]);
		DOF2_SetInt(cFile, "Casa2", PlayerInfo[id][pHouse2]);
		DOF2_SetInt(cFile, "HouseEnter", PlayerInfo[id][pHouseEnter]);
        DOF2_SetInt(cFile, "Empresa", PlayerInfo[id][pEmpKey]);
        DOF2_SetBool(cFile, "ChatBlock", PlayerInfo[id][ pBlockchat ]);
		DOF2_SetInt(cFile, "CBlockTempo", PlayerInfo[id][ pBlockTemp ]);
        DOF2_SetInt(cFile, "Galao", GalaoInfo[id][pGalao]);
        DOF2_SetInt(cFile, "LGalao", GalaoInfo[id][pLitros]);
        DOF2_SetInt(cFile, "MGalao", GalaoInfo[id][pMax]);
        DOF2_SetInt(cFile, "MegaSenaNum", PlayerInfo[id][pBilheteMega]);
        DOF2_SetInt(cFile, "Hospitalizado", PlayerInfo[id][pHospitalizado]);
    	DOF2_SetInt(cFile, "TempoHosp", PlayerInfo[id][pHospTemp]);
    	DOF2_SetBool(cFile, "PlanoSaude", PlayerInfo[id][ pPlanoSaude ]);
        DOF2_SetInt(cFile, "Coldre", PlayerInfo[id][pColdre]);
    	DOF2_SetBool(cFile, "CfgColdre", PlayerInfo[id][CfgColdreAtivo]);
    	DOF2_SetBool(cFile, "AnunciosChat", PlayerInfo[id][pChatABlock]);
    	DOF2_SetBool(cFile, "AnunciosConexoes", PlayerInfo[id][pTextABlock]);

		DOF2_SetBool(cFile, "ChatCA", PlayerInfo[id][pChatCA]);
        DOF2_SetBool(cFile, "CABlocked", PlayerInfo[id][pBlockCA]);
        DOF2_SetInt(cFile, "CABlockTemp", PlayerInfo[id][pBlockCATemp]);

        DOF2_SetBool(cFile, "CfgVelo", PlayerInfo[id][CfgVelocimetro]);
        DOF2_SetBool(cFile, "CfgRUP", PlayerInfo[id][CfgRelogioUP]);
        DOF2_SetBool(cFile, "CfgCash", PlayerInfo[id][CfgCash]);
        DOF2_SetBool(cFile, "CfgChatKill", PlayerInfo[id][CfgChatKill]);

		//==== Inventario =====================
		DOF2_SetInt(cFile, "ItemInventario1", playerInventario[ id ][ itemId1 ]);
		DOF2_SetInt(cFile, "ItemInventario2", playerInventario[ id ][ itemId2 ]);
		DOF2_SetInt(cFile, "ItemInventario3", playerInventario[ id ][ itemId3 ]);
		DOF2_SetInt(cFile, "ItemInventario4", playerInventario[ id ][ itemId4 ]);
		DOF2_SetInt(cFile, "ItemInventario5", playerInventario[ id ][ itemId5 ]);
		DOF2_SetInt(cFile, "ItemInventario6", playerInventario[ id ][ itemId6 ]);
		DOF2_SetInt(cFile, "ItemInventario7", playerInventario[ id ][ itemId7 ]);

		DOF2_SetInt(cFile, "ItemInvQuant1", playerInventario[ id ][ itemQuant1 ]);
		DOF2_SetInt(cFile, "ItemInvQuant2", playerInventario[ id ][ itemQuant2 ]);
		DOF2_SetInt(cFile, "ItemInvQuant3", playerInventario[ id ][ itemQuant3 ]);
		DOF2_SetInt(cFile, "ItemInvQuant4", playerInventario[ id ][ itemQuant4 ]);
		DOF2_SetInt(cFile, "ItemInvQuant5", playerInventario[ id ][ itemQuant5 ]);
		DOF2_SetInt(cFile, "ItemInvQuant6", playerInventario[ id ][ itemQuant6 ]);
		DOF2_SetInt(cFile, "ItemInvQuant7", playerInventario[ id ][ itemQuant7 ]);
        //=======================================

      /*  DOF2_SetInt(cFile, "Veiculo1", PlayerInfo[id][pVehKey1]);
        DOF2_SetInt(cFile, "Veiculo2", PlayerInfo[id][pVehKey2]);
        DOF2_SetInt(cFile, "Veiculo3", PlayerInfo[id][pVehKey3]);
        DOF2_SetInt(cFile, "Veiculo4", PlayerInfo[id][pVehKey4]);
        DOF2_SetInt(cFile, "Veiculo5", PlayerInfo[id][pVehKey5]);*/

		//==== Sistema de armas ===================
        DOF2_SetInt(cFile, "Weapon1", PlayerInfo[id][pWeapon1]);
		DOF2_SetInt(cFile, "Balas1", PlayerInfo[id][pBullet1]);
        DOF2_SetInt(cFile, "Weapon2", PlayerInfo[id][pWeapon2]);
		DOF2_SetInt(cFile, "Balas2", PlayerInfo[id][pBullet2]);
		DOF2_SetInt(cFile, "Weapon3", PlayerInfo[id][pWeapon3]);
		DOF2_SetInt(cFile, "Balas3", PlayerInfo[id][pBullet3]);
		DOF2_SetInt(cFile, "Weapon4", PlayerInfo[id][pWeapon4]);
		DOF2_SetInt(cFile, "Balas4", PlayerInfo[id][pBullet4]);
		DOF2_SetInt(cFile, "Weapon5", PlayerInfo[id][pWeapon5]);
		DOF2_SetInt(cFile, "Balas5", PlayerInfo[id][pBullet5]);
		DOF2_SetInt(cFile, "Weapon6", PlayerInfo[id][pWeapon6]);
		DOF2_SetInt(cFile, "Balas6", PlayerInfo[id][pBullet6]);
		DOF2_SetInt(cFile, "Weapon7", PlayerInfo[id][pWeapon7]);
		DOF2_SetInt(cFile, "Balas7", PlayerInfo[id][pBullet7]);
		DOF2_SetInt(cFile, "Weapon8", PlayerInfo[id][pWeapon8]);
		DOF2_SetInt(cFile, "Balas8", PlayerInfo[id][pBullet8]);
		DOF2_SetInt(cFile, "Weapon9", PlayerInfo[id][pWeapon9]);
		DOF2_SetInt(cFile, "Balas9", PlayerInfo[id][pBullet9]);
		DOF2_SetInt(cFile, "Weapon10", PlayerInfo[id][pWeapon10]);
		DOF2_SetInt(cFile, "Balas10", PlayerInfo[id][pBullet10]);

		/*
		DOF2_SetInt(cFile, "Weapon11", PlayerInfo[id][pWeapon11]);
		DOF2_SetInt(cFile, "Balas11", PlayerInfo[id][pBullet11]);
		DOF2_SetInt(cFile, "Weapon12", PlayerInfo[id][pWeapon12]);
		DOF2_SetInt(cFile, "Balas12", PlayerInfo[id][pBullet12]);*/

		//=============================================


		//Ultima posiçao registrada
		DOF2_SetFloat(cFile, "UltimaPosX", PlayerInfo[ id ][UltimaPosX]);
		DOF2_SetFloat(cFile, "UltimaPosY", PlayerInfo[ id ][UltimaPosY]);
		DOF2_SetFloat(cFile, "UltimaPosZ", PlayerInfo[ id ][UltimaPosZ]);
		DOF2_SetFloat(cFile, "UltimaPosA", PlayerInfo[ id ][UltimaPosA]);
		DOF2_SetInt(cFile, "UltimoInt", PlayerInfo[ id ][UInt]);
		DOF2_SetInt(cFile, "UltimoWorld", PlayerInfo[ id ][UWorld]);

		DOF2_SetInt(cFile, "AdvogadoLevel", PlayerInfo[id][ pProfLevel ][ Advogado ]);
		DOF2_SetInt(cFile, "TaxistaLevel", PlayerInfo[id][ pProfLevel ][ Taxista ]);
		DOF2_SetInt(cFile, "LixeiroLevel", PlayerInfo[id][ pProfLevel ][ Lixeiro ]);
		DOF2_SetInt(cFile, "MineradorLevel", PlayerInfo[id][ pProfLevel ][ Minerador ]);
		DOF2_SetInt(cFile, "MotBusLevel", PlayerInfo[id][ pProfLevel ][ MOnibus ]);
		DOF2_SetInt(cFile, "Petroleiro", PlayerInfo[id][ pProfLevel ][ Petroleiro ]);
		DOF2_SetInt(cFile, "Carteiro", PlayerInfo[id][ pProfLevel ][ Carteiro ]);
		DOF2_SetInt(cFile, "MecanicoLevel", PlayerInfo[id][ pProfLevel ][ Mecanico ]);
		DOF2_SetInt(cFile, "ParamedicoLevel", PlayerInfo[id][ pProfLevel ][ Paramedico ]);
		DOF2_SetInt(cFile, "LenhadorLevel", PlayerInfo[id][ pProfLevel ][ Lenhador ]);

        DOF2_SetInt(cFile, "HabA", PlayerInfo[id][pHabA]);
		DOF2_SetInt(cFile, "HabB", PlayerInfo[id][pHabB]);
		DOF2_SetInt(cFile, "HabD", PlayerInfo[id][pHabD]);
		DOF2_SetInt(cFile, "HabE", PlayerInfo[id][pHabE]);
		DOF2_SetInt(cFile, "HabAR", PlayerInfo[id][pHabAR]);
		DOF2_SetInt(cFile, "HabN", PlayerInfo[id][pHabN]);
		DOF2_SetInt(cFile, "HabES", PlayerInfo[id][pHabES]);

		DOF2_SetInt(cFile, "Luta", PlayerInfo[id][pLutas]);

        DOF2_SetInt(cFile, "Maconha", PlayerInfo[id][pMaconha]);
    	DOF2_SetInt(cFile, "Crack", PlayerInfo[id][pCrack]);
    	DOF2_SetInt(cFile, "Cocaina", PlayerInfo[id][pCocaina]);

        DOF2_SetInt(cFile, "P_Dividas", ProcuradoDividas[id]);

		DOF2_SetInt(cFile, "Celular", CelularInfo[id][pCell]);
		DOF2_SetInt(cFile, "Numero", CelularInfo[id][pNumero]);
		DOF2_SetInt(cFile, "CallBlock", CelularInfo[id][pBlockCall]);
		DOF2_SetInt(cFile, "SMSBlock", CelularInfo[id][pBlockSMS]);
 		DOF2_SetFloat(cFile, "Creditos", CelularInfo[id][pCredito]);

		DOF2_SetInt(cFile, "Novato", ConquistasInfo[id][sNovato]);
		DOF2_SetInt(cFile, "Motorista", ConquistasInfo[id][sMotorista]);
		DOF2_SetInt(cFile, "Trabalhador", ConquistasInfo[id][sTrabalhador]);

		DOF2_SetInt(cFile, "DivBanco", ContaInfo[id][cBanco]);
		DOF2_SetFloat(cFile, "DivCell", ContaInfo[id][cCell]);
		DOF2_SetInt(cFile, "DivAvisado", ContaInfo[ id ][ cAvisado ]);
		DOF2_SetBool(cFile, "Block", ContaInfo[ id ][ cBlock ]);

    	DOF2_SetInt(cFile, "PrimeiraVezMO", PlayerInfo[id][PrimeiraVezMO]);
    	DOF2_SetInt(cFile, "PrimeiraVezPetro", PlayerInfo[id][PrimeiraVezPetro]);
    	DOF2_SetInt(cFile, "PrimeiraVezLix", PlayerInfo[id][PrimeiraVezLix]);
    	DOF2_SetInt(cFile, "PrimeiraVezCart", PlayerInfo[id][PrimeiraVezCart]);
    	DOF2_SetInt(cFile, "PrimeiraVezMec", PlayerInfo[id][PrimeiraVezMec]);
    	DOF2_SetInt(cFile, "PrimeiraVezMin", PlayerInfo[id][PrimeiraVezMin]);
    	DOF2_SetInt(cFile, "PrimeiraVezTax", PlayerInfo[id][PrimeiraVezTax]);
    	DOF2_SetInt(cFile, "PrimeiraVezAdv", PlayerInfo[id][PrimeiraVezAdv]);
    	DOF2_SetInt(cFile, "PrimeiraVezPara", PlayerInfo[id][PrimeiraVezPara]);
    	DOF2_SetInt(cFile, "PrimeiraVezLenh", PlayerInfo[id][PrimeiraVezLenh]);
    	DOF2_SetInt(cFile, "PrimeiraVezEPizza", PlayerInfo[id][PrimeiraVezEPizza]);

    	DOF2_SetInt(cFile, "Fichas", PlayerInfo[id][pFichas]);
    	
    	DOF2_SetInt(cFile, "Musica", PlayerInfo[id][musica]);

		DOF2_SaveFile();
	}

    //printf("OnplayerSave: %d milessegundos", GetTickCount()-Count);
 	return 1;
}

/*
	OnSalvarDadosTodos
*/

//AtualizarTempoSedeFome()
AtualizarTempoSedeFome( playerid ) {

	KillTimer(PlayerInfo[ playerid ][ pTimerF ]);
	KillTimer(PlayerInfo[ playerid ][ pTimerS ]);

	if(PlayerInfo[ playerid ][ pLevel ] > 7){
		PlayerInfo[ playerid ][ pTimerF ] = SetTimerEx(#OnPlayerFStatus, ((7+TEMPO_FOME_MIN)*15000), true, #i, playerid);
	    PlayerInfo[ playerid ][ pTimerS ] = SetTimerEx(#OnPlayerSStatus, ((7+TEMPO_SEDE_MIN)*10000), true, #i, playerid);
	}
	else {
	    PlayerInfo[ playerid ][ pTimerF ] = SetTimerEx(#OnPlayerFStatus, ((PlayerInfo[ playerid ][ pLevel ]+TEMPO_FOME_MIN)*13000), true, #i, playerid);
	    PlayerInfo[ playerid ][ pTimerS ] = SetTimerEx(#OnPlayerSStatus, ((PlayerInfo[ playerid ][ pLevel ]+TEMPO_SEDE_MIN)*10000), true, #i, playerid);
	}
}


Public:OnPlayerFStatus( playerid ) {
	if(PlayerInfo[playerid][pAWork] == 3 || PlayerInfo[ playerid ][ PresoTempo ] > 0 || PlayerAFK{ playerid }) return true;

	if(PlayerInfo[ playerid ][ pLogger ] == 1){
	    if(PlayerInfo[ playerid ][ pHospitalizado ] != 1){
		    switch(PlayerInfo[ playerid ][ pFome ]){
			    case 20, 30: SCM(playerid, -1, "{83F6B7}[ Fome ] - Nunca deixe de se alimentar corretamente .");
			    case 3, 9, 12, 14: SCM(playerid, -1, "{FF9C07}[ Fome ] - Voce esta com muita fome, procure urgente por um local para se alimentar...");
		    }

			if(PlayerInfo[ playerid ][ pFome ] <= 0){
			    PlayerInfo[ playerid ][ pFome ] = 0;
			    SetPlayerVida(playerid, (GetPlayerVida(playerid)-1.0));

				if(GetPlayerVida(playerid) <= 20.0 && GetPlayerVida(playerid) >= 16.0) SetPlayerDrunkLevel(playerid, 3000);
				else if(GetPlayerVida(playerid) <= 15.0 && GetPlayerVida(playerid) >= 11.0) SetPlayerDrunkLevel(playerid, 4000);
				else if(GetPlayerVida(playerid) <= 10.0) {
				    SCM(playerid, -1, "{DF4545}[ Fome ] - Voce desmaiou por ficar muito tempo com fome...");
				    SistemaHospital(playerid, "Ativar");
					//SpawnPlayer(playerid);
				}
			}
			if(PlayerInfo[ playerid ][ pFome ] != 0) PlayerInfo[ playerid ][ pFome ]--;
		}
	}
	return true;
}

Public:OnPlayerSStatus( playerid )
{
    if(PlayerInfo[ playerid ][pAWork] == 3 || PlayerInfo[ playerid ][ PresoTempo ] > 0 || PlayerAFK{ playerid }) return true;

	if(PlayerInfo[ playerid ][ pLogger ] == 1){
	    if(PlayerInfo[ playerid ][ pHospitalizado ] != 1){
		    switch(PlayerInfo[ playerid ][ pSede ]){
			    case 27, 35: SCM(playerid, -1, "{FF9C07}[ Sede ] - Sua sede esta aumentando..");
			    case 5, 13, 19: SCM(playerid, -1, "{FF9C07}[ Sede ] - Voce esta com muita sede, procure urgente por um local para beber algo...");
		    }
			if(PlayerInfo[ playerid ][ pSede ] <= 0){
			    PlayerInfo[ playerid ][ pSede ] = 0;
			    SetPlayerVida(playerid, (GetPlayerVida(playerid)-1.0));

				if(GetPlayerVida(playerid) <= 20.0 && GetPlayerVida(playerid) >= 16.0) SetPlayerDrunkLevel(playerid, 3000);
				else if(GetPlayerVida(playerid) <= 15.0 && GetPlayerVida(playerid) >= 11.0) SetPlayerDrunkLevel(playerid, 4000);
				else if(GetPlayerVida(playerid) <= 10.0)
                {
				    SCM(playerid, -1, "{DF4545}[ Sede ] - Voce desmaiou por ficar muito tempo com sede...");
				    SistemaHospital(playerid, "Ativar");
					//SpawnPlayer(playerid);
				}
			}
			if(PlayerInfo[ playerid ][ pSede ] != 0) PlayerInfo[ playerid ][ pSede ]--;
		}
	}
	return true;
}

ShowPlayerAjudaOrg(playerid)
{
    if(IsPlayerGang(playerid))
    {
        new Box[ 1000 ];
		static str[ 129 ];

        format(str, 129, "{%s}| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |\n\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
	    strcat(Box, str);

	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}r - Radio da gang!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
		format(str, 129, "{FFFFFF}{%s}/{FFFFFF}membros - Lista de membros online!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}dinamite - Pega uma dinamite em sua hq!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}explodir - Explode a dinamite!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}roubar - Rouba um local especifico!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}venderdrogas - Indice dos comandos disponiveis para venda de drogas!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}cone - Adciona um cone como barreira!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}rcone - Remove os cones que voce adicionou!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}amarrar - Amarra um policial por 50 segundos!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}Patente: {%s}%s\t{FFFFFF}Facçao: {%s}%s\n\n", OrgColorHex[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo]), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]]);
	    strcat(Box, str);
		format(str, 129, "{%s}| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |", OrgColorHex[PlayerInfo[playerid][pOrg]]);
	    strcat(Box, str);

	    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	"Ajuda Facçao", Box, "Confirmar", "");
	}
	if(isPlayerCop( playerid )) {
		new Box[ 1000 ];
		static str[ 129 ];

        format(str, 129, "{%s}| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |\n\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
	    strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}m - Aviso policial p/ um suspeito!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);

	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}r - Radio da corporaçao!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
		format(str, 129, "{FFFFFF}{%s}/{FFFFFF}membros - Lista de membros online!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}listasu - Lista de delitos permitivos!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}su - Adiciona um nivel de procurado!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}algemar - Algemar/desalgema um suspeito!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
		format(str, 129, "{FFFFFF}{%s}/{FFFFFF}desalgemar - desalgema um suspeito!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}abordar - Abordar um suspeito para sua veatura!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}imo - Imobiliza um suspeito!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}prender - Prende um suspeito!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}adp - Abre o portao principal!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}adp2 - Abre o portao dos fundos!!\n", OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
	    format(str, 129, "{FFFFFF}{%s}/{FFFFFF}br {%s}/{FFFFFF}rbr {FFFFFF}- Coloca/retira uma bairreira na pista!\n\n", OrgColorHex[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[playerid][pOrg]]);
		strcat(Box, str);
		format(str, 129, "{FFFFFF}Patente: {%s}%s\t{FFFFFF}Corporaçao: {%s}%s\n\n", OrgColorHex[PlayerInfo[playerid][pOrg]], GetPatentNome(PlayerInfo[playerid][pOrg], PlayerInfo[playerid][pCargo]), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]]);
	    strcat(Box, str);
		format(str, 129, "{%s}| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |", OrgColorHex[PlayerInfo[playerid][pOrg]]);
	    strcat(Box, str);

	    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	"Ajuda", Box, "Confirmar", "");
	}
	return true;
}

ShowPlayerSugestion(id){

	new
		stX[ 129 ]
	;

	if(ConquistasInfo[ id ] [ sNovato ] == 0){

		format( stX, sizeof( stX ), "~w~Va ate a Loja de Utilitarios, marcado por um ponto vermelho ~n~no mapa e compre telefone, agenda e GPS!.");
		TextDrawSetString( Objetivo[1], stX );
		//TextDrawShowForPlayer(id, Objetivo[0]);
		TextDrawShowForPlayer(id, Objetivo[1]);


        new strgps[ 200 ];

        PlayerInfo[ id ][ pCheck ] = 1;

        SetPlayerCheckpoint(id, 1351.7323,-1755.7946,13.3526, 2.0);

        format(strgps, sizeof( strgps ), "{58FAF4}Lugar: Loja de Utilitarios Local: %s", GetAreaForCords(1351.7323,-1755.7946,13.3526));
        SCM(id, -1, strgps);


		SetTimerEx("HideTextObjetivo", TSegundos(7), false, "i", id);


	} else if(ConquistasInfo[ id ] [ sMotorista ] == 0){

		format( stX, sizeof( stX ), "~w~Va ate a Auto Escola e tire suas habilitaçoes, eles serao~n~~w~necessarias para que voce consiga empregos e veiculos.");
		//TextDrawShowForPlayer(id, Objetivo[0]);
		TextDrawShowForPlayer(id, Objetivo[1]);
		SetTimerEx("HideTextObjetivo", TSegundos(7), false, "i", id);
		TextDrawSetString( Objetivo[1], stX );

	} else if(ConquistasInfo[ id ] [ sTrabalhador ] == 0){
		format( stX, sizeof( stX ), "~w~Va ate a Prefeitura e escolha alguma profissao, com elas~n~~w~Voce ira trabalhar e ganhar seu salario.");
		//TextDrawShowForPlayer(id, Objetivo[0]);
		TextDrawShowForPlayer(id, Objetivo[1]);
		SetTimerEx("HideTextObjetivo", TSegundos(7), false, "i", id);
		TextDrawSetString( Objetivo[1], stX );

	} else if(ConquistasInfo[ id ] [ sNovato ] == 1 || ConquistasInfo[ id ] [ sMotorista ] ==  1 || ConquistasInfo[ id ] [ sTrabalhador ] == 1){
		format( stX, sizeof( stX ), "~w~~y~Parabens!~w~Voce completou todos os estagios de um iniciante~n~~w~Em caso de duvidas, use /ajuda > admin.");
		//TextDrawShowForPlayer(id, Objetivo[0]);
		TextDrawShowForPlayer(id, Objetivo[1]);
		SetTimerEx("HideTextObjetivo", TSegundos(7), false, "i", id);
		TextDrawSetString( Objetivo[1], stX );
	}
	return true;
}

//ShowAjudaEmprego()
ShowAjudaEmprego(playerid, empregoid)
{
    switch(empregoid)
    {
	    case MOnibus:
		{
            SCM(playerid, Amarelo, "|_____________ Motorista de Onibus _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Motorista de Ð¤nibus /ce (Chat-Emprego)");
            UnFreeze(playerid);
	    }
	    case Petroleiro:
		{
            SCM(playerid, Amarelo, "|_____________ Petroleiro _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Petroleiros /ce (Chat-Emprego), /detach (remove um trailer do seu caminhao).");
            UnFreeze(playerid);
	    }
	    case Lixeiro:
		{
            SCM(playerid, Amarelo, "|_____________ Lixeiro _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Lixeiro /ce (Chat-Emprego) ");
            SCM(playerid, Amarelo, "Lixeiro /pegarlixo ");
            SCM(playerid, Amarelo, "Lixeiro /descarregar");
            SCM(playerid, Amarelo, "Lixeiro /iniciarrota");
            UnFreeze(playerid);
	    }
	    case Carteiro:
		{
            SCM(playerid, Amarelo, "|_____________ Carteiro _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Carteiro /iniciarentregas /ce (Chat-Emprego) /entregar");
            UnFreeze(playerid);
	    }
	    case Mecanico:
		{
            SCM(playerid, Amarelo, "|_____________ Mecanico _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Mecanico /ce (Chat-Emprego) !");
			SCM(playerid, Amarelo, "Mecanico /consertar (O player deve ser passageiro e voce o motorista) !");
			SCM(playerid, Amarelo, "Mecanico /localizar  e /deslocalizar !");
			SCM(playerid, Amarelo, "Mecanico /guinchar !");
            UnFreeze(playerid);
	    }
	    case Taxista:
		{
            SCM(playerid, Amarelo, "|_____________ Taxista _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Taxista /ce (Chat-Emprego) /trabalhar /localizar /taximetro!");
            UnFreeze(playerid);
	    }
	    case Minerador:
		{
            SCM(playerid, Amarelo, "|_____________ Minerador _____________|");
			SCM(playerid, Amarelo, "Use: /gps para ir ate seu local de trabalho!");
			SCM(playerid, Amarelo, "Minerador /ce (Chat-Emprego)!");
			SCM(playerid, Amarelo, "Minerador /minerar!");
			SCM(playerid, Amarelo, "Minerador /colocarminerio!");
            UnFreeze(playerid);
	    }
	    case Advogado:
		{
            SCM(playerid, Amarelo, "|_____________ Advogado _____________|");
			SCM(playerid, Amarelo, "Voce trabalha no segundo andar do predio da prefeitura!");
			SCM(playerid, Amarelo, "Advogado /ce (Chat-Emprego)!");
			SCM(playerid, Amarelo, "Advogado /enviarcontrato!");
            UnFreeze(playerid);
	    }
	    case Paramedico:
		{
            SCM(playerid, Amarelo, "|_____________ Paramedico _____________|");
			SCM(playerid, Amarelo, "Voce trabalha dentro do hospital de los santos!");
			SCM(playerid, Amarelo, "Paramedico /ce (Chat-Emprego)!");
			SCM(playerid, Amarelo, "Paramedico /curar [id]!");
            UnFreeze(playerid);
	    }
	    case Lenhador:
		{
            SCM(playerid, Amarelo, "|_____________ Lenhador _____________|");
			SCM(playerid, Amarelo, "Voce trabalha na madeireira do servidor use /gps!");
			SCM(playerid, Amarelo, "/ce (Chat-Emprego)!");
			SCM(playerid, Amarelo, "Lenhador /cortar!");
			SCM(playerid, Amarelo, "Lenhador /iniciar = para trabalhar em conjunto!");
            UnFreeze(playerid);
	    }
	    case PizzaJob:
		{
            SCM(playerid, Amarelo, "|_____________ Entregador de Pizza _____________|");
			SCM(playerid, Amarelo, "Voce trabalha na Pizzaria do servidor use /gps!");
			SCM(playerid, Amarelo, "Pegue seu uniforme dentro da pizzaria e sua moto e começe as entregas!");
			SCM(playerid, Amarelo, "Comandos /ce (Chat-Emprego)!");
			SCM(playerid, Amarelo, "Comandos /pegarpizza (Pega uma Pizza no bau da moto)!");
			SCM(playerid, Amarelo, "Comandos /devpizza (Devolve uma Pizza no bau da moto)!");
			SCM(playerid, Amarelo, "Comandos /recarregarbau (Recarrega as pizzas para o bau)!");
            UnFreeze(playerid);
		}
	    default:
		{
            SCM(playerid, Amarelo, "|_____________ Desempregado _____________|");
			SCM(playerid, -1, "Va ate a prefeitura para adiquirir um emprego!");
		}
	}

    return 1;
}

GetSaudacao()
{
    new Hor, Min, Seg, string[15];
    gettime(Hor, Min, Seg);
    switch(Hor)
    {
        case 0..5: string = "Boa madrugada";
        case 6..11: string = "Bom dia";
        case 12..18: string = "Boa tarde";
        case 19..23: string = "Boa noite";
    }
    return string;
}

forward atualizarDados(playerid);
public atualizarDados(playerid)
{
	if(IsPlayerInAnyVehicle( playerid ))
    {
		new
			carid,
            stringd,
			Float:vida,
			string[50],
			speed
		;
		speed = GetPlayerSpeed( playerid );
		carid = GetPlayerVehicleID(playerid);

        GetVehicleHealth(carid, vida);

        if(vida < 250.0) stringd = 0;
        if(vida > 300.0 && vida < 400.0) stringd = 10;
        if(vida > 400.0 && vida < 500.0) stringd = 20;
        if(vida > 500.0 && vida < 600.0) stringd = 40;
        if(vida > 600.0 && vida < 700.0) stringd = 60;
        if(vida > 700.0 && vida < 800.0) stringd = 80;
        if(vida > 800.0 && vida <= 1000.0) stringd = 100;

        format(string, sizeof(string), "Veiculo: %s", GetVehicleName(carid)); // veiculo
		PlayerTextDrawSetString(playerid, PlayerTD[7][playerid], string );

	    format(string, sizeof(string), "%d", GetPlayerSpeed( playerid )); // velocidade
		PlayerTextDrawSetString(playerid, PlayerTD[5][playerid], string );

        format(string,sizeof(string),"%dL", combustivel[GetPlayerVehicleID(playerid)]);
        PlayerTextDrawSetString(playerid, PlayerTD[8][playerid], string);

//        PlayerTextDrawSetPreviewModel(playerid, PlayerTD[15][playerid], GetVehicleModel( GetPlayerVehicleID( playerid )));

        format(string,sizeof(string),"%d", stringd);
        PlayerTextDrawSetString(playerid, PlayerTD[9][playerid], string);

		if(CNHTest[ playerid ])
        {
            if(speed > 150)
            {
		        SetVehicleToRespawn(carid);
		        ClearChatbox(playerid, 5);
			    SCM(playerid, -1, "{1F5FD5}[ Auto Escola ] - Voce falhou na segunda etapa do exame por ultrapassar a velocidade permitida!");
				GameTextForPlayer(playerid, "~r~Falhou", 1000, 1);

				ExameQuestID[ playerid ] = 0;
				ExamePoints[ playerid ] = 0;
	            CNHTest[ playerid ] = 0;
				PlaySoundForPlayer(playerid, 1055);

	            SetCameraBehindPlayer(playerid);
	            SetPlayerPos(playerid, -2039.353271,-126.431694,-50.914062);
				SetPlayerVirtualWorld(playerid, 0);
				//SetPlayerInterior(playerid, 3);
                DesativarRacesAETB( playerid );
                DesativarRacesAETD( playerid );
				UnFreeze( playerid );
			}
		}
	}
	return 1;
}


Criar_Radar(playerid, id, velocidade)
{
    new DBResult:Result, Query[200];
    format(Query, sizeof(Query), "SELECT * FROM RADAR WHERE ID = %d", id);
    Result = db_query(Database, Query);

    if(db_num_rows(Result))
    {
        SendClientMessage(playerid, 0xFF0000FF, "Ocorreu um erro. Esse ID esta em uso.");

        } else {

        new Float:ppPos[4];
        GetPlayerPos(playerid, ppPos[0], ppPos[1], ppPos[2]);
        GetPlayerFacingAngle(playerid, ppPos[3]);

        radar[id][rX] = ppPos[0];
        radar[id][rY] = ppPos[1];
        radar[id][rZ] = ppPos[2]-1.5;
        radar[id][rA] = ppPos[3];
        radar[id][rVelocidade] = velocidade;

        SetPlayerPos(playerid, ppPos[0]+1, ppPos[1]+1, ppPos[2]+1);
        SendClientMessage(playerid, -1, "Radar criado com sucesso.");
        CriarRadar(id);

        format(Query, sizeof(Query), "INSERT INTO RADAR (ID, X, Y, Z, A, VELOCIDADE) VALUES (%d, %f, %f, %f, %f, %d)", id, radar[id][rX], radar[id][rY], radar[id][rZ], radar[id][rA], radar[id][rVelocidade]);
        db_query(Database, Query);

        TOTALRADAR ++;
    }
    db_free_result(Result);
    return 1;
}

CarregarRadares()
{
    new DBResult:Result, Query[60];
    for(new iraid = 0; iraid < MAX_RADAR; iraid++)
    {
        format(Query, sizeof(Query), "SELECT * FROM RADAR WHERE ID = %d", iraid);
        Result = db_query(Database, Query);

        if(db_num_rows(Result))
        {
            radar[iraid][rVelocidade] = db_get_field_assoc_int(Result, "VELOCIDADE");
            radar[iraid][rX] = db_get_field_assoc_float(Result, "X");
            radar[iraid][rY] = db_get_field_assoc_float(Result, "Y");
            radar[iraid][rZ] = db_get_field_assoc_float(Result, "Z");
            radar[iraid][rA] = db_get_field_assoc_float(Result, "A");
            TOTALRADAR ++;

            CriarRadar(iraid);
        }
        db_free_result(Result);
    }
    printf("[Play Style] - %d Radares carregados", TOTALRADAR);
    return 1;
}

CriarRadar(id)
{
    radar[id][rObjeto][0] = CreateDynamicObject(18880, radar[id][rX], radar[id][rY], radar[id][rZ], 0.0, 0.0, radar[id][rA]);
    radar[id][rObjeto][1] = CreateDynamicObject(18880, radar[id][rX], radar[id][rY], radar[id][rZ], 0.0, 0.0, radar[id][rA] + 180.0);
    //radar[id][rIcone] = CreateDynamicMapIcon(radar[id][rX], radar[id][rY], radar[id][rZ], 34, -1, -1, 0, -1, 100.0);

    new stringr[30];
    format(stringr, sizeof(stringr),"{FF0000}Radar ID: %d\n%d KM/H", id, radar[id][rVelocidade]);
    radar[id][rText] = CreateDynamic3DTextLabel(stringr, 0xFFFFFFAA, radar[id][rX], radar[id][rY], radar[id][rZ]+1, 40);
    return 1;
}

Ir_Radar(playerid, id)
{
    new DBResult:Result, Query[70];
    format(Query, sizeof(Query), "SELECT * FROM RADAR WHERE ID = %d", id);
    Result = db_query(Database, Query);

    if(db_num_rows(Result))
    {
        new string[60];
        format(string, sizeof(string), "Voce foi ao radar id %d.", id);
        SendClientMessage(playerid, -1, string);

        SetPlayerPos(playerid, radar[id][rX]+1, radar[id][rY]+1, radar[id][rZ]+1);

        } else {

        SendClientMessage(playerid, 0xFF0000FF, "Ocorreu um erro. Esse ID nao existe.");
    }
    db_free_result(Result);
    return 1;
}

Editar_Radar(playerid, id, velo)
{
    new DBResult:Result, Query[70];
    format(Query, sizeof(Query), "SELECT * FROM RADAR WHERE ID = %d", id);
    Result = db_query(Database, Query);

    if(db_num_rows(Result))
    {
        new string[60];
        format(string, sizeof(string), "Voce editou o radar id %d com sucesso!", id);
        SendClientMessage(playerid, -1, string);

        radar[id][rVelocidade] = velo;

       // DestroyDynamicMapIcon(radar[id][rIcone]);
        DestroyDynamic3DTextLabel(radar[id][rText]);
        DestroyDynamicObject(radar[id][rObjeto][0]);
        DestroyDynamicObject(radar[id][rObjeto][1]);

        CriarRadar(id);

        } else {

        SendClientMessage(playerid, 0xFF0000FF, "Ocorreu um erro. Esse ID nao existe.");
    }
    db_free_result(Result);
    return 1;
}

Deletar_Radar(playerid, id)
{
    new DBResult:Result, Query[70];
    format(Query, sizeof(Query), "SELECT * FROM RADAR WHERE ID = %d", id);
    Result = db_query(Database, Query);

    if(db_num_rows(Result))
    {
        format(Query, sizeof(Query), "DELETE FROM RADAR WHERE ID = %d", id);
        db_query(Database, Query);

        new string[60];
        format(string, sizeof(string), "Voce excluiu o radar id %d com sucesso!", id);
        SendClientMessage(playerid, -1, string);

        radar[id][rVelocidade] = -1;
        radar[id][rX] = -1;
        radar[id][rY] = -1;
        radar[id][rZ] = -1;
        radar[id][rA] = -1;

        //DestroyDynamicMapIcon(radar[id][rIcone]);
        DestroyDynamic3DTextLabel(radar[id][rText]);
        DestroyDynamicObject(radar[id][rObjeto][0]);
        DestroyDynamicObject(radar[id][rObjeto][1]);

        TOTALRADAR --;

        } else {

        SendClientMessage(playerid, 0xFF0000FF, "Ocorreu um erro. Esse ID nao existe.");
    }
    db_free_result(Result);
    return 1;
}

VerificarRadar(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(modelo == 417 || modelo == 425 || modelo == 460 || modelo == 464 || modelo == 465 || modelo == 467 || modelo == 476 || modelo == 487 || modelo == 488 || modelo == 497 || modelo == 501 || modelo == 511 || modelo == 512 || modelo == 513 || modelo == 519 || modelo == 520 || modelo == 548 || modelo == 553 || modelo == 563 || modelo == 577 || modelo == 592 || modelo == 593) return 1;

    for(new ra = 0; ra < MAX_RADAR; ra++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 10.0, radar[ra][rX], radar[ra][rY], radar[ra][rZ]))
        {
            MsgVelocidade(playerid, GetPlayerSpeed(playerid), radar[ra][rVelocidade]);
            break;
        }
    }

    return 1;
}

MsgVelocidade(playerid, Velocidade, Limite)
{
    if(PassouRadar == 1) return 1;
    new Vlimite[20], Vdetectada[20], VelocidadeAtual = Velocidade;

    format(Vlimite, sizeof(Vlimite), "Limite %d km", Limite);
    TextDrawSetString(Radar[playerid][1], Vlimite);

    format(Vdetectada, sizeof(Vdetectada), "Velocidade: %d km", VelocidadeAtual);
    TextDrawSetString(Radar[playerid][2], Vdetectada);

    if(VelocidadeAtual > Limite)
    {
        //for(new ira = 0; ira < 6; ira++) TextDrawShowForPlayer(playerid, Radar[playerid][ira]);
        TextDrawShowForPlayer(playerid, Radar[playerid][6]);
        SetTimerEx("TirarFlash", 70, false, "i", playerid);

        PlayerInfo[playerid][pMultas] += VelocidadeAtual*VALOR_MULTA;

        new string[65];
        SendClientMessage(playerid, 0xFF0000FF, "Multa por excesso de velocidade recebida. /multas");
        format(string, sizeof(string), "Voce foi multado em %d reais. Total de %d.", VelocidadeAtual*VALOR_MULTA, PlayerInfo[playerid][pMultas]);
        SendClientMessage(playerid, 0xFF0000FF, string);

        } else {

        for(new ira = 0; ira < 4; ira++)
        {
            TextDrawShowForPlayer(playerid, Radar[playerid][ira]);
        }
    }

    SetTimerEx("HideMsgVelocidade", 3000, false, "i", playerid);
    PassouRadar = 1;
    return 1;
}

forward TirarFlash(playerid);
public TirarFlash(playerid)
{
    TextDrawHideForPlayer(playerid, Radar[playerid][6]);
    return 1;
}

forward HideMsgVelocidade(playerid);
public HideMsgVelocidade(playerid)
{
    PassouRadar = 0;
    for(new ira = 0; ira < 7; ira++) TextDrawHideForPlayer(playerid, Radar[playerid][ira]);
    return 1;
}

//AlterarNivelProcurado()
AlterarNivelProcurado(playerid, valor, operacao[]) {
	if(!strcmp(operacao, "+", true)){
		PlayerInfo[playerid][pWanted] += valor;
	}
	else if(!strcmp(operacao, "-", true)){
		PlayerInfo[playerid][pWanted] -= valor;
	}
	else if(!strcmp(operacao, "n", true)){
		PlayerInfo[playerid][pWanted] = valor;
	}

	if(PlayerInfo[playerid][pWanted]){
		ProcuradoStatus[playerid] = true;
	}
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWanted]);
	return true;
}

Public:AtualizarTempoCadeia(id)
{
	static str[ 129 ];
	if(PlayerInfo[ id ][ PresoTempo ] <= 0)
		return SistemaPrisao(id, "soltar");

    if(PlayerInfo[ id ][ CfgRelogioUP ] == true){
    	PlayerTextDrawSetString(id, UPText[ id ][ 0 ], "pausado");
	}
    format(str, sizeof(str), "%s", Convert(PlayerInfo[ id ][ PresoTempo ]));
    TextDrawSetString(TimerPHIndividual[ id ], str );

    TextDrawShowForPlayer(id, TimerPHIndividual[ id ]);

	return PlayerInfo[ id ][ PresoTempo ] --;
}

forward LucroGZs(id);
public LucroGZs(id)
{

	static
		str[ 200 ],
		LucroMinMoney,
    	LucroMoneyGZ,
		LucroMatGZ,
/*		LucroMac,
		LucroCoc,
		LucroCrack,*/
		bool:c_@
	;

    LucroMinMoney = 0;
	LucroMoneyGZ = 0;
	LucroMatGZ = 0;
/*	LucroMac = 0;
	LucroCoc = 0;
	LucroCrack = 0;
*/
	c_@ = false;

    if(PlayerInfo[id][pOrg] == 0) return 0;

	SCM(id, orgsColor[PlayerInfo[id][pOrg]], "------------- Area sob dominio de sua organizaçao -------------");

	for(new zone = 0; zone < MAX_ZONES; zone++)
    {
    	if(!gangZonesOwners[zone]) continue;

		if(PlayerInfo[id][pOrg] == gangZonesOwners[zone])
        {

			LucroMinMoney = (gangZoneLucro[zone]/3);

		    LucroMoneyGZ = RandomEx(LucroMinMoney, gangZoneLucro[zone]);
		    LucroMatGZ = (5+random(gangZoneMaterial[zone]));

	       	ActionGranaOrg(gangZonesOwners[zone], "+", LucroMoneyGZ);
			ActionMaterialOrg(gangZonesOwners[zone], "+", LucroMatGZ);

		    format(str, sizeof( str ), "Area: %s, Lucro em R$: %s, Materiais adiquiridos: %i!", gangZonesName[zone], FormatNumber(LucroMoneyGZ), LucroMatGZ);
			SCM(id, -1, str);

			c_@ = true;
		}
    }
	if(!c_@)
    {
        SCM(id, 0xFF0000AA, "Sua organizaçao nao recebeu nenhum lucro por dominio, por nao possui nenhuma area sob dominio!");
	}
	else SCM(id, orgsColor[PlayerInfo[id][pOrg]], "---------------------------------------------------------------");
	return true;
}

forward OnDominarZone(playerid, zone);
public OnDominarZone(playerid, zone) {
	gangZonesStatus[zone] = 0;
	GangZoneStopFlashForAll(zone);
	if(IsGangInZone(PlayerInfo[playerid][pOrg], zone)) {
		SendClientMessageToAll(Amarelo, "| __________________ [RELATO DE uLTIMA HORA] __________________ |");
		if(!isPlayerCop(playerid)) format(strx, sizeof(strx), "{%s}%s{ffffff} e {%s}%s{ffffff} dominaram {%s}%s", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[playerid][pOrg]], gangZonesName[zone]);
		else format(strx, sizeof(strx), "{%s}%s{ffffff} e {%s}%s{ffffff} pacificaram {%s}%s{ffffff}. Disparos foram ouvidos", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[playerid][pOrg]], gangZonesName[zone]);
		SendClientMessageToAll(C_ERROR, strx );
		GangZoneShowForAll(zone, orgsColorArea[PlayerInfo[playerid][pOrg]]);
		gangZonesOwners[zone] = PlayerInfo[playerid][pOrg];
		GZDominioTempo[zone] = 35;
		SaveGangZone(zone);
		return 1;
	}
	SendClientMessageToAll(Amarelo, "| __________________[RELATO DE uLTIMA HORA] __________________ |");
	format(strx, sizeof(strx), "{%s}%s{ffffff} e {%s}%s{ffffff} nao tiveram sucesso no dominio {%s}%s", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], OrgColorHex[PlayerInfo[playerid][pOrg]], gangZonesName[zone]);
	SendClientMessageToAll(C_ERROR, strx );
	return 1;
}


forward OnAbastecer(playerid, carid, valor);
public OnAbastecer(playerid, carid, valor)
{
	combustivel[carid] = valor;
	abastecendo[playerid] = 0;
	PostoID[ playerid ] = 0;
	UnFreeze( playerid );
	return SendClientMessage(playerid, C_OFICIAL, "[Posto] Seu carro foi abastecido com sucesso");
}

forward OnAbastecerGalao(playerid, quantidade);
public OnAbastecerGalao(playerid, quantidade)
{
	static str[129];

	abastecendo[playerid] = 0;
    PostoID[ playerid ] = 0;
	UnFreeze( playerid );

	format(str, 100, "{FFFF00}[{FFFFFF}Posto{FFFF00}] {FFFFFF}- Galao completo, adicionados %i litros", quantidade);
	return SCM(playerid, -1, str);
}

/* =============================================================================
						Sistema De Prisao
============================================================================= */

//SistemaPrisao()
SistemaPrisao(presoid, argumento[], policial = 0, modo = 0, temp = 0)
{
    #define VALOR_POR_NIVEL 300 //valor pago para o policial por cada nivel de procurado
	#define VALOR_PRESO_NIVEL 90 //valor perdido pelo preso por cada nivel de procurado
	#define BONUS_PRENDER_NORMAL 1000
	#define BONUS_PRENDER_CAPTURADO 500

	static Rand;

	if(!strcmp(argumento, "ativarpena", true))
	{
	    KillTimer(TimerPID[ presoid ]);
	    TimerPID[ presoid ] = SetTimerEx( "AtualizarTempoCadeia", TSegundos(1), true, "d", presoid );
        PresoStatus[ presoid ] = 1;
  	}
	else if(!strcmp(argumento, "cumprirpena", true))
	{
	    SetPlayerVirtualWorld(presoid, 0);
		AlterarNivelProcurado(presoid, 0, "n");

		switch(PlayerInfo[ presoid ][ PresoOrg ]){
		    //Solitaria
		    case 0: SetPlayerPosEx( presoid, coordCadeias[0][ccnX], coordCadeias[Rand][ccnY], coordCadeias[0][ccnZ], 0.0, coordCadeias[0][ccnInt] );
			//Policia Militar
			case PM:{
			    Rand = RandomEx(1, 3);
				SetPlayerPosEx( presoid, coordCadeias[Rand][ccnX], coordCadeias[Rand][ccnY], coordCadeias[Rand][ccnZ], 0.0, coordCadeias[Rand][ccnInt] );
			}
			//Bope
			case BOPE:{
				Rand = RandomEx(4, 12);
				SetPlayerPosEx( presoid, coordCadeias[Rand][ccnX], coordCadeias[Rand][ccnY], coordCadeias[Rand][ccnZ], 0.0, coordCadeias[Rand][ccnInt] );
			}
		}

		SCM(presoid, -1, "{C4E0FC}(>) - Voce esta preso, voce pode solicitar um advogado, /solicitar advogado");
		GameTextForPlayer(presoid, "~r~Preso.", 5000, 0);

		TextDrawShowForPlayer(presoid, TimerPH[0]);
		TextDrawShowForPlayer(presoid, TimerPH[1]);
		TextDrawShowForPlayer(presoid, TimerPH[2]);
		TextDrawShowForPlayer(presoid, TimerPHIndividual[ presoid ]);

		if(IsPlayerCuffed(presoid)) SetPlayerCuffed(presoid, false);

	}
	else if(!strcmp(argumento, "adicionarPena", true))
	{
		PresoStatus[ presoid ] = 1;
		PlayerInfo[ presoid ][ PresoOrg ] = PlayerInfo[ policial ][pOrg];

		if(modo == 1) PlayerInfo[ presoid ][ PresoTempo ] = (PlayerInfo[presoid][pWanted]*300);
		else if(modo == 3) PlayerInfo[ presoid ][ PresoTempo ] = (temp*60);
		else PlayerInfo[ presoid ][ PresoTempo ] = ((PlayerInfo[presoid][pWanted]*3)*300);
	}
	else if(!strcmp(argumento, "darRecompensa", true))
	{

		new
			recompensaPolicial = (PlayerInfo[ presoid ][ pWanted ] * VALOR_POR_NIVEL),
			recompensa, // recompensa da org
			perda = (PlayerInfo[ presoid ][ pWanted ] * VALOR_PRESO_NIVEL)
		;
		static str[ 140 ];

		SendClientMessageToAll(Amarelo, "|__________________ [BOLETIM EXCLUSIVO] __________________|");

		if(!modo){
			format(str, sizeof(str), "{FFFFFF}%s policial {%s}%s {FFFFFF}trocou tiros com {%s}%s {FFFFFF}. O procurado morreu!", PlayerInfo[ policial ][ pSex ] == 1 ? ("O"):("A"), OrgColorHex[PlayerInfo[ policial ][pOrg]], GetName( policial ), OrgColorHex[PlayerInfo[ presoid ][ pOrg ]], GetName( presoid ));
			recompensa += BONUS_PRENDER_NORMAL*PlayerInfo[presoid][pWanted];
		}
		else {
			format(str, sizeof(str), "{FFFFFF}%s policial {%s}%s {FFFFFF} acaba de conseguir capturar o procurado {%s}%s{FFFFFF}!", PlayerInfo[ policial ][ pSex ] == 1 ? ("O"):("A"), OrgColorHex[PlayerInfo[ policial ][ pOrg ]], GetNameEx( policial ), OrgColorHex[PlayerInfo[ presoid ][ pOrg ]], GetNameEx( presoid ));
			recompensa += BONUS_PRENDER_CAPTURADO*PlayerInfo[presoid][pWanted];
		}
        SendClientMessageToAll(-1, str );

		ForPlayers(a){
			if(PlayerInfo[policial][pOrg] == PlayerInfo[a][pOrg] ) {
				format( str, sizeof(str), "{FFFFFF}| Cofre Corporaçao | - {%s}%s {FFFFFF}recebeu uma recompensa de {%s}%s {FFFFFF}pela captura de %s!", OrgColorHex[PlayerInfo[policial][pOrg]], FormatNumber(recompensa), OrgColorHex[PlayerInfo[presoid][pOrg]], GetName(presoid) );
				SCM( a, -1, str );
			}
		}
        ActionGranaOrg(GetPlayerOrg(policial), "+", recompensa);

		if(PlayerInfo[ presoid ][pDinheiro] < (perda*PlayerInfo[presoid][pWanted]))
			ActionPlayerGrana(presoid, "=", 0);
		else
			ActionPlayerGrana(presoid, "-", (perda*PlayerInfo[presoid][pWanted]));


		format(str, sizeof(str), "{FFFFFF}Voce recebeu uma recompensa de {33AA33}$%s {FFFFFF}pela captura de {%s}%s", FormatNumber(recompensaPolicial), OrgColorHex[PlayerInfo[ presoid ][ pOrg ]], GetName(presoid));
		SendClientMessage( policial , -1, str );

		ActionPlayerGrana(policial, "+", recompensaPolicial);

		format(str, sizeof(str), "Voce perdeu $%d por ter sido preso", perda);
		SendClientMessage(presoid, C_ERROR, str );
	}
	else if(!strcmp(argumento, "soltar", true)) {

	    PresoStatus[ presoid ] = 0;
		PlayerInfo[ presoid ][ PresoOrg ] = 0;
		PlayerInfo[ presoid ][ PresoTempo ] = 0;

		KillTimer(TimerPID[ presoid ]);

		OnSalvarDados( presoid );
		SpawnPlayer( presoid );

		SetPlayerWorldBounds( presoid , 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		GameTextForPlayer( presoid , "~w~Sentenca completa~n~~g~Voce foi solto.", 3000, 3);

        TextDrawHideForPlayer(presoid, TimerPH[0]);
		TextDrawHideForPlayer(presoid, TimerPH[1]);
		TextDrawHideForPlayer(presoid, TimerPH[2]);
		TextDrawHideForPlayer(presoid, TimerPHIndividual[ presoid ]);
	}
	return true;
}

/*
==========================================================================================
							Sistema de Hospital
========================================================================================== */

// playerid = player a ser hospitalizado
// acao = o que o sistema deve fazer, liberar o player ou joga-lo no hospital
// modo = dizer se ele morreu ou nao dependendo da acao a ser verificada

SistemaHospital(playerid, acao[])
{
	static str[ 129 ];
    /*if(!strcmp(acao, "Setar", true))
	{
		//fadeIn(playerid, 1000);
		PlayerInfo[ playerid ][ pHospitalizado ] = 1;
		PlayerInfo[ playerid ][ pHospTemp ] = RandomEx(40, 75);
	}*/


    if(!strcmp(acao, "Ativar", true))
	{
        SCM(playerid, -1, "Voce foi encaminhado a um hospital. Aguarde o tempo de recuperacao.");
        SCM(playerid, -1, "Ou solicite um atendimento medico use: {91F5D8}/solicitar medico");

        TextDrawShowForPlayer(playerid, TimerPH[0]);
		TextDrawShowForPlayer(playerid, TimerPH[1]);
		TextDrawShowForPlayer(playerid, TimerPH[2]);
		TextDrawShowForPlayer(playerid, TimerPHIndividual[ playerid ]);

		SetTimerEx( "AtualizarTempoHospital", 900, false, "d", playerid );
        SetTimerEx( "tirarfade", 900, false, "d", playerid );

        if(PlayerInfo[ playerid ][ pFome ] <= 10) PlayerInfo[ playerid ][ pFome ] = 30;
        if(PlayerInfo[ playerid ][ pSede ] <= 10) PlayerInfo[ playerid ][ pSede ] = 30;
	}

    if(!strcmp(acao, "Liberar", true))
	{
        if(PlayerInfo[ playerid ][ pPlanoSaude ])
        {
		    static valueDesconto;

		    valueDesconto = (CUSTO_SERVICO_HOSPITAL/4);

		    format(str, 129, "Voce pagou $%s pelos serviços medicos usando seu plano de saude.", FormatNumber((CUSTO_SERVICO_HOSPITAL-valueDesconto)));
			SCM(playerid, 0xF0BE5833, str);
			ActionPlayerGrana(playerid, "-", (CUSTO_SERVICO_HOSPITAL-valueDesconto));
		}
		else {
            format(str, 129, "Voce pagou $%s pelos serviços medicos.", FormatNumber(CUSTO_SERVICO_HOSPITAL));
			SCM(playerid, 0xF0BE5833, str);
			ActionPlayerGrana(playerid, "-", CUSTO_SERVICO_HOSPITAL);
		}
		format(str, 129, "{E1AEE1}Voce esta melhor agora, tome mais cuidado com sua saude!");
		SCM(playerid, -1, str);

		PlaySoundForPlayer(playerid, 1068);

        SetPlayerPosEx(playerid, 1178.0551, -1324.0884, 14.1012, 267.9922, 0, 0, 2);

	    TextDrawHideForPlayer(playerid, TimerPH[0]);
		TextDrawHideForPlayer(playerid, TimerPH[1]);
		TextDrawHideForPlayer(playerid, TimerPH[2]);
		TextDrawHideForPlayer(playerid, TimerPHIndividual[ playerid ]);

	    PlayerInfo[ playerid ][ pHospitalizado ] = 0;
	    PlayerInfo[ playerid ][ pHospTemp ] = 0;

        PlayerInfo[ playerid ][ Morreu ] = false;

	    StopLoopingAnim(playerid);
	    OnSalvarDados( playerid );
	}
	return true;
}

Public:tirarfade(id) fadeOut(id, 6000);

Public:AtualizarTempoHospital(id)
{
	static str[ 129 ];

	if(PlayerInfo[ id ][ pHospTemp ] > 0)
    {
        ApplyAnimationEx(id, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

		format(str, sizeof(str), "%s", Convert(PlayerInfo[ id ][ pHospTemp ]));
	    TextDrawSetString(TimerPHIndividual[ id ], str );
	    TextDrawShowForPlayer(id, TimerPHIndividual[ id ]);

		if(PlayerInfo[ id ][ pPlanoSaude ])
        {
			if(PlayerInfo[ id ][ pHospTemp ] >= 100) SetPlayerVida(id, 5.0);
			else if(PlayerInfo[ id ][ pHospTemp ] >= 120 && PlayerInfo[ id ][ pHospTemp ] < 100) SetPlayerVida(id, 10.0);
			else if(PlayerInfo[ id ][ pHospTemp ] >= 60 && PlayerInfo[ id ][ pHospTemp ] < 99) SetPlayerVida(id, 20.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 45 && PlayerInfo[ id ][ pHospTemp ] < 59) SetPlayerVida(id, 25.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 30 && PlayerInfo[ id ][ pHospTemp ] < 42) SetPlayerVida(id, 35.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 20 && PlayerInfo[ id ][ pHospTemp ] < 29) SetPlayerVida(id, 45.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 10 && PlayerInfo[ id ][ pHospTemp ] < 19) SetPlayerVida(id, 55.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 1 && PlayerInfo[ id ][ pHospTemp ] < 9) SetPlayerVida(id, 65.0);
		}
		else {
            if(PlayerInfo[ id ][ pHospTemp ] >= 100) SetPlayerVida(id, 5.0);
			else if(PlayerInfo[ id ][ pHospTemp ] >= 120 && PlayerInfo[ id ][ pHospTemp ] < 100) SetPlayerVida(id, 10.0);
			else if(PlayerInfo[ id ][ pHospTemp ] >= 60 && PlayerInfo[ id ][ pHospTemp ] < 99) SetPlayerVida(id, 15.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 45 && PlayerInfo[ id ][ pHospTemp ] < 59) SetPlayerVida(id, 20.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 30 && PlayerInfo[ id ][ pHospTemp ] < 42) SetPlayerVida(id, 25.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 20 && PlayerInfo[ id ][ pHospTemp ] < 29) SetPlayerVida(id, 35.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 10 && PlayerInfo[ id ][ pHospTemp ] < 19) SetPlayerVida(id, 45.0);
		    else if(PlayerInfo[ id ][ pHospTemp ] >= 1 && PlayerInfo[ id ][ pHospTemp ] < 9) SetPlayerVida(id, 50.0);
		}
    	PlayerInfo[ id ][ pHospTemp ]--;
    	SetTimerEx( "AtualizarTempoHospital", 1000, false, "d", id );
    }
    else SistemaHospital(id, "Liberar");
	return true;
}

Public:AnimeLoad(playerid) return ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
    /*/fadeOut(playerid, 2000);
    //ResetPlayerWeapons(playerid);
	return true;
}*/

stock ConvertToGameText(in[])
{
    new string[128];
    for(new i = 0; in[i]; ++i)
    {
        string[i] = in[i];
        switch(string[i])
        {
            case 0xC0 .. 0xC3: string[i] -= 0x40;
            case 0xC7 .. 0xC9: string[i] -= 0x42;
            case 0xD2 .. 0xD5: string[i] -= 0x44;
            case 0xD9 .. 0xDC: string[i] -= 0x47;
            case 0xE0 .. 0xE3: string[i] -= 0x49;
            case 0xE7 .. 0xEF: string[i] -= 0x4B;
            case 0xF2 .. 0xF5: string[i] -= 0x4D;
            case 0xF9 .. 0xFC: string[i] -= 0x50;
            case 0xC4, 0xE4: string[i] = 0x83;
            case 0xC6, 0xE6: string[i] = 0x84;
            case 0xD6, 0xF6: string[i] = 0x91;
            case 0xD1, 0xF1: string[i] = 0xEC;
            case 0xDF: string[i] = 0x96;
            case 0xBF: string[i] = 0xAF;
        }
    }
    return string;
}
// ===

stock Convert(tempo, Modo = 0)
{
    new	CHora,CMinuto,CSegundo;
    static str[25];

    CHora = 0;
	CMinuto = 0;
	CSegundo = 0;

	while(--tempo > -1)
    {
        ++CSegundo;
        if(CSegundo == 60)
        {
            CSegundo = !CSegundo;
            ++CMinuto;
        }
        if(CMinuto == 60)
        {
            CMinuto = !CMinuto;
            ++CHora;
        }
    }
    if(Modo){
		if(CHora) format(str, sizeof(str), "%02d:%02d:%02d Horas", CHora, CMinuto, CSegundo);
		else if(CMinuto) format(str, sizeof(str), "%02d:%02d Minutos", CMinuto, CSegundo);
		else if(CSegundo) format(str, sizeof(str), "%02d Segundos", CSegundo);
	}
	else format(str, sizeof(str), "%02d:%02d:%02d", CHora, CMinuto, CSegundo);

	return str;
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

stock GetPlayerID(const Name[]) {
	for(new i; i<GetMaxPlayers(); i++) {
		if(IsPlayerConnected(i)){
			if( PlayerInfo[i][pLogger] ) {
				if(strcmp(Name, GetName(i), true)==0) return i;
			}
		}
	}
	return -1;
}

stock GetStateForName(const Name[]) {
	for(new i; i<GetMaxPlayers(); i++) {
	    if(IsPlayerConnected(i)){
			if( PlayerInfo[i][pLogger] ) {
				if(strcmp(Name, GetName(i), true)==0) return 1;
			}
		}
	}
	return 0;
}

stock GetFormalSex(playerid){
	static gtext[20];
	if(PlayerInfo[playerid][pSex] == 1) gtext = "Senhor";
	else if(PlayerInfo[playerid][pSex] == 2) gtext = "Senhora";
	return gtext;
}

stock GetPlayerSex(playerid){
	static gtext[20];
	if(PlayerInfo[playerid][pSex] == 1) gtext = "Masculino";
	else if(PlayerInfo[playerid][pSex] == 2) gtext = "Feminino";
	return gtext;
}

//CreateGangZone()
CreateGangZone(Float:minx, Float:miny, Float:maxx, Float:maxy, const name[32], Lucromoney, Lucromaterial) {

	static ste_[50];
	format(ste_, sizeof ste_, "Gang_Zone%i", gangZoneCount);
	if(!DOF2_FileExists("GangZoneDominio.ini")) {
		DOF2_CreateFile("GangZoneDominio.ini");
		DOF2_SetInt("GangZoneDominio.ini", ste_, 0);
	}
	gangZonesOwners[gangZoneCount] = DOF2_GetInt("GangZoneDominio.ini", ste_);

	gangZones[gangZoneCount] = GangZoneCreate(minx, miny, maxx, maxy);
	gangZonesCoords[gangZoneCount][gmix] = minx;
	gangZonesCoords[gangZoneCount][gmiy] = miny;
	gangZonesCoords[gangZoneCount][gmax] = maxx;
	gangZonesCoords[gangZoneCount][gmay] = maxy;

	gangZoneLucro[gangZoneCount] = Lucromoney;
	gangZoneMaterial[gangZoneCount] = Lucromaterial;

	gangZonesName[gangZoneCount] = name;
    GZDominioTempo[gangZoneCount] = 0;

	gangZoneCount++;
	return true;
}

SaveGangZone(zoneid){
    static ste_[50];
	format(ste_, sizeof ste_, "Gang_Zone%i", zoneid);
	if(!DOF2_FileExists("GangZoneDominio.ini")) {
		DOF2_CreateFile("GangZoneDominio.ini");
	}
	DOF2_SetInt("GangZoneDominio.ini", ste_, gangZonesOwners[zoneid]);
	return true;
}

//IsPlayerInGangZone()
IsPlayerInGangZone(playerid, zoneid) {
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if( (x >= gangZonesCoords[zoneid][gmix] && x <= gangZonesCoords[zoneid][gmax]) && (y >= gangZonesCoords[zoneid][gmiy] && y <= gangZonesCoords[zoneid][gmay]) )
	return true;
	return false;
}


//IsGangInZone
IsGangInZone(orgid, zoneid) {
	for( new a = 0; a < GetMaxPlayers(); a++ ) {
		if( PlayerInfo[a][pOrg] == orgid && IsPlayerInGangZone(a, zoneid) ) return true;
	}
	return false;
}

//GangZonesPermission()
GangZonesPermission(orgid, zoneid) {
	switch(zoneid) {
	    //Pista de Skate 0
		//Shopping Center 1
		//Praia santa maria 2
		//Temple 3
		//Favela LS 4



		//Crime x Crime
		case 0, 2, 3: {
			if( orgid == CV || orgid == PCC) return true;
//			if( orgid == PM || orgid == BOPE) return true;
		}
        // Criminosas x Coops
		case 1,4: {
//			if(orgid == PM || orgid == GS || orgid == CV || orgid == PCC) return true;
			if( orgid == PM || orgid == BOPE || orgid == CV || orgid == PCC) return true;
		}

		default: {
			return false;
		}
	}
	return false;
}

/*==================== Carros Modelos ============================*/

stock IsBusCar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)){
		new carid = GetVehicleModel(GetPlayerVehicleID(playerid));

		if((carid >= 295) && (carid <= 301))
		{
			return true;
		}
	}
	return 0;
}

stock IsATrukCar(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)){
        new
			model = GetVehicleModel(GetPlayerVehicleID(playerid))
		;
		switch(model){
			case 403, 514, 515: return 1;
		}
	}
	return 0;
}

stock IsTrashVehicle(playerid) {
    if(IsPlayerInAnyVehicle(playerid)){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408) return 1;
	}
	return 0;
}

stock VehCarteiro(playerid) {

	if(!IsPlayerInAnyVehicle(playerid)) return 0;

    Loop(v, sizeof(VehCarteiros)){
		if(GetPlayerVehicleID(playerid) == VehCarteiros[v]){
            return 1;
		}
	}
	/*
	if(IsPlayerInAnyVehicle(playerid)){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 509) return 1;
	}*/
	return 0;
}

stock IsTrukLumb(playerid){
    if(IsPlayerInAnyVehicle(playerid)){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578) return true;
	}
	return false;
}

stock IsTaxiCar(playerid) {
    if(IsPlayerInAnyVehicle(playerid)){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 438 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 586 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 420) return 1;
	}
	return 0;
}

stock IsBusVehicle(playerid) {
    if(IsPlayerInAnyVehicle(playerid)){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 431) return 1;
	}
	return 0;
}

stock IsPlaneVehicle(playerid) {
	if(IsPlayerInAnyVehicle(playerid)){
		new oo = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(oo){
			case 487, 520, 417, 425, 447, 460, 464, 465, 469, 476,
			488, 497, 501, 511, 512, 513, 519, 548, 553, 563, 577, 592, 593: return 1;
		}
	}
	return 0;
}

stock IsAMoto(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)){
		new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(model){
			case 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
		}
	}
	return false;
}

stock IsAMotoEx(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
	switch(model){
		case 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return false;
}

stock IsABike(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)){
		new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(model){
			case 481, 509, 510: return 1;
		}
	}
	return false;
}

stock IsVehSchool(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 0;

    new idx = GetPlayerVehicleID(playerid);

    Loop(v, sizeof(AutoVeiculosA))
    {
        if( idx == AutoVeiculosA[v] || idx == AutoVeiculosB[v] || idx == AutoVeiculosD[v] || idx == AutoVeiculosE[v])
        {
            return 1;
        }
    }
    return false;
}

Public:bool:TrailersCaminhoes(veiculo){
	Loop(v, sizeof( CargasPetroleiros ))
    if(CargasPetroleiros[v] == veiculo) return true;
	return false;
}

new angTimer[MAX_PLAYERS];
stock waitAng(playerid) {
	if(!angTimer[playerid]) {
		angTimer[playerid] = SetTimerEx("OnAngTimer", 60000, false, "d", playerid);
		return 1;
	} else {
		return 0;
	}
}

forward OnAngTimer(playerid);
public OnAngTimer(playerid) {
	angTimer[playerid] = 0;
}

//CriarCaixa()
stock CriarCaixa(Float:x, Float:y, Float:z, Float:rz) {
    caixaEletronico[caixaEletronicoContador][cx] = x;
	caixaEletronico[caixaEletronicoContador][cy] = y;
	caixaEletronico[caixaEletronicoContador][cz] = z;

	CreateDynamicObject(2942, x, y, z, 0.00000, 0.00000, rz);

    Create3DTextLabel("{2B941F}Caixa Eletronico\n{FFFFFF}Pressione {17D21C}'{FFFFFF}Y{17D21C}'", 0x008080FF, x, y, z, 20.0, 0, 0);
	caixaEletronicoContador++;
	return true;
}

//CriarLocalRoubo()
new rouboContador = 0;

CriarLocalRoubo(nome[32], portaoModel, valormin, valormax, portaoid, cofreid) {
	roubosNomes[rouboContador] = nome;
	roubosPortaoModel[rouboContador] = portaoModel;
	roubosValorMin[rouboContador] = valormin;
	roubosValorMax[rouboContador] = valormax;
	roubosPortoes[rouboContador] = portaoid;
	roubosCofres[rouboContador] = cofreid;
	rouboContador++;
}
//OnRouboPrepararContagem

new rouboContagemTimer[MAX_PLAYERS],
	rouboBomba[MAX_PLAYERS],
	rouboContagem[MAX_PLAYERS] = 5
;

forward OnRouboPrepararContagem( playerid );
public OnRouboPrepararContagem( playerid ) {

	new Float:x,
		Float:y,
		Float:z;

	rouboContagem[playerid] = 5;

	GetPlayerPos( playerid, x, y, z);

	rouboBomba[playerid] = CreateObject(1654, x, y, z, 0.0, 0.0, 0.0, 0.0);


	ClearAnimations( playerid );
	StopLoopingAnim( playerid );

	format(strx, sizeof(strx), "{%s}%s{ffffff}: ASSIONEI! 5 SEGUNDOS PARA A EXPLOSaO! CAIAM FORA!!!", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid));
	SendMessageToProx(30.0, playerid, strx, Branco);
	rouboContagemTimer[playerid] = SetTimerEx("OnRouboContagem", 1000, true, "d", playerid);
}

Public:RemovePlayerRecentRob(playerid) return EmRouboRecente[ playerid ] = false;

//OnRouboContagem()
forward OnRouboContagem(playerid);
public OnRouboContagem(playerid) {

    format(strx, sizeof(strx), "~r~%d", rouboContagem[playerid]);
    if(!rouboContagem[playerid]) {
		KillTimer(rouboContagemTimer[playerid]);
		return 1;
	}
	rouboContagem[playerid]--;

	ForPlayers( i ){

		if(GetDistancePlayers(playerid, i) < 30.0){
			GameTextForPlayer(i, strx, 1000, 5);
		}
	}
	return 1;
}

//OnRouboExplodir()
enum roubosPortoesCopiaNomes {
	robmodel,
	Float:robx,
	Float:roby,
	Float:robz,
	Float:robx2,
	Float:roby2,
	Float:robz2
}

new roubosPortoesCopia[MAX_LOCAIS_ROUBOS][roubosPortoesCopiaNomes];
forward OnRouboExplodir(playerid, rouboid);
public OnRouboExplodir(playerid, rouboid) {
	new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
	GetObjectPos(roubosPortoes[rouboid], x, y, z);
	GetObjectRot(roubosPortoes[rouboid], x2, y2, z2);
	CreateExplosion(x, y, z, 6, 5.0);

	// Clonando objetos
	roubosPortoesCopia[rouboid][robx] = x;
	roubosPortoesCopia[rouboid][roby] = y;
	roubosPortoesCopia[rouboid][robz] = z;
	roubosPortoesCopia[rouboid][robx2] = x2;
	roubosPortoesCopia[rouboid][roby2] = y2;
	roubosPortoesCopia[rouboid][robz2] = z2;

	// Destriomdp objetos
	DestroyObject(roubosPortoes[rouboid]);
	DestroyObject(rouboBomba[playerid]);
	roubosPortoesStatus[rouboid] = 0;

	// Anuncios
	static str[ 250 ];
	format(str, sizeof( str ), "{ffffff}Criminosos da {%s}%s{ffffff} acabaram de explodir o cofre da {ff0000}%s{ffffff}. Forças policias indo ao local", OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], roubosNomes[rouboid]);
    JNNEWS( str );
	AlterarNivelProcurado( playerid, 1, "+" );
	SendCopsNotifyMessage( playerid, playerid, "Tentativa de Assalto", "Cameras de Segurança" );

	// Restaurando objeto
	SetTimerEx("OnRouboRestaurarPortao", TMinutos(5), false, "d", rouboid);
}

/**
*	OnRouboRestaurarPortao()
*/
forward OnRouboRestaurarPortao(rouboid);
public OnRouboRestaurarPortao(rouboid) {
	static str[ 150 ];
	format(str, sizeof(str), "{ffffff}O cofre da {ff0000}%s{ffffff} foi totalmente reparado do dano sofrido pela ultima tentativa de assalto", roubosNomes[rouboid]);
	JNNEWS(str);

	roubosPortoes[rouboid] = CreateObject(
	roubosPortaoModel[rouboid],
	roubosPortoesCopia[rouboid][robx],
	roubosPortoesCopia[rouboid][roby],
	roubosPortoesCopia[rouboid][robz],
	roubosPortoesCopia[rouboid][robx2],
	roubosPortoesCopia[rouboid][roby2],
	roubosPortoesCopia[rouboid][robz2]
	);
	roubosCofresStatus[rouboid] = 0;
	return true;
}

/**
*	OnRoubarCofreContador()
*/

forward OnRoubarCofreContador(playerid, rouboid);
public OnRoubarCofreContador(playerid, rouboid) {

	new Float:x,
	Float:y,
	Float:z
	;

	GetObjectPos(roubosCofres[rouboid], x, y, z);

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z) || !Roubando[playerid]) {
		KillTimer(roubosCofresTimer1[rouboid]);

		ClearAnimations(playerid);
		StopLoopingAnim(playerid);

		roubosCofresStatus[rouboid] = 0;
		format(strx, sizeof(strx), "{%s}%s{ffffff} e membros {%s}%s{ffffff} foram detidos no assalto a {ff0000}%s{ffffff} !!!", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], roubosNomes[rouboid]);
		JNNEWS(strx);

		for(new p=0; p <= sizeof( BombAssalt ); p++) PlayerTextDrawHide(playerid, BombAssalt[ p ][ playerid ]);

		return 1;
	}

	format( strx, sizeof( strx ), "%02d", roubosCofresContador[ rouboid ] );
	PlayerTextDrawSetString( playerid, BombAssalt[ 1 ][ playerid ], strx );

	if(!roubosCofresContador[rouboid]) {

		KillTimer(roubosCofresTimer1[ rouboid ]);
		roubosCofresStatus[ rouboid ] = 2;

		ClearAnimations(playerid);
		StopLoopingAnim(playerid);

		OnRoubarRecompensa( playerid, rouboid);

		format( strx, sizeof( strx ), "{%s}%s{ffffff} e membros {%s}%s{ffffff} tiveram sucesso no assalto a {ff0000}%s{ffffff} !!!", OrgColorHex[PlayerInfo[playerid][pOrg]], GetName(playerid), OrgColorHex[PlayerInfo[playerid][pOrg]], nomeOrgs[PlayerInfo[playerid][pOrg]], roubosNomes[rouboid]);
		JNNEWS(strx);

		for(new p=0; p <= sizeof( BombAssalt ); p++) PlayerTextDrawHide(playerid, BombAssalt[ p ][ playerid ]);
	}
	roubosCofresContador[ rouboid ]--;
	return 1;
}
/**
*	OnRoubarRemoverSacola()
*/
forward OnRoubarRemoverSacola(playerid);
public OnRoubarRemoverSacola(playerid) {
    SacolaRoubo[ playerid ] = -1;
	return RemovePlayerAttachedObject(playerid, SlotRouboBolsa);
}
/**
*	OnRoubarRecompensa()
*/
stock OnRoubarRecompensa(playerid, rouboid) {
	new totalMembros = 0,
		Float:x,
		Float:y,
		Float:z,
		Org = GetPlayerOrg(playerid);

	new recompensa = RandomEx(roubosValorMin[rouboid], roubosValorMax[rouboid]);

    ActionGranaOrg(Org, "+", recompensa);
	GetPlayerPos(playerid, x, y, z);

    static str[ 129 ];
	ForPlayers( a ) {
		if(PlayerInfo[a][pLogger] && IsPlayerInRangeOfPoint(a, 20.0,x, y, z) && PlayerInfo[ a ][ pOrg ] == Org){
			totalMembros++;
			Roubando[a] = 0;

			SacolaRoubo[a] = 1;
			SetPlayerAttachedObject(a, SlotRouboBolsa, 1550, 1, 0.1, -0.3, 0, 0, 40, 0, 1, 1, 1);
			SetTimerEx("OnRoubarRemoverSacola", TMinutos(1), 0, "d", a);

			SendClientMessage(playerid, Laranja, "|___________________[ SERVIÐO PARA SUA ORGANIZAÐaO ]___________________|");
			format(str, sizeof(str), "Organizaçao: %s: %s", nomeOrgs[Org]);
			SendClientMessage(playerid, Laranja, str);
			SendClientMessage(playerid, Laranja, "Açao Realizada: Roubo");
			format(str, sizeof(str), "Valor total do roubo: $%s\n", FormatNumber(recompensa));
			SendClientMessage(playerid, Laranja, str);
			SendClientMessage(playerid, Laranja, "=======================================================================");
		}
	}
	return true;
}



//ActionGranaOrg()
ActionGranaOrg(org, const operador[], valor)
{
	if(strcmp(operador, "-", true) == 0) CofreOrg[org][Dinheiro] -= valor;
	else if(strcmp(operador, "+", true) == 0) CofreOrg[org][Dinheiro] += valor;
	else if(strcmp(operador, "*", true) == 0) CofreOrg[org][Dinheiro] *= valor;

	SaveCofreOrg(org);
	return true;
}

//ActionMaterialOrg()
ActionMaterialOrg(org, const operador[], valor){
    if(strcmp(operador, "-", true) == 0) CofreOrg[org][Materiais] -= valor;
	else if(strcmp(operador, "+", true) == 0) CofreOrg[org][Materiais] += valor;
	else if(strcmp(operador, "*", true) == 0) CofreOrg[org][Materiais] *= valor;

	SaveCofreOrg(org);
	return true;
}

Public:SalarioOrgPlayer(playerid)
{
	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pLogger])
	{
	    static org, str[129];

	    org = GetPlayerOrg(playerid);

		if(PlayerInfo[playerid][pCargo] == 1)
		{
  			if(CofreOrg[org][salarioc1] == 0) return SendClientMessage(playerid, -1, "{E86875}Sua organizaçao nao tem salario definido, Converse com os Lideres.");

			if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc1]) return SendClientMessage(playerid, -1, "{E86875}Sua org nao pode pagar o seu salario.");

            ActionPlayerBank(playerid, "+", CofreOrg[org][salarioc1]);

			format(str, sizeof(str), "Salario da organizaçao: [R$%s]", FormatNumber(CofreOrg[org][salarioc1]));
			SendClientMessage(playerid, -1, str);
			ActionGranaOrg(org, "-", CofreOrg[org][salarioc1]);
		}
		else if(PlayerInfo[playerid][pCargo] == 2)
		{
  			if(CofreOrg[org][salarioc2] == 0) return SendClientMessage(playerid, -1, "{E86875}Sua organizaçao nao tem salario definido, Converse com os Lideres.");

			if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc2]) return SendClientMessage(playerid, -1, "{E86875}Sua org nao pode pagar o seu salario.");

            ActionPlayerBank(playerid, "+", CofreOrg[org][salarioc2]);

			format(str, sizeof(str), "Salario da organizaçao: [R$%s]", FormatNumber(CofreOrg[org][salarioc2]));
			SendClientMessage(playerid, -1, str);
			ActionGranaOrg(org, "-", CofreOrg[org][salarioc2]);
		}
		else if(PlayerInfo[playerid][pCargo] == 3)
		{
  			if(CofreOrg[org][salarioc3] == 0) return SendClientMessage(playerid, -1, "{E86875}Sua organizaçao nao tem salario definido, Converse com os Lideres.");

			if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc3]) return SendClientMessage(playerid, -1, "{E86875}Sua org nao pode pagar o seu salario.");

            ActionPlayerBank(playerid, "+", CofreOrg[org][salarioc3]);

			format(str, sizeof(str), "Salario da organizaçao: [R$%s]", FormatNumber(CofreOrg[org][salarioc3]));
			SendClientMessage(playerid, -1, str);
			ActionGranaOrg(org, "-", CofreOrg[org][salarioc3]);
		}
		else if(PlayerInfo[playerid][pCargo] == 4)
		{
  			if(CofreOrg[org][salarioc4] == 0) return SendClientMessage(playerid, -1, "{E86875}Sua organizaçao nao tem salario definido, Converse com os Lideres.");

			if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc4]) return SendClientMessage(playerid, -1, "{E86875}Sua org nao pode pagar o seu salario.");

            ActionPlayerBank(playerid, "+", CofreOrg[org][salarioc4]);

			format(str, sizeof(str), "Salario da organizaçao: [R$%s]", FormatNumber(CofreOrg[org][salarioc4]));
			SendClientMessage(playerid, -1, str);
			ActionGranaOrg(org, "-", CofreOrg[org][salarioc4]);
		}
		else if(PlayerInfo[playerid][pCargo] == 5)
		{
  			if(CofreOrg[org][salarioc5] == 0) return SendClientMessage(playerid, -1, "{E86875}Sua organizaçao nao tem salario definido, Converse com os Lideres.");

			if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc5]) return SendClientMessage(playerid, -1, "{E86875}Sua org nao pode pagar o seu salario.");

            ActionPlayerBank(playerid, "+", CofreOrg[org][salarioc5]);

			format(str, sizeof(str), "Salario da organizaçao: [R$%s]", FormatNumber(CofreOrg[org][salarioc5]));
			SendClientMessage(playerid, -1, str);
			ActionGranaOrg(org, "-", CofreOrg[org][salarioc5]);
		}
		else if(PlayerInfo[playerid][pCargo] == 6)
		{
  			if(CofreOrg[org][salariolider] == 0) return SendClientMessage(playerid, -1, "{E86875}Sua organizaçao nao tem salario definido, va ate sua HQ e os defina.");

			if(CofreOrg[org][Dinheiro] < CofreOrg[org][salariolider]) return SendClientMessage(playerid, -1, "{E86875}Sua org nao pode pagar o seu salario.");

            ActionPlayerBank(playerid, "+", CofreOrg[org][salariolider]);

			format(str, sizeof(str), "Salario da organizaçao: [R$%s]", FormatNumber(CofreOrg[org][salariolider]));
			SendClientMessage(playerid, -1, str);
			ActionGranaOrg(org, "-", CofreOrg[org][salariolider]);
		}
	}
	return true;
}

new UltimoSalario[MAX_PLAYERS][1000];

Public:SetSalario(playerid)
{

	static
	    str[ 129 ],
		//VIP,
		Salario,
	    Bank,
	    JBank,
	    Energia[2],
	    randJuros,
	    Plan_Saude,
	    Rand1,
	    Rand2
	;

    Plan_Saude = 0;
    Rand1 = RandomEx(1, 5);
    Rand2 = RandomEx(1, 5);

    SetPVarInt(playerid, "UsouDorgas", 0);

	if(PlayerInfo[playerid][pHouse1] != 999){
		Energia[0] = (HouseInfo[PlayerInfo[playerid][pHouse1]][hPrice]/3000)*Rand1;
	}
	if(PlayerInfo[playerid][pHouse2] != 999){
		Energia[1] = (HouseInfo[PlayerInfo[playerid][pHouse2]][hPrice]/3000)*Rand2;
	}

	Salario = PlayerInfo[ playerid ][ pSalario ];
	Bank = PlayerInfo[ playerid ][ pBanco ];
	//VIP = ((IsAVip(playerid)*1000)+50);
	randJuros = random(3);
	JBank = ((PlayerInfo[playerid][pBanco]/1000)*randJuros);
	//PlayerInfo[ playerid ][pBanco] = (Bank-JBank)+Salario+VIP;
	PlayerInfo[ playerid ][ pExp ]++;


	SendClientMessage(playerid, -1, "{FF6600}|________ {FFFFFF}Salario {FF6600}________|");

	if(isPlayerCop( playerid ))
    {
		format(str, sizeof(str), "Seu emprego: {%s}%s\n", OrgColorHex[GetPlayerOrg( playerid )], nomeOrgs[GetPlayerOrg( playerid )]);
	}
	else format(str, sizeof(str), "Seu emprego: %s\n", EmpregoNome[PlayerInfo[ playerid ][ pEmprego ]]);
    strcat(UltimoSalario[playerid], str);

	SendClientMessage(playerid, -1, str );
    if(PlayerInfo[ playerid ][ pEmprego ] >= 1 || isPlayerCop( playerid ))
    {
		format(str, sizeof(str), "Bônus adquirido: {008800}$%s {FFFFFF}- Emprego\n", FormatNumber(Salario));
		SendClientMessage(playerid, -1, str );
        strcat(UltimoSalario[playerid], str);
		//format(str, sizeof(str), "Extra: {008800}+$%s\n", FormatNumber(VIP));
		//SendClientMessage(playerid, -1, str );
        //strcat(UltimoSalario[playerid], str);
	}
	else
	{
	    SendClientMessage(playerid, -1, "Seguro desemprego: {008800}+$50" );
	}


	SalarioOrgPlayer(playerid);

    format(str, sizeof(str), "Banco: {008800}$%s {FFFFFF}- Saldo Antigo\n", FormatNumber(Bank));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

	format(str, sizeof(str), "Juros Banco: {008800}0.%d {FFFFFF}- por cento\n", randJuros);
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

	format(str, sizeof(str), "Valor Juros: {008800}%s {FFFFFF}\n", FormatNumber(JBank));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

	SendClientMessage(playerid, Vermelho, "Dividas:");

	format(str, sizeof(str), "Devendo ao Banco: {FF0000}-$%s\n", FormatNumber(ContaInfo[ playerid ][ cBanco ]));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

    format(str, sizeof(str), "Energia Casa 1: {FF0000}-$%s\n", FormatNumber(Energia[0]));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

	format(str, sizeof(str), "Energia Casa 2: {FF0000}-$%s\n", FormatNumber(Energia[1]));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

	if(PlayerInfo[ playerid ][ pPlanoSaude ])
    {
        Plan_Saude = CUSTO_PLANO_SAUDE;

        format(str, sizeof(str), "Convenio: {FF0000}-$%s\n", FormatNumber(CUSTO_PLANO_SAUDE));
		SendClientMessage(playerid, -1, str);
        strcat(UltimoSalario[playerid], str);
	}
	ContaInfo[ playerid ][ cTotal ] = (Energia[0]+Energia[1]+Plan_Saude+ContaInfo[ playerid ][ cBanco ]);

    format(str, sizeof(str), "Dividas Total: {FF0000}-{0FF502}R${FFFFFF}%s\n", FormatNumber(ContaInfo[ playerid ][ cTotal ]));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

	if(PlayerInfo[ playerid ][pBanco] < ContaInfo[ playerid ][ cTotal ]){

	    format(str, sizeof(str), "Voce tem uma divida de R$%s com o Banco.\n", FormatNumber(ContaInfo[ playerid ][ cTotal ]));
		SendClientMessage(playerid, Verdel, str );
        strcat(UltimoSalario[playerid], str);
	}

	ContaInfo[ playerid ][ cBanco ] = ContaInfo[ playerid ][ cTotal ];
	format(str, sizeof(str), "Extrato Banco: {008800}$%s\n", FormatNumber(PlayerInfo[ playerid ][pBanco]));
	SendClientMessage(playerid, -1, str );
    strcat(UltimoSalario[playerid], str);

    if(PlayerInfo[playerid][pVIP] > 0)
    {
        if(PlayerInfo[playerid][pVIP] == 1)
        {
            new vtotal = BONUS_VIP1 * PlayerInfo[ playerid ][ pSalario ] / 100;

            format(str, sizeof(str), "Bonus Player VIP: {008800}$%d\n", vtotal);
            SendClientMessage(playerid, -1, str );
            strcat(UltimoSalario[playerid], str);

            PlayerInfo[ playerid ][pBanco] += vtotal;

        } else if(PlayerInfo[playerid][pVIP] == 2)
        {
            new vtotal = BONUS_VIP2 * PlayerInfo[ playerid ][ pSalario ] / 100;

            format(str, sizeof(str), "Bonus Player VIP: {008800}$%d\n", vtotal);
            SendClientMessage(playerid, -1, str );
            strcat(UltimoSalario[playerid], str);

            PlayerInfo[ playerid ][pBanco] += vtotal;

        } else if(PlayerInfo[playerid][pVIP] >= 3)
        {
            new vtotal = BONUS_VIP3 * PlayerInfo[ playerid ][ pSalario ] / 100;

            format(str, sizeof(str), "Bonus Player VIP: {008800}$%d\n", vtotal);
            SendClientMessage(playerid, -1, str );
            strcat(UltimoSalario[playerid], str);

            PlayerInfo[ playerid ][pBanco] += vtotal;
        }
    }

	gettime(hora, minuto);
	format(str, sizeof(str), "{FF6600}|___________________ {FFFFFF}%02d:%02d{FF6600}|", hora, minuto);
	SendClientMessage(playerid, C_OFICIAL, str);
    strcat(UltimoSalario[playerid], str);

	if(ContaInfo[ playerid ][ cTotal ] > 0){

		if(ContaInfo[ playerid ][ cAvisado ] == 1)
        {
			SCM(playerid, 0x007D02FF, "| Banco | Voce possui debitos em atraso va ate a loterica e honre suas dividas, caso contrario seus bens serao bloqueados.");
		}
		else if(ContaInfo[ playerid ][ cAvisado ] == 2)
        {
			SCM(playerid, 0x007D02FF, "| Banco | Seus bens foram bloqueados, para continuar usando os serviços bancarios, quite suas dividas.");

			format(	str, sizeof( str ), "| Notificaçao de Bloqueio | Data: %d/%d/%d. Motivo: Nao pagamentos de dividas.\n", dia, mes, ano);
			SCM( playerid, 0xBA8295FF, str );
            strcat(UltimoSalario[playerid], str);

			ContaInfo[playerid][ cBlock ] = true;
		}
		else if(ContaInfo[ playerid ][ cAvisado ] >= 3)
        {
			SCM(playerid, 0xFF0000FF, "| Banco | Por nao pagamentos de dividas, foi adicionado +1 nivel de procurado.");

            if( PlayerInfo[playerid][pWanted] < 6) {
             	AlterarNivelProcurado(playerid, 1, "+");
             	ProcuradoDividas[ playerid ]++;
			}
		}
		ContaInfo[ playerid ][ cAvisado ]++;
	}

	GameTextForPlayer(playerid, "~r~UP~n~/salario", 5000, 1);

	PlayerInfo[ playerid ][pSalario] = 0;

	PlaySoundForPlayer(playerid, 1057);

    PlayerInfo[ playerid ][ pLevel ] ++;

	OnSalvarDados( playerid );
	return true;
}

CMD:salario(playerid)
{
    ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "ULTIMO SALARIO", UltimoSalario[playerid], "Fechar", "");
    return 1;
}

/**
*	Bibliotecas de funçoes utilitarias para retorno de informaçoes
*	de um jogador
*/

IsPlayerLogged( playerid ) return PlayerInfo[ playerid ][ pLogger ];
GetPlayerOrg(playerid) return PlayerInfo[playerid][pOrg];
GetPlayerCargo(playerid) return PlayerInfo[playerid][pCargo];
GetPlayerGrana(playerid) return PlayerInfo[playerid][pDinheiro];
GetPlayerLevel(playerid) return PlayerInfo[playerid][pLevel];
GetOrgColor(playerid) return orgsColor[GetPlayerOrg(playerid)];
GetOrgColorHex(playerid) return OrgColorHex[GetPlayerOrg(playerid)];
GetOrgName(playerid) return nomeOrgs[GetPlayerOrg(playerid)];
ShowPlayerEmail(id) return strmid(PlayerInfo[id][pEmail], DOF2_GetString(CI(id), "Email"), 0, strlen( DOF2_GetString(CI(id), "Email") ), 255);
//GetSenhaAtiva(id) return PlayerInfo[id][pSenhaAtiva] = DOF2_GetInt(CI(id), "CodigoAtivo");
SetSenha2Ativa(id, idset) return DOF2_SetInt(CI(id), "CodigoAtivo", idset), DOF2_SetString(CI(id), "CodigoRecuperacao", "@#ckfbvnvÐÐ&&"), DOF2_SaveFile();

//ActionPlayerGrana()
ActionPlayerGrana(playerid, const operador[], quantia, modo = 0){
	static str[ 50 ];
	if(strcmp(operador, "+", true) == 0) {
		PlayerInfo[playerid][pDinheiro] += quantia;
        GivePlayerMoney(playerid, quantia);

		format(str, 50, "~g~ R$~w~+%s", FormatNumber(quantia));
        if(modo) GameTextForPlayer(playerid, str, 3000, 1);
	}
	else if(strcmp(operador, "-", true) == 0) {

		PlayerInfo[playerid][pDinheiro] -= quantia;
		GivePlayerMoney(playerid, -quantia);

		format(str, 50, "~g~ R$~w~-%s", FormatNumber(quantia));
		if(modo) GameTextForPlayer(playerid, str, 3000, 1);
	}
	else if(strcmp(operador, "=", true) == 0) {

        GivePlayerMoney(playerid, -GetPlayerMoney(playerid));
		PlayerInfo[playerid][pDinheiro] = quantia;
		GivePlayerMoney(playerid, PlayerInfo[playerid][pDinheiro]);

		format(str, 50, "~g~ R$~w~%s", FormatNumber(quantia));
		if(modo) GameTextForPlayer(playerid, str, 3000, 1);
	}

    OnSalvarDados(playerid);
}

ActionPlayerBank(playerid, const operador[], quantia, modo = 0){
	static str[ 50 ];
    if(strcmp(operador, "+", true) == 0){
		PlayerInfo[ playerid ][pBanco] += quantia;

        format(str, 50, "~g~ R$~w~+%i,00", quantia);
		if(modo) GameTextForPlayer(playerid, str, 5000, 1);
	}
	else if(strcmp(operador, "-", true) == 0) {
		PlayerInfo[ playerid ][pBanco] -= quantia;

        format(str, 50, "~g~ R$~w~-%i,00", quantia);
		if(modo) GameTextForPlayer(playerid, str, 5000, 1);
	}
	else if(strcmp(operador, "=", true) == 0) {
		PlayerInfo[ playerid ][pBanco] = quantia;

        format(str, 50, "~g~ R$~w~%i,00", quantia);
		if(modo) GameTextForPlayer(playerid, str, 5000, 1);
	}
	else if(strcmp(operador, "*", true) == 0) PlayerInfo[ playerid ][pBanco] *= quantia;
    OnSalvarDados(playerid);
}


//BanPlayer()
BanPlayer(playerid, admin, Motivo[]){

	new
		BDat[6],
		BStr[ 35 ],
		FileBan[50]
	;
	if(strlen(Motivo) > 64) return ErroMSG(admin, "Simplifique o motivo!");

    SetPlayerCameraPos(playerid, 835.0358, -1102.0917, 25.5914); //Cemiterio Pos
	SetPlayerCameraLookAt(playerid, 836.0499, -1102.0668, 25.3408); //Cemiterio Pos

    getdate(BDat[2], BDat[1], BDat[0]);
    gettime(BDat[3], BDat[4], BDat[5]);
    format(BStr, 32, "%02d/%02d/%d - %02d:%02d:%02d", BDat[0], BDat[1], BDat[2], BDat[3], BDat[4], BDat[5]);

	format(FileBan, 50, PASTA_BANS, GetName(playerid));

	DOF2_CreateFile(FileBan);

	DOF2_SetString(FileBan, "Nome", GetName( playerid ));
	DOF2_SetString(FileBan, "IP", GetIPX( playerid ));
	DOF2_SetString(FileBan, "Admin", admin != -1 ? (GetName( admin )) : (BotName));
	DOF2_SetString(FileBan, "Motivo", Motivo);
	DOF2_SetString(FileBan, "Data-Hora", BStr);

	DOF2_SaveFile();

 	if(admin != -1){
		format(strx, sizeof(strx), ""#SERVELOGO" %s Admin %s Baniu o Jogador %s Motivo: %s ", PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName( admin ), GetName( playerid ), Motivo);
		SendClientMessageToAll(-1, strx);

		format(STRLOG, sizeof STRLOG, "[%s] O Admin %s Baniu o jogador %s, Motivo: %s!", GetDateEx(), GetName( admin ), GetName(playerid), Motivo);
		SLog("Ban.log", STRLOG);
	}
	else
	{
	    format(strx, 128, "%s: o Jogador %s foi banido, Motivo: %s", BotName, GetName( playerid ), Motivo);
		SendClientMessageToAll(-1, strx);

		format(STRLOG, sizeof STRLOG, "[%s] O Admin %s Baniu o jogador %s, Motivo: %s!", GetDateEx(), BotName, GetName(playerid), Motivo);
		SLog("Ban.log", STRLOG);
	}
	return CheckBan(playerid);
}

CheckBan(playerid)
{
	static FileBan[50], string[ 100 ];
	format(FileBan, 50, PASTA_BANS, GetName(playerid));

	if(DOF2_FileExists(FileBan))
	{
		SetPlayerCameraPos(playerid, 835.0358, -1102.0917, 25.5914); //Cemiterio Pos
		SetPlayerCameraLookAt(playerid, 836.0499, -1102.0668, 25.3408); //Cemiterio Pos

	    ClearChatbox(playerid, 10);
		SendClientMessage(playerid, -1, ""#SERVELOGO" Voce possui registros de banimento!");
	    ClearChatbox(playerid, 1);
	    SendClientMessage(playerid, -1, "Caso se trate de um engano ou Bug/Erro tire uma Foto/Print (F8)");
	    SendClientMessage(playerid, -1, "e Reporte em Nosso Forum: "#DISCORD"");
	    ClearChatbox(playerid, 1);

	    SendClientMessage(playerid, 0xFF0000AA, "|{FFFFFF}________________ {FF0000}Banido {FFFFFF}____________________{FF0000}|");
	    ClearChatbox(playerid, 1);

		format(string, sizeof string, "Conta: {FF0000}%s", DOF2_GetString(FileBan, "Nome"));
	    SendClientMessage(playerid, -1, string);

	    format(string, sizeof string, "Admin: {FF0000}%s", DOF2_GetString(FileBan, "Admin"));
	    SendClientMessage(playerid, -1, string);

		format(string, sizeof string, "Motivo: {FF0000}%s", DOF2_GetString(FileBan, "Motivo"));
	    SendClientMessage(playerid, -1, string);

	    format(string, sizeof string, "Data - Hora: {FF0000}%s", DOF2_GetString(FileBan, "Data-Hora"));
	    SendClientMessage(playerid, -1, string);

	    format(string, sizeof string, "IP: {FF0000}%s", DOF2_GetString(FileBan, "IP"));
	    SendClientMessage(playerid, -1, string);
	    ClearChatbox(playerid, 1);
	    SendClientMessage(playerid, 0xFF0000AA, "|{FFFFFF}____________________________________________{FF0000}|");
        Ban(playerid);
	}
	return true;
}

stock DesbanPlayer(playerid, tipo, valor[]){
    switch(tipo) {
        case DESBAN_NAME:
		{
		    static FileBan[50], string[ 80 ];
			format(FileBan, 50, PASTA_BANS, valor);

			if(DOF2_FileExists(FileBan))
			{
				format(string, 30, "unbanip %s", DOF2_GetString(FileBan, "IP"));
				SendRconCommand(string);

				DOF2_RemoveFile(FileBan);

				format(string, 80, "%s foi Desbanido com sucesso!", valor);
				SCM(playerid, 0x18700AFF, string);

				static str[ 129 ];
				format( str, sizeof(str), "{33AAFF}SERVIDOR - A conta %s foi desbanida %s admin %s", valor, PlayerInfo[playerid][pSex] == 1 ? ("pelo"): ("pela"), GetName(playerid));
				SCMALL( str );

				format(STRLOG, sizeof STRLOG, "[%s] %s Admin %s desbaniu a conta %s!", GetDateEx(), PlayerInfo[playerid][pSex] == 1 ? ("O"): ("A"), GetName(playerid));
				SLog("Desban.log", STRLOG);
			}
			else SCM(playerid, 0x2F7B72FF, "Nenhum Registro de banimento com este nome foi encontrado!");
        }

	}
	return 1;
}

#define LooP(%0,%1) for (new %1 = 0, j = strlen(%0); %1 < j; ++%1)
stock LowerString(Text[])
{
    LowerAcentos(Text);

	LooP(Text,i)
	{
		if (0x41 <= Text[i] <= 0x5A){
			Text[i] += 32;
		}
	}
	return Text;
}

stock LowerAcentos(str1[])
{
    new
		sFilter[50] = "ÐaeiouÐ­ÐÐÐÐ¢Ð©ÐÐÐ­Ð¦Ð¬aoÐ¡aeÐÐ¤Ð«",
		sFiltred[50] = "çaeiouÑÐ°Ð¸Ð¼ÑÑÐ´Ð»Ð¿ÑÑaoÑaeÐ¾ôÑ"
	;
	LooP(str1,i)
		for(new l; sFilter[l]; ++l)
    if(str1[i] == sFilter[l])   str1[i] = sFiltred[l];
    return str1;
}

Public:BlockChatFor(id, tempo)
{
	PlayerInfo[ id ][ pBlockchat ] = true;
	PlayerInfo[ id ][ pBlockTemp ] = (tempo*60);
	TimerBlockChat[ id ] = SetTimerEx(#DesblockChatFor, TSegundos(1), true, #i, id);
	return true;
}

Public:BlockCAFor(id, tempo){
	PlayerInfo[ id ][ pBlockCA ] = true;
	PlayerInfo[ id ][ pBlockCATemp ] = (tempo*60);
	OnSalvarDados(id);
}

Public:DesblockChatFor(id)
{
	if(PlayerInfo[ id ][ pBlockTemp ] <= 0){
	    KillTimer(TimerBlockChat[ id ]);
		PlayerInfo[ id ][ pBlockchat ] = false;
		PlayerInfo[ id ][ pBlockTemp ] = 0;
		OnSalvarDados( id );

		ClearChatbox(id, 2);
	    SendClientMessage(id, -1, "{FF0000}|_ {FFFF00}Servidor {FF0000}_| {FFFFFF}Voce ja pode usar o Chat novamente!");
		return true;
	}
	return PlayerInfo[ id ][ pBlockTemp ]--;
}

forward ChatProximo(Float:radi, playerid, string[], cor1, cor2, cor3, cor4, cor5);
public ChatProximo(Float:radi, playerid, string[], cor1, cor2, cor3, cor4, cor5)
{
	if(IsPlayerConnected(playerid)){
		if(PlayerInfo[ playerid ][ pLogger ] != 0){
			new
				Float:APos[ 3 ],
				Float:OPos[ 3 ],
				Float:TPos[ 3 ]
			;

			GetPlayerPos(playerid, OPos[ 0 ], OPos[ 1 ], OPos[ 2 ]);

			ForPlayers(i){

				GetPlayerPos(i, APos[ 0 ], APos[ 1 ], APos[ 2 ]);

				TPos[ 0 ] = (OPos[ 0 ] -APos[ 0 ]);
				TPos[ 1 ] = (OPos[ 1 ] -APos[ 1 ]);
				TPos[ 2 ] = (OPos[ 2 ] -APos[ 2 ]);

	            if (((TPos[ 0 ] < radi/16) && (TPos[ 0 ] > -radi/16)) && ((TPos[ 1 ] < radi/16) && (TPos[ 1 ] > -radi/16)) && ((TPos[ 2 ] < radi/16) && (TPos[ 2 ] > -radi/16)))
				{
					SendClientMessage(i, cor1, string);
				}
				else if (((TPos[ 0 ] < radi/8) && (TPos[ 0 ] > -radi/8)) && ((TPos[ 1 ] < radi/8) && (TPos[ 1 ] > -radi/8)) && ((TPos[ 2 ] < radi/8) && (TPos[ 2 ] > -radi/8)))
				{
					SendClientMessage(i, cor2, string);
				}
				else if (((TPos[ 0 ] < radi/4) && (TPos[ 0 ] > -radi/4)) && ((TPos[ 1 ] < radi/4) && (TPos[ 1 ] > -radi/4)) && ((TPos[ 2 ] < radi/4) && (TPos[ 2 ] > -radi/4)))
				{
					SendClientMessage(i, cor3, string);
				}
				else if (((TPos[ 0 ] < radi/2) && (TPos[ 0 ] > -radi/2)) && ((TPos[ 1 ] < radi/2) && (TPos[ 1 ] > -radi/2)) && ((TPos[ 2 ] < radi/2) && (TPos[ 2 ] > -radi/2)))
				{
					SendClientMessage(i, cor4, string);
				}
				else if (((TPos[ 0 ] < radi) && (TPos[ 0 ] > -radi)) && ((TPos[ 1 ] < radi) && (TPos[ 1 ] > -radi)) && ((TPos[ 2 ] < radi) && (TPos[ 2 ] > -radi)))
				{
					SendClientMessage(i, cor5, string);
				}
				else if(GetPVarInt(i, "ChatGlobal") == 1 && PlayerInfo[ i ][ pAdmin ] >= comando_verchatglobal){
				    SendClientMessage(i, cor1, string);
				}
			}
		}
	}
	return true;
}

stock CarModelToArray(modelid)
{
    new arraynum = modelid - 400;
    return arraynum;
}

Public:CheckInfoOrg(playerid)
{
    if(IsPlayerConnected(playerid))
    {
	    for(new i = 1; i < sizeof(InfoOrg); i++)
		{
	    	if(PlayerInfo[playerid][pOrg] > 0 || PlayerInfo[playerid][pCargo] > 0)
		    {
		    	if(
					strcmp(GetName(playerid),InfoOrg[i][Lider], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][SubLider], true ) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][SubLider2],true ) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro1], true ) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro2], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro3], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro4], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro5], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro6], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro7], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro8], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro9], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro10], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro11], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro12], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro13], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro14], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro15], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro16], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro17], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro18], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro19], true) == 0 ||
					strcmp(GetName(playerid),InfoOrg[i][Membro20], true) == 0 )
		    	{
           			PlayerInfo[playerid][pDespedidoOrg] = 0;
					return true;
		    	}
		    	PlayerInfo[playerid][pDespedidoOrg] = 1;
			}
		}
		if(PlayerInfo[playerid][pDespedidoOrg] >= 1)
        {
		    if(PlayerInfo[playerid][pOrg] > 0 || PlayerInfo[playerid][pCargo] > 0){
       			if(PlayerInfo[playerid][pCargo] == 6)
                {
					InfoMSG(playerid, "Voce foi demitido de lider por um Administrador!");
	 			}
				else{
					InfoMSG(playerid, "Voce foi demitido pelo seu lider, agora voce e um Civil !");
				}
				PlayerInfo[playerid][pOrg] = 0;
				PlayerInfo[playerid][pCargo] = 0;
				PlayerInfo[playerid][pDespedidoOrg] = 0;
				SpawnPlayer(playerid);
				return true;
			}
		}
    }
	return true;
}


GetPlayerOrgCargo(playerid){
	static str[100];
	switch(PlayerInfo[playerid][pCargo])
	{
	    case 6: str = "Lider";
	    case 5: str = "Sub-Lider";
	}
	return str;
}

Public:Vagas(skOrg)
{
	if(strcmp(InfoOrg[skOrg][Membro1], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro2], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro3], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro4], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro5], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro6], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro7], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro8], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro9], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro10], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro11], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro12], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro13], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro14], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro15], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro16], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro17], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro18], "Ninguem", true) == 0
	|| strcmp(InfoOrg[skOrg][Membro19], "Ninguem", true) == 0 || strcmp(InfoOrg[skOrg][Membro20], "Ninguem", true) == 0)
   	{
		return true;
	}
	return 0;
}

Public:VerificarCandidato(const nome[], org){
	if(strcmp(InfoOrg2[org][Candidato1], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato2], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato3], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato4], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato5], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato6], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato7], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato8], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato9], nome, true) == 0
	|| strcmp(InfoOrg2[org][Candidato10], nome, true) == 0) return true;

	return false;
}

Public:AddCandidatoOrg(nome[], org){
	new CFile[50];
	format(CFile, 50, PASTA_CANDIDATOS, org);

	if(strcmp(InfoOrg2[org][Candidato1], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato1], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato1", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato2], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato2], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato2", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato3], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato3], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato3", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato4], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato4], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato4", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato5], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato5], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato5", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato6], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato6], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato6", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato7], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato7], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato7", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato8], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato8], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato8", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato9], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato9], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato9", nome);
        DOF2_SaveFile();
		return true;
	}
	else if(strcmp(InfoOrg2[org][Candidato10], "Ninguem", true) ==0)
	{
	    strmid(InfoOrg2[org][Candidato10], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(CFile,"Candidato10", nome);
        DOF2_SaveFile();
		return true;
	}
	return true;
}


Public:LimparCandidatoOrg(playerid, org, vagaid){
	new CFile[50];
	format(CFile, 50, PASTA_CANDIDATOS, org);

	switch(vagaid)
	{
	    case 1:{
            strmid(InfoOrg2[org][Candidato1], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato1","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 1");
		}
	    case 2:{
            strmid(InfoOrg2[org][Candidato2], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato2","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 2");
		}
	    case 3:{
            strmid(InfoOrg2[org][Candidato3], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato3","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 3");
		}
	    case 4:{
            strmid(InfoOrg2[org][Candidato4], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato4","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 4");
		}
	    case 5:{
            strmid(InfoOrg2[org][Candidato5], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato5","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 5");
		}
	    case 6:{
            strmid(InfoOrg2[org][Candidato6], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato6","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 6");
		}
	    case 7:{
            strmid(InfoOrg2[org][Candidato7], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato7","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 7");
		}
	    case 8:{
            strmid(InfoOrg2[org][Candidato8], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato8","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 8");
		}
	    case 9:{
            strmid(InfoOrg2[org][Candidato9], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato9","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 9");
		}
	    case 10:{
            strmid(InfoOrg2[org][Candidato10], "Ninguem", 0, strlen("Ninguem"), 255);
		   	DOF2_SetString(CFile,"Candidato10","Ninguem");
		   	DOF2_SaveFile();
		   	SendClientMessage(playerid, AzulClaro, "Voce limpou o Candidato 10");
		}
	}
	return true;
}

Public:MostrarCandidatos(playerid, org, edit)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[100], Box[1000];

		format(string,sizeof(string),"{FFFFFF}Candidato 1: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato1], GetStateForName(InfoOrg2[org][Candidato1]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 2: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato2], GetStateForName(InfoOrg2[org][Candidato2]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 3: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato3], GetStateForName(InfoOrg2[org][Candidato3]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 4: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato4], GetStateForName(InfoOrg2[org][Candidato4]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 5: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato5], GetStateForName(InfoOrg2[org][Candidato5]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 6: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato6], GetStateForName(InfoOrg2[org][Candidato6]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 7: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato7], GetStateForName(InfoOrg2[org][Candidato7]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 8: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato8], GetStateForName(InfoOrg2[org][Candidato8]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 9: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato9], GetStateForName(InfoOrg2[org][Candidato9]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);
   		format(string,sizeof(string),"{FFFFFF}Candidato 10: %s {FFFFFF}| %s\n",InfoOrg2[org][Candidato10], GetStateForName(InfoOrg2[org][Candidato10]) != 0 ? ("{33FF00}Online") : ("{FC0015}Offline"));
   		strcat(Box, string);

   		if(edit != 0)
	   		ShowPlayerDialog(playerid, DIALOG_LIMPAR_CANDIDATOS, DIALOG_STYLE_LIST, "Candidatos Clique para limpar", Box, "Limpar", "Sair");
		else
		    ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Candidatos", Box, "Fechar", "");
	}
	return true;
}

stock OpenInfoOrg(playerid, Orgidx, styleid){
	new Box[2000];
	static string[80];

    format(string,sizeof(string),"{FFFFFF}%s: %s | %s\n",InfoOrg[Orgidx][PatenteName6], InfoOrg[Orgidx][Lider], GetStateForName(InfoOrg[Orgidx][Lider]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}%s: %s | %s\n",InfoOrg[Orgidx][PatenteName5], InfoOrg[Orgidx][SubLider], GetStateForName(InfoOrg[Orgidx][SubLider]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box, string);
	format(string,sizeof(string),"{FFFFFF}%s: %s | %s\n\n", InfoOrg[Orgidx][PatenteName5], InfoOrg[Orgidx][SubLider2], GetStateForName(InfoOrg[Orgidx][SubLider2]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}1: %s | %s\n",InfoOrg[Orgidx][Membro1], GetStateForName(InfoOrg[Orgidx][Membro1]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}2: %s | %s\n",InfoOrg[Orgidx][Membro2], GetStateForName(InfoOrg[Orgidx][Membro2]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}3: %s | %s\n",InfoOrg[Orgidx][Membro3], GetStateForName(InfoOrg[Orgidx][Membro3]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}4: %s | %s\n",InfoOrg[Orgidx][Membro4], GetStateForName(InfoOrg[Orgidx][Membro4]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}5: %s | %s\n",InfoOrg[Orgidx][Membro5], GetStateForName(InfoOrg[Orgidx][Membro5]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}6: %s | %s\n",InfoOrg[Orgidx][Membro6], GetStateForName(InfoOrg[Orgidx][Membro6]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}7: %s | %s\n",InfoOrg[Orgidx][Membro7], GetStateForName(InfoOrg[Orgidx][Membro7]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}8: %s | %s\n",InfoOrg[Orgidx][Membro8], GetStateForName(InfoOrg[Orgidx][Membro8]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}9: %s | %s\n",InfoOrg[Orgidx][Membro9], GetStateForName(InfoOrg[Orgidx][Membro9]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}10: %s | %s\n",InfoOrg[Orgidx][Membro10], GetStateForName(InfoOrg[Orgidx][Membro10]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}11: %s | %s\n",InfoOrg[Orgidx][Membro11], GetStateForName(InfoOrg[Orgidx][Membro11]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}12: %s | %s\n",InfoOrg[Orgidx][Membro12], GetStateForName(InfoOrg[Orgidx][Membro12]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}13: %s | %s\n",InfoOrg[Orgidx][Membro13], GetStateForName(InfoOrg[Orgidx][Membro13]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}14: %s | %s\n",InfoOrg[Orgidx][Membro14], GetStateForName(InfoOrg[Orgidx][Membro14]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}15: %s | %s\n",InfoOrg[Orgidx][Membro15], GetStateForName(InfoOrg[Orgidx][Membro15]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}16: %s | %s\n",InfoOrg[Orgidx][Membro16], GetStateForName(InfoOrg[Orgidx][Membro16]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}17: %s | %s\n",InfoOrg[Orgidx][Membro17], GetStateForName(InfoOrg[Orgidx][Membro17]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}18: %s | %s\n",InfoOrg[Orgidx][Membro18], GetStateForName(InfoOrg[Orgidx][Membro18]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}19: %s | %s\n",InfoOrg[Orgidx][Membro19], GetStateForName(InfoOrg[Orgidx][Membro19]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);
	format(string,sizeof(string),"{FFFFFF}20: %s | %s\n",InfoOrg[Orgidx][Membro20], GetStateForName(InfoOrg[Orgidx][Membro20]) != 0 ? ("{3C982E}Online") : ("{FF0000}Offline"));
	strcat(Box,string);

	if(styleid != 2)
		ShowPlayerDialog( playerid, DIALOG_LISTA_ORG, DIALOG_STYLE_MSGBOX, "Lista de membros", Box, "Fechar", "Voltar" );
	else
	    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Lista de membros", Box, "Fechar", "" );
	return true;
}

forward ConviteInfoOrg(nome[], org, cargo);
public ConviteInfoOrg(nome[], org, cargo)
{
	new arquivo[50];
	format(arquivo, sizeof(arquivo), PASTA_ORGS, org);
 	if(cargo == 6)
	{
	    strmid(InfoOrg[org][Lider], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		DOF2_SetString(arquivo,"Lider", nome);
		DOF2_SaveFile();
		return true;
	}
	if(cargo == 100)
	{
		if(strcmp(InfoOrg[org][SubLider],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][SubLider], nome, 0, strlen(nome), MAX_PLAYER_NAME);
       	    DOF2_SetString(arquivo,"SubLider", nome);
       	    DOF2_SaveFile();
			return true;
		}
	}
	if(cargo == 200)
	{
		if(strcmp(InfoOrg[org][SubLider2],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][SubLider2], nome, 0, strlen(nome), MAX_PLAYER_NAME);
       	    DOF2_SetString(arquivo,"SubLider2", nome);
       	    DOF2_SaveFile();
			return true;
		}
	}
	if(cargo == 1){
	    if(strcmp(InfoOrg[org][Membro1],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro1], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	        DOF2_SetString(arquivo,"Membro1",nome);
	        DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro2],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro2], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro2",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro3],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro3], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro3",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro4],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro4], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro4",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro5],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro5], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro5",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro6],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro6], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro6",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro7],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro7], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro7",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro8],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro8], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro8",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro9],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro9], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro9",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro10],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro10], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro10",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro11],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro11], nome, 0, strlen(nome), MAX_PLAYER_NAME);
			DOF2_SetString(arquivo,"Membro11",nome);
			DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro12],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro12], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro12",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro13],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro13], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro13",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro14],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro14], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro14",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro15],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro15], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro15",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro16],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro16], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro16",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro17],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro17], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro17",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro18],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro18], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro18",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro19],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro19], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro19",nome);
		    DOF2_SaveFile();
			return true;
		}
		if(strcmp(InfoOrg[org][Membro20],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][Membro20], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro20",nome);
		    DOF2_SaveFile();
			return true;
		}
	}
	return 0;
}

forward DemitirInfoOrg(id);
public DemitirInfoOrg(id)
{
    new arquivo[50],
		nome[MAX_PLAYER_NAME];
	GetPlayerName(id, nome, MAX_PLAYER_NAME);

	if(	PlayerInfo[ id ][ pSpawnType ] == 3 && PlayerInfo[ id ][pHouse1] != 999 || PlayerInfo[ id ][pHouse2] != 999){
        if(	PlayerInfo[ id ][ pHouse1 ] != 999 ) PlayerInfo[ id ][ pSpawnType ] = 1;
        else
        PlayerInfo[ id ][ pSpawnType ] = 2;
	}
    for(new i = 1; i < sizeof(InfoOrg); i++)
	{
        format(arquivo, sizeof(arquivo), PASTA_ORGS, i);
    	if(strcmp(nome,InfoOrg[i][Lider],true)==0)
    	{
    	    strmid(InfoOrg[i][Lider], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
    		DOF2_SetString(arquivo,"Lider","Ninguem");
    		DOF2_SaveFile();
    	    return true;
    	}
		if(strcmp(nome,InfoOrg[i][SubLider],true)==0)
		{
		    strmid(InfoOrg[i][SubLider], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"SubLider","Ninguem");
		    DOF2_SaveFile();
			return true;
   		}
  		if(strcmp(nome,InfoOrg[i][SubLider2],true)==0)
		{
		    strmid(InfoOrg[i][SubLider2], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"SubLider2","Ninguem");
		    DOF2_SaveFile();
			return true;
   		}
    	if(strcmp(nome,InfoOrg[i][Membro1],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro1], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro1","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro2],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro2], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro2","Ninguem");
 	    	DOF2_SaveFile();
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro3],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro3], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro3","Ninguem");
		    DOF2_SaveFile();
 	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro4],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro4], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro4","Ninguem");
 	    	DOF2_SaveFile();
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro5],true)==0)
    	{
		    strmid(InfoOrg[i][Membro5], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro5","Ninguem");
		    DOF2_SaveFile();
		    return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro6],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro6], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro6","Ninguem");
 	    	DOF2_SaveFile();
		    return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro7],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro7], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro7","Ninguem");
 	    	DOF2_SaveFile();
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro8],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro8], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro8","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro9],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro9], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro9","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro10],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro10], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro10","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro11],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro11], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro11","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro12],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro12], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro12","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro13],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro13], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro13","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro14],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro14], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro14","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro15],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro15], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro15","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro16],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro16], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro16","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro17],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro17], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro17","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro18],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro18], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro18","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro19],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro19], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro19","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro20],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro20], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro20","Ninguem");
	    	DOF2_SaveFile();
	    	return true;
    	}
    }
	return 0;
}

forward LoadOrgs();
public LoadOrgs()
{
	new OFile[50], idx = 1;
	while (idx < sizeof(InfoOrg))
	{
	    format(OFile, sizeof(OFile), PASTA_ORGS, idx);
		strmid(InfoOrg[idx][Lider], DOF2_GetString(OFile,"Lider"), 0, strlen(DOF2_GetString(OFile,"Lider")), 255);
		strmid(InfoOrg[idx][SubLider], DOF2_GetString(OFile,"SubLider"), 0, strlen(DOF2_GetString(OFile,"SubLider")), 255);
		strmid(InfoOrg[idx][SubLider2], DOF2_GetString(OFile,"SubLider2"), 0, strlen(DOF2_GetString(OFile,"SubLider2")), 255);
		strmid(InfoOrg[idx][Membro1], DOF2_GetString(OFile,"Membro1"), 0, strlen(DOF2_GetString(OFile,"Membro1")), 255);
		strmid(InfoOrg[idx][Membro2], DOF2_GetString(OFile,"Membro2"), 0, strlen(DOF2_GetString(OFile,"Membro2")), 255);
		strmid(InfoOrg[idx][Membro3], DOF2_GetString(OFile,"Membro3"), 0, strlen(DOF2_GetString(OFile,"Membro3")), 255);
		strmid(InfoOrg[idx][Membro4], DOF2_GetString(OFile,"Membro4"), 0, strlen(DOF2_GetString(OFile,"Membro4")), 255);
		strmid(InfoOrg[idx][Membro5], DOF2_GetString(OFile,"Membro5"), 0, strlen(DOF2_GetString(OFile,"Membro5")), 255);
		strmid(InfoOrg[idx][Membro6], DOF2_GetString(OFile,"Membro6"), 0, strlen(DOF2_GetString(OFile,"Membro6")), 255);
		strmid(InfoOrg[idx][Membro7], DOF2_GetString(OFile,"Membro7"), 0, strlen(DOF2_GetString(OFile,"Membro7")), 255);
		strmid(InfoOrg[idx][Membro8], DOF2_GetString(OFile,"Membro8"), 0, strlen(DOF2_GetString(OFile,"Membro8")), 255);
		strmid(InfoOrg[idx][Membro9], DOF2_GetString(OFile,"Membro9"), 0, strlen(DOF2_GetString(OFile,"Membro9")), 255);
		strmid(InfoOrg[idx][Membro10], DOF2_GetString(OFile,"Membro10"), 0, strlen(DOF2_GetString(OFile,"Membro10")), 255);
		strmid(InfoOrg[idx][Membro11], DOF2_GetString(OFile,"Membro11"), 0, strlen(DOF2_GetString(OFile,"Membro11")), 255);
		strmid(InfoOrg[idx][Membro12], DOF2_GetString(OFile,"Membro12"), 0, strlen(DOF2_GetString(OFile,"Membro12")), 255);
		strmid(InfoOrg[idx][Membro13], DOF2_GetString(OFile,"Membro13"), 0, strlen(DOF2_GetString(OFile,"Membro13")), 255);
		strmid(InfoOrg[idx][Membro14], DOF2_GetString(OFile,"Membro14"), 0, strlen(DOF2_GetString(OFile,"Membro14")), 255);
		strmid(InfoOrg[idx][Membro15], DOF2_GetString(OFile,"Membro15"), 0, strlen(DOF2_GetString(OFile,"Membro15")), 255);
		strmid(InfoOrg[idx][Membro16], DOF2_GetString(OFile,"Membro16"), 0, strlen(DOF2_GetString(OFile,"Membro16")), 255);
		strmid(InfoOrg[idx][Membro17], DOF2_GetString(OFile,"Membro17"), 0, strlen(DOF2_GetString(OFile,"Membro17")), 255);
		strmid(InfoOrg[idx][Membro18], DOF2_GetString(OFile,"Membro18"), 0, strlen(DOF2_GetString(OFile,"Membro18")), 255);
		strmid(InfoOrg[idx][Membro19], DOF2_GetString(OFile,"Membro19"), 0, strlen(DOF2_GetString(OFile,"Membro19")), 255);
		strmid(InfoOrg[idx][Membro20], DOF2_GetString(OFile,"Membro20"), 0, strlen(DOF2_GetString(OFile,"Membro20")), 255);
		strmid(InfoOrg[idx][PatenteName1], DOF2_GetString(OFile,"Patente1"), 0, strlen(DOF2_GetString(OFile,"Patente1")), 255);
		strmid(InfoOrg[idx][PatenteName2], DOF2_GetString(OFile,"Patente2"), 0, strlen(DOF2_GetString(OFile,"Patente2")), 255);
		strmid(InfoOrg[idx][PatenteName3], DOF2_GetString(OFile,"Patente3"), 0, strlen(DOF2_GetString(OFile,"Patente3")), 255);
		strmid(InfoOrg[idx][PatenteName4], DOF2_GetString(OFile,"Patente4"), 0, strlen(DOF2_GetString(OFile,"Patente4")), 255);
		strmid(InfoOrg[idx][PatenteName5], DOF2_GetString(OFile,"Patente5"), 0, strlen(DOF2_GetString(OFile,"Patente5")), 255);
        strmid(InfoOrg[idx][PatenteName6], DOF2_GetString(OFile,"Patente6"), 0, strlen(DOF2_GetString(OFile,"Patente6")), 255);
		idx ++;
	}
	printf("[Play Style] - %i Organizacoes carregadas", idx);

	return true;
}

forward LoadOrgsInfos();
public LoadOrgsInfos()
{
	new arquivo[50];
	new idx = 1;
	while (idx < sizeof(CofreOrg))
	{
		format(arquivo, sizeof(arquivo), PASTA_COFRE_ORGS, idx);
		CofreOrg[idx][Dinheiro] = DOF2_GetInt(arquivo,"Dinheiro");
		CofreOrg[idx][Materiais] = DOF2_GetInt(arquivo,"Materiais");
        CofreOrg[idx][Maconha] = DOF2_GetInt(arquivo,"Maconha");
        CofreOrg[idx][Cocaina] = DOF2_GetInt(arquivo,"Cocaina");
        CofreOrg[idx][Crack] = DOF2_GetInt(arquivo,"Crack");

        CofreOrg[idx][WEagle] = DOF2_GetInt(arquivo,"Eagle");
        CofreOrg[idx][WPistol] = DOF2_GetInt(arquivo,"Pistola");
        CofreOrg[idx][WShot] = DOF2_GetInt(arquivo, "ShotGun");
        CofreOrg[idx][WMP5] = DOF2_GetInt(arquivo,"MP5");
        CofreOrg[idx][WM4] = DOF2_GetInt(arquivo,"M4");
        CofreOrg[idx][WAK47] = DOF2_GetInt(arquivo,"AK47");
        CofreOrg[idx][WRifle] = DOF2_GetInt(arquivo,"Rifle");
        CofreOrg[idx][WGranada] = DOF2_GetInt(arquivo,"Granada");
        CofreOrg[idx][WColote] = DOF2_GetInt(arquivo,"Colete");

		CofreOrg[idx][salarioc1] = DOF2_GetInt(arquivo,"SalarioCargo1");
		CofreOrg[idx][salarioc2] = DOF2_GetInt(arquivo,"SalarioCargo2");
		CofreOrg[idx][salarioc3] = DOF2_GetInt(arquivo,"SalarioCargo3");
		CofreOrg[idx][salarioc4] = DOF2_GetInt(arquivo,"SalarioCargo4");
		CofreOrg[idx][salarioc5] = DOF2_GetInt(arquivo,"SalarioCargo5");
		CofreOrg[idx][salariolider] = DOF2_GetInt(arquivo,"SalarioLider");
		idx ++;
	}

	idx = 1;

	new OFile[50];
	while (idx < sizeof(InfoOrg2))
	{
	    format(OFile, sizeof(OFile), PASTA_CANDIDATOS, idx);
		strmid(InfoOrg2[idx][Candidato1], DOF2_GetString(OFile,"Candidato1"), 0, strlen(DOF2_GetString(OFile,"Candidato1")), 255);
		strmid(InfoOrg2[idx][Candidato2], DOF2_GetString(OFile,"Candidato2"), 0, strlen(DOF2_GetString(OFile,"Candidato2")), 255);
		strmid(InfoOrg2[idx][Candidato3], DOF2_GetString(OFile,"Candidato3"), 0, strlen(DOF2_GetString(OFile,"Candidato3")), 255);
		strmid(InfoOrg2[idx][Candidato4], DOF2_GetString(OFile,"Candidato4"), 0, strlen(DOF2_GetString(OFile,"Candidato4")), 255);
		strmid(InfoOrg2[idx][Candidato5], DOF2_GetString(OFile,"Candidato5"), 0, strlen(DOF2_GetString(OFile,"Candidato5")), 255);
		strmid(InfoOrg2[idx][Candidato6], DOF2_GetString(OFile,"Candidato6"), 0, strlen(DOF2_GetString(OFile,"Candidato6")), 255);
		strmid(InfoOrg2[idx][Candidato7], DOF2_GetString(OFile,"Candidato7"), 0, strlen(DOF2_GetString(OFile,"Candidato7")), 255);
		strmid(InfoOrg2[idx][Candidato8], DOF2_GetString(OFile,"Candidato8"), 0, strlen(DOF2_GetString(OFile,"Candidato8")), 255);
		strmid(InfoOrg2[idx][Candidato9], DOF2_GetString(OFile,"Candidato9"), 0, strlen(DOF2_GetString(OFile,"Candidato9")), 255);
		strmid(InfoOrg2[idx][Candidato10], DOF2_GetString(OFile,"Candidato10"), 0, strlen(DOF2_GetString(OFile,"Candidato10")), 255);
   		idx ++;
	}
	return true;
}

Public:SaveCofreOrg(idx){
	new CFile[50];
    format(CFile, sizeof(CFile), PASTA_COFRE_ORGS, idx);
    DOF2_SetInt(CFile,"Dinheiro", CofreOrg[idx][Dinheiro]);
	DOF2_SetInt(CFile,"Materiais", CofreOrg[idx][Materiais]);
    DOF2_SetInt(CFile,"Maconha", CofreOrg[idx][Maconha]);
    DOF2_SetInt(CFile,"Cocaina", CofreOrg[idx][Cocaina]);
    DOF2_SetInt(CFile,"Crack", CofreOrg[idx][Crack]);

    DOF2_SetInt(CFile,"Eagle", CofreOrg[idx][WEagle]);
    DOF2_SetInt(CFile,"Pistola", CofreOrg[idx][WPistol]);
    DOF2_SetInt(CFile,"ShotGun", CofreOrg[idx][WShot]);
    DOF2_SetInt(CFile,"MP5", CofreOrg[idx][WMP5]);
    DOF2_SetInt(CFile,"M4", CofreOrg[idx][WM4]);
    DOF2_SetInt(CFile,"AK47", CofreOrg[idx][WAK47]);
    DOF2_SetInt(CFile,"Rifle", CofreOrg[idx][WRifle]);
    DOF2_SetInt(CFile,"Granada", CofreOrg[idx][WGranada]);
    DOF2_SetInt(CFile,"Colete", CofreOrg[idx][WColote]);

	DOF2_SetInt(CFile,"SalarioCargo1", CofreOrg[idx][salarioc1]);
	DOF2_SetInt(CFile,"SalarioCargo2", CofreOrg[idx][salarioc2]);
	DOF2_SetInt(CFile,"SalarioCargo3", CofreOrg[idx][salarioc3]);
	DOF2_SetInt(CFile,"SalarioCargo4", CofreOrg[idx][salarioc4]);
	DOF2_SetInt(CFile,"SalarioCargo5", CofreOrg[idx][salarioc5]);
	DOF2_SetInt(CFile,"SalarioLider", CofreOrg[idx][salariolider]);
	DOF2_SaveFile();
	return true;
}

//SLog()
forward SLog(const File[], lstr[]);
public SLog(const File[], lstr[])
{
    static
		Filest[ 50 ],
		cells[200];

 	format(Filest, sizeof( Filest ), "/Logs/%s", File);
    format(cells, sizeof(cells), "%s\n", lstr);

    new File:Arquivo = fopen(Filest, io_append);
    fwrite(Arquivo, cells);
    fclose(Arquivo);
    return 1;
}

//ResetarArquivo()
ResetarArquivo(filename[])
{
    if(!fexist(filename)) return false;
    fremove(filename);
    new File:resetvar;
    resetvar=fopen(filename,io_write);
    fclose(resetvar);
    return true;
}

stock IPlog(playerid)
{
	new
	    stX[ 129 ],
	    File:IPFile
	;
	format(stX, sizeof( stX ), "[%s] IP: %s - %s[%d]", GetDateEx(), GetIPX(playerid), GetName(playerid), playerid);
	IPFile = fopen("/Logs/IP.log", io_append);
	fwrite(IPFile, stX);
	fclose(IPFile);
}


stock SetPlayerComplet(id, conquistas)
{
	switch(conquistas){
		/*case Novato: {

			ConquistasInfo[ id ] [ sNovato ] = 1;
		}*/
		case Motorista: {

			ConquistasInfo[ id ] [ sMotorista ] = 1;

		}
		case Trabalhador: {
			ConquistasInfo[ id ] [ sTrabalhador ] = 1;

		}
	}
	return true;

}

//SetPlayerSkinEx()
SetPlayerSkinEx(playerid, skinid)
{
    new vehicle, seat = GetPlayerVehicleSeat(playerid);
    if(seat != -1)
    {
        vehicle = GetPlayerVehicleID(playerid);
        ClearAnimations(playerid);
        SetPlayerSkin(playerid, skinid);
        PutPlayerInVehicle(playerid, vehicle, seat);
    }
    else SetPlayerSkin(playerid, skinid);
    return 1;
}



ActionEmpresaMoney(playerid, empid, const operador[], quantia)
{
    new resultado, vtotal;
    if(PlayerInfo[playerid][pVIP] == 1)
    {
        resultado = BONUS_EMP_VIP1 * quantia / 100;
        vtotal = quantia + resultado;
    }

    if(PlayerInfo[playerid][pVIP] == 2)
    {
        resultado = BONUS_EMP_VIP2 * quantia / 100;
        vtotal = quantia + resultado;
    }

    if(PlayerInfo[playerid][pVIP] >= 3)
    {
        resultado = BONUS_EMP_VIP3 * quantia / 100;
        vtotal = quantia + resultado;
    }

    if(strcmp(operador, "+", true) == 0)
    {
        EmpInfo[empid][EGrana] += vtotal;

    } else if(strcmp(operador, "-", true) == 0)
    {
        EmpInfo[empid][EGrana] -= quantia;

    }

    SaveEmpresa(empid);
	return true;
}

// Com Extorsao
ActionEmpresaMoneyEx(empid, const operador[], quantia){

	new Valor;
	Valor = (quantia/4);
	if(strcmp(operador, "+", true) == 0) EmpInfo[empid][EGrana] += Valor;
	else if(strcmp(operador, "-", true) == 0) EmpInfo[empid][EGrana] -= Valor;
	SaveEmpresa(empid);
	return true;
}

Public:SaveEmpresa(i){

	static EFile[ 50 ];

    format(EFile, sizeof(EFile), PASTA_EMPRESAS, i);

    if(DOF2_FileExists(EFile)){

        DOF2_SetString(EFile, "Dono", EmpInfo[i][EDono]);
        DOF2_SetString(EFile, "Socio", EmpInfo[i][ESocio]);
        DOF2_SetString(EFile, "Menssagem", EmpInfo[i][EMessage]);

	    DOF2_SetInt(EFile, "Estado", EmpInfo[i][EEstado]);
	    DOF2_SetInt(EFile, "Preco", EmpInfo[i][EPreco]);

	    DOF2_SetFloat(EFile, "LocalX", EmpInfo[i][ELocalX]);
	    DOF2_SetFloat(EFile, "LocalY", EmpInfo[i][ELocalY]);
	    DOF2_SetFloat(EFile, "LocalZ", EmpInfo[i][ELocalZ]);

	    DOF2_SetInt(EFile, "Trancada", EmpInfo[i][ELocked]);
	    DOF2_SetInt(EFile, "Level", EmpInfo[i][ELevel]);
	    DOF2_SetInt(EFile, "CustoEntrada", EmpInfo[i][ECEntrada]);
	    DOF2_SetInt(EFile, "Cofre", EmpInfo[i][EGrana]);
	    DOF2_SetInt(EFile, "Tipo", EmpInfo[i][EType]);
        DOF2_SetInt(EFile, "MapIcon", EmpInfo[i][EmpMapIcon]);
	    DOF2_SaveFile();
    }
    return true;
}


Public:LoadEmpresas(){

	static EFile[50], Count = 0;
	Loop(i, MAX_EMPRESAS)
    {
    	if(i != 0)
        {
		    format(EFile, sizeof(EFile), PASTA_EMPRESAS, i);
		    if(DOF2_FileExists(EFile))
            {

	            format(EmpInfo[i][EDono], MAX_PLAYER_NAME, "%s", DOF2_GetString(EFile, "Dono"));
	            format(EmpInfo[i][ESocio], MAX_PLAYER_NAME, "%s", DOF2_GetString(EFile, "Socio"));
	            format(EmpInfo[i][EMessage], 50, "%s", DOF2_GetString(EFile, "Menssagem"));

	            EmpInfo[i][EEstado] = DOF2_GetInt(EFile, "Estado");
	            EmpInfo[i][EPreco] = DOF2_GetInt(EFile, "Preco");

	            EmpInfo[i][ELocalX] = DOF2_GetFloat(EFile, "LocalX");
	            EmpInfo[i][ELocalY] = DOF2_GetFloat(EFile, "LocalY");
	            EmpInfo[i][ELocalZ] = DOF2_GetFloat(EFile, "LocalZ");

	            EmpInfo[i][ELocked] = DOF2_GetInt(EFile, "Trancada");
	            EmpInfo[i][ELevel] = DOF2_GetInt(EFile, "Level");
	            EmpInfo[i][ECEntrada] = DOF2_GetInt(EFile, "CustoEntrada");
	            EmpInfo[i][EGrana] = DOF2_GetInt(EFile, "Cofre");
	            EmpInfo[i][EType] = DOF2_GetInt(EFile, "Tipo");

	            EmpInfo[i][EmpMapIcon] = DOF2_GetInt(EFile, "MapIcon");
	            //EmpInfo[i][EmpPickup] = DOF2_GetInt(EFile, "Pickup");

	            EmpInfo[i][EEmpExist] = true;

	            CarregarEmpresa(i);
		        Count = i;
			}
		}
    }

	printf("[Play Style] - %i Empresas carregadas!", Count);

	return true;
}

CarregarEmpresa(id)
{
    new str[ 250 ], EFile[ 50 ];
	format(EFile, sizeof(EFile), PASTA_EMPRESAS, id);

    if(DOF2_FileExists(EFile))
    {
        if(EmpInfo[id][EType] == 1)
        {
            if(EmpInfo[id][EEstado] == 1)
            {
                format(str, sizeof(str), "{E9E9EB}%s\n{E9E9EB}Custo Entrada: {28A404}%i\n\n%s", EmpInfo[id][EMessage], EmpInfo[id][ECEntrada], EmpInfo[id][ELocked] == 1 ? ("{FF0000}Trancada"):("{28A404}Aberta"));

            }
			else
			{
			    format(str, sizeof(str), "{E9E9EB}[ {28A404}A VENDA {E9E9EB}]\n%s\n{E9E9EB}Custo Entrada: {28A404}%i\n{E9E9EB}Preco: {28A404}%s\n{E9E9EB}Level: {28A404}%i\n\n%s", EmpInfo[id][EMessage], EmpInfo[id][ECEntrada], FormatNumber(EmpInfo[id][EPreco]), EmpInfo[id][ELevel], EmpInfo[id][ELocked] == 1 ? ("{FF0000}Trancada"):("{28A404}Aberta"));
            }
            MapIconEmp[id] = CreateDynamicMapIcon(EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], EmpInfo[id][ELocalZ], EmpInfo[id][EmpMapIcon], -1);
            //EmpInfo[id][EmpLabel] = CreateDynamic3DTextLabel(str, 0xffffffff, EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], (EmpInfo[id][ELocalZ]+0.15), 25.0);
            EmpInfo[id][EmpLabel] = Create3DTextLabel(str, 0xffffffff, EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], (EmpInfo[id][ELocalZ]+0.15), 25.0, 0, 0);
            EmpInfo[id][EmpPickup] = CreateDynamicPickup(1279, 1, EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], EmpInfo[id][ELocalZ], 0);
            return 1;
		}

        if(EmpInfo[id][EType] >= 2 )
    	{
            if(EmpInfo[id][EEstado] == 1)
            {
    			format(str, sizeof(str), "{E9E9EB}%s\n{E9E9EB}Estado: %s", EmpInfo[id][EMessage], EmpInfo[id][ELocked] == 1 ? ("{FF0000}Trancada"):("{28A404}Aberta"));

                } else {

    			format(str, sizeof(str), "{E9E9EB}[ {28A404}A VENDA {E9E9EB}]\n%s\n{E9E9EB}Preco: {28A404}%s\n{E9E9EB}Level: {28A404}%i\n\n%s", EmpInfo[id][EMessage], FormatNumber(EmpInfo[id][EPreco]), EmpInfo[id][ELevel], EmpInfo[id][ELocked] == 1 ? ("{FF0000}Trancada"):("{28A404}Aberta"));
    		}
            MapIconEmp[id] = CreateDynamicMapIcon(EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], EmpInfo[id][ELocalZ], EmpInfo[id][EmpMapIcon], -1);
            //EmpInfo[id][EmpLabel] = CreateDynamic3DTextLabel(str, 0xffffffff, EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], (EmpInfo[id][ELocalZ]+0.15), 25.0);
            EmpInfo[id][EmpLabel] = Create3DTextLabel(str, 0xffffffff, EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], (EmpInfo[id][ELocalZ]+0.15), 25.0, 0, 0);
            EmpInfo[id][EmpPickup] = CreateDynamicPickup(1279, 1, EmpInfo[id][ELocalX], EmpInfo[id][ELocalY], EmpInfo[id][ELocalZ], 0);
            return 1;
        }
	}
	return true;
}

UpdateEmpresaLabel(i){

    new str[ 200 ], EFile[ 50 ];

 	format(EFile, sizeof(EFile), PASTA_EMPRESAS, i);

    if(DOF2_FileExists(EFile))
    {
        if(EmpInfo[i][EType] == 1)
        {

			if(EmpInfo[i][EEstado] == 1)
            {
				format(str, sizeof(str), "{E9E9EB}%s\n{E9E9EB}Custo Entrada: {28A404}%i\n\n%s", EmpInfo[i][EMessage], EmpInfo[i][ECEntrada], EmpInfo[i][ELocked] == 1 ? ("{FF0000}Fechado"): ("{11BD1A}Aberto"));
			}
			else
			{
			    format(str, sizeof(str), "{E9E9EB}[ {28A404}A VENDA {E9E9EB}]\n%s\n{E9E9EB}Custo Entrada: {28A404}%i\n{E9E9EB}Preco: {28A404}%s\n{E9E9EB}Level: {28A404}%i\n\n%s", EmpInfo[i][EMessage], EmpInfo[i][ECEntrada], FormatNumber(EmpInfo[i][EPreco]), EmpInfo[i][ELevel], EmpInfo[i][ELocked] == 1 ? ("{FF0000}Fechado"): ("{11BD1A}Aberto"));
			}
		}
		else
		{
            if(EmpInfo[i][EEstado] == 1){
				format(str, sizeof(str), "{E9E9EB}%s\n{E9E9EB}Estado: %s", EmpInfo[i][EMessage], EmpInfo[i][ELocked] == 1 ? ("{FF0000}Trancada"):("{28A404}Aberta"));
			}
			else
			{
			    format(str, sizeof(str), "{E9E9EB}[ {28A404}A VENDA {E9E9EB}]\n%s\n{E9E9EB}Preco: {28A404}%s\n{E9E9EB}Level: {28A404}%i\n\n%s", EmpInfo[i][EMessage], FormatNumber(EmpInfo[i][EPreco]), EmpInfo[i][ELevel], EmpInfo[i][ELocked] == 1 ? ("{FF0000}Fechado"): ("{11BD1A}Aberto"));
			}
		}
		Update3DTextLabelText(EmpInfo[ i ][EmpLabel], -1, str);
	}
	return true;
}

LoadGates()
{
	new
		Total,
		strpt[50]
	;
	Loop( GATE, MAX_GATES)
	{
	    format( strpt, sizeof( strpt), P_GATES, GATE);
		if(DOF2_FileExists( strpt) )
		{
	        format(GateInfo[GATE][Dono], 24, "%s", DOF2_GetString(strpt, "Dono"));
	        format(GateInfo[GATE][CopyKey1], 24, "%s", DOF2_GetString(strpt, "CopyKey1"));
	        format(GateInfo[GATE][CopyKey2], 24, "%s", DOF2_GetString(strpt, "CopyKey2"));
	        format(GateInfo[GATE][CopyKey3], 24, "%s", DOF2_GetString(strpt, "CopyKey3"));

		    GateInfo[GATE][Model] = DOF2_GetInt(strpt, "Model");
			GateInfo[GATE][IntID] = DOF2_GetInt(strpt, "IntID");
			GateInfo[GATE][Id2] = DOF2_GetInt(strpt, "Id2");
			GateInfo[GATE][SDono] = DOF2_GetInt(strpt, "SDono");
			GateInfo[GATE][Speed] = DOF2_GetInt(strpt, "Speed");
			GateInfo[GATE][fPosX] = DOF2_GetFloat(strpt, "fPosX");
			GateInfo[GATE][fPosY] = DOF2_GetFloat(strpt, "fPosY");
			GateInfo[GATE][fPosZ] = DOF2_GetFloat(strpt, "fPosZ");
			GateInfo[GATE][fPosRX] = DOF2_GetFloat(strpt, "fPosRX");
			GateInfo[GATE][fPosRY] = DOF2_GetFloat(strpt, "fPosRY");
			GateInfo[GATE][fPosRZ] = DOF2_GetFloat(strpt, "fPosRZ");
			GateInfo[GATE][aPosX] = DOF2_GetFloat(strpt, "aPosX");
			GateInfo[GATE][aPosY] = DOF2_GetFloat(strpt, "aPosY");
			GateInfo[GATE][aPosZ] = DOF2_GetFloat(strpt, "aPosZ");
			GateInfo[GATE][aPosRX] = DOF2_GetFloat(strpt, "aPosRX");
			GateInfo[GATE][aPosRY] = DOF2_GetFloat(strpt, "aPosRY");
			GateInfo[GATE][aPosRZ] = DOF2_GetFloat(strpt, "aPosRZ");

			CriarGate(GATE);
			Total = GATE+1;
		}
	}
	return printf("[Play Style] - %i Portoes carregados!", Total);
}


CriarGate(id)
{
    new str[100];
	if(proxgate <= MAX_GATES)
	{
		new portaoid;
		if(GateInfo[id][SDono] == 0 || GateInfo[id][SDono] == 1 )
		{
			portaoid = CreateDynamicObject(GateInfo[id][Model], GateInfo[id][fPosX], GateInfo[id][fPosY], GateInfo[id][fPosZ], GateInfo[id][fPosRX], GateInfo[id][fPosRY], GateInfo[id][fPosRZ], -1, -1, -1, 200.0);

            format(str, sizeof(str), "Portao id:%d\nDono:%s", id, GateInfo[id][SDono]);
            //GateInfo[id][gText] = CreateDynamic3DTextLabel(str, 0xffffffff, GateInfo[id][fPosX], GateInfo[id][fPosY], GateInfo[id][fPosZ]+1, 25);
            GateInfo[id][gText] = Create3DTextLabel(str, 0xffffffff, GateInfo[id][fPosX], GateInfo[id][fPosY], GateInfo[id][fPosZ]+1, 25.0, 0, 0);


			GateInfo[id][Id2] = portaoid;
			proxgate++;
		}
		else
		{
            GateInfo[id][SDono] = 3;
            GateInfo[id][Id2] = INVALID_OBJECT_ID;
			proxgate++;
		}
	}
	else printf("[Play Style] - O Numero de portoes foi atingido %i", proxgate);
	return true;
}

unloadGates(){
	Loop(p_@, MAX_GATES)
	{
		if(DOF2_FileExists(FileGate(p_@)))
		{
            SavingGate(p_@);
			if(GateInfo[p_@][SDono] != 3 )
			{
				DestroyDynamicObject( GateInfo[p_@][Id2] );
			}
		}
	}
	proxgate = 0;
}

PlayerCreateGate( playerid, modelo, Float:Xp, Float:Yp, Float:Zp, Int){

	new gid, stx_[129], str[100];

    if(!(modelo == 969 || modelo == 971 || modelo == 980) ) return ErroMSG(playerid, "Use um modelo Padrao! | Modelos: 969, 971, 980");

    for(new sK = 0; sK < MAX_GATES; sK++)
	{
	    if(DOF2_FileExists(FileGate(sK)))
		{
			if(GateInfo[sK][SDono] == 3)
			{
                GateInfo[sK][Model] = modelo;

                GateInfo[sK][fPosX] = GateInfo[sK][aPosX] = Xp;
                GateInfo[sK][fPosY] = GateInfo[sK][aPosY] = Yp;
                GateInfo[sK][fPosZ] = GateInfo[sK][aPosZ] = Zp;
                GateInfo[sK][fPosRX] = GateInfo[sK][aPosRX] = 0.0000;
                GateInfo[sK][fPosRY] = GateInfo[sK][aPosRY] = 0.0000;
                GateInfo[sK][fPosRZ] = GateInfo[sK][aPosRZ] = 0.0000;

                GateInfo[sK][Speed] = 4;
                GateInfo[sK][IntID] = Int;

				gid = CreateDynamicObject(modelo, Xp+5, Yp-5, Zp, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0);

                format(str, sizeof(str), "Portao id:%d\nDono:%s", sK, GateInfo[sK][SDono]);
                //GateInfo[sK][gText] = CreateDynamic3DTextLabel(str, 0xffffffff, GateInfo[sK][fPosX], GateInfo[sK][fPosY], GateInfo[sK][fPosZ]+1, 25);
                GateInfo[sK][gText] = Create3DTextLabel(str, 0xffffffff, GateInfo[sK][fPosX], GateInfo[sK][fPosY], GateInfo[sK][fPosZ]+1, 25.0, 0, 0);

				GateInfo[sK][Id2] = gid;
				GateInfo[sK][SDono] = 0;

				format(GateInfo[sK][Dono], 24, "Ninguem");
				format(GateInfo[sK][CopyKey1], 24, "Ninguem");
				format(GateInfo[sK][CopyKey2], 24, "Ninguem");
				format(GateInfo[sK][CopyKey3], 24, "Ninguem");

				SetPVarInt( playerid, "PastID", sK);
				SetPVarInt( playerid, "GateEdit2", GateInfo[sK][Id2] );

				GateID[ playerid ] = modelo;
				ShowIndexFor( playerid );
				format(stx_, sizeof(stx_), "{64FF6B}| INFO | - Portao re-criado. Modelo ID: %d, ID Portao: %d estava em estado 'Deletado'", modelo, sK);
				SendClientMessageToAll(-1, stx_);

				format(STRLOG, sizeof(STRLOG), "[%s] %s re-criou o portao id: %i, modelo: %i", GetDateEx(), GetNameEx(playerid), sK, modelo);
				SLog("Portao.log", STRLOG);

                SavingGate( sK );
				return true;
			}
		}
	}
	if(proxgate >= MAX_GATES-1){
		format(stx_, sizeof(stx_), "O limite de %d portoes foi atingido, nao e possivel criar mais.", MAX_GATES);
		ErroMSG( playerid, stx_);
		return true;
	}

	if(DOF2_FileExists(FileGate(proxgate) )){
		proxgate++;
		format(STRLOG, sizeof(STRLOG), "[%s] Bug no sistema de portao", GetDateEx());
		SLog("Portao.log", STRLOG);
	}


	GateInfo[proxgate][Model] = modelo;

    GateInfo[proxgate][fPosX] = GateInfo[proxgate][aPosX] = Xp;
    GateInfo[proxgate][fPosY] = GateInfo[proxgate][aPosY] = Yp;
    GateInfo[proxgate][fPosZ] = GateInfo[proxgate][aPosZ] = Zp;
    GateInfo[proxgate][fPosRX] = GateInfo[proxgate][aPosRX] = 0.0000;
    GateInfo[proxgate][fPosRY] = GateInfo[proxgate][aPosRY] = 0.0000;
    GateInfo[proxgate][fPosRZ] = GateInfo[proxgate][aPosRZ] = 0.0000;

    GateInfo[proxgate][Speed] = 4;
    GateInfo[proxgate][IntID] = Int;

	gid = CreateDynamicObject(modelo, Xp+5, Yp-5, Zp, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0);

    format(str, sizeof(str), "Portao id:%d\nDono:%s", proxgate, GateInfo[proxgate][SDono]);
    //GateInfo[proxgate][gText] = CreateDynamic3DTextLabel(str, 0xffffffff, GateInfo[proxgate][fPosX], GateInfo[proxgate][fPosY], GateInfo[proxgate][fPosZ]+1, 25);
    GateInfo[proxgate][gText] = Create3DTextLabel(str, 0xffffffff, GateInfo[proxgate][fPosX], GateInfo[proxgate][fPosY], GateInfo[proxgate][fPosZ]+1, 25.0, 0, 0);

	GateInfo[proxgate][Id2] = gid;
	GateInfo[proxgate][SDono] = 0;

	format(GateInfo[proxgate][Dono], 24, "Ninguem");
	format(GateInfo[proxgate][CopyKey1], 24, "Ninguem");
	format(GateInfo[proxgate][CopyKey2], 24, "Ninguem");
	format(GateInfo[proxgate][CopyKey3], 24, "Ninguem");

	SetPVarInt( playerid, "PastID", proxgate);
	SetPVarInt( playerid, "GateEdit2", GateInfo[proxgate][Id2] );

	GateID[ playerid ] = modelo;

    SavingGate(proxgate);

	ShowIndexFor( playerid );
	format(stx_, sizeof(stx_), "{64FF6B}| INFO | - Portao criado. informacoes: Modelo ID: %d, Portao ID: %d", modelo, proxgate);
	SendClientMessage(playerid, -1, stx_);

    format(STRLOG, sizeof(STRLOG), "[%s] %s criou o portao id: %i, modelo: %i", GetDateEx(), GetNameEx(playerid), proxgate, modelo);
	SLog("Portao.log", STRLOG);

    proxgate++;
	return true;
}

stock SavingGate(gateid)
{
    new	GateFile[50];
	format( GateFile, sizeof( GateFile ), P_GATES, gateid);
	if(!DOF2_FileExists( GateFile) )
	{
		DOF2_CreateFile(GateFile);
	}
    DOF2_SetInt(GateFile, "Model", GateInfo[gateid][Model]);
	DOF2_SetFloat(GateFile, "fPosX", GateInfo[gateid][fPosX]);
	DOF2_SetFloat(GateFile, "fPosY", GateInfo[gateid][fPosY]);
	DOF2_SetFloat(GateFile, "fPosZ", GateInfo[gateid][fPosZ]);
	DOF2_SetFloat(GateFile, "fPosRX", GateInfo[gateid][fPosRX]);
	DOF2_SetFloat(GateFile, "fPosRY", GateInfo[gateid][fPosRY]);
	DOF2_SetFloat(GateFile, "fPosRZ", GateInfo[gateid][fPosRZ]);
	DOF2_SetFloat(GateFile, "aPosX", GateInfo[gateid][aPosX]);
	DOF2_SetFloat(GateFile, "aPosY", GateInfo[gateid][aPosY]);
	DOF2_SetFloat(GateFile, "aPosZ", GateInfo[gateid][aPosZ]);
	DOF2_SetFloat(GateFile, "aPosRX", GateInfo[gateid][aPosRX]);
	DOF2_SetFloat(GateFile, "aPosRY", GateInfo[gateid][aPosRY]);
	DOF2_SetFloat(GateFile, "aPosRZ", GateInfo[gateid][aPosRZ]);
	DOF2_SetInt(GateFile, "Speed", GateInfo[gateid][Speed]);
	DOF2_SetInt(GateFile, "IntID", GateInfo[gateid][IntID]);

 	DOF2_SetInt(GateFile, "Id2",  GateInfo[gateid][Id2]);
	DOF2_SetInt(GateFile, "SDono", GateInfo[gateid][SDono]);

	DOF2_SetString(GateFile, "Dono", GateInfo[gateid][Dono]);
	DOF2_SetString(GateFile, "CopyKey1", GateInfo[gateid][CopyKey1]);
	DOF2_SetString(GateFile, "CopyKey2", GateInfo[gateid][CopyKey2]);
	DOF2_SetString(GateFile, "CopyKey3", GateInfo[gateid][CopyKey3]);

	DOF2_SaveFile();
	return 1;
}


forward ShowIndexFor( playerid );
public ShowIndexFor( playerid ) return ShowPlayerDialog( playerid, Index, DIALOG_STYLE_LIST, "{33AA33}..:: {FFFFFF}SK Gates Editor {33AA33}::..", "Modelo ID\nEditar Pos\nVelocidade Abrir/Fechar\nSalvar Portao\nDeletar Portao", "OK", "Cancelar");

AtualizeObject( playerid ){
    new Objectid = GetPVarInt( playerid, "GateEdit2");
    GetDynamicObjectPos( Objectid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    GetDynamicObjectRot( Objectid, Rot[ 0 ], Rot[ 1 ], Rot[ 2 ] );
    DestroyDynamicObject( Objectid );
	Objectid = CreateDynamicObject(GateID[ playerid ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], Rot[ 0 ], Rot[ 1 ], Rot[ 2 ], -1, -1, -1, 200.0);
}

IsPlayerOwners( playerid, gateid ){

	if( strcmp( GateInfo[gateid][Dono], GetName( playerid ), false) == 0 ||
	strcmp( GateInfo[gateid][CopyKey1], GetName( playerid ), false) == 0 ||
	strcmp( GateInfo[gateid][CopyKey2], GetName( playerid ), false) == 0 ||
	strcmp( GateInfo[gateid][CopyKey3], GetName( playerid ), false) == 0 ||
	PlayerInfo[playerid][pAdmin] >= comando_portoes ){
        return true;
    }
    return 0;
}

FileGate(gateid){
    new gFile[25];
    format(gFile, 25, P_GATES, gateid);
	return gFile;
}

Public:SaveHouse(i)
{
	if(HouseInfo[i][hExist] == true)
	{
		new HFile[ 100 ];
	    format(HFile, sizeof(HFile), PASTA_HOUSES, i);

		if(!DOF2_FileExists(HFile)) DOF2_CreateFile(HFile);

		DOF2_SetString(HFile, "Dono", HouseInfo[i][hOwner]);
	    DOF2_SetFloat(HFile, "EntranceX", HouseInfo[i][hEntranceX]);
	    DOF2_SetFloat(HFile, "EntranceY", HouseInfo[i][hEntranceY]);
	    DOF2_SetFloat(HFile, "EntranceZ", HouseInfo[i][hEntranceZ]);
	    DOF2_SetFloat(HFile, "ExitX", HouseInfo[i][hExitX]);
	    DOF2_SetFloat(HFile, "ExitY", HouseInfo[i][hExitY]);
	    DOF2_SetFloat(HFile, "ExitZ", HouseInfo[i][hExitZ]);
	    DOF2_SetFloat(HFile, "SpawnX", HouseInfo[i][hSpawnX]);
	    DOF2_SetFloat(HFile, "SpawnY", HouseInfo[i][hSpawnY]);
	    DOF2_SetFloat(HFile, "SpawnZ", HouseInfo[i][hSpawnZ]);
	    DOF2_SetFloat(HFile, "SpawnA", HouseInfo[i][hSpawnA]);
	    DOF2_SetInt(HFile, "Interior", HouseInfo[i][hInterior]);
	    DOF2_SetInt(HFile, "World", HouseInfo[i][hWorld]);
	    DOF2_SetInt(HFile, "Status", HouseInfo[i][hOwned]);
	    DOF2_SetInt(HFile, "Price", HouseInfo[i][hPrice]);
		DOF2_SetBool(HFile, "HouseVip", HouseInfo[i][hVipHouse]);

	    DOF2_SetInt(HFile, "Locked", HouseInfo[i][hLocked]);
	    DOF2_SaveFile();
	}
	return 1;
}

Public:SaveHouses()
{
	Loop(i, MAX_HOUSES){
		if(!HouseInfo[i][hExist]) continue;
		SaveHouse( i );
	}
    return 1;
}

Public:LoadHouses()
{
    static HFile[ 80 ];

	Loop(i, MAX_HOUSES)
    {
        format(HFile, sizeof( HFile ), PASTA_HOUSES, i);
		if(DOF2_FileExists( HFile )){

		    format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, "%s", DOF2_GetString(HFile, "Dono"));

		    HouseInfo[i][hEntranceX] = DOF2_GetFloat(HFile, "EntranceX");
		    HouseInfo[i][hEntranceY] = DOF2_GetFloat(HFile, "EntranceY");
		    HouseInfo[i][hEntranceZ] = DOF2_GetFloat(HFile, "EntranceZ");
		    HouseInfo[i][hExitX] = DOF2_GetFloat(HFile, "ExitX");
		    HouseInfo[i][hExitY] = DOF2_GetFloat(HFile, "ExitY");
		    HouseInfo[i][hExitZ] = DOF2_GetFloat(HFile, "ExitZ");
		    HouseInfo[i][hSpawnX] = DOF2_GetFloat(HFile, "SpawnX");
		    HouseInfo[i][hSpawnY] = DOF2_GetFloat(HFile, "SpawnY");
		    HouseInfo[i][hSpawnZ] = DOF2_GetFloat(HFile, "SpawnZ");
		    HouseInfo[i][hSpawnA] = DOF2_GetFloat(HFile, "SpawnA");

		    HouseInfo[i][hInterior] = DOF2_GetInt(HFile, "Interior");
		    HouseInfo[i][hOwned] = DOF2_GetInt(HFile, "Status");
		    HouseInfo[i][hPrice] = DOF2_GetInt(HFile, "Price");
		    HouseInfo[i][hLocked] = DOF2_GetInt(HFile, "Locked");
		    HouseInfo[i][hWorld] = DOF2_GetInt(HFile, "World");

			HouseInfo[i][hVipHouse] = DOF2_GetBool(HFile, "HouseVip");

		    HouseInfo[i][hExist] = true;

	        LoadHouseID( i );

	        proxhouse = (i+1);
		}
    }
    if(proxhouse < MAX_HOUSES)
        printf("[Play Style] - %i Casas carregadas.", proxhouse);
	else
	{
        format(STRLOG, sizeof(STRLOG), "[%s] Limite de %i de casas atingido.", GetDateEx(), MAX_HOUSES);
		SLog("LimitesServidor.log", STRLOG);

	    printf("O Limite de casas foi Atingido %i/%i", proxhouse, MAX_HOUSES);
	}
    return 1;
}

//LoadHouseID()
LoadHouseID( i )
{
	new str[ 150 ];
	if(HouseInfo[i][hOwned] != 3)
    {
		if(HouseInfo[i][hOwned] == 0)
        {
			format(str , sizeof( str ), "[ A VENDA ]\n\nCasa N: %i\nTipo: %s\nPreco: R$ %s \n/casa", i, HouseInfo[i][hVipHouse] == true ? ("Vip"):("Normal"), FormatNumber(HouseInfo[i][hPrice]));

			HousePickup[i] = CreateDynamicPickup(1273, 1, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ],0);

            //HouseLabel[i] = CreateDynamic3DTextLabel(str, 0xFFFFFF99, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], (HouseInfo[i][hEntranceZ]+0.75), 20.0);
            //HouseIcon[i] = CreateDynamicMapIcon(HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], 31, -1);
		}
		else if(HouseInfo[i][hOwned] == 1)
	    {
		 	format(str , sizeof( str ), "Casa N: %i\nDono: %s", i, HouseInfo[i][hOwner]);

		 	if(HouseInfo[i][hVipHouse])
            {
	        	HousePickup[i] = CreateDynamicPickup(19523, 1, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ],0);
			}
			else HousePickup[i] = CreateDynamicPickup(1272, 1, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ],0);
			//HouseLabel[i] = CreateDynamic3DTextLabel(str, 0xFFFFFF99, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], (HouseInfo[i][hEntranceZ]+0.75), 20.0);
            //HouseLabel[i] = Create3DTextLabel(str, 0xFFFFFF99, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], (HouseInfo[i][hEntranceZ]+0.75), 20.0, 0, 0);
		}


        //HouseLabel[i] = CreateDynamic3DTextLabel(str, 0xFFFFFF99, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], (HouseInfo[i][hEntranceZ]+0.75), 20.0);
        HouseLabel[i] = Create3DTextLabel(str, 0xFFFFFF99, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], (HouseInfo[i][hEntranceZ]+0.75), 20.0, 0, 0);
	}
	return true;
}

CreateNewHouse(playerid, Float:X, Float:Y, Float:Z, price, interior, casavip=0)
{
    static HFile[ 100 ];

	Loop(casaid, MAX_HOUSES)
    {
		if(HouseExist(casaid))
        {
		    if(HouseInfo[casaid][hOwned] == 3)
            {
				HouseInfo[casaid][hPrice] = price;

				if(casavip){
					HouseInfo[casaid][hVipHouse] = true;
				}
				else HouseInfo[casaid][hVipHouse] = false;

				HouseInfo[casaid][hEntranceX] = X;
				HouseInfo[casaid][hEntranceY] = Y;
				HouseInfo[casaid][hEntranceZ] = Z;
			    HouseInfo[casaid][hLocked] = 1;
			    HouseInfo[casaid][hWorld] = (casaid+1);
			    HouseInfo[casaid][hOwned] = 0;
			    HouseInfo[casaid][hExist] = true;

				strmid(HouseInfo[casaid][hOwner], "Ninguem", 0, strlen("Ninguem"), 255);

                SetHouseExit(casaid, InteriorHouse[interior][ h_Int ], InteriorHouse[interior][ h_Px ], InteriorHouse[interior][ h_Py ], InteriorHouse[interior][ h_Pz ], InteriorHouse[interior][ h_Sx ], InteriorHouse[interior][ h_Sy ], InteriorHouse[interior][ h_Sz ], InteriorHouse[interior][ h_Sa ]);

				SaveHouse(casaid);

				format(strx, sizeof(strx), "ID: %i | Preco: %d | Interior: %d | Vip: %s | Local: %s", casaid, price, interior, casavip != 0 ? ("Casa VIP"):("Casa comum"), GetAreaForCords(X,Y,Z));
		    	SendClientMessage(playerid, Purple, strx);

                format(STRLOG, sizeof(STRLOG), "[%s] Admin %s re-criou uma casa de | ID: %i | valor %d | Interior %d | Vip: %s | Posicao: %f, %f, %f.", GetDateEx(), GetName(playerid), casaid, price, interior, casavip != 0 ? ("Casa VIP"):("Casa comum"), X,Y,Z);
		    	SLog("AdminCMD.log", STRLOG);

		    	PlaySoundForPlayer( playerid, 1149);

                new str[110];
                format(str , sizeof( str ), "[ A VENDA ]\n\nCasa N: %i\nTipo: %s\nPreco: R$ %s\n/casa", proxhouse, HouseInfo[proxhouse][hVipHouse] == true ? ("Vip"):("Normal"), FormatNumber(HouseInfo[proxhouse][hPrice]));

                HousePickup[proxhouse] = CreateDynamicPickup(1273, 1, HouseInfo[proxhouse][hEntranceX],HouseInfo[proxhouse][hEntranceY],HouseInfo[proxhouse][hEntranceZ],0);
                HouseLabel[proxhouse] = Create3DTextLabel(str, 0xFFFFFF99, HouseInfo[proxhouse][hEntranceX], HouseInfo[proxhouse][hEntranceY], (HouseInfo[proxhouse][hEntranceZ]+0.75), 20.0, 0, 0);
                //HouseIcon[proxhouse] = CreateDynamicMapIcon(HouseInfo[proxhouse][hEntranceX], HouseInfo[proxhouse][hEntranceY], HouseInfo[proxhouse][hEntranceZ], 31, -1);

            	return true;
			}
		}
	}

	if(proxhouse+1 >= MAX_HOUSES) return ErroMSG(playerid, "O Limite de casas do servidor foi atingido!");

	format(HFile, sizeof(HFile), PASTA_HOUSES, proxhouse);
	DOF2_CreateFile(HFile);

    HouseInfo[proxhouse][hPrice] = price;

	if(casavip) {
		HouseInfo[proxhouse][hVipHouse] = true;
	}
	else HouseInfo[proxhouse][hVipHouse] = false;

	HouseInfo[proxhouse][hEntranceX] = X;
	HouseInfo[proxhouse][hEntranceY] = Y;
	HouseInfo[proxhouse][hEntranceZ] = Z;
    HouseInfo[proxhouse][hLocked] = 1;
    HouseInfo[proxhouse][hOwned] = 0;
    HouseInfo[proxhouse][hWorld] = (proxhouse+1);
    HouseInfo[proxhouse][hExist] = true;
	strmid(HouseInfo[proxhouse][hOwner], "Ninguem", 0, strlen("Ninguem"), 255);


    new str[110];
    format(str , sizeof( str ), "[ A VENDA ]\n\nCasa NÂ° %i\nTipo: %s\nPreco: R$ %s\n/casa", proxhouse, HouseInfo[proxhouse][hVipHouse] == true ? ("Vip"):("Normal"), FormatNumber(HouseInfo[proxhouse][hPrice]));

    HousePickup[proxhouse] = CreateDynamicPickup(1273, 1, HouseInfo[proxhouse][hEntranceX],HouseInfo[proxhouse][hEntranceY],HouseInfo[proxhouse][hEntranceZ],0);
    HouseLabel[proxhouse] = Create3DTextLabel(str, 0xFFFFFF99, HouseInfo[proxhouse][hEntranceX], HouseInfo[proxhouse][hEntranceY], (HouseInfo[proxhouse][hEntranceZ]+0.75), 20.0, 0, 0);
    //HouseIcon[proxhouse] = CreateDynamicMapIcon(HouseInfo[proxhouse][hEntranceX], HouseInfo[proxhouse][hEntranceY], HouseInfo[proxhouse][hEntranceZ], 31, -1);

    SetHouseExit(proxhouse, InteriorHouse[interior][ h_Int ], InteriorHouse[interior][ h_Px ], InteriorHouse[interior][ h_Py ], InteriorHouse[interior][ h_Pz ], InteriorHouse[interior][ h_Sx ], InteriorHouse[interior][ h_Sy ], InteriorHouse[interior][ h_Sz ], InteriorHouse[interior][ h_Sa ]);

    //LoadHouseID(proxhouse);
	SaveHouse(proxhouse);

	SendClientMessage(playerid, Purple, "[Play Style] - Casa Criada com sucesso !");
	format(strx, sizeof(strx), "ID: %i | Preco: %d | Interior: %d | Vip: %s | Local: %s", proxhouse, price, interior, casavip != 0 ? ("Casa VIP"):("Casa comum"), GetAreaForCords(X,Y,Z));
	SendClientMessage(playerid, Purple, strx);
	format(STRLOG, sizeof(STRLOG), "[%s] Admin %s criou uma casa de | Id: %i | valor %d | Interior %d | Vip: %s | Posicao: %f, %f, %f.", GetDateEx(), GetName(playerid), proxhouse, price, interior, casavip != 0 ? ("Casa VIP"):("Casa comum"), X,Y,Z);
	SLog("AdminCMD.log", STRLOG);
    proxhouse++;

	PlaySoundForPlayer( playerid, 1149);
	return 1;
}

Public:SetHouseExit(id, interiorid, Float:X, Float:Y, Float:Z, Float:Sx, Float:Sy, Float:Sz, Float:Sa)
{
    HouseInfo[id][hExitX] = X;
    HouseInfo[id][hExitY] = Y;
    HouseInfo[id][hExitZ] = Z;
    HouseInfo[id][hSpawnX] = Sx;
    HouseInfo[id][hSpawnY] = Sy;
    HouseInfo[id][hSpawnZ] = Sz;
    HouseInfo[id][hSpawnA] = Sa;
    HouseInfo[id][hInterior] = interiorid;
    return 1;
}

Public:HouseExist(houseid) {
	static hFile[ 80 ];
    format(hFile, sizeof( hFile ), PASTA_HOUSES, houseid);
	if(DOF2_FileExists( hFile )) return true;
	return false;
}

IniciarCompraVeiculoTerrestre( playerid )
{

    MenuConceType[ playerid ] = 1;

    if(VeiculoConce[ playerid ] != INVALID_VEHICLE_ID) DestroyVehicle(VeiculoConce[ playerid ]); //2126.834716,-1161.488403,29.589717,32.282352

    VeiculoConce[ playerid ] = CreateVehicle(ConceTerrestreVeiculos[0][c_model], 2126.834716,-1161.488403,29.589717,32.282352, -1, -1, 100);
    SetVehicleVirtualWorld(VeiculoConce[ playerid ], (playerid+1));

    SetPlayerPosEx(playerid, 2113.339843,-1164.136108,29.862644,99.796760, 0, (playerid+1));
    SetPlayerCameraPos(playerid, 2115.355224,-1163.256713,29.862644);
    SetPlayerCameraLookAt(playerid, 2119.756103,-1162.585327,29.862644);
	Freeze( playerid );

    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);

    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);

    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

    static TextStr[ 100 ], TypeV[ 10 ];

    if(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level] != 100) // 100 por ser um level improvavel e servira como type vip
    {
        format(TypeV, 10, "%i", ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_level]);
    }
    else format(TypeV, 10, "~g~VIP");

    format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%i~n~~g~$ ~w~%s~n~%s", SkVeh[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_model]-400], ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_consumo],
    FormatNumber(ConceTerrestreVeiculos[CurrentVehicle[ playerid ]][c_preco]), TypeV);
    TextDrawSetString(ConceMenu[ playerid ][ 2 ], TextStr);

    CurrentVehicle[ playerid ] = 0;

    SelectTextDraw(playerid, 0xFA6B6BAA);
	return 1;
}

IniciarCompraBike( playerid )
{
    MenuConceType[ playerid ] = 2;

    if(VeiculoConce[ playerid ] != INVALID_VEHICLE_ID) DestroyVehicle(VeiculoConce[ playerid ]);


    VeiculoConce[ playerid ] = CreateVehicle(ConceTerrestreBikes[0][c_model], 2126.834716,-1161.488403,29.589717,32.282352, -1, -1, 100);
    SetVehicleVirtualWorld(VeiculoConce[ playerid ], (playerid+1));

    SetPlayerPosEx(playerid, 2113.339843,-1164.136108,29.862644,99.796760, 0, (playerid+1));
    SetPlayerCameraPos(playerid, 2115.355224,-1163.256713,29.862644);
    SetPlayerCameraLookAt(playerid, 2119.756103,-1162.585327,29.862644);
	Freeze( playerid );

	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 0 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 1 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 2 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 3 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 4 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 5 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 6 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 7 ]);
	TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 8 ]);
    TextDrawShowForPlayer(playerid, ConceMenu[ playerid ][ 9 ]);

	static TextStr[ 100 ], TypeV[ 10 ], TypeC[ 10 ];

	if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level] != 100) // 100 por ser um level improvavel e servira como type vip
	{
	    format(TypeV, 10, "%i", ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_level]);
	}
	else format(TypeV, 10, "~g~VIP");

	if(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo] != 0) // 0 por ser uma bicicleta
	{
	    format(TypeC, 10, "%i", ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_consumo]);
	}
	else format(TypeC, 10, "~g~Sem Consumo");

	format(TextStr, sizeof TextStr, "~w~%s~n~%i~n~%s~n~~g~$ ~w~%s~n~%s", SkVeh[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], VeiculosMaxSpeed[ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_model]-400], TypeC,
	FormatNumber(ConceTerrestreBikes[CurrentVehicle[ playerid ]][c_preco]), TypeV);
    TextDrawSetString(ConceMenu[ playerid ][ 2 ], TextStr);

	CurrentVehicle[ playerid ] = 0;

    SelectTextDraw(playerid, 0xFA6B6BAA);

	return true;
}
/*
SlotVeiculo( id )
{
    if(PlayerInfo[id][pVehKey1] == INVALID_VEHICLE_CONCE) return true;
	if(PlayerInfo[id][pVehKey2] == INVALID_VEHICLE_CONCE) return true;
	if(PlayerInfo[id][pVehKey3] == INVALID_VEHICLE_CONCE) return true;
	if(IsAVip(id))
    {
    	if(PlayerInfo[id][pVehKey4] == INVALID_VEHICLE_CONCE) return true;
		if(PlayerInfo[id][pVehKey5] == INVALID_VEHICLE_CONCE) return true;
	}
	return false;
}
*/
Public:DesligarAlarmeCar(vehicleid) {
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(JFSID[vehicleid], engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(JFSID[vehicleid], engine, lights, true, doors, bonnet, boot, objective);
    return 1;
}

ShowMenuTuning( playerid )
{
    Freeze( playerid );
    fadeIn( playerid, 900);
	SetTimerEx("Fader", 2000, false, "i", playerid);
	SetTimerEx("TuningCar", 1000, false, "i", playerid);
	return true;
}

ShowDialogTunar(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_TUNAR, DIALOG_STYLE_LIST, "TUNNING","Cores\nNitro\nRodas\nSom\nSuspensao\nAlarme\nNeon\nLocalizador GPS", "Selecionar", "Voltar");
    return 1;
}

ShowDialogTunarRodas(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_TUNAR_RODAS, DIALOG_STYLE_LIST, "TUNNING", "Import\nAtomic\nMega\nShadow\nGrove\nDollar\nTwist\nCutter\nRimshine\nWires\nClassic\nSwitch", "Confirmar", "Voltar" );
    return 1;
}

Public:TuningCar( playerid )
{
    TuningVehicleID[ playerid ] = GetPlayerVehicleID( playerid );
	RodaOriginal[ playerid ] = GetVehicleComponentInSlot(TuningVehicleID[ playerid ], CARMODTYPE_WHEELS);

    SetPlayerCameraPos(playerid, 1649.5869, -1834.7421, 15.5671);
	SetPlayerCameraLookAt(playerid, 1650.3724, -1834.1183, 15.3919);

	SetPlayerPosEx( playerid, 1646.37610, -1835.61499, 13.38034, 0.0, 0, (playerid+1));

	SetVehiclePosEx(TuningVehicleID[ playerid ], 1655.9644, -1830.2169, 14.7930, 89.7710, 0, (playerid+1));
	SetVehicleEngineState(TuningVehicleID[ playerid ], 0);

    if(PlayerInfo[playerid][Mobile] == true)
    {
        ShowDialogTunar(playerid);

        } else {

        ShowMenuForPlayer(MenuTuning, playerid);
    }
	return true;
}


/* ==============================================================================

						Sistema de Raspadinha Premiada

================================================================================*/

Public:Raspadinha(playerid){
	RaspadinhaInfo[playerid][pRaspNum] = RandomEx(1, 100);

 	new
		zStr[100]
		;

	switch(RaspadinhaInfo[playerid][pRaspNum]){
	    case 1..5: {
			RaspadinhaInfo[playerid][pRaspValue] = RandomEx(1, 10000);
 			ActionPlayerGrana(playerid, "+", RaspadinhaInfo[playerid][pRaspValue], 1);
			format(zStr, sizeof(zStr), "[ Play Style ] - Parabens, voce acaba de conseguir %s na raspadinha.", FormatNumber(RaspadinhaInfo[playerid][pRaspValue]));
			SCM(playerid, Verdel, zStr);
	    	RaspadinhaInfo[playerid][pRaspValue] = 0;
	    	RaspadinhaInfo[playerid][pRaspNum] = 0;
		}
		case 6..100: {
			SCM(playerid, Vermelho, "[ Play Style ] - Infelizmente voce nao encontrou nada na raspadinha, tente novamente.");
	    	RaspadinhaInfo[playerid][pRaspValue] = 0;
	    	RaspadinhaInfo[playerid][pRaspNum] = 0;
		}
	}
	return true;
}

Public:Apostando(playerid){

	new rand, rand2, str[ 128 ];

	rand = RandomEx(1, 25);
	rand2 = RandomEx(200, 400);

	if(rand == NumeroApostado[playerid]){

		format(str, sizeof(str), "[Play Style] - Voce acertou o numero premiado e ganhou $%s.", FormatNumber(rand2*ValorFicha[playerid]));
		SCM(playerid, 0xff6360FF, str);

		ActionPlayerGrana(playerid, "+", rand2*ValorFicha[playerid], 1);

		PlayerInfo[playerid][pFichas] = PlayerInfo[playerid][pFichas]-ValorFicha[playerid];

		ValorFicha[playerid] = 0;
		NumeroApostado[playerid] = 0;
		Apostado[playerid] = 0;
	} else {

		SCM(playerid, 0xFF0000FF, "Infelizmente voce nao acertou desta vez, tente denovo.");
		PlayerInfo[playerid][pFichas] = PlayerInfo[playerid][pFichas]-ValorFicha[playerid];
		ValorFicha[playerid] = 0;
		NumeroApostado[playerid] = 0;
		Apostado[playerid] = 0;
	}
	return true;
}

Public:RolandoDado1(playerid){

	new rand, str[128] ;

	rand = RandomEx(1, 6);

	format(str, sizeof(str), "|INFO| Primeiro dado: lado de numero %d", rand);
	SCM(playerid, -1, str);

	LadoDado[playerid] = rand;

	SetTimerEx("RolandoDado2", TSegundos(1), false, "i", playerid);

	return true;
}

Public:RolandoDado2(playerid){

	new rand, str[128] ;

	rand = RandomEx(1, 6);

	format(str, sizeof(str), "|INFO| Segundo dado: lado de numero %d", rand);
	SCM(playerid, -1, str);

	if(LadoDado[playerid] == LadoApostado[playerid] && rand == LadoApostado2[playerid] ||
	 LadoDado[playerid] == LadoApostado2[playerid] && rand == LadoApostado[playerid]) {

		SCM(playerid, -1,  "{e9f72e}[{FFFFFF}Play Style RP{e9f72e}]{ffffff} - Voce acerto as duas faces dos dados e ganhou $200.000,00");

		ActionPlayerGrana(playerid, "+", 200000, 1);

		PlayerInfo[playerid][pFichas] = PlayerInfo[playerid][pFichas]-1;

	} else ErroMSG(playerid, "Lamentamos, mas voce nao acertou o numero das faces dos dados");

	LadoApostado[playerid] = 0;
	LadoApostado2[playerid] = 0;
	LadoDado[playerid] = 0;
	Apostado[playerid] = 0;

	return true;
}


// ============================================================================

Public:Checking()
{

	Loop(zone, MAX_ZONES)
    {
        if(GZDominioTempo[zone] > 0) GZDominioTempo[zone]--;
	}

	ForPlayers( i )
    {
	    if(ProcuradoStatus[ i ])
        {
		    ProcuradoTemp[ i ]++;

		    if(ProcuradoTemp[ i ] >= 5){
		        AlterarNivelProcurado( i, 1, "-" );
		        ProcuradoTemp[ i ] = 0;
			}
		    if(!PlayerInfo[ i ][ pWanted ]){
	            ProcuradoTemp[ i ] = 0;
	            ProcuradoStatus[ i ] = false;
			}
		}
		if(PlayerInfo[ i ][ pLogger ] && CelularInfo[ i ][LinhaAtiva] == true && CelularInfo[ i ][LinhaAtivaID] != INVALID_PLAYER_ID && CelularInfo[ i ][pCell] != 0){
			if(CelularInfo[ i ][LinhaOwner]){
			    if(CelularInfo[ i ][pCell] == 1)
				{
				    if(CelularInfo[ i ][pCredito] >= 0.25)
					{
					    CelularInfo[ i ][pCredito] -= 0.25;
					    GameTextForPlayer(i, "~w~Celular:~n~~g~R$~w~-0,25 Creditos" , 1000, 1);
					}
					else
					{
					    new
							string[ 64 ],
							LID = CelularInfo[ i ][ LinhaAtivaID ]
						;

						format( string, sizeof(string), "{FF0000}%s{ffffff} desligou o celular", GetName( i ) );
						ChatProximo(15.0,  i , string, C_XAT1, C_XAT2 , C_XAT3, C_XAT4, C_XAT5);

						if(CelularInfo[LID][LinhaAtiva]){
							SendClientMessage( LID, Vermelho, "A Ligacao Caiu Por falta de Creditos" );
					  		SetPlayerSpecialActionEx(LID, SPECIAL_ACTION_STOPUSECELLPHONE);
							CelularInfo[LID][LinhaAtiva] = false;
							CelularInfo[LID][LinhaOwner] = 0;
							CelularInfo[ i ][LinhaOwner] = 0;
						}

						CelularInfo[ i ][LinhaAtiva] = false;

						SendClientMessage( i, AzulClaro, "Seus Creditos Acabaram" );

						if(GetPlayerSpecialAction( i ) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialActionEx( i ,SPECIAL_ACTION_STOPUSECELLPHONE);
					}
				}
			}
		}
		if(Cacando{i}){
		    if(!PegouCaca{i}){
			    CacandoTemp{i}--;

			    if(CacandoTemp{i} == 3){
	    			SCM(i, -1, "{FCC475}Sua caca esta fugindo, encontre-a o mais rapido possivel ou ira a perder!");
				}
				else if(CacandoTemp{i} <= 0){

			 		DestroyObject( CacaObject{i} );
					CacaID{i} = 0;
					Cacando{i} = false;
					CacaProgress{i} = 0;
					CacandoTemp{i} = 0;
					//Textdraw & Progress bar

					TextDrawHideForPlayer( i, DistanceCaca);
					DestroyPlayerProgressBar(i, CacaDistance[i]);

	    			SCM(i, -1, "{FC9775}Sua caca fugiu, va ate a cabana para iniciar uma nova cacada!");
				}
			}
		}
	}
	return true;
}

Public:BusStopTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(EmpregoDuty[ playerid ] == MOnibus)
        {
			UnFreeze(playerid);
			SendClientMessage(playerid, 0x2641FEAA, "(*) - Voce agora pode seguir viagem!");
		}
	}
}

Public:ProximoCheckBus( playerid ){

	static string[ 150 ];
	new ValorPorPonto;

    switch(PlayerInfo[playerid][ pProfLevel ][ MOnibus ])
	{
		case 1: ValorPorPonto = 120;
		case 2: ValorPorPonto = 150;
		case 3: ValorPorPonto = 170;
		case 4: ValorPorPonto = 200;
		case 5: ValorPorPonto = 250;
		default: ValorPorPonto = 120;
	}
	if(OnibusRoute[ playerid ] == 100){

		if( IsPlayerInRangeOfPoint(playerid, 10, RotasBusLS[CheckBus[ playerid ]][0], RotasBusLS[CheckBus[ playerid ]][1], RotasBusLS[CheckBus[ playerid ]][2] )){
            DisablePlayerCheckpoint(playerid);

			if(CheckBus[playerid] == 9){
		        format(string, sizeof(string), "(*) - Motorista de onibus %s terminou sua rota.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);

				SendClientMessage(playerid, AzulClaro, "Voce pode iniciar outra rota utilizando: /iniciarrota.");

	            //PlayerInfo[ playerid ][ pSalario ] += TransportMoney[playerid];
                CheckBus[playerid] = 0;
				TransportMoney[playerid] = 0;
	            OnibusRoute[ playerid ] = 0;
	            RotaBusFailed[ playerid ] = false;
				RotaBusFailedTemp[ playerid ] = 30;

				GameTextForPlayer(playerid, " ~g~Rota ~w~Completa", 5000, 3);
		        return true;
			}
		    else if(CheckBus[playerid] == 8){
		        format(string, sizeof(string), "%s completou o percurso, e vai para garagem.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
			}
			else if(CheckBus[playerid] <= 7){
		        format(string, sizeof(string), "(*) - Motorista de onibus %s chegou ao destino, e ira esperar os passageiros por 10 segundos.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
			}

			format(string, sizeof(string), "{93FABF}(*) - $%s adicionados ao seu salario!", FormatNumber(ValorPorPonto));
			SCM(playerid, -1, string);
			PlayerInfo[ playerid ][ pSalario ] += 10;
			ActionPlayerGrana(playerid, "+", ValorPorPonto, 1);

	        CheckBus[playerid]++;
	        Freeze(playerid);
	        GameTextForPlayer(playerid, " ~w~Aguarde.", 5000, 3);

	        OnSalvarDados( playerid );

			SetPlayerCheckpoint(playerid, RotasBusLS[CheckBus[playerid]][0], RotasBusLS[CheckBus[playerid]][1], RotasBusLS[CheckBus[playerid]][2], 5.0);
			SetTimerEx("BusStopTimer", TSegundos(10), false, "i", playerid);
		}
	}
    else if(OnibusRoute[ playerid ] == 200){

		if( IsPlayerInRangeOfPoint(playerid, 10, RotasBusLS2[CheckBus[ playerid ]][0], RotasBusLS2[CheckBus[ playerid ]][1], RotasBusLS2[CheckBus[ playerid ]][2] )){
            DisablePlayerCheckpoint(playerid);

			if(CheckBus[playerid] == 9){
		        format(string, sizeof(string), "(*) - Motorista de onibus %s terminou sua rota.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
		        CheckBus[playerid] = 0;

				SendClientMessage(playerid, AzulClaro, "Voce pode iniciar outra rota utilizando: /iniciarrota.");

	            //PlayerInfo[ playerid ][ pSalario ] += TransportMoney[playerid];
	            TransportMoney[playerid] = 0;
	            OnibusRoute[ playerid ] = 0;

		        GameTextForPlayer(playerid, " ~g~Rota ~w~Completa", 5000, 3);

		        RotaBusFailed[ playerid ] = false;
				RotaBusFailedTemp[ playerid ] = 30;

				PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);
		        return true;
			}
		    else if(CheckBus[playerid] == 8){
		        format(string, sizeof(string), "%s completou o percurso, e vai para garagem.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
			}
			else if(CheckBus[playerid] <= 7){
		        format(string, sizeof(string), "(*) - Motorista de onibus %s chegou ao destino, e ira esperar os passageiros por 10 segundos.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
			}

			format(string, sizeof(string), "{93FABF}(*) - $%s adicionados ao seu salario!", FormatNumber(ValorPorPonto));
			SCM(playerid, -1, string);
			PlayerInfo[ playerid ][ pSalario ] += 10;
			ActionPlayerGrana(playerid, "+", ValorPorPonto, 1);
	        CheckBus[playerid]++;
	        Freeze(playerid);
	        GameTextForPlayer(playerid, " ~w~Aguarde.", 5000, 3);

			SetPlayerCheckpoint(playerid, RotasBusLS2[CheckBus[playerid]][0], RotasBusLS2[CheckBus[playerid]][1], RotasBusLS2[CheckBus[playerid]][2], 5.0);
			SetTimerEx("BusStopTimer", TSegundos(10), false, "i", playerid);
		}
	}
	else if(OnibusRoute[ playerid ] == 300){

		if( IsPlayerInRangeOfPoint(playerid, 10, RotasBusLS3[CheckBus[ playerid ]][0], RotasBusLS3[CheckBus[ playerid ]][1], RotasBusLS3[CheckBus[ playerid ]][2] )){
            DisablePlayerCheckpoint(playerid);

			if(CheckBus[playerid] == 9){
		        format(string, sizeof(string), "(*) - Motorista de onibus %s terminou sua rota.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
		        CheckBus[playerid] = 0;

				SendClientMessage(playerid, AzulClaro, "Voce pode iniciar outra rota utilizando: /iniciarrota.");

	            //PlayerInfo[ playerid ][ pSalario ] += TransportMoney[playerid];
	            TransportMoney[playerid] = 0;
	            OnibusRoute[ playerid ] = 0;

		        GameTextForPlayer(playerid, " ~g~Rota ~w~Completa", 5000, 3);

		        RotaBusFailed[ playerid ] = false;
				RotaBusFailedTemp[ playerid ] = 30;

				PlayerTextDrawHide(playerid, TimerTruck[ playerid ]);
		        return true;
			}
		    else if(CheckBus[playerid] == 8){
		        format(string, sizeof(string), "%s completou o percurso, e vai para garagem.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
			}
			else if(CheckBus[playerid] <= 7){
		        format(string, sizeof(string), "(*) - Motorista de onibus %s chegou ao destino, e ira esperar os passageiros por 10 segundos.", GetName(playerid));
				ChatProximo(30.0, playerid, string, Purple,Purple,Purple,Purple,Purple);
			}

			format(string, sizeof(string), "{93FABF}(*) - $%s adicionados ao seu salario!", FormatNumber(ValorPorPonto));
			SCM(playerid, -1, string);
			PlayerInfo[ playerid ][ pSalario ] += 10;
			ActionPlayerGrana(playerid, "+", ValorPorPonto, 1);
	        CheckBus[playerid]++;
	        Freeze(playerid);
	        GameTextForPlayer(playerid, " ~w~Aguarde.", 5000, 3);

			SetPlayerCheckpoint(playerid, RotasBusLS3[CheckBus[playerid]][0], RotasBusLS3[CheckBus[playerid]][1], RotasBusLS3[CheckBus[playerid]][2], 5.0);
			SetTimerEx("BusStopTimer", TSegundos(10), false, "i", playerid);
		}
	}
	return true;
}


new SortRota;
Public:RotaOnibus( playerid )
{

	UnFreeze(playerid);

	RotaBusFailed[ playerid ] = false;
	RotaBusFailedTemp[ playerid ] = 30;

    switch(SortRota)
    {
		case 0:
        {
       		SetPlayerCheckpoint(playerid, RotasBusLS[0][0], RotasBusLS[0][1], RotasBusLS[0][2], 8.0);
			SendClientMessage(playerid, Verde, "(*) - Siga o CheckPoint que foi marcado em seu mapa para continuar a sua rota.");

			OnibusRoute[ playerid ] = 100;
            CheckBus[ playerid ] = 0;
			SortRota++;
		}
		case 1: {
		    SetPlayerCheckpoint(playerid, RotasBusLS2[0][0], RotasBusLS2[0][1], RotasBusLS2[0][2], 8.0);
			SendClientMessage(playerid, Verde, "(*) - Siga o CheckPoint que foi marcado em seu mapa para continuar a sua rota.");

            OnibusRoute[ playerid ] = 200;
            CheckBus[ playerid ] = 0;
		    SortRota++;
		}
		case 2: {
		    SetPlayerCheckpoint(playerid, RotasBusLS3[0][0], RotasBusLS3[0][1], RotasBusLS3[0][2], 8.0);
			SendClientMessage(playerid, Verde, "(*) - Siga o CheckPoint que foi marcado em seu mapa para continuar a sua rota.");

            OnibusRoute[ playerid ] = 300;
            CheckBus[ playerid ] = 0;
		    SortRota=0;
		}
	}
	return true;
}


Public:DescarregarTrucker( playerid ){


    TraillerComb[ playerid ] -= 20;
	PetroleiroMoney[ playerid ] += 350;

	SetPVarInt(playerid, "CheckPetrol", 0);
	DisablePlayerCheckpoint( playerid );

	if(TraillerComb[ playerid ] <= 0){
		SCM(playerid, -1, "Voce descarregou todo o petroleo do seu caminhao, volte a sua hq para buscar mais ou para ficar de folga!");
        SetGPSFromLocation(playerid, "HQ Petroleiros", -1039.2301, -573.6809, 32.0078);
	}
	else {

	    static str[ 129 ];
		format(str, 129, "{EAEFEF}Ainda restam {34FFAE}%i {EAEFEF}litros de petroleo e uma nova\nordem de servico acabou de chegar, deseja aceitar?!", TraillerComb[ playerid ]);

	    ShowPlayerDialog(playerid, DIALOG_PETROLEIRO, DIALOG_STYLE_MSGBOX, "Proxima Rota", str, "Aceitar", "Rejeitar");
	}
	UnFreeze( playerid );
	return true;
}

Public:CarregarTrucker( playerid ){
    TraillerAttach[ playerid ] = true;
	TraillerComb[ playerid ] = 100;
	PetroleiroMoney[ playerid ] = 0;
	_SecurityPetrol[ playerid ] = 0;

    static str[ 129 ];
	format(str, 129, "{1988C9}Seu Caminhao foi carregado com %i litros de petroleo!", TraillerComb[ playerid ]);
	SCM(playerid, -1, str);
	return SortPetrolRoute( playerid );
}

new UltimaRotaSort;
Public:SortPetrolRoute( playerid ){
	new rotaid;

	rotaid = random(sizeof(PostoPetrol));

	if(rotaid == UltimaRotaSort && UltimaRotaSort < sizeof(PostoPetrol)) rotaid++;

	SetPlayerCheckpoint(playerid, PostoPetrol[rotaid][px_], PostoPetrol[rotaid][py_], PostoPetrol[rotaid][pz_], 3.0);
	//SetPlayerMapIcon(playerid, 51, PostoPetrol[rotaid][px_], PostoPetrol[rotaid][py_], PostoPetrol[rotaid][pz_], 51, MAPICON_GLOBAL, 0xE6E6E6E6);
    UltimaRotaSort = rotaid;
    _SecurityPetrol[ playerid ] = rotaid;
	SetPVarInt(playerid, "CheckPetrol", 1);

	static str[129];
	SCM(playerid, -1, "{25ACFA}Leve o combustivel ate o local marcado com um chekcpoint no seu mini-mapa!");
	format(str, 129, "{25ACFA}Posto localizado em: %s!", GetAreaForCords(PostoPetrol[rotaid][px_], PostoPetrol[rotaid][py_], PostoPetrol[rotaid][pz_]));
	SCM(playerid, -1, str);

	UnFreeze( playerid );
	return true;
}


Public:Descarregar(playerid){

	UnFreeze(playerid);
    TrashMoney[ playerid ] = 0;
    TrashRoute[ playerid ] = 0;

	InfoMSG(playerid, "Voce completou sua rota de servico, o dinheiro ganho durante o trabalho voce pode consultar em /rg!");
    SCM(playerid, -1, "{0CAD07}(>) - Voce pode iniciar uma nova rota /iniciarrota ou bater o cartao para ficar de folga ..");
	return true;
}

new RotaLix = 0;
Public:RotaLixeiro(playerid){


	TrashMoney[ playerid ] = 0;
    RotaFailed[ playerid ] = false;
	RotaFailedTemp[ playerid ] = 30;

	switch(RotaLix){
	    case 0:{

			SCM(playerid, Purple, "(>) - Siga o Ponto vermelho em seu mapa. ( Rota LS )");
			TrashCheck[ playerid] = 1;
			TrashRoute[ playerid ] = 100;

			DestroyDynamicObject(TrashObjects[playerid][0]);
			DestroyDynamicObject(TrashObjects[playerid][1]);
			CreateTrashObject(playerid, CordsLixeiro[TrashCheck[ playerid ]][0], CordsLixeiro[TrashCheck[ playerid ]][1], CordsLixeiro[TrashCheck[ playerid ]][2]);
			RotaLix++;
		}
		case 1: {
		    SCM(playerid, Purple, "(>) - Siga o Ponto vermelho em seu mapa. ( Rota SF 1 )");
			TrashCheck[ playerid] = 1;
			TrashRoute[ playerid ] = 200;

			DestroyDynamicObject(TrashObjects[playerid][0]);
			DestroyDynamicObject(TrashObjects[playerid][1]);
			CreateTrashObject(playerid, CordsLixeiro2[TrashCheck[ playerid ]][0], CordsLixeiro2[TrashCheck[ playerid ]][1], CordsLixeiro2[TrashCheck[ playerid ]][2]);
			RotaLix=0;
		}
	}
	//          0,0269, -0,9117,    0
	//1299 = -2141.4961, -846.7781, 31.6234
	//1440 = -2141.4692, -847.6898, 31.6234
	return true;
}


Public:RotaCarteiro(playerid){

	new
	    rand = random(sizeof(CarteiroLS)), sK[ 120 ];
	switch(rand){
	    case 0..16:{

			format( sK, sizeof( sK ), "Ola, %s, siga ate o local marcado de 'vermelho' no mapa para iniciar suas entregas.", GetNameEx( playerid ));
			SCM(playerid, Teal, sK);
			CartCheck[ playerid ] = 1;
			RotaSelecionada[playerid] = rand;
			SetPlayerCheckpoint(playerid, CarteiroLS[rand][0], CarteiroLS[rand][1], CarteiroLS[rand][2], 3.0);
		}
	}
	return true;
}




stock IniciarRota( playerid ){
	new sK[ 128 ];
	format( sK, sizeof( sK ), "* O(A) Carteiro(a) %s esta entregando as correspondencias.", GetNameEx( playerid ));
	ChatProximo(30.0, playerid, sK, VermelhoClaro, VermelhoClaro, VermelhoClaro, VermelhoClaro, VermelhoClaro);
	SetTimerEx("ContinueCartRoute", TSegundos(4), false, "d", playerid);
	Freeze( playerid );
	return true;
}

Public:ContinueCartRoute(playerid){

    UnFreeze(playerid);
    DisablePlayerCheckpoint(playerid);

	new rand = random(sizeof(CarteiroLS));

	switch(CartCheck[ playerid ]){
		case 1..3: {
			if(rand == RotaSelecionada[playerid]){
            	SCM(playerid, Verdel, "[!] Opa! voce esqueceu algumas cartas, entregue-as novamente.");

				RotaSelecionada[playerid] = rand;
				SetPlayerCheckpoint(playerid, CarteiroLS[rand][0], CarteiroLS[rand][1], CarteiroLS[rand][2], 3.0);
			} else {
            	SCM(playerid, Verdel, "[!] Entrega feita com sucesso, va para o proximo local marcado em seu mapa.");

				RotaSelecionada[playerid] = rand;
				SetPlayerCheckpoint(playerid, CarteiroLS[rand][0], CarteiroLS[rand][1], CarteiroLS[rand][2], 3.0);
			}
		}
		case 4: {
			SCM(playerid, Teal, "(>) {F5DEB3}Voce acaba de completar suas entregas, voce acaba de receber {00752B}R$ 200,00 {F5DEB3}e R$10,00 de bônus adicionado ao seu salario.");
    		DisablePlayerCheckpoint(playerid);

			CarteiroMoney[ playerid ] = 200;
   			PlayerInfo[playerid][pSalario] += 10;
   			ActionPlayerGrana(playerid, "+", CarteiroMoney[ playerid ], 1);
   			EmpregoDuty[ playerid ] = 0;
			PegouPacotes[playerid] = false;
			InicioRota[playerid] = false;
			CarteiroMoney[ playerid ] = 0;
			OnSalvarDados( playerid );
			RemovePlayerAttachedObject(playerid, 4);
		}
	}
	return true;
}



stock ProximoCheck( playerid ){
	InfoMSG(playerid, "Recolhendo o Lixo ... aguarde!");
	SetTimerEx("ContinueTrashRoute", TSegundos(3), false, "d", playerid);
	Freeze(playerid);
	return true;
}

Public:ContinueTrashRoute(playerid){

    DestroyTrashObjects(playerid);
    UnFreeze(playerid);

    TrashMoney[ playerid ] = 0;

    switch(TrashRoute[ playerid ]){
        case 100:{
			switch(TrashCheck[ playerid ]){
				case 1..14: {
		            InfoMSG(playerid, "Lixo Recolhido!");

		            SCM(playerid, -1, "{ABDEC9}(>) - Va ate o proximo ponto marcado no mapa, {FFFFFF}+{3C982E}$60 {ABDEC9}adicionados ao salario !");

					CreateTrashObject(playerid, CordsLixeiro[TrashCheck[ playerid ]][0], CordsLixeiro[TrashCheck[ playerid ]][1], CordsLixeiro[TrashCheck[ playerid ]][2]);
		            TrashMoney[ playerid ] += 60;

					PlayerInfo[ playerid ][ pSalario ] += 10;
					ActionPlayerGrana(playerid, "+", TrashMoney[ playerid ], 1);
					OnSalvarDados( playerid );
				}
				case 15: {
					SCM(playerid, -1, "{ABDEC9}(>) - Rota Concluida, va ate o lixao e descarregue seu caminhao!");
					SetPlayerCheckpoint(playerid, -1823.0755, -1590.3911, 23.0015, 6.0);

					TrashMoney[ playerid ] += 140;

					PlayerInfo[ playerid ][ pSalario ] += 10;
					ActionPlayerGrana(playerid, "+", TrashMoney[ playerid ], 1);
					OnSalvarDados( playerid );
				}
			}
		}
		case 200:{
		    switch(TrashCheck[ playerid ]){
				case 1..11: {
		            InfoMSG(playerid, "Lixo Recolhido!");

		            SCM(playerid, -1, "{ABDEC9}(>) - Va ate o proximo ponto marcado no mapa, {FFFFFF}+{3C982E}$60 {ABDEC9}adicionados ao salario !");

					CreateTrashObject(playerid, CordsLixeiro2[TrashCheck[ playerid ]][0], CordsLixeiro2[TrashCheck[ playerid ]][1], CordsLixeiro2[TrashCheck[ playerid ]][2]);
		            TrashMoney[ playerid ] += 140;

     				PlayerInfo[ playerid ][ pSalario ] += 10;
     				ActionPlayerGrana(playerid, "+", TrashMoney[ playerid ], 1);
					OnSalvarDados( playerid );
				}
				case 12: {
					SCM(playerid, -1, "{ABDEC9}(>) - Rota Concluida, va ate o lixao e descarregue seu caminhao!");
					SetPlayerCheckpoint(playerid, -1823.0755, -1590.3911, 23.0015, 6.0);

		            TrashMoney[ playerid ] += 140;

					PlayerInfo[ playerid ][ pSalario ] += 10;
					ActionPlayerGrana(playerid, "+", TrashMoney[ playerid ], 1);
					OnSalvarDados( playerid );
				}
			}
		}
	}
	return true;
}

CreateTrashObject(playerid, Float:Tx, Float:Ty, Float:Tz){

    SetPlayerCheckpoint(playerid, Tx, Ty, Tz, 8.0);

    TrashObjects[playerid][0] = CreateDynamicObject(1299, Tx, Ty, Tz, 0, 0, 0, -1, -1, -1, 100);
    TrashObjects[playerid][1] = CreateDynamicObject(1440, (Tx+0.0269), (Ty-0.9117), Tz, 0, 0, 0, -1, -1, -1, 100);

	return true;
}

DestroyTrashObjects(playerid){
	DestroyDynamicObject(TrashObjects[playerid][0]);
	DestroyDynamicObject(TrashObjects[playerid][1]);
	return true;
}

Public:IsAtBlueBusStop(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInRangeOfPoint(playerid,2.0,2868.9033,-1416.4062,11.0131) || IsPlayerInRangeOfPoint(playerid,2.0,2636.3242,-1693.125,10.9544) || IsPlayerInRangeOfPoint(playerid,2.0,2649.0073,-1710.6044,11.1854)
           || IsPlayerInRangeOfPoint(playerid,2.0,2243.8457,-1725.9121,13.5960) || IsPlayerInRangeOfPoint(playerid,2.0,2252.8876,-1738.8710,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1948.3310,-1454.3525,13.5960)
           || IsPlayerInRangeOfPoint(playerid,2.0,1926.4199,-1472.3593,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1571.0644,-2188.0107,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1712.9423,-1818.7148,13.6260))
        {
            return 1;
        }
    }
    return 0;
}

Public:IsAtBlackBusStop(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInRangeOfPoint(playerid,2.0,1567.0966,-1725.4755,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1544.9990,-1739.0458,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1503.9716,-1027.7617,23.7701)
           || IsPlayerInRangeOfPoint(playerid,2.0,1440.3242,-1040.7060,23.9073) || IsPlayerInRangeOfPoint(playerid,2.0,1188.8359,-1354.6279,13.6483) || IsPlayerInRangeOfPoint(playerid,2.0,1212.8427,-1327.8398,13.6470)
           || IsPlayerInRangeOfPoint(playerid,2.0,861.7125,-1313.3009,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,850.6757,-1333.9707,13.6153) || IsPlayerInRangeOfPoint(playerid,2.0,393.6944,-1766.2702,5.6197)
           || IsPlayerInRangeOfPoint(playerid,2.0,1705.5898,-1805.8476,13.5300))
        {
            return 1;
        }
    }
    return 0;
}

forward CPOff(playerid, onibus);
public CPOff( playerid, onibus){
    new
		Float:busx,
		Float:busy,
		Float:busz
	;

	if(onibus == 1)	GetVehiclePos(NPCBlueBus, busx, busy, busz);
	else GetVehiclePos(NPCBlackBus, busx, busy, busz);

	static str[ 129 ];
	format(str, sizeof str, "O onibus se encontra passando por: %s neste exato momento!", GetAreaForCords(busx, busy, busz));
	SCM(playerid, -1, str);

	DisablePlayerCheckpoint(playerid);
	return true;
}

stock GetPlayerArea(playerid){
	new
		str[ 100 ]
	;
	format(str,sizeof(str), "%s", Zones[GetPlayerZone(playerid)][zone_name]);
	return str;
}

//IsValidWeapon()
IsValidWeapon(weaponid){
	new retorno;
	switch(weaponid){
		case 0..18: retorno = 1;
		case 22..46: retorno = 1;
		default: retorno = 0;
	}
	return retorno;
}

stock GetPlayerZone(playerid){

	new Float:x,
		Float:y,
		Float:z
	;
	GetPlayerPos(playerid, x, y, z);
	Loop(i, sizeof(Zones))
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
			return i;
	}
	return false;
}


stock GetAreaValida(Float:xZ, Float:yZ, Float:zZ)
{
    Loop(i, sizeof(Zones))
	{
		if(xZ > Zones[i][zone_minx] && yZ > Zones[i][zone_miny] && zZ > Zones[i][zone_minz] && xZ < Zones[i][zone_maxx] && yZ < Zones[i][zone_maxy] && zZ < Zones[i][zone_maxz]) return i;
	}
	return false;
}

stock GetAreaForCords(Float:_Xp, Float:_Yp, Float:_Zp){
	new
		str[80],
		Aid = GetAreaValida(_Xp, _Yp, _Zp)
	;

	if(Aid > 0)
		format(str,sizeof(str), "%s", Zones[ Aid ][zone_name]);
	else
	    format(str,sizeof(str), "Desconhecido");
	return str;
}

stock ShowStatusFor(playerid, id){
	static str[ 200 ], Box[ 1000 ];

	Box[0] = EOS;


	strcat(Box, "{800080}|_______________________________________________________________________________________|\n\n");
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Idade: %d\n{2DFEE6}{FFFFFF}Sexo: %s\n{2DFEE6}{FFFFFF}Celular: %s | Numero: %d | Creditos: %.2f |\n", PlayerInfo[id][pIdade], GetPlayerSex( id ), CelularInfo[ id ][ pCell ] == 1 ? ("Sim"):("Nao"), CelularInfo[id][pNumero], CelularInfo[id][pCredito]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Dinheiro: [$%s]\n{2DFEE6}{FFFFFF}Level: %d | Respeito: %d/05\n", FormatNumber(PlayerInfo[id][pDinheiro]), PlayerInfo[id][pLevel], PlayerInfo[id][pExp]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Materiais: %d\n{2DFEE6}{FFFFFF}Admin: %s\n{2DFEE6}{FFFFFF}Skin ID: %d\n{2DFEE6}{FFFFFF}Nivel Procurado: %d\n{2DFEE6}{FFFFFF}Cash: %i\n", PlayerInfo[id][pMateriais], adminInfo[PlayerInfo[ id ][ pAdmin]], PlayerInfo[id][pSkin], PlayerInfo[id][pWanted], PlayerInfo[id][Cash]);
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Hab_A: %s\n{2DFEE6}{FFFFFF}Hab_B: %s\n{2DFEE6}{FFFFFF}Hab_D: %s\n",	PlayerInfo[id][pHabA] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabB] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabD] == 1 ? ("Sim"):("Nao"));
	strcat(Box, str);
	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Hab_E: %s\n{2DFEE6}{FFFFFF}Hab_AR: %s\n{2DFEE6}{FFFFFF}Hab_N: %s\n{2DFEE6}{FFFFFF}Hab_ES: %s\n", PlayerInfo[id][pHabE] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabAR] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabN] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabES] == 1 ? ("Sim"):("Nao"));
	strcat(Box, str);

	if(PlayerInfo[id][pOrg] != 0) format(str, sizeof(str), "{2DFEE6}{FFFFFF}Org: %s | Cargo: %s\n", GetOrgName( id ), GetPatentNome(PlayerInfo[id][pOrg],PlayerInfo[id][pCargo]));
	else format(str, sizeof(str), "{2DFEE6}{FFFFFF}Profissao: %s\n", EmpregoNome[ PlayerInfo[ id ][ pEmprego ] ]);
	strcat(Box, str);

	format(str, sizeof(str), "{2DFEE6}{FFFFFF}Proximo UP: %d minutos, %d segundos, Bônus: $%s!\n\n", PlayerInfo[id][ pMinutosUP ], PlayerInfo[id][ pSegundosUP ], FormatNumber(PlayerInfo[ id ][ pSalario ]));
	strcat(Box, str);

	strcat(Box, "{800080}|_______________________________________________________________________________________|");

	format(str, 128, "{FFFFFF}RG de %s {800080}", GetName( id ));

    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	str, Box, "Confirma", "");
	return true;
}


stock MostrarFichaID(playerid, id){
	static str[ 200 ];
	new Box[ 500 ];

	strcat(Box, "{800080}|_________________________|\n\n");
	format(str, 200, "{2DFEE6}{FFFFFF}Idade: %d\n{2DFEE6}{FFFFFF}Sexo: %s\n{2DFEE6}{FFFFFF}Celular: %s\n", PlayerInfo[id][pIdade], GetPlayerSex( id ), CelularInfo[ id ][ pCell ] == 1 ? ("Sim"):("Nao"));
	strcat(Box, str);
	format(str, 200, "{2DFEE6}{FFFFFF}Dinheiro: [$%s]\n{2DFEE6}{FFFFFF}Level: %d\n", FormatNumber(PlayerInfo[id][pDinheiro]), PlayerInfo[id][pLevel]);
	strcat(Box, str);
	format(str, 200, "{2DFEE6}{FFFFFF}Maconha: %d\n{2DFEE6}{FFFFFF}Crack: %d\n{2DFEE6}{FFFFFF}Cocaina: %d\n", PlayerInfo[id][pMaconha], PlayerInfo[id][pCrack], PlayerInfo[id][pCocaina]);
	strcat(Box, str);
	format(str, 200, "{2DFEE6}{FFFFFF}Nivel Procurado: %d\n", PlayerInfo[id][pWanted]);
	strcat(Box, str);
	format(str, 200, "{2DFEE6}{FFFFFF}Hab_A: %s\n{2DFEE6}{FFFFFF}Hab_B: %s\n{2DFEE6}{FFFFFF}Hab_D: %s\n{2DFEE6}{FFFFFF}Hab_E: %s\n", PlayerInfo[id][pHabA] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabB] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabD] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabE] == 1 ? ("Sim"):("Nao"));
    strcat(Box, str);
	format(str, 200, "{2DFEE6}{FFFFFF}Hab_AR: %s\n{2DFEE6}{FFFFFF}Hab_N: %s\n{2DFEE6}{FFFFFF}Hab_ES: %s\n", PlayerInfo[id][pHabAR] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabN] == 1 ? ("Sim"):("Nao"), PlayerInfo[id][pHabES] == 1 ? ("Sim"):("Nao"));
	strcat(Box, str);

	strcat(Box, "{800080}|_________________________|");

	format(str, 200, "{FFFFFF}Ficha de %s {800080}", GetName( id ));

    ShowPlayerDialog( playerid, Dinfo, DIALOG_STYLE_MSGBOX,	str, Box, "Confirma", "");
	return true;
}


Public:RandomMSGs()
{
	static
	    str[ 200 ]
	;
	format( str , sizeof( str ), "{BDBDBD}[ Play Style ] %s", MSGs[ random(sizeof(MSGs)) ]);
	SCMALL2( str );
	return 1;
}

//SCMALL()
SCMALL(string[]){
	ForPlayers( i ){
		if(PlayerInfo[ i ][ pLogger ] == 1 && PlayerInfo[ i ][ pTutorial ] == 1){
		    SendClientMessage(i, -1, string);
		}
	}
	return true;
}

//SCMALL2()
SCMALL2(string[]){
	ForPlayers( i ){
		if(PlayerInfo[ i ][ pTutorial ] == 1){
			if(PlayerInfo[ i ][ pChatABlock ] == true){
				SendClientMessage(i, -1, string);
			}
		}
	}
	return true;
}

//SendMessageChatAjuda()
SendMessageChatAjuda(string[]){
	ForPlayers( i ){
		if(PlayerInfo[ i ][ pTutorial ]){
			if(PlayerInfo[ i ][ pChatCA ]){
				SendClientMessage(i, Cinza, string);
			}
		}
	}
}

//ErroMSG()
ErroMSG(playerid, message[])
{
	static str[ 129 ];
	format( str , sizeof( str ), "| ERRO | %s", message);
	SCM(playerid, C_ERROR, str);
	return true;
}

InfoMSG(playerid, IText[])
{
	static str[ 129 ];
	format( str , sizeof( str ), "{%s}| INFO | %s", CoresMSGs[ random(sizeof(CoresMSGs)) ], IText);
	SCM(playerid, -1, str);
	return true;
}

InfoMSGToAll(IAText[])
{
	static str[ 129 ];
	format( str , sizeof( str ), "{%s}| INFO | %s", CoresMSGs[ random(sizeof(CoresMSGs)) ], IAText);
	SendClientMessageToAll(-1, str);
	return true;
}

Public:GetClosestPlayer(p1)
{
	new
		Float:dis,
		Float:dis2,
		player
	;
	player = -1;
	dis = 99999.99;
 	ForPlayers(x){
		if(x != p1){
			dis2 = GetDistancePlayers(x,p1);
			if(dis2 < dis && dis2 != -1.00){
				dis = dis2;
				player = x;
			}
		}
	}
	return player;
}

forward Float:GetDistancePlayers(p1,p2);
public Float:GetDistancePlayers(p1,p2)
{
	new
		Float:x1,
		Float:y1,
		Float:z1,
		Float:x2,
		Float:y2,
		Float:z2
	;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2)) return -1.00;

	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

forward EnviarSMS(playerid, id, strs[]);
public EnviarSMS(playerid, id, strs[]){

    static str[ 129 ];
	format(str, sizeof(str), "{00FF00}[ {FFFFFF}SMS {00FF00}] {FFFFFF}- {DCDCDC}%s{FFFFFF}: {FFFFFF}%s", PlayerInfo[ playerid ][ pName ], strs);
	SCM(id, -1, str);
	PlaySoundForPlayer(id, 1085);

	format(str, sizeof(str), "SMS enviado para {DCDCDC}%s{C2A2DA}: %s", PlayerInfo[ id ][ pName ], strs);
	SCM(playerid, Purple, str);
	PlaySoundForPlayer(playerid, 1150);

	format(STRLOG, sizeof(STRLOG), "[%s] SMS - %s/%s: %s", GetDateEx(), PlayerInfo[ playerid ][ pName ], PlayerInfo[ id ][ pName ], strs);
	SLog("SMS.log", STRLOG);

    GameTextForPlayer(playerid,"~g~SMS~n~~w~Enviado com sucesso", 5000, 1);

    if(CelularInfo[ playerid ][pCell] == 2){
	    ContaInfo[ playerid ][ cCell ] += 0.10;
	}
    else CelularInfo[ playerid ][ pCredito ] -= 0.10;

    OnSalvarDados( playerid );

	return true;
}

Public:TentativasDiscagem(playerid){
	new
	    string[ 129 ],
	    id = CelularInfo[ playerid ][LinhaAtivaID]
	;
	if(CelularInfo[ playerid ][ Tentativas ]){
		CelularInfo[ playerid ][ Tentativas ]--;
		SCM(playerid, -1, "{A7CBFA}(>) - Chamando...");
	}
	else
	{
     	format(string, 129, "A Chamada foi cancelada, porque %s nao atendeu o celular!", GetName( CelularInfo[ playerid ][LinhaAtivaID]) );
		SCM(playerid, -1, string);

	    CelularInfo[ id ][LinhaAtivaID] = INVALID_PLAYER_ID;
		if(!IsPlayerInAnyVehicle( playerid )) SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

        KillTimer(CelularInfo[playerid][Timer]);
	}
	return true;
}

stock DesbugPlayer(playerid){
	if(IsPlayerInAnyVehicle(playerid)){
		RemovePlayerFromVehicle(playerid);
	}
  	if(GetPVarInt(playerid, "CheckGPSVeh") == 1) {
	    DeletePVar( playerid, "CheckGPSVeh");
		DisablePlayerCheckpoint( playerid );
	}
    DeletePVar( playerid, "LigandoVeiculo");
	DeletePVar( playerid, "ultimoShoot");
	DeletePVar( playerid, "ultimaDeath");
    DeletePVar( playerid, "CheckGPSVeh");
    SetPVarInt( playerid, "OptionMaker", 0);
	SetPVarInt( playerid, "OptionValue", 0);

    //SetPVarInt( playerid, "AvisadoMF", 0);

    SetPVarInt(GetPVarInt(playerid, "C_ID"), "E_Contrato", 0);
    SetPVarInt( playerid, "Contrato", 0);
	SetPVarInt( playerid, "C_ID", INVALID_PLAYER_ID);
	SetPVarInt( playerid, "C_Imovel", -1);
	SetPVarInt( playerid, "C_Valor", -1);

    SetPVarInt(GetPVarInt(playerid, "V_ID"), "V_Contrato", 0);
    SetPVarInt( playerid, "Contratoenviado", 0);
	SetPVarInt( playerid, "V_ID", INVALID_PLAYER_ID);
	SetPVarInt( playerid, "V_Veiculo", -1);
	SetPVarInt( playerid, "V_Valor", -1);


    SacolaRoubo[ playerid ] = -1;

	SetPlayerVirtualWorld(playerid, 0);
	PlayerInfo[ playerid ][ pWorld ] = 0;
	PlayerInfo[ playerid ][ pHouseEnter ] = -1;
	PlayerInfo[ playerid ][ pCheckGPS ] = 0;
    PlayerInfo[ playerid ][ pCheck ] = 0;
    PlayerInfo[ playerid ][ UsandoCapacete ] = false;

	// Raspadinha
	RaspadinhaInfo[playerid][pRaspNum] = 0; RaspadinhaInfo[playerid][pRaspValue] = 0;

    ClickPlayerResult[ playerid ] = INVALID_PLAYER_ID;
    CelularInfo[playerid][LinhaAtiva] = false;
    CelularInfo[playerid][LinhaAtivaID] = INVALID_PLAYER_ID;
    CelularInfo[playerid][Tentativas] = 0;

    PlayerAFK{ playerid } = false;
    EmpregoEscolhido[ playerid ] = 0;
    Amarrado[ playerid ] = 0;
	AmarradoTime[ playerid ] = 0;
	EmpregoDuty[ playerid ] = 0;
   	PetroleiroMoney[ playerid ] = 0;
	TraillerAttach[ playerid ] = false;
	EmRouboRecente[ playerid ] = false;
	TraillerComb[ playerid ] = 0;
	_SecurityPetrol[ playerid ] = 0;
	TraillerCount[ playerid ] = 0;
    ComprandoArma[ playerid ] = -1;
    CNHTest[ playerid ] = 0;
    InBus[ playerid ] = 0;
    ExameQuestID[ playerid ] = 0;
	ExamePoints[ playerid ] = 0;
	AutoEscolaProgresso[ playerid ] = 0;
    AutoEscolaAviso[ playerid ] = 0;
	DrogasID[ playerid ] = -1;
	DrogasOff[ playerid ] = -1;
	DrogasPreco[ playerid ] = -1;
	DrogasQuant[ playerid ] = -1;
	Mineirando[ playerid ] = 0;
    MinerioValue[ playerid ] = 0;
    MinerioType[ playerid ] = 0;
    ContratoID[ playerid ] = INVALID_PLAYER_ID;
	TempoCOffer[ playerid ] = 0;
	ContratoValor[ playerid ] = 0;
    PlayerSolicitou[ playerid ] = 0;
    RotaFailed[ playerid ] = false;
	RotaFailedTemp[ playerid ] = 30;
    RotaBusFailed[ playerid ] = false;
	RotaBusFailedTemp[ playerid ] = 30;
    DrogasUP[ playerid ] = 0;
	UsandoDrogas[ playerid ] = false;
	Equipado [ playerid ] = 0;

	Loop(i, MAX_PLAYER_ATTACHED_OBJECTS) RemovePlayerAttachedObject(playerid, i);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	AutoSpawn(playerid, TSegundos(2));
	SetPlayerVirtualWorld(playerid, 0);

	DesativarRacesAETB( playerid );
    DesativarRacesAETD( playerid );
    DesativarRacesAETE( playerid );

    DeleteRaceChecksAETE(playerid);
    DeleteRaceChecksAETB(playerid);
    DeleteRaceChecksAETD(playerid);

    if(Cacando{playerid}){
	    PegouCaca{playerid} = false;

 		DestroyObject( CacaObject{playerid} );
		CacaID{playerid} = 0;
		Cacando{playerid} = false;
		CacaProgress{playerid} = 0;
		CacandoTemp{playerid} = 0;

		//Textdraw & Progress bar
		TextDrawHideForPlayer( playerid, DistanceCaca);
		DestroyPlayerProgressBar(playerid, CacaDistance[playerid]);
	}
	if(EstavaEspectando[ playerid ]){
        UPosEspec[ playerid ][0] = 0.0;
		UPosEspec[ playerid ][1] = 0.0;
		UPosEspec[ playerid ][2] = 0.0;
		UPosInt[ playerid ] = 0;
		UPosVirt[ playerid ] = 0;
		PlayerEspec[ playerid ] = INVALID_PLAYER_ID;
		EstavaEspectando[ playerid ] = false;
	}

	if(VeiculoConce[ playerid ] != INVALID_VEHICLE_ID){
	    DestroyVehicle(VeiculoConce[ playerid ]);
        VeiculoConce[ playerid ] = INVALID_VEHICLE_ID;
	}

	//Taxi
	InTaxi[ playerid ]=false, Cliente[playerid] = INVALID_PLAYER_ID, PrecoTotalCorrida[playerid] = 0, TaxiOwn[playerid] = INVALID_PLAYER_ID;

    LocalizadoPos[playerid][0] = 0.0, LocalizadoPos[playerid][1] = 0.0, LocalizadoPos[playerid][2] = 0.0;
    CartCheck[playerid] = 0; RotaSelecionada[playerid] = 0, PegouPacotes[playerid] = false;
    PediuTaxi[playerid] = false, Localizado[playerid] = false, Jogador[playerid] = 0, TaxiMoney[playerid] = 0; CarteiroMoney[playerid] = 0;
    MecanicoMoney[playerid] = 0, InicioRota[playerid] = false, PediuMecanico[playerid] = 0;

}

/* ============ Sistema de GPS ========================*/

stock GetDistance( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 ) return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) ) ;

SetGPSFromLocation(playerid, const localname[], Float:Gx, Float:Gy, Float:Gz)
{
    if(PlayerInfo[ playerid ][ pCheckGPS ]) return ErroMSG(playerid, "Desligue seu GPS primeiro!");

    new
        strgps[ 200 ]
	//	Float:GPos[ 3 ]
	;

    //GetPlayerPos(playerid, GPos[ 0 ], GPos[ 1 ], GPos[ 2 ]);

    PlayerInfo[ playerid ][ pCheckGPS ] = 1;

	SetPlayerCheckpoint(playerid, Gx, Gy, Gz, 2.0);
	GameTextForPlayer(playerid, "~y~GPS ~g~Ligado", 2000, 1);

	format(strgps, sizeof( strgps ), "{58FAF4}Lugar: %s Local: %s", localname, GetAreaForCords(Gx, Gy, Gz));
    SCM(playerid, -1, strgps);
	return true;
}

ShowMenuEmpregos( playerid ){

    EmpregoEscolhido[ playerid ] 	= 0;
    catSelected[playerid]			= 0;

    static cBox[200];
	cBox[0]=EOS;

    strcat(cBox, "{7CF97C}> {FFFFFF}Transportes\n\
	{7CF97C}> {FFFFFF}Em Conjunto\n\
	{7CF97C}> {FFFFFF}Honestas\n\
	{7CF97C}> {FFFFFF}Desonestas\n\
	{7CF97C}> {FFFFFF}Ganhos Extras");

	ShowPlayerDialog(playerid, DIALOG_EMPREGOS, DIALOG_STYLE_LIST, ""#SERVELOGO" - Escolha uma categoria", cBox, "Selecionar", "Cancelar");
	return true;
}

ShowJobsList(playerid, type){

	static boxConte[300], str_[60], bool:result;

	boxConte[0]=EOS;
    result=false;

    strcat(boxConte, "Emprego\tRequisito\tLevel\n");
	switch(type){
	    case TYPE_TRANS:{
	        for(new list; list < sizeof(EmpregosTypeTrans); list++) {
				format(str_, 100, "{7CF97C}>{FFFFFF} %s \t%s\t%i\n", EmpregosTypeTrans[list][JobName], EmpregosTypeTrans[list][JobHabName], EmpregosTypeTrans[list][JobLevel]);
				strcat(boxConte, str_);
            	result=true;
   			}
		}
	    case TYPE_CONJ:{
            for(new list; list < sizeof(EmpregosTypeGroup); list++) {
				format(str_, 100, "{7CF97C}>{FFFFFF} %s \t%s\t%i\n", EmpregosTypeGroup[list][JobName], EmpregosTypeGroup[list][JobHabName], EmpregosTypeGroup[list][JobLevel]);
				strcat(boxConte, str_);
            	result=true;
   			}
		}
		case TYPE_SINGLE:{
	        for(new list; list < sizeof(EmpregosTypeSingle); list++) {
				format(str_, 100, "{7CF97C}>{FFFFFF} %s \t%s\t%i\n", EmpregosTypeSingle[list][JobName], EmpregosTypeSingle[list][JobHabName], EmpregosTypeSingle[list][JobLevel]);
				strcat(boxConte, str_);
            	result=true;
   			}
		}
	}

	if(!result){
	    boxConte[0]=EOS;
        strcat(boxConte, "{F19E75}Ainda nao existem opcoes para esta categoria!");
        ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - Categoria", boxConte, "Fechar", "");
    }
	else {
        catSelected[playerid]=type;
		ShowPlayerDialog(playerid, DIALOG_EMPESCOLHIDO, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - Categoria", boxConte, "Selecionar", "Cancelar");
	}
	return true;
}

MostrarTextLojaSkin(playerid)
{
    DestroyDynamicActor(ActorSkin[playerid]);

    SetPlayerInterior( playerid, 14 );
    SetPlayerVirtualWorld(playerid, (playerid+1));

    SetPlayerCameraPos(playerid, 210.82, -157.76, 1001.44);
    SetPlayerCameraLookAt(playerid, 215.92, -154.96, 999.96);

    SelectTextDraw(playerid, 0xFF000FF);

    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][0]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][1]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][2]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][3]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][4]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][5]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][6]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][7]);
    TextDrawShowForPlayer(playerid, MenuSelectSkin[playerid][8]);

    ActorSkin[ playerid ] = CreateDynamicActor(2, 215.8539,-154.9566,1000.5234,155.3609);
    SetDynamicActorVirtualWorld(ActorSkin[ playerid ], (playerid+1));
    return 1;
}


TirarTextLojaSkin(playerid)
{
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][0]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][1]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][2]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][3]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][4]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][5]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][6]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][7]);
    TextDrawHideForPlayer(playerid, MenuSelectSkin[playerid][8]);

    return 1;
}

//OpenPlayerMenu()
OpenPlayerMenu(playerid, menuid){
	switch(menuid){
	    case -1: return true; // forcando o jogador a utilizar o comando para abrir o menu
		case 0:{
            ShowPlayerDialog(playerid, DIALOG_ULTILIDADES, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - Ultilidades", "Item\tValor\n{12A402}> {FFFFFF}GPS \t{3C982E}R${FFFFFF}300,00\n{FF0000}> {FFFFFF}Celular \t{3C982E}R${FFFFFF}200,00\n{FF4000}> {FFFFFF}Capacete \t{3C982E}R${FFFFFF}150,00\n{FA5882}> {FFFFFF}Creditos \t{3C982E}R${FFFFFF}10,00\n{00FFFF}> {FFFFFF}Galao de Gasolina \t{3C982E}R${FFFFFF}30,00\n{5C8A00}> {FFFFFF}Agenda \t{3C982E}R${FFFFFF}50,00", "Confirmar", "Cancelar");
	        SCM(playerid, Verde, "Voce esta vendo o menu da 24/7 !");
		}
		case 1:{

		    SetPVarInt(playerid, "inicio_lista", 0);
		    ShowMenuEmpregos( playerid );
			SCM(playerid, Verde, "Voce esta vendo o menu de empregos da prefeitura !");
		}
		case 2:
        {
            SCM(playerid, Verde, "Voce esta vendo o menu de skins !");

            EntrouLojaSkin[playerid] = 1;
            MostrarTextLojaSkin(playerid);
        }

		case 3:{
		    ShowPlayerDialog(playerid, DIALOG_CAIXA_HOME, DIALOG_STYLE_LIST, "Caixa Eletronico", "{F5D310}>{FFFFFF} Saldo da Conta Corrente\n{FF0000}>{FFFFFF} Deposito em Conta Corrente\n{12A402}>{FFFFFF} Saque", "Escolher", "Fechar");
            SCM(playerid, Verde, "Voce esta vendo o menu do Caixa Eletronico !");
            PlaySoundForPlayer(playerid, 1052);
		}
		case 4:{
		    ShowPlayerDialog(playerid, DIALOG_LOTERICA, DIALOG_STYLE_LIST, "Loterica", "{FFFFFF}Pagar Dividas Banco{FF0000}( {FFFFFF}Verificacao {FF0000}) \n{FFFFFF}Pagar Dividas Multas{FF0000}( {FFFFFF}Verificacao {FF0000}) \n{FFFFFF}Raspadinha | {0F9700}R$ 20\n{FFFFFF}Mega-Sena | {0F9700}R$ 50", "Escolher", "Fechar");
            SCM(playerid, Verde, "Voce esta vendo o menu da Loterica !");
		}
		case 5:
        {
            //ShowModelSelectionMenu(playerid, SkinsList[0], "Escolha a Skin");//Binco menu
            SCM(playerid, Verde, "Voce esta vendo o menu de skins !");

            EntrouLojaSkin[playerid] = 2;
            MostrarTextLojaSkin(playerid);
		}

		case 6:{ // Burger Shot Menu
		    SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Lanches ~~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Escolha a opcao e clique em 'escolher'!");
			SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Lanches ~~~~~~~~~~~~~~~");
			ShowPlayerDialog(playerid, DIALOG_BURGERSHOT, DIALOG_STYLE_LIST, "Menu", "Lanches\nBebidas", "Escolher", "Cancelar");
		}
		case 7: { // Ammu Nation Menu

			//if() return ErroMSG(playerid, "Voce precisa ter um porte legal de armas ..");

		    SCM(playerid, Verde, "Voce esta vendo o menu da loja de armas Ammu Nation !");

            new dialog[60], str[350];

            format(dialog, sizeof(dialog), "Item\tValor\n");
            strcat(str, dialog);
            for(new item = 0; item < sizeof(ItemsAmmuNation); item++)
            {
                format(dialog, sizeof(dialog), "%s\t%d\n", ItemsAmmuNation[item][ItemNome], ItemsAmmuNation[item][ItemValor]);
                strcat(str, dialog);
            }
            ShowPlayerDialog(playerid, DIALOG_LOJA_ARMAS, DIALOG_STYLE_TABLIST_HEADERS, "AMMUNATIONS", str, "Escolher", "Fechar");
		}
		case 8: { //Banco Menu

			ShowPlayerDialog(playerid, DIALOG_BANCO_HOME, DIALOG_STYLE_LIST, "Banco - Menu", "{F5D310}>{FFFFFF} Saldo da Conta Corrente\n{FF0000}>{FFFFFF} Deposito em Conta Corrente\n{12A402}>{FFFFFF} Saque\n{C38AF7}>{FFFFFF} Transferencia", "Escolher", "Fechar");
			SCM(playerid, Verde, "Voce esta vendo o menu do Banco !");
			PlaySoundForPlayer(playerid, 1052);
		}
		case 10: { //Menu de vendas da Concessionaria de LS

		 /*   if(PlayerInfo[playerid][pVehKey1] == INVALID_VEHICLE_CONCE
			&& PlayerInfo[playerid][pVehKey2] == INVALID_VEHICLE_CONCE
	        && PlayerInfo[playerid][pVehKey3] == INVALID_VEHICLE_CONCE
	        && PlayerInfo[playerid][pVehKey4] == INVALID_VEHICLE_CONCE
	        && PlayerInfo[playerid][pVehKey5] == INVALID_VEHICLE_CONCE*/
			//) return ErroMSG(playerid, "Voce nao possui veiculos!");

            SCM(playerid, Verde, "Menu da concessionaria ( VENDA )!");

			static strbox[300];
			/*if(IsAVip( playerid )) {
				format(strbox, sizeof(strbox),
				"{7CFAB9}> {FFFFFF}° - Veiculo: {9AFEC5}%s\n\
				{7CFAB9}> {FFFFFF}2Ñ - Veiculo: {9AFEC5}%s\n\
				{7CFAB9}> {FFFFFF}3Ñ - Veiculo: {9AFEC5}%s\n\
				{7CFAB9}> {FFFFFF}4Ñ - Veiculo: {9AFEC5}%s\n\
				{7CFAB9}> {FFFFFF}5Ñ - Veiculo: {9AFEC5}%s",
				PlayerInfo[playerid][pVehKey1] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vModel]-400]):("{D4D6D4}Indisponivel"),
				PlayerInfo[playerid][pVehKey2] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey2]][vModel]-400]):("{D4D6D4}Indisponivel"),
				PlayerInfo[playerid][pVehKey3] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey3]][vModel]-400]):("{D4D6D4}Indisponivel"),
				PlayerInfo[playerid][pVehKey4] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey4]][vModel]-400]):("{D4D6D4}Indisponivel"),
				PlayerInfo[playerid][pVehKey5] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey5]][vModel]-400]):("{D4D6D4}Indisponivel"));
    		}
			else
			{
			    format(strbox, sizeof(strbox),
				"{7CFAB9}> {FFFFFF}° - Veiculo: {9AFEC5}%s\n\
				{7CFAB9}> {FFFFFF}2Ñ - Veiculo: {9AFEC5}%s\n\
				{7CFAB9}> {FFFFFF}3Ñ - Veiculo: {9AFEC5}%s",
				PlayerInfo[playerid][pVehKey1] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey1]][vModel]-400]):("{D4D6D4}Indisponivel"),
				PlayerInfo[playerid][pVehKey2] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey2]][vModel]-400]):("{D4D6D4}Indisponivel"),
				PlayerInfo[playerid][pVehKey3] != INVALID_VEHICLE_CONCE ? (SkVeh[VeiculoInfo[PlayerInfo[playerid][pVehKey3]][vModel]-400]):("{D4D6D4}Indisponivel"));
			}*/
			ShowPlayerDialog(playerid, CONCE_VENDAS, DIALOG_STYLE_LIST, "..:: Seus Veiculos ::..", strbox, "Selecionar", "Cancelar");
		}
		case 11: { //Sistema de Lutas

			new Box[600];
			static str[ 129 ];

            strcat(Box, "Estilo\tPreco\n");
            for(new list_= 0; list_ < sizeof(ArrayMenuLutas); list_++){
				format(str, 129, "{FF0000}>{FFFFFF} %s\t%s\t%i\n", ArrayMenuLutas[list_][mlsNome], FormatNumber(ArrayMenuLutas[list_][mlsPrice]));
                strcat(Box, str);
			}
        	ShowPlayerDialog(playerid, DIALOG_LUTAS, DIALOG_STYLE_TABLIST_HEADERS, "Academia Menu", Box, "Aprender", "Cancelar");
		}

		case 12: callcmd::menu(playerid, "acessorios");

		case 13: {
		    if(PlayerInfo[ playerid ][ pEmprego ] != Advogado) return true;
		    if(!EmpregoDuty[ playerid ]) return ErroMSG(playerid, "Voce nao esta em modo trabalhando!");

            new
				lista[500],
				str[150],
				count = 0
			;
			ForPlayers( a ) {
				if(!PresoStatus[a]) continue;
				if(!PlayerSolicitou[ a ]) continue;

				format(str, sizeof(str), "{%s}%s{ffffff} esta preso em {%s}%s{ffffff} | Tempo restante de pena: {ff0000}%s\n", OrgColorHex[PlayerInfo[a][pOrg]], GetName(a), OrgColorHex[PlayerInfo[ a ][ PresoOrg ]], nomeOrgs[PlayerInfo[ a ][ PresoOrg ]], Convert(PlayerInfo[a][PresoTempo], 1));
				strcat(lista, str );
				count++;
			}
			if(count){
				strcat(lista,"\n\n{ffffff}Total de presos: {333333}%d", count);
				ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Lista de detentos pedindo contrato", lista, "Fechar", "");
			}
			else ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Lista de detentos pedindo contrato", "Nao ha ninguem precisando de um contrato no momento!", "Fechar", "");

		}
		case 14: {
			ShowPlayerDialog(playerid, DIALOG_COMPRAR_FICHA, DIALOG_STYLE_INPUT, "Comprar ficha", "Digite a quantidade de fichas que deseja comprar:\n\nCada ficha custa R$100 e voce podera usar agora ou guardar com voce.", "Ok", "Cancelar");
		}

        case 16: {
            ShowPlayerDialog(playerid, DIALOG_MENU_ANDAR, DIALOG_STYLE_TABLIST_HEADERS, "Predio", "Andar\tDescricao\n1\tDetran\n2\tImobiliaria", "Ir", "Sair");
        }
	}

	return true;
}

stock SetVehicleParams(vehicleid, paramid, val){
    new
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective
	;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(paramid) {
		case 0: {
			if(val == 1) SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights,alarm,doors,bonnet,boot,objective);
			else SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights,alarm,doors,bonnet,boot,objective);
		}
		case 1: {
			if(val == 1) SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm,doors,bonnet,boot,objective);
			else SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm,doors,bonnet,boot,objective);
		}
		case 2: {
			if(val == 1) SetVehicleParamsEx(vehicleid, engine, lights, VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
			else SetVehicleParamsEx(vehicleid, engine, lights, VEHICLE_PARAMS_OFF, doors,bonnet,boot,objective);
		}
		case 3: {
			if(val == 1) SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_ON,bonnet,boot,objective);
			else SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet,boot,objective);
		}
		case 4: {
			if(val == 1) SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot,objective);
			else SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot,objective);
		}
		case 5: {
			if(val == 1) SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
			else SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
		}
		case 6: {
			if(val == 1) SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, VEHICLE_PARAMS_ON);
			else SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, VEHICLE_PARAMS_OFF);
		}
	}
	return true;
}

stock GetVehicleParameters(vehicleid, paramid){
    new
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective
	;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(paramid) {
		case 0: {
			if(engine == 1) return 0x01;
			return 0;
		}
		case 1:
		{
			if(lights == 1) return 0x01;
			return 0;
		}
		case 2:
		{
			if(alarm == 1) return 0x01;
			return 0;
		}
		case 3:
		{
			if(doors == 1) return 0x01;
			return 0;
		}
		case 4:
		{
			if(bonnet == 1) return 0x01;
			return 0;
		}
		case 5:
		{
			if(boot == 1) return 0x01;
			return 0;
		}
		case 6:
		{
			if(objective == 1) return 0x01;
			return 0;
		}
	}
    return 0;
}

stock LoadPlayerRemovedBuildings(playerid, filename[])
{
	new
		File:file_ptr,
		line[256],
		modelid,
		Float:SpawnX,
		Float:SpawnY,
		Float:SpawnZ,
		Float:Radius,
		buildings_loaded
	;
	file_ptr = fopen(filename, io_read);
	if(!file_ptr)
	{
		return printf("ERRO! Falha ao remover buildings do arquivo %s para %s (O arquivo nao existe no diretorio scriptfiles)!\n", filename, GetName(playerid));
	}
	while(fread(file_ptr, line) > 0)
	{
		if(!sscanf(line, "p<,>dffff", modelid, SpawnX, SpawnY, SpawnZ, Radius))
		{
			RemoveBuildingForPlayer(playerid, modelid, SpawnX, SpawnY, SpawnZ, Radius);
			buildings_loaded++;
		}
	}
	fclose(file_ptr);
	return printf("Buildings: %d removidos(s) de %s para %s\n", buildings_loaded, filename, GetName(playerid));
}

stock GetToyNameByModel(modelid) {
	new toy[32] = "Nenhum";
	for (new i; i < sizeof AttachmentObjects; i++) {
		if (AttachmentObjects[i][attachmodel] == modelid) {
			format(toy, sizeof toy, AttachmentObjects[i][attachname]);
			break;
		}
	}
	return toy;
}

stock LoadPlayerToys(playerid) {
    // -- File -- //
    new file[128], temp[45];
    format(file, sizeof file, PASTA_ACESSORIOS, GetName( playerid ));
    if(fexist(file)) {
	    for(new i; i < MAX_VIP_TOYS; i++) {
		    // -- Identification -- //
		    format(temp, sizeof temp, "Model_%d", i);
		    PlayerToys[playerid][i][ptModelID] = DOF2_GetInt(file, temp);
		    format(temp, sizeof temp, "Bone_%d", i);
		    PlayerToys[playerid][i][ptBoneID] = DOF2_GetInt(file, temp);
		    // -- Position -- //
		    format(temp, sizeof temp, "OffSetX_%d", i);
		    PlayerToys[playerid][i][ptOffsetX] = DOF2_GetFloat(file, temp);
	  	    format(temp, sizeof temp, "OffSetY_%d", i);
		    PlayerToys[playerid][i][ptOffsetY] = DOF2_GetFloat(file, temp);
		    format(temp, sizeof temp, "OffSetZ_%d", i);
		    PlayerToys[playerid][i][ptOffsetZ] = DOF2_GetFloat(file, temp);
		    // -- BOPEtion -- //
		    format(temp, sizeof temp, "RotX_%d", i);
		    PlayerToys[playerid][i][ptRotX] = DOF2_GetFloat(file, temp);
		    format(temp, sizeof temp, "RotY_%d", i);
		    PlayerToys[playerid][i][ptRotY] = DOF2_GetFloat(file, temp);
		    format(temp, sizeof temp, "RotZ_%d", i);
		    PlayerToys[playerid][i][ptRotZ] = DOF2_GetFloat(file, temp);
		    // -- Wearing -- //
		    format(temp, sizeof temp, "Wearing_%d", i);
		    PlayerToys[playerid][i][ptWearing] = bool:DOF2_GetInt(file, temp);
		}
	} else {
	    for(new i; i < MAX_VIP_TOYS; i++) {
            PlayerToys[playerid][i][ptModelID] = 0;
            PlayerToys[playerid][i][ptBoneID] = 0;
            PlayerToys[playerid][i][ptOffsetX] = 0;
            PlayerToys[playerid][i][ptOffsetY] = 0;
            PlayerToys[playerid][i][ptOffsetZ] = 0;
            PlayerToys[playerid][i][ptRotX] = 0;
            PlayerToys[playerid][i][ptRotY] = 0;
            PlayerToys[playerid][i][ptRotZ] = 0;
            PlayerToys[playerid][i][ptWearing] = false;
		}
	}
}

stock SavePlayerToys(playerid) {
	if(PlayerInfo[playerid][pLogger] && !IsPlayerNPC(playerid)){
		// -- File -- //
	    new
			file[50],
			file2[50],
			temp[45]
		;

	    format(file, sizeof file, PASTA_ACESSORIOS, GetName( playerid ) );
	    format(file2, sizeof file2, PASTA_CONTAS, GetName( playerid ) );

	    if(fexist(file2))
	    {
		    if(!fexist(file))
		        DOF2_CreateFile(file);

			for(new i; i < MAX_VIP_TOYS; i++) {
				// -- Identification -- //
				format(temp, sizeof temp, "Model_%d", i);
				DOF2_SetInt(file, temp, PlayerToys[playerid][i][ptModelID]);
				format(temp, sizeof temp, "Bone_%d", i);
				DOF2_SetInt(file, temp, PlayerToys[playerid][i][ptBoneID]);
				// -- Position -- //
				format(temp, sizeof temp, "OffSetX_%d", i);
				DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptOffsetX]);
				format(temp, sizeof temp, "OffSetY_%d", i);
				DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptOffsetY]);
				format(temp, sizeof temp, "OffSetZ_%d", i);
				DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptOffsetZ]);
				// -- BOPEtion -- //
				format(temp, sizeof temp, "RotX_%d", i);
				DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptRotX]);
				format(temp, sizeof temp, "RotY_%d", i);
				DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptRotY]);
				format(temp, sizeof temp, "RotZ_%d", i);
				DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptRotZ]);
				// -- Wearing -- //
				format(temp, sizeof temp, "Wearing_%d", i);
				DOF2_SetInt(file, temp, _:PlayerToys[playerid][i][ptWearing]);
			}
		}
	}
}

stock SetPlayerToys(playerid) {
	// -- Boundries -- //
	new slots;
	if(IsAVip(playerid))
		slots = MAX_VIP_TOYS;
	else
		slots = MAX_FREE_TOYS;
	for(new i; i < slots; i++) {
        // -- Init -- //
        if(PlayerToys[playerid][i][ptWearing])
            SetPlayerAttachedObject(playerid,i,PlayerToys[playerid][i][ptModelID],PlayerToys[playerid][i][ptBoneID],PlayerToys[playerid][i][ptOffsetX],PlayerToys[playerid][i][ptOffsetY],
            PlayerToys[playerid][i][ptOffsetZ],PlayerToys[playerid][i][ptRotX],PlayerToys[playerid][i][ptRotY],PlayerToys[playerid][i][ptRotZ],1,1,1);
        else if(IsPlayerAttachedObjectSlotUsed(playerid, i))
            RemovePlayerAttachedObject(playerid, i);
	}
	for(new r = slots; r < MAX_PLAYER_ATTACHED_OBJECTS; r++)
	    // -- If the slot is maybe in use -- //
	    if(IsPlayerAttachedObjectSlotUsed(playerid, r))
            RemovePlayerAttachedObject(playerid, r);
}

//CI()
CI(id){
	static cFile[ 50 ];
	format(cFile, 50, PASTA_CONTAS, PlayerInfo[id][pName]);
	return cFile;
}

//FileOrg()
FileOrg(orgid){
	static oFile[50];
	format(oFile, 50, PASTA_ORGS, orgid);
	return oFile;
}

//Get Name retirando "_" Underline

//GetNameEx()
GetNameEx(sKY){
	new _st@[MAX_PLAYER_NAME];
    strmid(_st@, PlayerInfo[sKY][pName], 0, strlen(PlayerInfo[sKY][pName]),MAX_PLAYER_NAME);
    Loop(_@i, MAX_PLAYER_NAME){
        if (_st@[ _@i ] == '_') _st@[ _@i ] = ' ';}
    return _st@;
}

//GetName()
GetName(playerid)
{
	new
		_PlayerName[MAX_PLAYER_NAME]
	;
	GetPlayerName(playerid, _PlayerName, MAX_PLAYER_NAME);
	return _PlayerName;
}

//VIPLevel()
VIPLevel( playerid ){
	new st_[50];
	switch(PlayerInfo[ playerid ][ pVIP ]){
		case 1: format(st_, sizeof(st_), "VIP");
	    case 2: format(st_, sizeof(st_), "VIP +");
	    case 3: format(st_, sizeof(st_), "VIP Plus");
        case 4: format(st_, sizeof(st_), "SOCIO");
        case 5: format(st_, sizeof(st_), "SOCIO +");
        case 6: format(st_, sizeof(st_), "SOCIO Plus");
	    //default: format(st_, sizeof(st_), "");
	}
	return st_;
}


stock timec(timestamp, compare = -1) {
    if (compare == -1) { compare = gettime();}
    new n, Float:d = (timestamp > compare) ? timestamp - compare : compare - timestamp, returnstr[32];
    if (d < 60) {
        format(returnstr, sizeof(returnstr), "< 1 minuto");
        return returnstr;
    } else if (d < 3600) { // 3600 = 1 hour
        n = floatround(floatdiv(d, 60.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "minuto's");
    } else if (d < 86400) { // 86400 = 1 day
        n = floatround(floatdiv(d, 3600.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "hora's");
    } else if (d < 2592000) { // 2592000 = 1 month
        n = floatround(floatdiv(d, 86400.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "dia's");
    } else if (d < 31536000) { // 31536000 = 1 year
        n = floatround(floatdiv(d, 2592000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "mes's");
    } else {
        n = floatround(floatdiv(d, 31536000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "ano's");
    }
    if (n == 1) {
        format(returnstr, sizeof(returnstr), "1 %s", returnstr);
    } else {
        format(returnstr, sizeof(returnstr), "%d %s", n, returnstr);
    }
    return returnstr;
}

forward LotoSorteio();
public LotoSorteio(){
	static num, player, str[ 129 ];

	num = random(100);
	player = 999;

	ForPlayers(i){
	    if(PlayerInfo[ i ][ pBilheteMega ] >= 1){ //Verifica se o jogador possui um bilhete da loteria
			if(PlayerInfo[ i ][ pBilheteMega ] == num){ // verifica se o bilhete do player coincide com o sorteado
                player = i;
			}

			PlayerInfo[ i ][ pBilheteMega ] = 0;
			OnSalvarDados(i);
		}
		PlaySoundForPlayer(i, 1138);
	}
	if(player != 999){
		format(str, sizeof(str), "{33CCFF}| Loteria | - %s Acaba de ganhar na Mega Sena, numero sorteado %i, quantia ganha: %s", PlayerInfo[ player ][ pName ], num, FormatNumber(LotoInfo[ LotoValue ]));
	    JNNEWS(str);

	    format(str, sizeof(str), "{33CCFF}| Loteria | - Voce acaba de ganhar R$ %s por ganhar a Mega Sena!", FormatNumber(LotoInfo[ LotoValue ]));
	    SCM(player, -1, str);

	    ActionPlayerBank(player, "+", LotoInfo[ LotoValue ]);

	    format(STRLOG, sizeof(STRLOG), "[%s] %s ganhou %i na mega sena.", GetDateEx(), GetName( player ), LotoInfo[ LotoValue ]);
		SLog("MegaSena.log", STRLOG);

		LotoInfo[ LotoValue ] = 0;
		LotoInfo[ LotoNum ] = 0;
		format(LotoInfo[ LotoWinner ], sizeof(LotoInfo[ LotoWinner ]),"%s", GetName( player ));
	}
	else
	{
	    LotoInfo[ LotoValue ] += (LotoInfo[ LotoArrec ]+random(300));
		format(str, sizeof(str), "{33CCFF}| Loteria | - Ninguem acertou na Mega Sena, o premio acumulou-se para R$ %s ", FormatNumber(LotoInfo[ LotoValue ]));
	    SendClientMessageToAll(-1, str);
	    format(str, sizeof(str), "{33CCFF}Numero sorteado: %i", num);
	    SendClientMessageToAll(-1, str);
	}
	SaveLoto();
	return true;
}

LoadLoto(){
    if(!DOF2_FileExists(PASTA_CONFIG)){
		DOF2_CreateFile(PASTA_CONFIG);
		DOF2_SetInt(PASTA_CONFIG, "Horario", 4);
 		DOF2_SetInt(PASTA_CONFIG, "Recorde", 2);
 		DOF2_SetInt(PASTA_CONFIG, "Ping", 1000);
 		DOF2_SetInt(PASTA_CONFIG, "LotoAcumulado", 25000);
 		DOF2_SaveFile();
	}
	else {
 		LotoInfo[ LotoValue ] = DOF2_GetInt(PASTA_CONFIG, "LotoAcumulado");
		LotoInfo[ LotoNum ] = 0;
	}

	LotoInfo[ LotoTimer ] = SetTimer("LotoSorteio", TMinutos(50), true);
	return printf("[Play Style] - [%s] Mega Sena iniciada", GetDateEx());
}

SaveLoto(){
	DOF2_SetInt(PASTA_CONFIG, "LotoAcumulado", LotoInfo[ LotoValue ]);
	return DOF2_SaveFile();
}

FormatNumber(number)
{
	new Str[15];
	format(Str, 15, "%d", number);

	if (strlen(Str) < sizeof(Str))
	{
		if(number < 1000) format(Str, 10, "%d,00", number);
		else if (number >= 1000 && number < 10000)
		strins( Str, ",", 1, sizeof(Str));

		else if (number >= 10000 && number < 100000)
		strins(Str, ",", 2, sizeof(Str));

		else if (number >= 100000 && number < 1000000)
		strins(Str, ",", 3, sizeof(Str));

		else if (number >= 1000000 && number < 10000000)
		strins(Str, ",", 1, sizeof(Str)),strins(Str, ",", 5, sizeof(Str));

		else if (number >= 10000000 && number < 100000000)
		strins(Str, ",", 2, sizeof(Str)),strins(Str, ",", 6, sizeof(Str));

		else if (number >= 100000000 && number < 1000000000)
		strins(Str, ",", 3, sizeof(Str)),strins(Str, ",", 7, sizeof(Str));

		else if (number >= 1000000000 && number < 10000000000)
		strins(Str, ",", 1, sizeof(Str)),
		strins(Str, ",", 5, sizeof(Str)),
		strins(Str, ",", 9, sizeof(Str));
		else format(Str, 10, "%d", number);
	}
	else  format( Str, 15, "<BUG>" );

	return Str;
}

stock PhoneFormat(phonenumber)
{
	new
		number[16],
		negativ = 0,
		sep[2],
		tmp;
		sep = "-"
	;
	if(phonenumber < 0) negativ = 1;
	format(number, sizeof(number), "%d", phonenumber);
	for(new i = strlen(number); i > negativ + 1; i--){
	tmp++;
		if(tmp == 4){
			strins(number, sep, i - 1); tmp  = 0;
		}
	}
	return number;
}

stock ValidEmail(email[]) {
	new len=strlen(email);
	new cstate=0;
	new i;
	for(i=0;i<len;i++) {
		if ((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
		{
		}
		else
		{
			if ((cstate==0) &&(email[i]=='@')) {
				cstate=1;
			}
			else {
				return false;
			}
		}
	}
	if (cstate<1) return false;
	if (len<6) return false;
	if ((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.')) return true;
	return false;
}


Public:bool:GetPlayerFreeSlotWeapon( id ){
	if(PlayerInfo[id][pLevel] > 0){
	    if(PlayerInfo[id][pWeapon1] == 0) return true;
	}
	if(PlayerInfo[id][pLevel] > 1){
	    if(PlayerInfo[id][pWeapon2] == 0) return true;
	}
    if(PlayerInfo[id][pLevel] > 2){
    	if(PlayerInfo[id][pWeapon3] == 0) return true;
	}
 	if(PlayerInfo[id][pLevel] > 3){
		if(PlayerInfo[id][pWeapon4] == 0) return true;
	}
 	if(PlayerInfo[id][pLevel] > 4){
	    if(PlayerInfo[id][pWeapon5] == 0) return true;
	}
	if(PlayerInfo[id][pLevel] > 5){
	   	if(PlayerInfo[id][pWeapon6] == 0) return true;
	}
	if(PlayerInfo[id][pLevel] > 6){
	    if(PlayerInfo[id][pWeapon7] == 0) return true;
	}
	if(PlayerInfo[id][pLevel] > 7){
	    if(PlayerInfo[id][pWeapon8] == 0) return true;
	}
	if(PlayerInfo[id][pLevel] > 8){
	    if(PlayerInfo[id][pWeapon9] == 0) return true;
	}
	if(PlayerInfo[id][pLevel] > 9){
	    if(PlayerInfo[id][pWeapon10] == 0) return true;
	}
	return false;
}

stock SetPlayerArma(id, weapon, bullet, msg=0) {
	static str[ 100 ];

	if(msg){
		format( str , sizeof( str ), "* Voce adquiriu uma %s com %i balas", GetNameAllWeapon(weapon), bullet);
		SCM( id , 0x00799EFF, str );
	}

	if(PlayerInfo[id][pLevel] >= 1){

		if(PlayerInfo[id][pWeapon1] == 0){
	        PlayerInfo[id][pWeapon1] = weapon;
	        PlayerInfo[id][pBullet1] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon2] == 0){
			PlayerInfo[id][pWeapon2] = weapon;
			PlayerInfo[id][pBullet2] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon3] == 0){
			PlayerInfo[id][pWeapon3] = weapon;
			PlayerInfo[id][pBullet3] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon4] == 0){
			PlayerInfo[id][pWeapon4] = weapon;
			PlayerInfo[id][pBullet4] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon5] == 0){
			PlayerInfo[id][pWeapon5] = weapon;
			PlayerInfo[id][pBullet5] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon6] == 0){
			PlayerInfo[id][pWeapon6] = weapon;
			PlayerInfo[id][pBullet6] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon7] == 0){
			PlayerInfo[id][pWeapon7] = weapon;
			PlayerInfo[id][pBullet7] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon8] == 0){
			PlayerInfo[id][pWeapon8] = weapon;
			PlayerInfo[id][pBullet8] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon9] == 0){
			PlayerInfo[id][pWeapon9] = weapon;
			PlayerInfo[id][pBullet9] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
		else if(PlayerInfo[id][pWeapon10] == 0){
			PlayerInfo[id][pWeapon10] = weapon;
			PlayerInfo[id][pBullet10] = bullet;
	        GivePlayerWeaponEx(id, weapon, bullet);
		}
	}
	OnSalvarDados( id );
	return 1;
}


Public:TentarLigarVeiculo(playerid)
{
	static Float:VehHealt, Rand;
	GetVehicleHealth(GetPlayerVehicleID(playerid), VehHealt);

	DeletePVar(playerid, "LigandoVeiculo");

	if(VehHealt >= 800){
		SetVehicleEngineState(GetPlayerVehicleID(playerid), 1);
		SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor ligado.");
	}
	else if(VehHealt >= 600 && VehHealt < 800){
	    Rand = random(20);
	    if(Rand > 3){
			SetVehicleEngineState(GetPlayerVehicleID(playerid), 1);
			SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor ligado.");
		}
		else SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor Falhou.");
	}
	else if(VehHealt >= 400 && VehHealt < 600){
	    Rand = random(20);
	    if(Rand > 12){
			SetVehicleEngineState(GetPlayerVehicleID(playerid), 1);
			SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor ligado.");
		}
		else SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor Falhou.");
	}
	else if(VehHealt >= 310 && VehHealt < 400){
	    Rand = random(20);
	    if(Rand > 16){
			SetVehicleEngineState(GetPlayerVehicleID(playerid), 1);
			SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor ligado.");
		}
		else SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor Falhou.");
	}
	else if(VehHealt >= 260 && VehHealt < 309){
	    SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Motor Fundido.");
	    SendClientMessage(playerid, -1, "{F0E0CE}(Veiculo) Chame um Mecanico.");
	}
	return true;
}

stock IsVehicleOccupied(vehicleid){
	ForPlayers( i ) {
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER){
			if(GetPlayerVehicleID(i) == vehicleid) {
				return 1;
			}
		}
	}
	return 0;
}

stock GetDate(Day=-1,Month=-1,Year=-1){
	if(Day == -1 && Month == -1 && Year ==-1){
	    //new Dia, Mes, Ano;
	    getdate(Year, Month, Day);
	}
	new V0,V1,V2,V3,V4;
	new V5[] = {0,31,59,90,120,151,181,212,243,273,304,334};
	V0 = Day + V5[Month - 1];if(Month > 2 && ((Year % 4 == 0 && Year % 100 != 0) || Year % 400 == 0)) V0++;
	V1 = (Year - 1) % 100;V2 = (Year - 1) - V1;V3 = V1 + (V1 / 4);V4 = (((((V2 / 100) % 4) * 5) + V3) % 7);
	V4 += V0 - 1;V4 %= 7;
	new V6[][] = {"Janeiro","Fevereiro","Marco","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"};
	new V7[][] = {"Segunda Feira","Terca Feira","Quarta Feira","Quinta Feira","Sexta Feira","Sabado","Domingo"};
	new V8[256];
	format(V8,sizeof(V8),"%02d %s de %d, %s",Day,V6[Month - 1],Year,V7[V4]);
	return V8;
}

stock MsToString(millisecond, format[])
{
    new
        tmp[4],
        result[64],
        hour,
        minute,
        second,
        format_char,
        result_lenght,
        bool:padding,
        len = strlen(format);

    hour            = (millisecond / (1000 * 60 * 60));
    minute          = (millisecond % (1000 * 60 * 60)) / (1000 * 60);
    second          = ((millisecond % (1000 * 60 * 60)) % (1000 * 60)) / 1000;
    millisecond     = millisecond - (hour * 60 * 60 * 1000) - (minute * 60 * 1000) - (second * 1000);

    while(format_char < len)
    {
        if(format[format_char] == '%')
        {
            format_char++;

            if(format[format_char] == '1')
            {
                padding = true;
                format_char++;
            }
            else
            {
                padding = false;
            }

            switch(format[format_char])
            {
                case 'h':
                {
                    valstr(tmp, hour);

                    if(padding)
                    {
                        if(hour < 10)
                            strcat(result, "0");
                    }

                    strcat(result, tmp);
                    result_lenght = strlen(result);
                }

                case 'm':
                {
                    valstr(tmp, minute);

                    if(padding)
                    {
                        if(minute < 10)
                            strcat(result, "0");
                    }

                    strcat(result, tmp);
                    result_lenght = strlen(result);
                }

                case 's':
                {
                    valstr(tmp, second);

                    if(padding)
                    {
                        if(second < 10)
                            strcat(result, "0");
                    }

                    strcat(result, tmp);
                    result_lenght = strlen(result);
                }

                case 'd':
                {
                    valstr(tmp, millisecond);

                    if(padding)
                    {
                        if(millisecond < 10)
                            strcat(result, "00");

                        else if(millisecond < 100)
                            strcat(result, "0");
                    }

                    strcat(result, tmp);
                    result_lenght = strlen(result);
                }
            }
        }
        else
        {
            result[result_lenght] = format[format_char];
            result_lenght++;
        }

        format_char++;
    }

    return result;
}

//CountDown
new
	IsCountdownStarted,
	IsPlayerCountdownStarted[MAX_PLAYERS],
	PlayerCountdownCount[MAX_PLAYERS],
	CountdownCount,
	PlayerCountdownTimer[MAX_PLAYERS],
	CountdownTimer
;


new
	_rcmd[ 50]
;



forward SpawnarPlayer( sid );
public SpawnarPlayer( sid )
{
    if(IsPlayerInAnyVehicle( sid ))
	{
		RemovePlayerFromVehicle( sid );

		SetPlayerSpecialAction( sid, SPECIAL_ACTION_NONE );
		SetTimerEx("SpawnarPlayer", 2000, false, "i", sid );
	}
	else CallLocalFunction("AutoSpawnEx", "i", sid);
	return true;
}

ClearChatbox(playerid, lines){
    if(IsPlayerConnected(playerid)){

        static i;
        i = lines;

		for(; i > 0; i--){
			SendClientMessage(playerid, -1, " ");
		}
	}
	return 1;
}

ClearChatboxToAll(lines){
    static i;
    i = lines;

	for(; i > 0; i--){
		SendClientMessageToAll(-1, " ");
	}
	return 1;
}

//GetIPX()
GetIPX(playerid)
{
	new
		_PlayerIP[	20	]
	;
	GetPlayerIp(playerid, _PlayerIP, sizeof(_PlayerIP));
	return _PlayerIP;
}

//SetPlayerPosEx()
SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interior = 0, virt=0, freeze=0){

	SetPlayerPos(playerid, Float:X, Float:Y, Float:Z	);
	SetPlayerFacingAngle(playerid, Float:A );
	SetPlayerInterior(playerid, interior	);
	SetPlayerVirtualWorld(playerid, virt);

	Streamer_UpdateEx(playerid, Float:X, Float:Y, Float:Z );

	if(freeze != 0)
	{
	    FreezeEx(playerid, freeze);
		Freeze( playerid );
	    GameTextForPlayer(playerid, "~w~Carregando..", (freeze*1000), 6);
	}
	return true;
}

//SetVeiculoPosEx()
SetVehiclePosEx(vehicleid, Float:X, Float:Y, Float:Z, Float:A, interior  = 0, virt=0){
	SetVehiclePos(vehicleid, X, Y, Z);
	SetVehicleZAngle(vehicleid, A);
	LinkVehicleToInterior(vehicleid, interior);
	SetVehicleVirtualWorld(vehicleid, virt);
}


SalvarEasterEggs(id)
{
    new cFile[50];
    format(cFile, 100, PASTA_EGGS, id);
    if(!DOF2_FileExists( cFile) ) DOF2_CreateFile(cFile);

    DOF2_SetInt(cFile, "ID", egg[id][eID]);
    DOF2_SetFloat(cFile, "PosX", egg[id][eX]);
    DOF2_SetFloat(cFile, "PosY", egg[id][eY]);
    DOF2_SetFloat(cFile, "PosZ", egg[id][eZ]);
    DOF2_SetInt(cFile, "Level",  egg[id][eLevel]);
    DOF2_SetInt(cFile, "Dinheiro", egg[id][eGrana]);

    DOF2_SaveFile();
}

CarregarEasterEggs()
{
    static cFile[100];
    Loop(a, MAX_EGGS)
    {
        format(cFile, 100, PASTA_EGGS, a);
        if(DOF2_FileExists(cFile))
        {
            egg[a][eLevel] = DOF2_GetInt(cFile, "Level");
            egg[a][eGrana] = DOF2_GetInt(cFile, "Dinheiro");

            egg[a][eX] = DOF2_GetFloat(cFile, "PosX");
            egg[a][eY] = DOF2_GetFloat(cFile, "PosY");
            egg[a][eZ] = DOF2_GetFloat(cFile, "PosZ");

            CriarEasterEgg(a);
            totaleggs++;
        }
    }
    return printf("[Play Style] - %d EasterEggs carregados", totaleggs);
}

CriarEasterEgg(idegg) return egg[idegg][eID] = CreateDynamicObject(19341, egg[idegg][eX], egg[idegg][eY], egg[idegg][eZ], 0, 0, 0, 0, 0, 0);

DeletarEasterEggs(id)
{
    static cFile[100];
    format(cFile, 100, PASTA_EGGS, id);

    if(DOF2_FileExists(cFile))
    {
        egg[id][eLevel] = -1;
        egg[id][eGrana] = -1;

        egg[id][eX] = 0;
        egg[id][eY] = 0;
        egg[id][eZ] = 0;

        DOF2_RemoveFile(cFile);

        DestroyDynamicObject(egg[id][eID]);

        totaleggs--;
    }
    return 1;
}

stock PreloadAnims(playerid)
{
    PreloadAnimLib(playerid,"AIRPORT");             
	PreloadAnimLib(playerid,"Attractors");          
	PreloadAnimLib(playerid,"BAR");         
	PreloadAnimLib(playerid,"BASEBALL");            
	PreloadAnimLib(playerid,"BD_FIRE");             
	PreloadAnimLib(playerid,"BEACH");               
	PreloadAnimLib(playerid,"benchpress");          
	PreloadAnimLib(playerid,"BF_injection");                
	PreloadAnimLib(playerid,"BIKED");               
	PreloadAnimLib(playerid,"BIKEH");                 
	PreloadAnimLib(playerid,"BIKELEAP");              
	PreloadAnimLib(playerid,"BIKES");                 
	PreloadAnimLib(playerid,"BIKEV");                 
	PreloadAnimLib(playerid,"BIKE_DBZ");              
	PreloadAnimLib(playerid,"BLOWJOBZ");              
	PreloadAnimLib(playerid,"BMX");           
	PreloadAnimLib(playerid,"BOMBER");                
	PreloadAnimLib(playerid,"BOX");           
	PreloadAnimLib(playerid,"BSKTBALL");              
	PreloadAnimLib(playerid,"BUDDY");                 
	PreloadAnimLib(playerid,"BUS");           
	PreloadAnimLib(playerid,"CAMERA");                
	PreloadAnimLib(playerid,"CAR");           
	PreloadAnimLib(playerid,"CARRY");                 
	PreloadAnimLib(playerid,"CAR_CHAT");              
	PreloadAnimLib(playerid,"CASINO");                
	PreloadAnimLib(playerid,"CHAINSAW");              
	PreloadAnimLib(playerid,"CHOPPA");                
	PreloadAnimLib(playerid,"CLOTHES");               
	PreloadAnimLib(playerid,"COACH");                 
	PreloadAnimLib(playerid,"COLT45");                
	PreloadAnimLib(playerid,"COP_AMBIENT");           
	PreloadAnimLib(playerid,"COP_DVBYZ");             
	PreloadAnimLib(playerid,"CRACK");                 
	PreloadAnimLib(playerid,"CRIB");                  
	PreloadAnimLib(playerid,"DAM_JUMP");              
	PreloadAnimLib(playerid,"DANCING");               
	PreloadAnimLib(playerid,"DEALER");                
	PreloadAnimLib(playerid,"DILDO");                 
	PreloadAnimLib(playerid,"DODGE");                 
	PreloadAnimLib(playerid,"DOZER");                 
	PreloadAnimLib(playerid,"DRIVEBYS");              
	PreloadAnimLib(playerid,"FAT");           
	PreloadAnimLib(playerid,"FIGHT_B");               
	PreloadAnimLib(playerid,"FIGHT_C");               
	PreloadAnimLib(playerid,"FIGHT_D");               
	PreloadAnimLib(playerid,"FIGHT_E");               
	PreloadAnimLib(playerid,"FINALE");                
	PreloadAnimLib(playerid,"FINALE2");               
	PreloadAnimLib(playerid,"FLAME");                 
	PreloadAnimLib(playerid,"Flowers");               
	PreloadAnimLib(playerid,"FOOD");                  
	PreloadAnimLib(playerid,"Freeweights");           
	PreloadAnimLib(playerid,"GANGS");                 
	PreloadAnimLib(playerid,"GHANDS");                
	PreloadAnimLib(playerid,"GHETTO_DB");             
	PreloadAnimLib(playerid,"goggles");               
	PreloadAnimLib(playerid,"GRAFFITI");              
	PreloadAnimLib(playerid,"GRAVEYARD");             
	PreloadAnimLib(playerid,"GRENADE");               
	PreloadAnimLib(playerid,"GYMNASIUM");             
	PreloadAnimLib(playerid,"HAIRCUTS");              
	PreloadAnimLib(playerid,"HEIST9");                
	PreloadAnimLib(playerid,"INT_HOUSE");             
	PreloadAnimLib(playerid,"INT_OFFICE");            
	PreloadAnimLib(playerid,"INT_SHOP");              
	PreloadAnimLib(playerid,"JST_BUISNESS");                  
	PreloadAnimLib(playerid,"KART");                  
	PreloadAnimLib(playerid,"KISSING");               
	PreloadAnimLib(playerid,"KNIFE");                 
	PreloadAnimLib(playerid,"LAPDAN1");               
	PreloadAnimLib(playerid,"LAPDAN2");               
	PreloadAnimLib(playerid,"LAPDAN3");               
	PreloadAnimLib(playerid,"LOWRIDER");              
	PreloadAnimLib(playerid,"MD_CHASE");              
	PreloadAnimLib(playerid,"MD_END");                
	PreloadAnimLib(playerid,"MEDIC");                 
	PreloadAnimLib(playerid,"MISC");                  
	PreloadAnimLib(playerid,"MTB");           
	PreloadAnimLib(playerid,"MUSCULAR");              
	PreloadAnimLib(playerid,"NEVADA");                
	PreloadAnimLib(playerid,"ON_LOOKERS");            
	PreloadAnimLib(playerid,"OTB");           
	PreloadAnimLib(playerid,"PARACHUTE");             
	PreloadAnimLib(playerid,"PARK");                  
	PreloadAnimLib(playerid,"PAULNMAC");              
	PreloadAnimLib(playerid,"ped");           
	PreloadAnimLib(playerid,"PLAYER_DVBYS");                  
	PreloadAnimLib(playerid,"PLAYIDLES");             
	PreloadAnimLib(playerid,"POLICE");                
	PreloadAnimLib(playerid,"POOL");                  
	PreloadAnimLib(playerid,"POOR");                  
	PreloadAnimLib(playerid,"PYTHON");                
	PreloadAnimLib(playerid,"QUAD");                  
	PreloadAnimLib(playerid,"QUAD_DBZ");              
	PreloadAnimLib(playerid,"RAPPING");               
	PreloadAnimLib(playerid,"RIFLE");                 
	PreloadAnimLib(playerid,"RIOT");                  
	PreloadAnimLib(playerid,"ROB_BANK");              
	PreloadAnimLib(playerid,"ROCKET");                
	PreloadAnimLib(playerid,"RUSTLER");               
	PreloadAnimLib(playerid,"RYDER");                 
	PreloadAnimLib(playerid,"SCRATCHING");            
	PreloadAnimLib(playerid,"SHAMAL");                
	PreloadAnimLib(playerid,"SHOP");                  
	PreloadAnimLib(playerid,"SHOTGUN");               
	PreloadAnimLib(playerid,"SILENCED");              
	PreloadAnimLib(playerid,"SKATE");                 
	PreloadAnimLib(playerid,"SMOKING");               
	PreloadAnimLib(playerid,"SNIPER");                
	PreloadAnimLib(playerid,"SPRAYCAN");              
	PreloadAnimLib(playerid,"STRIP");                 
	PreloadAnimLib(playerid,"SUNBATHE");              
	PreloadAnimLib(playerid,"SWAT");                  
	PreloadAnimLib(playerid,"SWEET");                 
	PreloadAnimLib(playerid,"SWIM");                  
	PreloadAnimLib(playerid,"SWORD");                 
	PreloadAnimLib(playerid,"TANK");                  
	PreloadAnimLib(playerid,"TATTOOS");               
	PreloadAnimLib(playerid,"TEC");           
	PreloadAnimLib(playerid,"TRAIN");                 
	PreloadAnimLib(playerid,"TRUCK");                 
	PreloadAnimLib(playerid,"UZI");           
	PreloadAnimLib(playerid,"VAN");           
	PreloadAnimLib(playerid,"VENDING");               
	PreloadAnimLib(playerid,"VORTEX");                
	PreloadAnimLib(playerid,"WAYFARER");              
	PreloadAnimLib(playerid,"WEAPONS");               
	PreloadAnimLib(playerid,"WUZI");
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0); 
}

stock CarregarObjetos(filename[])
{
    new
		File:file_ptr,
		line[256],
		modelid,
		Float:SpawnX, Float:SpawnY, Float:SpawnZ,
		Float:SpawnRotX, Float:SpawnRotY, Float:SpawnRotZ,
		objects_loaded
	;
    file_ptr = fopen(filename, io_read);
    if(!file_ptr) return printf("ERRO! Falha ao carregar objetos do arquivo %s (Arquivo nao existe no diretorio scriptfiles)!", filename);
	while(fread(file_ptr, line) > 0)
    {
        if(!sscanf(line, "p<,>'('dfffffp<)>f", modelid, SpawnX, SpawnY, SpawnZ, SpawnRotX, SpawnRotY, SpawnRotZ))
        {
	        CreateDynamicObject(modelid, SpawnX, SpawnY, SpawnZ, SpawnRotX, SpawnRotY, SpawnRotZ, -1, -1, -1, 500.0);
	        objects_loaded++;
        }
    }
    fclose(file_ptr);
    return printf("Objetos: %d carregado(s) de %s", objects_loaded, filename);//Print do Total de Objetos Carregados
}

stock CarregarObjetosNoStream(filename[])
{
    new
		File:file_ptr,
		line[256],
		modelid,
		Float:SpawnX, Float:SpawnY, Float:SpawnZ,
		Float:SpawnRotX, Float:SpawnRotY, Float:SpawnRotZ,
		objects_loaded
	;
    file_ptr = fopen(filename, io_read);
    if(!file_ptr) return printf("ERRO! Falha ao carregar objetos do arquivo %s (Arquivo nao existe no diretorio scriptfiles)!", filename);
	while(fread(file_ptr, line) > 0)
    {
        if(!sscanf(line, "p<,>'('dfffffp<)>f", modelid, SpawnX, SpawnY, SpawnZ, SpawnRotX, SpawnRotY, SpawnRotZ))
        {
	        CreateObject(modelid, SpawnX, SpawnY, SpawnZ, SpawnRotX, SpawnRotY, SpawnRotZ, 200.0);
			objects_loaded++;
        }
    }
    fclose(file_ptr);
    return printf("Objetos: %d carregado(s) de %s", objects_loaded, filename);//Print do Total de Objetos Carregados
}

stock CarregarVeiculos(filename[])
{
	new
		File:file_ptr,
		line[256],
		Color1,	Color2,
		modelid,
		Float:SpawnX,
		Float:SpawnY,
		Float:SpawnZ,
		Float:SpawnRot,
		vehicles_loaded;

	file_ptr = fopen(filename, io_read);
	if(!file_ptr)
	{
		return printf("ERRO! Falha ao carregar veiculos do arquivo %s (O arquivo nao existe no diretorio scriptfiles)!", filename);
	}

    new v_id;
	while(fread(file_ptr, line) > 0)
	{
		if(!sscanf(line, "p<,>dffffdd", modelid, SpawnX, SpawnY, SpawnZ, SpawnRot, Color1, Color2))
		{
			v_id = CreateVehicle(modelid, SpawnX, SpawnY, SpawnZ, SpawnRot, Color1, Color2, 120);

            SetVehicleEngineState(v_id, 0);
            SetVehicleParams(v_id, 3, 0);

            combustivel[v_id] = 80;
			vehicles_loaded++;
            SetVehicleEngineState(v_id, 0);
            SetVehicleParams(v_id, 3, 0);
   		}
	}
	fclose(file_ptr);
	return printf("[Play Style] - %d Veiculos set carregados de %s", vehicles_loaded, filename);
}

stock ExplodirPlayer(sid)
{
    static
		Float:_Pos[ 3 ]
	;

	GetPlayerPos(sid, _Pos[0], _Pos[1], _Pos[2]);
    return CreateExplosion(_Pos[0], _Pos[1], _Pos[2], 6, 15.0);
}

stock ExplodirVeiculo(vehicleid)
{
    static
		Float:_VPos[ 3 ]
	;
    GetVehiclePos(vehicleid, _VPos[0], _VPos[1], _VPos[2]);
    return CreateExplosion(_VPos[0], _VPos[1], _VPos[2], 6, 15.0);
}

stock GetVehicleDriver(vehicleid)
{
	for(new i; i<GetMaxPlayers(); i++)
	{
		if (IsPlayerInVehicle(i, vehicleid))
		{
			if(GetPlayerState(i) == 2)
			{
				return i;
			}
		}
	}
	return -1;
}

//GetBlankSpaceToInvent()
GetBlankSpaceToInvent( id ){
	static retorno;

	retorno = 0;

	// Do nivel maior para o menor pelo fato do retorno ser escolhido pela ultima conferencia
    if(PlayerInfo[id][pVIP]){
		if(playerInventario[ id ][ itemId6 ] == -1) retorno = 6;
		if(playerInventario[ id ][ itemId7 ] == -1) retorno = 7;
	}
	if(PlayerInfo[id][pLevel] >= 6){
		if(playerInventario[ id ][ itemId5 ] == -1) retorno = 5;
	}
	if(PlayerInfo[id][pLevel] >= 5){
		if(playerInventario[ id ][ itemId4 ] == -1) retorno = 4;
	}
	if(PlayerInfo[id][pLevel] >= 4){
		if(playerInventario[ id ][ itemId3 ] == -1) retorno = 3;
	}
	if(PlayerInfo[id][pLevel] >= 3){
		if(playerInventario[ id ][ itemId2 ] == -1) retorno = 2;
	}
	if(PlayerInfo[id][pLevel] >= 2){
		if(playerInventario[ id ][ itemId1 ] == -1) retorno = 1;
	}
	return retorno;
}

//GetWeaponInSlotPlayer()
GetWeaponInSlotPlayer(playerid, slot){

 	static Wids[2];
	GetPlayerWeaponData(playerid, slot, Wids[0], Wids[1]);

	if(Wids[0])	return true;

	return false;
}

GetWeaponInPlayer(playerid, weaponid){

	new
		Wids[2],
		slot = GetWeaponSlot(weaponid)
	;

	GetPlayerWeaponData(playerid, slot, Wids[0], Wids[1]);

	if(Wids[0] == weaponid) return 1;
	return 0;
}

//GetWeaponSlot()
GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid){
        case 0,1: slot = 0;
        case 2 .. 9: slot = 1;
        case 10 .. 15: slot = 10;
        case 16 .. 18, 39: slot = 8;
        case 22 .. 24: slot =2;
        case 25 .. 27: slot = 3;
        case 28, 29, 32: slot = 4;
        case 30, 31: slot = 5;
        case 33, 34: slot = 6;
        case 35 .. 38: slot = 7;
        case 40: slot = 12;
        case 41 .. 43: slot = 9;
        case 44 .. 46: slot = 11;
    }
    return slot;
}

stock RemovePlayerWeapon(playerid, weaponid)
{
    new
		plyWeapons[12],
		plyAmmo[12]
	;

    for(new slot = 0; slot != 12; slot++)
    {
        new
			wep,
			ammo
		;
        GetPlayerWeaponData(playerid, slot, wep, ammo);

        if(wep != weaponid)
        {
            GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
        }
    }

    ResetPlayerWeapons(playerid);
    for(new slot = 0; slot != 12; slot++) {
        GivePlayerWeaponEx(playerid, plyWeapons[slot], plyAmmo[slot]);
    }
}

stock GetPlayersInVehicle(vehicleid)
{
	new amount = 0;
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(!IsPlayerConnected(i) || !IsPlayerInVehicle(i,vehicleid))
		continue;
		amount++;
	}
	return amount;
}


stock TapaFor(playerid, altura)
{
	new
		Float:_PoS[ 3 ]
	;
    GetPlayerPos(playerid, _PoS[ 0 ],_PoS[ 1 ],_PoS[ 2 ]);
	SetPlayerPos(playerid, _PoS[ 0 ],_PoS[ 1 ],_PoS[ 2 ]+altura);
	return PlayerPlaySound(playerid, 1190,_PoS[ 0 ],_PoS[ 1 ],_PoS[ 2 ]+altura);
}

stock GetPlayerAngle(playerid)
{
	new Float:angle;
	if(!IsPlayerInAnyVehicle(playerid)) GetPlayerFacingAngle(playerid,angle);
	else GetVehicleZAngle(GetPlayerVehicleID(playerid),angle)
	return floatround(angle);
}


stock SetPlayerLookAt(playerid, Float:x, Float:y)
{
	new
		Float:Pos_[ 3 ]
	;

	GetPlayerPos(playerid, Pos_[ 0 ], Pos_[ 1 ], Pos_[ 2 ]);
	Pos_[ 2 ] = floatabs(atan((y-Pos_[ 1 ])/(x-Pos_[ 0 ])));
	if (x <= Pos_[ 0 ] && y >= Pos_[ 1 ]) Pos_[ 2 ] = floatsub(180, Pos_[ 2 ]);
	else if (x < Pos_[ 0 ] && y < Pos_[ 1 ]) Pos_[ 2 ] = floatadd(Pos_[ 2 ], 180);
	else if (x >= Pos_[ 0 ] && y <= Pos_[ 1 ]) Pos_[ 2 ] = floatsub(360.0, Pos_[ 2 ]);
	Pos_[ 2 ] = floatsub(Pos_[ 2 ], 90.0);
	if (Pos_[ 2 ] >= 360.0) Pos_[ 2 ] = floatsub(Pos_[ 2 ], 360.0);
	SetPlayerFacingAngle(playerid, Pos_[ 2 ]);
}

stock SetPlayerJetpack(playerid)
{
	return SetPlayerSpecialActionEx(playerid, SPECIAL_ACTION_USEJETPACK);
}


stock ServerPassword(pass[])
{
    format(_rcmd, sizeof( _rcmd ), "password %s", pass);
    return SendRconCommand( _rcmd );
}

stock LoadFS(fsname[])
{
	format(_rcmd, sizeof( _rcmd ), "loadfs %s", fsname);
	return SendRconCommand( _rcmd );
}

stock UnLoadFS(fsname[])
{
    format(_rcmd, sizeof( _rcmd ), "unloadfs %s", fsname);
    return SendRconCommand( _rcmd );
}


stock ServerName(Namex[])
{
    format(_rcmd, sizeof(_rcmd), "hostname %s", Namex);
    return SendRconCommand( _rcmd );
}

stock ServerWebsite(url[])
{
    format(_rcmd, sizeof( _rcmd ), "weburl %s", url);
    return SendRconCommand( _rcmd );
}

stock ServerLanguage(mpname[])
{
    format(_rcmd, sizeof( _rcmd ), "language %s", mpname);
    return SendRconCommand( _rcmd );
}

stock ServerMaxNPC(max){
    format(_rcmd, sizeof( _rcmd ), "maxnpc %i", max);
	return SendRconCommand( _rcmd );
}

stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ)
{
	new Float:Distance; Distance = floatabs(floatsub(X, PointX))+floatabs(floatsub(Y, PointY))+floatabs(floatsub(Z, PointZ));
	return Distance;
}

stock CreateCountdown(time, sound)
{
	if(IsCountdownStarted == 0)
	{
	    for(new i; i<MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
		        if(IsPlayerCountdownStarted[i] == 1)
		        {
		            KillTimer(PlayerCountdownTimer[i]);
		            PlayerCountdownCount[i] = 0;
		            IsPlayerCountdownStarted[i] = 0;
				}
			}
		}
		CountdownTimer = SetTimerEx("Countdown", 1000, 1, "d", sound);
		CountdownCount = time;
		IsCountdownStarted = 1;
	}
}
stock CreatePlayerCountdown(playerid, time, sound)
{
	if(IsPlayerCountdownStarted[playerid] == 0 && IsCountdownStarted == 0)
	{
		PlayerCountdownTimer[playerid] = SetTimerEx("PlayerCountdown", 1000, 1, "id", playerid, sound);
		PlayerCountdownCount[playerid] = time;
		IsPlayerCountdownStarted[playerid] = 1;
	}
}
stock StopCountdown()
{
	KillTimer(CountdownTimer);
	GameTextForAll(" ", 10, 3);
    CountdownCount = 0;
    IsCountdownStarted = 0;
}
stock StopPlayerCountdown(playerid)
{
	KillTimer(PlayerCountdownTimer[playerid]);
	GameTextForPlayer(playerid, " ", 10, 3);
    PlayerCountdownCount[playerid] = 0;
    IsPlayerCountdownStarted[playerid] = 0;
}

forward Countdown(sound);
public Countdown(sound)
{
    if(CountdownCount == 0)
	{
	    if(sound == 1)
		{
		    for(new i; i<MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnected(i))
		        {
		            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	    GameTextForAll("~r~GoGoGo", 2000, 3);
	    KillTimer(CountdownTimer);
	    IsCountdownStarted = 0;
	}
	else
	{
	    if(sound == 1)
		{
		    for(new i; i<MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnected(i))
		        {
		            PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
			}
		}
		new cdstring[128];
		format(cdstring, sizeof(cdstring), "~y~%d", CountdownCount);
		GameTextForAll(cdstring, 1500, 3);
		CountdownCount--;
	}
}

forward PlayerCountdown(playerid, sound);
public PlayerCountdown(playerid, sound)
{
    if(PlayerCountdownCount[playerid] == 0)
	{
	    if(sound == 1) PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	    GameTextForPlayer(playerid,"~n~~n~~r~GoGoGo", 2000, 3);
	    KillTimer(PlayerCountdownTimer[playerid]);
	    IsPlayerCountdownStarted[playerid] = 0;
	}
	else
	{
	    if(sound == 1) PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		new pcdstring[128];
	    format(pcdstring, sizeof(pcdstring), "~n~~g~%d", PlayerCountdownCount[playerid]);
		GameTextForPlayer(playerid, pcdstring, 1500, 3);
		PlayerCountdownCount[playerid]--;
	}
}

stock PlaySoundForPlayer(playerid, sonid)
{
    new
		Float:xxPos[ 3 ]
	;
    GetPlayerPos(playerid, xxPos[ 0 ],xxPos[ 1 ],xxPos[ 2 ]);
    PlayerPlaySound(playerid, sonid, xxPos[ 0 ], xxPos[ 1 ],xxPos[ 2 ]);
    return 1;
}

stock CountPlayers()
{
	new
		j, c = 0
	;
	for( j = GetMaxPlayers(); j > -1; --j) {
		if(IsPlayerConnected( j ) && !IsPlayerNPC( j )) {
		    if(PlayerInfo[ j ][ pLogger ] == 1){
				c++;
			}
		}
	}
	return c;
}

Public:Float:GetPlayerVida(sid){
    static
		Float: _Vida
	;
    GetPlayerHealth(sid, _Vida);
    return _Vida;
}

Public:Float:GetPlayerColete(sid)
{
    new
		Float: _Colete
	;
    GetPlayerArmour(sid, _Colete);
    return _Colete;
}

stock FlipCarid(carid)
{
	new Float:FCX, Float:FCY, Float:FCZ, Float:FCA;
	GetVehiclePos(carid, FCX, FCY, FCZ);
	GetVehicleZAngle(carid, FCA);
	SetVehiclePos(carid, FCX, FCY, (FCZ+1.0));
	SetVehicleZAngle(carid, FCA);
}

//IsNumeric()
IsNumeric(const string[]){
	for (new i = 0, j = strlen( string); i < j; i++){
		if ( string[i] > '9' || string[i] < '0') return 0;
	}
	return true;
}


//ValorValido()
ValorValido(valor){
	if(valor <= -1) return 0;
	return 1;
}

//GetDateEx()
GetDateEx(){
    new
		date[6],
		VS[ 35 ]
	;
    gettime(date[3],date[4],date[5]);
    getdate(date[2],date[1],date[0]);
    format(VS, 35, "%i/%i/%i | %i:%i:%i", date[0],date[1],date[2],date[3],date[4],date[5]);
    return VS;
}

stock SetVehicleEngineState(vid, setstate)
{
	new
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective
	;

	GetVehicleParamsEx(vid, engine,lights,alarm,doors,bonnet,boot,objective);
	if(setstate) SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	else SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	return 1;
}

stock SetVehicleFarolState(vehicleid, sstate){
	new
	    motor,
	    farol,
	    alarme,
	    portas,
	    capo,
	    portamalas,
	    objetivo
	;

	GetVehicleParamsEx(vehicleid, motor, farol, alarme, portas, capo, portamalas, objetivo);
	if(sstate) SetVehicleParamsEx(vehicleid, motor, VEHICLE_PARAMS_ON, alarme, portas, capo, portamalas, objetivo);
	else SetVehicleParamsEx(vehicleid, motor, VEHICLE_PARAMS_OFF, alarme, portas, capo, portamalas, objetivo);
	return 1;
}

stock ChangeVehicleNeon(vehicleid, neoncolor)
{

	DestroyObject(NeonVeicular1[vehicleid]);
	DestroyObject(NeonVeicular2[vehicleid]);

	switch(neoncolor){
		case -1:
		{
		    DestroyObject(NeonVeicular1[vehicleid]);
			DestroyObject(NeonVeicular2[vehicleid]);
		}
		case 0://red 18647
		{
		    NeonVeicular1[vehicleid] = CreateObject(18647, 0, 0, 0, 0, 0, 0);
			NeonVeicular2[vehicleid] = CreateObject(18647, 0, 0, 0, 0, 0, 0);
		}
		case 1://blue 18648
		{
		    NeonVeicular1[vehicleid] = CreateObject(18648, 0, 0, 0, 0, 0, 0);
			NeonVeicular2[vehicleid] = CreateObject(18648, 0, 0, 0, 0, 0, 0);
		}
		case 2://green 18649
		{
		    NeonVeicular1[vehicleid] = CreateObject(18649, 0, 0, 0, 0, 0, 0);
			NeonVeicular2[vehicleid] = CreateObject(18649, 0, 0, 0, 0, 0, 0);
		}
		case 3://18650
		{
		    NeonVeicular1[vehicleid] = CreateObject(18650, 0, 0, 0, 0, 0, 0);
			NeonVeicular2[vehicleid] = CreateObject(18650, 0, 0, 0, 0, 0, 0);
		}
		case 4://18651
		{
		    NeonVeicular1[vehicleid] = CreateObject(18651, 0, 0, 0, 0, 0, 0);
			NeonVeicular2[vehicleid] = CreateObject(18651, 0, 0, 0, 0, 0, 0);
		}
		case 5://18652
		{
		    NeonVeicular1[vehicleid] = CreateObject(18652, 0, 0, 0, 0, 0, 0);
			NeonVeicular2[vehicleid] = CreateObject(18652, 0, 0, 0, 0, 0, 0);
		}
	}
	AttachObjectToVehicle(NeonVeicular1[vehicleid], vehicleid, 0.96,0, -0.50, 0, 0, 0);
	AttachObjectToVehicle(NeonVeicular2[vehicleid], vehicleid, -0.96,0, -0.50, 0, 0, 0);
	return true;
}

stock RandomEx(Min, Max) return (random((Max-Min))+Min);


/*stock FreezeEx(giveid, segundos)
{
	TogglePlayerControllable(giveid, false);

	return SetTimerEx("Descongelar", segundos*1000, false, "d", giveid);
}*/

stock FreezeEx(giveid, segundos)
{
	TogglePlayerControllable(giveid, false);

	return SetTimerEx("Descongelar", segundos*1000, false, "d", giveid);
}

stock RemovePlayerFromVehicleEx(playerid)
{
	RemovePlayerFromVehicle(playerid);
	UnFreeze(playerid);
}

Public:Descongelar(playerid) return TogglePlayerControllable(playerid, true);

Public:Kickado(player) {
    #undef Kick
    Kick(player);
    #define Kick(%0) SetTimerEx("Kickado", 200, false, "i", %0)
	return true;
}

Public:Banned(player) {
    #undef Ban
    Ban(player);
    #define Ban(%0) SetTimerEx("Banned", 200, false, "i", %0)
	return true;
}

SetPlayerVida(playerid, Float:Hp){
	PlayerInfo[ playerid ][ pVida ] = Hp;
    return SetPlayerHealth(playerid, Hp);
}

Public:PlayerHealthHack(adm, playerid ){
    static str[ 129 ];
	if(GetPlayerVida(playerid) > PlayerInfo[ playerid ][ pVida ]){

		format(str, sizeof(str), "| Anti Cheater | - %s pode ser um possivel Healt-Cheater. ", PlayerInfo[ playerid ][ pName ]);
		SCM(adm, cadm, str);

		format(STRLOG, sizeof(STRLOG), "[%s] Admin %s testou %s | Cheater detected health %f/%f", GetDateEx(), GetName(adm), GetName(playerid), GetPlayerVida(playerid), PlayerInfo[ playerid ][ pVida ]);
		SLog("Health-Confirm.log", STRLOG);
	}
	else {
   		format(str, sizeof(str), "{FEDD8B}<!> - %s nao deu sinais posivitos de uso indevido de cheaters de vida. ", PlayerInfo[ playerid ][ pName ]);
		SCM(adm, -1, str);
	}
}

SetPlayerColete(playerid, Float:Hp){
	PlayerInfo[ playerid ][ pColete ] = Hp;
	return SetPlayerArmour(playerid, Hp);
}

forward PararAnimsSIFS(rid);
public PararAnimsSIFS(rid){
	ClearAnimations(rid);
    return true;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
    new Float:TGTDistance;

    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{

	new Float:DX, Float:DY;
	new Float:angle;

	DX = floatabs(floatsub(x2,X));
	DY = floatabs(floatsub(y2,Y));

	if (DY == 0.0 || DX == 0.0)
	{
		if(DY == 0 && DX > 0) angle = 0.0;
		else if(DY == 0 && DX < 0) angle = 180.0;
		else if(DY > 0 && DX == 0) angle = 90.0;
		else if(DY < 0 && DX == 0) angle = 270.0;
		else if(DY == 0 && DX == 0) angle = 0.0;
	}
	else
	{
		angle = atan(DX/DY);

		if(X > x2 && Y <= y2) angle += 90.0;
		else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
		else if(X < x2 && Y >= y2) angle -= 90.0;
		else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
	}
	return floatadd(angle, 90.0);
}

GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
    x += (distance * floatsin(-angle, degrees));
    y += (distance * floatcos(-angle, degrees));
}

IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
    GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
    GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

    new Float:vertical, Float:horizontal;

    switch (GetPlayerWeapon(playerid))
    {
        case 34,35,36: {
        	if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
        	return false;
        }
        case 30,31: {vertical = 4.0; horizontal = -1.6;}
        case 33: {vertical = 2.7; horizontal = -1.0;}
        default: {vertical = 6.0; horizontal = -2.2;}
    }

    new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
    new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
    GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

    if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
    return false;
}

IsPlayerAimingAtPlayer(playerid, target)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(target, x, y, z);
    if (IsPlayerAimingAt(playerid, x, y, z-0.75, 0.25)) return true;
    if (IsPlayerAimingAt(playerid, x, y, z-0.25, 0.25)) return true;
    if (IsPlayerAimingAt(playerid, x, y, z+0.25, 0.25)) return true;
    if (IsPlayerAimingAt(playerid, x, y, z+0.75, 0.25)) return true;
    return false;
}


forward Float:GetPlayerDistanceFromPlayer(playerid, targetid);
public Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
    new
		Float:_Pos[3]
	;
    GetPlayerPos(playerid, _Pos[0], _Pos[1], _Pos[2]);
    return GetPlayerDistanceFromPoint(targetid, _Pos[0], _Pos[1], _Pos[2]);
}

stock IsPlayerInPlace(playerid, Float:XMin, Float:YMin, Float:XMax, Float:YMax)
{
	new Float:_sK@Pos[ 3 ];
	GetPlayerPos(playerid, _sK@Pos[0], _sK@Pos[1], _sK@Pos[2]);
	if(_sK@Pos[0] >= XMin && _sK@Pos[1] >= YMin && _sK@Pos[0] < XMax && _sK@Pos[1] < YMax) return true;
	return false;
}


//CheckWeapons()
CheckWeapons(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);
	new slot = GetWeaponSlot(weaponid);
	static str[ 129 ];

    if(PlayerInfo[playerid][NoEvento] == 0 || PlayerInfo[playerid][pAdmin] == 0)
    {
    	if(Weapons[playerid][slot] != weaponid)
        {
    	    RemovePlayerWeapon(playerid, weaponid);

    	    if(!AvisoAdminEnviado[ playerid ])
            {
    			if(GetPVarInt(playerid, "checkParaquedasBug") != 1){
    				format(str, sizeof(str), "| Anti Cheater | - %s foi banido por usar Weapon Hack [WeaponID: %i].", PlayerInfo[ playerid ][ pName ], weaponid);
    				SendAdminMessage(cadm, str);

    				format(STRLOG, sizeof(STRLOG), "[%s] %s foi banido Motivo: Weapon Hack [WeaponID: %i].", GetDateEx(), GetName(playerid), weaponid);
    				SLog("Ban.log", STRLOG);

    				SendClientMessage(playerid, -1, ""#SERVELOGO" Voce foi banido por {FF0000}Weapon Hack!");
    				BanPlayer( playerid, -1, "Weapon Hack");
    			}
    			else {
    			    RemovePlayerWeapon(playerid, weaponid);
    				SetPVarInt(playerid, "checkParaquedasBug", 0);
    			}
    		}

    		AvisoAdminEnviado[ playerid ] = 1;
    		SetTimerEx("DestravarAvisos", TSegundos(2), false, "i", playerid);
    	}
    }
    return 1;
}

//GivePlayerWeaponEx()
GivePlayerWeaponEx(playerid, weaponid, ammo)
{
	new slot = GetWeaponSlot(weaponid);
	Weapons[playerid][slot] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return true;
}

new Encontro[][] =
{
    {"Rivelino."},
    {"Rivelino "},
    {"Rivelino,"}
};

CheckTexto(text[])
{
    new textoformated[150];
    format(textoformated, sizeof(textoformated), "%s", text);
    new Valor = (strlen(text) < 2) ? (2) : (strlen(text)) / 2;
    new TextoAchado;
    for(new b = 0; b < strlen(text); b += Valor)
    {
        for(new i = 0; i < 3; i++)
        {
            if(strfind(textoformated, Encontro[i], true, b) != -1)
            {
                TextoAchado = strfind(textoformated, Encontro[i], true, b);
                strdel(textoformated, strfind(textoformated, Encontro[i], true, b), strfind(textoformated, Encontro[i], true, b) + 2);
                strins(textoformated, "ED", TextoAchado, strlen(textoformated));
             }
         }
    }
    return textoformated;
}

stock RobotCheck(playerid, texto[])
{
    new link[1024];
    format(link, 1024, "www.inbot.com.br/cgi-bin/bot_gateway.cgi?server=bot.insite.com.br:8085&charset=text&pure=1&js=1&admi=&msg=%s", urlencode(texto));
    HTTP(playerid, HTTP_GET, link, "\0", "RobotResponse");
    return 1;
}

forward RobotResponse(playerid, c, data[]);
public RobotResponse(playerid, c, data[])
{
    if (c == 200)
    {
        new mensagem[150];
        removeLine(data);

        format( mensagem, sizeof( mensagem ), "[0] %s diz: %s", BlueBusNPCName, CheckTexto(data));
		ChatProximo(20.0, playerid, mensagem, C_XAT2, C_XAT3, C_XAT4, C_XAT5, C_XAT1);
    }
    return 1;
}

stock urlencode(string[])
{
	new ret[1024];
	ret[0] = 0;
	new i = 0;
	new p = 0;
	new s = 0;
	while (string[i] != 0){
		if((string[i] >= 'A' && string[i] <='Z') || (string[i] >= 'a' && string[i] <='z') || (string[i] >= '0' && string[i] <='9') || (string[i] == '-') || (string[i] == '_') || (string[i] == '.')){
			ret[p] = string[i];
		}
		else {
			ret[p] = '%';
			p++;
			s = (string[i] % 16); //
			ret[p+1] = (s>9) ? (55+s) : (48+s); // 64 - 9 = 55
			s = floatround((string[i] - s)/16);
			ret[p] = (s>9) ? (55+s) : (48+s); // 64 - 9 = 55
			p++;
		}
		p++;
		i++;
	}
    return ret;
}

removeLine(texto[])
{
    for(new i, c; texto[i]; i++)
    {
        if(texto[i] == '\n')
        {
            texto[i] = ' ';
        }
        if(texto[i] == '<')
        {
            c = i;
            while(texto[++i])
            {
                if(texto[i] == '>')
                {
                    strdel(texto, c, i+1);
                    break;
                }
            }
        }
    }
    return 1;
}

SortRecompensa(playerid){
	new rvalue = random(100);

	RemovePlayerAttachedObject(playerid, 9);

	if(rvalue > 10){
		RemovePlayerAttachedObject(playerid, 9);

	    SetPlayerAttachedObject( playerid, 9, 1207, 1, 0.041595, 0.287321, -0.004077, 156.424118, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // tiny_rock - pedraminerio
		ApplyAnimationEx(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	switch(rvalue){
		case 0..10: SCM(playerid, -1, "{0CFFC7}Voce nao achou nada, procure novamente /minerar");
		case 11..20: {
		    MinerioType[ playerid ] = MINERIO_OURO;
		    MinerioValue[ playerid ] = 300;
            SCM(playerid, -1, "{0CFFC7}Voce encontrou uma pedra de ouro, leve-a ate a superficie!");
            SCM(playerid, -1, "{0CFFC7}Para trocar seu ouro em dinheiro, va ate o ponto marcado por um 'T' no mapa!");

		}
		case 56..70: {
		    MinerioType[ playerid ] = MINERIO_BRONZE;
		    MinerioValue[ playerid ] = 150;
            SCM(playerid, -1, "{0CFFC7}Voce encontrou um minerio de bronze, leve-o ate a superficie!");
            SCM(playerid, -1, "{0CFFC7}Para trocar seu bronze em dinheiro, va ate o ponto marcado por um 'T' no mapa!");
		}
		case 21..55: {
		    MinerioType[ playerid ] = MINERIO_FERRO;
		    MinerioValue[ playerid ] = 120;
            SCM(playerid, -1, "{0CFFC7}Voce encontrou um minerio de ferro, leve-o ate a superficie!");
            SCM(playerid, -1, "{0CFFC7}Para trocar seu minerio de ferro em dinheiro, va ate o ponto marcado por um 'T' no mapa!");
		}
		case 71..100: {
		    MinerioType[ playerid ] = MINERIO_PRATA;
		    MinerioValue[ playerid ] = 200;
            SCM(playerid, -1, "{0CFFC7}Voce encontrou um minerio de prata, leve-o ate a superficie!");
            SCM(playerid, -1, "{0CFFC7}Para trocar seu minerio de prata em dinheiro, va ate o ponto marcado por um 'T' no mapa!");
		}
	}
	return true;
}


//CriarRotaAutoEscolaTipoD()
CriarRotaAutoEscolaTipoD( playerid ){
    RaceChecksAutoEscolaTipoD[playerid][0] = CreateDynamicRaceCP(2, 372.2489, -1970.5609, 7.7803, 356.3480, -1644.2308, 32.9412, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
    RaceChecksAutoEscolaTipoD[playerid][1] = CreateDynamicRaceCP(0, 356.3480, -1644.2308, 32.9412, 246.2278, -1615.0994, 33.1900, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
    RaceChecksAutoEscolaTipoD[playerid][2] = CreateDynamicRaceCP(0, 246.2278, -1615.0994, 33.1900, 280.3008, -1481.1563, 31.5336, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
    RaceChecksAutoEscolaTipoD[playerid][3] = CreateDynamicRaceCP(0, 280.3008, -1481.1563, 31.5336, 173.3417, -1517.6499, 12.3675, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][4] = CreateDynamicRaceCP(0, 173.3417, -1517.6499, 12.3675, 117.0607, -1606.7943, 10.5120, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][5] = CreateDynamicRaceCP(0, 117.0607, -1606.7943, 10.5120, 343.2227, -1761.6893, 5.0681, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][6] = CreateDynamicRaceCP(0, 343.2227, -1761.6893, 5.0681, 469.5202, -1724.4912, 10.8101, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][7] = CreateDynamicRaceCP(0, 469.5202, -1724.4912, 10.8101, 1032.1571, -1822.1343, 13.8041, CHECK_RACER_SIZE, -1, -1, playerid, (CHECK_RACER_DISTANCE+250));
	RaceChecksAutoEscolaTipoD[playerid][8] = CreateDynamicRaceCP(0, 1032.1571, -1822.1343, 13.8041, 1070.0067, -2335.9871, 12.6795, CHECK_RACER_SIZE, -1, -1, playerid, (CHECK_RACER_DISTANCE+50));
	RaceChecksAutoEscolaTipoD[playerid][9] = CreateDynamicRaceCP(0, 1070.0067, -2335.9871, 12.6795, 1433.5684, -2463.6912, 4.7645, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][10] = CreateDynamicRaceCP(0, 1433.5684, -2463.6912, 4.7645, 1531.2992, -2287.6572, -2.8973, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][11] = CreateDynamicRaceCP(0, 1531.2992, -2287.6572, -2.8973, 1586.9301, -2321.1519, -2.7506, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][12] = CreateDynamicRaceCP(0, 1586.9301, -2321.1519, -2.7506, 1733.0612, -2303.8496, -2.7518, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][13] = CreateDynamicRaceCP(0, 1733.0612, -2303.8496, -2.7518, 1766.9397, -2254.6514, 2.1009, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][14] = CreateDynamicRaceCP(0, 1766.9397, -2254.6514, 2.1009, 1770.9423, -2316.4041, 13.4742, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][15] = CreateDynamicRaceCP(0, 1770.9423, -2316.4041, 13.4742, 1550.4712, -2263.1853, 13.6451, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoD[playerid][16] = CreateDynamicRaceCP(1, 1550.4712, -2263.1853, 13.6451, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

    Loop(o, 17){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoD[playerid][o])){
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][o], false);
		}
	}
}


//DesativarRacesAETD()
DesativarRacesAETD( playerid ){
    Loop(o, 17){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoD[playerid][o])){
    		TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoD[playerid][o], false);
    	}
    }
}

//DesativarRacesAETB()
DesativarRacesAETB( playerid ){
    Loop(o, 19){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoB[playerid][o])){
    		TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][o], false);
    	}
    }
}
//DesativarRacesAETE()
DesativarRacesAETE( playerid ){
    Loop(o, 25){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoE[playerid][o])){
    		TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][o], false);
    	}
    }
}
//CriarRotaAutoEscolaTipoB()
CriarRotaAutoEscolaTipoB( playerid ){

    RaceChecksAutoEscolaTipoB[playerid][0] = CreateDynamicRaceCP(2, 1269.5762, -1334.0402, 12.9920, 1258.4633, -1278.1871, 13.0066, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
    RaceChecksAutoEscolaTipoB[playerid][1] = CreateDynamicRaceCP(0, 1258.4633,-1278.1871,13.0066, 1211.1296, -1140.2188, 23.3239, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
    RaceChecksAutoEscolaTipoB[playerid][2] = CreateDynamicRaceCP(0, 1211.1296, -1140.2188, 23.3239, 1165.0769, -1128.3289, 23.4249, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
    RaceChecksAutoEscolaTipoB[playerid][3] = CreateDynamicRaceCP(0, 1165.0769, -1128.3289, 23.4249, 1161.3726,-930.3402,42.7073, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][4] = CreateDynamicRaceCP(0, 1161.3726,-930.3402,42.7073, 1175.3268,-703.4241,61.7681, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][5] = CreateDynamicRaceCP(0, 1175.3268,-703.4241,61.7681, 1243.5459,-414.7320,2.7451, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][6] = CreateDynamicRaceCP(0, 1243.5459,-414.7320,2.7451, 981.5698,-482.0282,48.1291, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][7] = CreateDynamicRaceCP(0, 981.5698,-482.0282,48.1291, 835.4393,-552.2405,15.8454, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][8] = CreateDynamicRaceCP(0, 835.4393,-552.2405,15.8454, 735.1068,-528.0742,15.8448, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][9] = CreateDynamicRaceCP(0, 735.1068,-528.0742,15.8448, 639.3220,-543.9813,15.8398, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][10] = CreateDynamicRaceCP(0, 639.3220,-543.9813,15.8398, 679.8594,-612.9781,15.8420, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][11] = CreateDynamicRaceCP(0, 679.8594,-612.9781,15.8420, 780.6118,-915.5261,42.9132, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][12] = CreateDynamicRaceCP(0, 780.6118,-915.5261,42.9132, 807.9265,-1146.9904,23.5969, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][13] = CreateDynamicRaceCP(0, 807.9265,-1146.9904,23.5969, 1055.4366,-1162.3542,23.4297, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][14] = CreateDynamicRaceCP(0, 1055.4366,-1162.3542,23.4297, 1074.8878,-1283.4768,13.0409, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][15] = CreateDynamicRaceCP(0, 1074.8878,-1283.4768,13.0409, 1195.6018,-1293.0494,13.0393, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][16] = CreateDynamicRaceCP(0, 1195.6018,-1293.0494,13.0393, 1215.0674,-1403.5544,12.8728, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][17] = CreateDynamicRaceCP(0, 1215.0674,-1403.5544,12.8728, 1266.8898,-1341.3723,12.9910, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoB[playerid][18] = CreateDynamicRaceCP(1, 1266.8898,-1341.3723,12.9910, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

    Loop(o, 19){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoB[playerid][o])){
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoB[playerid][o], false);
		}
	}
}

//CriarRotaAutoEscolaTipoE()
CriarRotaAutoEscolaTipoE( playerid ){

	RaceChecksAutoEscolaTipoE[playerid][0] = CreateDynamicRaceCP(2, -490.9864, -558.4725, 26.0939, -421.5627, -622.4666, 11.0135, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][1] = CreateDynamicRaceCP(0, -421.5627, -622.4666, 11.0135, -711.7368, -423.8374, 17.0960 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][2] = CreateDynamicRaceCP(0, -711.7368, -423.8374, 17.0960, -1020.5350,-440.4451, 36.8306 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][3] = CreateDynamicRaceCP(0, -1020.5350, -440.4451, 36.8306, -1202.2040, -729.6987, 58.9033 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][4] = CreateDynamicRaceCP(0, -1202.2040, -729.6987, 58.9033, -1409.2323, -815.0568, 82.2765 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][5] = CreateDynamicRaceCP(0, -1409.2323, -815.0568, 82.2765, -1676.5099, -761.9775, 42.0149 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][6] = CreateDynamicRaceCP(0, -1676.5099, -761.9775, 42.0149, -1775.5896, -574.2365, 16.9093 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][7] = CreateDynamicRaceCP(0, -1775.5896, -574.2365, 16.9093, -2047.8500, -573.1649, 29.4104 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][8] = CreateDynamicRaceCP(0, -2047.8500, -573.1649, 29.4104, -2250.5337, -371.9444, 51.4438 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][9] = CreateDynamicRaceCP(0, -2250.5337, -371.9444, 51.4438, -2253.2388, -152.3074, 35.7443 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][10] = CreateDynamicRaceCP(0, -2253.2388, -152.3074, 35.7443, -2250.4182, 234.6750, 35.7401 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][11] = CreateDynamicRaceCP(0, -2250.4182, 234.6750, 35.7401, -2306.4050, 418.6557, 35.5936 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][12] = CreateDynamicRaceCP(0, -2306.4050, 418.6557, 35.5936, -2384.4683, 580.7983, 25.7663 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][13] = CreateDynamicRaceCP(0, -2384.4683, 580.7983, 25.7663, -2384.8269, 730.1134, 35.5913 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][14] = CreateDynamicRaceCP(0, -2384.8269, 730.1134, 35.5913, -2383.8359, 928.0630, 45.8716 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][15] = CreateDynamicRaceCP(0, -2383.8359, 928.0630, 45.8716, -2373.7793, 1099.6298, 56.1573 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][16] = CreateDynamicRaceCP(0, -2373.7793, 1099.6298, 56.1573, -2644.4666, 1180.0393, 55.9956 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][17] = CreateDynamicRaceCP(0, -2644.4666, 1180.0393, 55.9956, -2670.9739, 1487.5544, 57.8666 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][18] = CreateDynamicRaceCP(0, -2670.9739, 1487.5544, 57.8666, -2672.6133, 1789.9808, 68.5685 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][19] = CreateDynamicRaceCP(0, -2672.6133, 1789.9808, 68.5685, -2674.3176, 2147.4949, 56.0043 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][20] = CreateDynamicRaceCP(0, -2674.3176, 2147.4949, 56.0043, -2724.7808, 2352.2839, 72.4159 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][21] = CreateDynamicRaceCP(0, -2724.7808, 2352.2839, 72.4159, -2575.4854, 2481.1047, 20.7815 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][22] = CreateDynamicRaceCP(0, -2575.4854, 2481.1047, 20.7815, -2468.2480, 2348.4983, 6.2178 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][23] = CreateDynamicRaceCP(0, -2468.2480, 2348.4983, 6.2178, -2468.0317, 2235.5078, 5.3992 , CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksAutoEscolaTipoE[playerid][24] = CreateDynamicRaceCP(1, -2468.0317, 2235.5078, 5.3992, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

    Loop(o, 25){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoE[playerid][o])){
			TogglePlayerDynamicRaceCP(playerid, RaceChecksAutoEscolaTipoE[playerid][o], false);
		}
	}
}

//DeleteRaceChecksAETE()
stock DeleteRaceChecksAETE(playerid){
	Loop(o, 25){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoE[playerid][o])){
			DestroyDynamicRaceCP(RaceChecksAutoEscolaTipoE[playerid][o]);
			RaceChecksAutoEscolaTipoE[playerid][o] = -1;
		}
	}
}

//DeleteRaceChecksAETB()
stock DeleteRaceChecksAETB(playerid) {
	Loop(o, 19){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoB[playerid][o])){
			DestroyDynamicRaceCP(RaceChecksAutoEscolaTipoB[playerid][o]);
			RaceChecksAutoEscolaTipoB[playerid][o] = -1;
		}
	}
}


//DeleteRaceChecksAETD()
stock DeleteRaceChecksAETD(playerid){
	Loop(o, 17){
		if(IsValidDynamicRaceCP(RaceChecksAutoEscolaTipoD[playerid][o])){
			DestroyDynamicRaceCP(RaceChecksAutoEscolaTipoD[playerid][o]);
			RaceChecksAutoEscolaTipoD[playerid][o] = -1;
		}
	}
}


Public:CervoGrudado( playerid ){
    StopLoopingAnim(playerid);

    SCM(playerid, -1, "{78F4D9}Volte a cabana e venda sua caca!");

    DestroyObject(CacaObject{playerid});
	SetPlayerCheckpoint(playerid, -1639.9047, -2233.8567, 31.4766, 3.0);
    SetPlayerAttachedObject( playerid, SlotCervoCacada, 19315, 1, 0.052546, -0.163882, -0.118768, 0.000000, 37.296340, 0.000000, 1.000000, 1.000000, 1.000000 ); // unknown - eaee
	return true;
}

//You need the MapAndreas Include (see my post on SAMP Forums for the link)
forward Float:GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0);
stock Float:GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0)
{
    if(!((-3000.0 < fX < 3000.0) && (-3000.0 < fY < 3000.0))){
            return 0.0;
    }
    static
	    File: s_hMap
    ;
    if(!s_hMap) {
	    s_hMap = fopen("SAfull.hmap", io_read);

	    if(!s_hMap){
	        return 0.0;
	    }
    }
    new
	    afZ[1]
    ;
    fseek(s_hMap, ((6000 * (-floatround(fY, floatround_tozero) + 3000) + (floatround(fX, floatround_tozero) + 3000)) << 1));
    fblockread(s_hMap, afZ);

    return (fZ = ((afZ[0] >>> 16) * 0.01));
}

Public:P_Efeito( playerid ){
	if(IsPlayerConnected( playerid )) {
		SetPlayerWeather(playerid, Tempo);
		SetPlayerDrunkLevel(playerid, 0);
		SetPlayerTime(playerid, Horarios[Hora_Servidor], 0);

        GameTextForPlayer(playerid, "~r~O efeito da overdose passou!",3500,5);

		ClearAnimations(playerid);
	}
	return true;
}


//================= Lenhadores ======================================

/*CMD:debug( playerid, params[])
{

    static vehicleid, debugop[50];

	vehicleid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "s[50]", debugop)){
		Params:SCM(playerid, Verde, "Use: /debug | add | remov |");
	}
	else if(!strcmp(debugop, "add", true)) {

	    AttachSliceToVehicle(playerid, vehicleid);
	    SCM(playerid, Verde, #debug add);
	}
	else if(!strcmp(debugop, "remov", true)) {
	    detachObjectsForTruck(vehicleid);
        SCM(playerid, Verde, #debug remov);
	}
	else goto Params;
	return true;
}*/

detachObjectsForTruck(vehicleid)
{
    objSlicesAttachCount[vehicleid] = 0;
	/*new loopMax = (sizeof(objSlicesAttach)-1);
	printf("Array: %d | loopMax: %d", sizeof(objSlicesAttach), loopMax);
	Loop(var, 24){*/
	static var; var = 23;

	for(; var > -1; var--){
	    if(IsValidObject(objSlicesAttach[vehicleid][var])){
			DestroyObject(objSlicesAttach[vehicleid][var]);
			objSlicesAttach[vehicleid][var] = INVALID_OBJECT_ID; // pra ver se nao buga objeto

			printf("Objeto caminhao %i destruido!", var);
		}
	}
	return true;
}

AttachSliceToVehicle(playerid, vehicleid){
	printf("ObjSliceCount: %i", objSlicesAttachCount[vehicleid]);
	if(objSlicesAttachCount[vehicleid] > 23) {
        RemovePlayerAttachedObject(playerid, SlotTrabalhadores);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		return ErroMSG(playerid, "Caminhao cheio, va ate a madereira levar suas madeiras!");
	}
	switch(objSlicesAttachCount[vehicleid]){
	    case 0:	objSlicesAttach[vehicleid][0] = CreateObject(1463, 0.574999, 1.309998, 0.000000, -3.015001, 1.005000, 90.449951), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][0], vehicleid, 0.574999, 1.309998, 0.000000, -3.015001, 1.005000, 90.449951); //Object Model: 1463 |

		case 1: objSlicesAttach[vehicleid][1] = CreateObject(1463, -0.504999, 1.264999, 0.064999, -0.000001, 1.005000, 270.345520),
				AttachObjectToVehicle(objSlicesAttach[vehicleid][1], vehicleid, -0.504999, 1.264999, 0.064999, -0.000001, 1.005000, 270.345520); //Object Model: 1463 |

		case 2: objSlicesAttach[vehicleid][2] = CreateObject(1463, -0.504999, -0.694999, 0.064999, -0.000001, 1.005000, 270.345520),
				AttachObjectToVehicle(objSlicesAttach[vehicleid][2], vehicleid, -0.504999, -0.694999, 0.064999, -0.000001, 1.005000, 270.345520); //Object Model: 1463 |

		case 3: objSlicesAttach[vehicleid][3] = CreateObject(1463, 0.574999, -0.639999, 0.064999, -0.000001, 1.005000, 90.165130),
				AttachObjectToVehicle(objSlicesAttach[vehicleid][3], vehicleid, 0.574999, -0.639999, 0.064999, -0.000001, 1.005000, 90.165130); //Object Model: 1463 |

		case 4: objSlicesAttach[vehicleid][4] = CreateObject(1463, 0.574999, -2.582506, 0.064999, -0.000001, 1.005000, 90.165130),
				AttachObjectToVehicle(objSlicesAttach[vehicleid][4], vehicleid, 0.574999, -2.582506, 0.064999, -0.000001, 1.005000, 90.165130); //Object Model: 1463 |

		case 5: objSlicesAttach[vehicleid][5] = CreateObject(1463, -0.504999, -2.677509, 0.064999, -0.000001, 1.005000, 270.585723), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][5], vehicleid, -0.504999, -2.677509, 0.064999, -0.000001, 1.005000, 270.585723); //Object Model: 1463 |

		case 6: objSlicesAttach[vehicleid][6] = CreateObject(1463, -0.504999, -4.524550, 0.064999, -0.000001, 1.005000, 270.585723), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][6], vehicleid, -0.504999, -4.524550, 0.064999, -0.000001, 1.005000, 270.585723); //Object Model: 1463 |

		case 7: objSlicesAttach[vehicleid][7] = CreateObject(1463, 0.574999, -4.524550, 0.064999, -0.000001, 1.005000, 449.476593), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][7], vehicleid, 0.574999, -4.524550, 0.064999, -0.000001, 1.005000, 449.476593); //Object Model: 1463 |

		case 8: objSlicesAttach[vehicleid][8] = CreateObject(1463, 0.574999, 1.309998, ((0.000000)+0.600), -3.015001, 1.005000, 90.449951), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][8], vehicleid, 0.574999, 1.309998, ((0.000000)+0.600), -3.015001, 1.005000, 90.449951); //Object Model: 1463 |

		case 9:	objSlicesAttach[vehicleid][9] = CreateObject(1463, -0.504999, 1.264999, ((0.064999)+0.600), -0.000001, 1.005000, 270.345520), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][9], vehicleid, -0.504999, 1.264999, ((0.064999)+0.600), -0.000001, 1.005000, 270.345520); //Object Model: 1463 |

		case 10: objSlicesAttach[vehicleid][10] = CreateObject(1463, -0.504999, -0.694999, ((0.064999)+0.600), -0.000001, 1.005000, 270.345520), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][10], vehicleid, -0.504999, -0.694999, ((0.064999)+0.600), -0.000001, 1.005000, 270.345520); //Object Model: 1463 |

		case 11: objSlicesAttach[vehicleid][11] = CreateObject(1463, 0.574999, -0.639999, ((0.064999)+0.600), -0.000001, 1.005000, 90.165130), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][11], vehicleid, 0.574999, -0.639999, ((0.064999)+0.600), -0.000001, 1.005000, 90.165130); //Object Model: 1463 |

		case 12: objSlicesAttach[vehicleid][12] = CreateObject(1463, 0.574999, -2.582506, ((0.064999)+0.600), -0.000001, 1.005000, 90.165130), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][12], vehicleid, 0.574999, -2.582506, ((0.064999)+0.600), -0.000001, 1.005000, 90.165130); //Object Model: 1463 |

		case 13: objSlicesAttach[vehicleid][13] = CreateObject(1463, -0.504999, -2.677509, ((0.064999)+0.600), -0.000001, 1.005000, 270.585723), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][13], vehicleid, -0.504999, -2.677509, ((0.064999)+0.600), -0.000001, 1.005000, 270.585723); //Object Model: 1463 |

		case 14: objSlicesAttach[vehicleid][14] = CreateObject(1463, -0.504999, -4.524550, ((0.064999)+0.600), -0.000001, 1.005000, 270.585723), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][14], vehicleid, -0.504999, -4.524550, ((0.064999)+0.600), -0.000001, 1.005000, 270.585723); //Object Model: 1463 |

		case 15: objSlicesAttach[vehicleid][15] = CreateObject(1463, 0.574999, -4.524550, ((0.064999)+0.600), -0.000001, 1.005000, 449.476593), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][15], vehicleid, 0.574999, -4.524550, ((0.064999)+0.600), -0.000001, 1.005000, 449.476593); //Object Model: 1463 |

		case 16: objSlicesAttach[vehicleid][16] = CreateObject(1463, 0.574999, 1.309998, ((0.000000)+1.200), -3.015001, 1.005000, 90.449951), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][16], vehicleid, 0.574999, 1.309998, ((0.000000)+1.200), -3.015001, 1.005000, 90.449951); //Object Model: 1463 |

		case 17: objSlicesAttach[vehicleid][17] = CreateObject(1463, -0.504999, 1.264999, ((0.064999)+1.200), -0.000001, 1.005000, 270.345520), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][17], vehicleid, -0.504999, 1.264999, ((0.064999)+1.200), -0.000001, 1.005000, 270.345520); //Object Model: 1463 |

		case 18: objSlicesAttach[vehicleid][18] = CreateObject(1463, -0.504999, -0.694999, ((0.064999)+1.200), -0.000001, 1.005000, 270.345520), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][18], vehicleid, -0.504999, -0.694999, ((0.064999)+1.200), -0.000001, 1.005000, 270.345520); //Object Model: 1463 |

		case 19: objSlicesAttach[vehicleid][19] = CreateObject(1463, 0.574999, -0.639999, ((0.064999)+1.200), -0.000001, 1.005000, 90.165130), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][19], vehicleid, 0.574999, -0.639999, ((0.064999)+1.200), -0.000001, 1.005000, 90.165130); //Object Model: 1463 |

		case 20: objSlicesAttach[vehicleid][20] = CreateObject(1463, 0.574999, -2.582506, ((0.064999)+1.200), -0.000001, 1.005000, 90.165130), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][20], vehicleid, 0.574999, -2.582506, ((0.064999)+1.200), -0.000001, 1.005000, 90.165130); //Object Model: 1463 |

		case 21: objSlicesAttach[vehicleid][21] = CreateObject(1463, -0.504999, -2.677509, ((0.064999)+1.200), -0.000001, 1.005000, 270.585723), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][21], vehicleid, -0.504999, -2.677509, ((0.064999)+1.200), -0.000001, 1.005000, 270.585723); //Object Model: 1463 |

		case 22: objSlicesAttach[vehicleid][22] = CreateObject(1463, -0.504999, -4.524550, ((0.064999)+1.200), -0.000001, 1.005000, 270.585723), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][22], vehicleid, -0.504999, -4.524550, ((0.064999)+1.200), -0.000001, 1.005000, 270.585723); //Object Model: 1463 |

		case 23: objSlicesAttach[vehicleid][23] = CreateObject(1463, 0.574999, -4.524550, ((0.064999)+1.200), -0.000001, 1.005000, 449.476593), //Object Model: 1463 |
				AttachObjectToVehicle(objSlicesAttach[vehicleid][23], vehicleid, 0.574999, -4.524550, ((0.064999)+1.200), -0.000001, 1.005000, 449.476593); //Object Model: 1463 |
	}
	objSlicesAttachCount[vehicleid]++;
	return true;
}
//==============================================================================
forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);

// Private:

forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);

stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para usar o elevador", 0xCCCCCCAA, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i] = CreateDynamic3DTextLabel(string, 0xCCCCCCAA, 1783.9799, -1300.7660, z, 10.5);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(Obj_Elevator);
	StopObject(Obj_ElevatorDoors[0]);
	StopObject(Obj_ElevatorDoors[1]);

	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new string[600], string2[100];
	for(new i; i < 3; i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

		format(string2, 100, "{B5F7E5}>{F1F6F5} %s\n", FloorNames[i]);
	    strcat(string, string2);
	}

	ShowPlayerDialog(playerid, DIALOG_ELEVADOR, DIALOG_STYLE_LIST, "Elevador", string, "Aceitar", "Cancelar");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);


stock PlaySoundForPlayersInRange(soundid, Float:range, Float:x, Float:y, Float:z){
	ForPlayers(i){
	    if(IsPlayerInRangeOfPoint(i,range,x,y,z)){
		    PlayerPlaySound(i, soundid, x, y, z);
	    }
	}
}


// ====================================================== Ranks por cleyson StNN ==================================================================

ConnectDB()
{
	if((Database = db_open("data.db")) == DB:0)
	{
	    print("Conexao ao rank do servidor falhou."); // DEBUG

		} else {

	    print("Conexao a databse sql do servidor efetuado com sucesso."); // DEBUG

        db_query(Database, "CREATE TABLE IF NOT EXISTS RADAR(ID INTEGER PRIMARY KEY AUTOINCREMENT, X FLOAT DEFAULT 0.0, Y FLOAT DEFAULT 0.0, Z FLOAT DEFAULT 0.0, A FLOAT DEFAULT 0.0, VELOCIDADE INTEGER DEFAULT 0)");
		db_query(Database, "CREATE TABLE IF NOT EXISTS CONTAS(ID INTEGER PRIMARY KEY AUTOINCREMENT, NOME TEXT DEFAULT '', LEVEL INTEGER DEFAULT 0, DINHEIRO INTEGER DEFAULT 0, ONLINE INTEGER DEFAULT 0)");
	}
	return 1;
}

CreatePlayerRank(playerid)
{
    new Query2[85];
	format(Query2, sizeof(Query2), "INSERT INTO CONTAS (NOME, LEVEL, DINHEIRO, ONLINE) VALUES ('%s', 0, 0, 0)", GetName(playerid));
	db_query(Database, Query2);
	return 1;
}

DeletePlayerRank(player[])
{
	new Query[65];
	format(Query, sizeof(Query), "DELETE FROM CONTAS WHERE NOME = '%s'", player);
	db_query(Database, Query);
	return 1;
}

UpdatePlayerRank(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	 	new Query[100];
	    format(Query, sizeof(Query), "UPDATE CONTAS SET LEVEL =%d, DINHEIRO = %d WHERE NOME ='%s'", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pBanco], GetName(playerid));
		db_query(Database, Query);
	}
	return 1;
}

UpdateStatsRank(playerid, stats)
{
 	new Query[80];
    format(Query, sizeof(Query), "UPDATE CONTAS SET ONLINE = %d WHERE NOME ='%s'", stats, GetName(playerid));
	db_query(Database, Query);
	return 1;
}

RankMoney(playerid)
{
	new nome[24], query[80], str[1500], score, online, onlinetxt[20];
	new DBResult:result, DBResult:result2;
	result = db_query(Database, "SELECT NOME FROM CONTAS ORDER BY (DINHEIRO * 1) DESC limit 10");

	for(new I; I < db_num_rows(result); I++)
	{
		db_get_field_assoc(result, "NOME", nome, 24);

		format(query,sizeof(query),"SELECT DINHEIRO, ONLINE FROM CONTAS WHERE NOME = '%s'", nome);
		result2 = db_query(Database, query);

		score = db_get_field_assoc_int(result2, "DINHEIRO");
		online = db_get_field_assoc_int(result2, "ONLINE");

        if(online == 0) format(onlinetxt, 20, "{FF030F}Offline");
        if(online == 1) format(onlinetxt, 20, "{21DD00}Online");

        format(str, sizeof(str), "%s{21DD00}%d Â° \t{A9D0F5}%s \t{A9D0F5}$ %i \t%s\n", str, I+1, nome, score, onlinetxt);
        //format(str, sizeof(str), "Pos\tNome\tSaldo\tStatus\n\%s{21DD00}%d Â°\t{A9D0F5}%s\t{A9D0F5}%i\t%s\n", str, I+1, nome, score, onlinetxt);

		db_next_row(result);
		db_free_result(result2);
	}
	db_free_result(result);
	ShowPlayerDialog(playerid, DIALOG_LISTA_RANKS, DIALOG_STYLE_TABLIST, ""#SERVELOGO" - RANK SALDO BANCARIO", str, "Ok", "Voltar");
	return 1;
}

RankLevel(playerid)
{
	new nome[24], query[80], str[1500], score, online, onlinetxt[20];
	new DBResult:result, DBResult:result2;
	result = db_query(Database, "SELECT NOME FROM CONTAS ORDER BY (LEVEL * 1) DESC limit 10");

	for(new I; I < db_num_rows(result); I++)
	{
		db_get_field_assoc(result, "NOME", nome, 24);

		format(query,sizeof(query),"SELECT LEVEL, ONLINE FROM CONTAS WHERE NOME = '%s'", nome);
		result2 = db_query(Database, query);

		score = db_get_field_assoc_int(result2, "LEVEL");
		online = db_get_field_assoc_int(result2, "ONLINE");

        if(online == 0) format(onlinetxt, 20, "{FF030F}Offline");
        if(online == 1) format(onlinetxt, 20, "{21DD00}Online");

        format(str, sizeof(str), "%s{21DD00}%d Â° \t{A9D0F5}%s \t{A9D0F5}%i \t%s\n", str, I+1, nome, score, onlinetxt);
        //format(str, sizeof(str), "Pos\tNome\tScore\tStatus\n\%s{21DD00}%d Â° \t{A9D0F5}%s \t{A9D0F5}%i \t%s\n", str, I+1, nome, score, onlinetxt);

		db_next_row(result);
		db_free_result(result2);
	}
	db_free_result(result);
	ShowPlayerDialog(playerid, DIALOG_LISTA_RANKS, DIALOG_STYLE_TABLIST, ""#SERVELOGO" - RANK SCORE", str, "Ok", "Voltar");
	return 1;
}

CMD:ranks(playerid)
{
    Loop(id, MAX_PLAYERS) UpdatePlayerRank(id); // salvar todos os dados

    SendClientMessage(playerid, VerdeClaro, "Confira os ranks do servidor.");
	ShowPlayerDialog(playerid, DIALOG_RANKS, DIALOG_STYLE_LIST, ""#SERVELOGO" - RANKS", "{A9F5F2}>{F2F2F2}Maior score\n{81F781}>{F2F2F2}Maior saldo bancario", "Ir", "Sair");
    return 1;
}

cmd:casacash(playerid)
{
    if(PlayerInfo[playerid][CasaCash] == 1)
    {
        Loop(i, MAX_HOUSES)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]))
            {
                if(PlayerInfo[playerid][pHouse1] != 999 && PlayerInfo[playerid][pHouse2] != 999){
                    ErroMSG(playerid, "Voce ja possui duas casas!");
                    return true;
                }

                if(HouseInfo[i][hOwned] == 1) return ErroMSG(playerid, "Esta casa nao esta a venda!");

                HouseInfo[i][hOwned] = 1;
                strmid(HouseInfo[i][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);

                DestroyDynamicPickup(HousePickup[i]);
                Delete3DTextLabel(HouseLabel[i]);
                //DestroyDynamicMapIcon(HouseIcon[i]);
                LoadHouseID(i);

                SendClientMessage(playerid, Verde, "Parabens por sua nova residencia!");

                if(PlayerInfo[playerid][pHouse1] != 999)
                    PlayerInfo[playerid][pHouse2] = i;
                else
                    PlayerInfo[playerid][pHouse1] = i;

                PlayerInfo[playerid][CasaCash] = 0;

                SaveHouse(i);
                OnSalvarDados( playerid );

                PlaySoundForPlayer(playerid, 1149);
                format(strx, sizeof(strx), "[Play Style] - %s comprou a propriedade [Casa] NÂ° %i.", GetName(playerid), i);
                SendClientMessageToAll(AzulClaro, strx);

                format(STRLOG, sizeof(STRLOG), "[%s] %s comprou a casa ID: %i.", GetDateEx(), GetName(playerid), i);
                SLog("Cash.log", STRLOG);

                break;
            }
        }
        return 1;
    } else ErroMSG(playerid, "Voce nao tem direito de usar esse comando. Compre na /loja");
    return 1;
}

cmd:empresacash(playerid)
{
    if(PlayerInfo[playerid][EmpresaCash] == 1)
    {
        Loop(i, MAX_EMPRESAS)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, EmpInfo[i][ELocalX], EmpInfo[i][ELocalY], EmpInfo[i][ELocalZ]))
            {
                if(PlayerInfo[playerid][pEmpKey] != 999) return ErroMSG(playerid, "Voce ja possui uma empresa!");
                if(EmpInfo[i][EEstado] == 1) return ErroMSG(playerid, "Esta empresa nao esta a venda!");

                EmpInfo[i][EEstado] = 1;
                EmpInfo[i][EGrana] = 0;

                strmid(EmpInfo[i][EDono], GetName(playerid), 0, strlen(GetName(playerid)), 255);
                SendClientMessage(playerid, Verde, "Parabens por sua nova Empresa!");

                UpdateEmpresaLabel(i);

                SaveEmpresa(i);

                PlayerInfo[playerid][pEmpKey] = i;
                PlayerInfo[playerid][EmpresaCash] = 0;

                new str[128];
                format(str, sizeof(str), "[Play Style] - %s comprou a propriedade [Empresa] NÂ° %i.", GetName(playerid), i);
                ChatProximo(100.0, playerid, str, 0x707070FF,0x707070FF,0x707070FF,0x707070FF,0x707070FF);

                format(STRLOG, sizeof(STRLOG), "[%s] %s comprou a empresa ID: %i.", GetDateEx(), GetName(playerid), i);
                SLog("Cash.log", STRLOG);
                break;
            }
        }
    } else ErroMSG(playerid, "Voce nao tem direito de usar esse comando. Compre na /loja");
    return 1;
}

CMD:criarcasacash(playerid)
{
    if(PlayerInfo[playerid][CriarCasaCash] == 1)
    {
        if(PlayerInfo[playerid][pHouse1] != 999 && PlayerInfo[playerid][pHouse2] != 999)
        {
            ErroMSG(playerid, "Voce ja possui duas casas!");
            return true;
        }

        new Float:CPos[3];
        GetPlayerPos( playerid, CPos[ 0 ], CPos[ 1 ], CPos[ 2 ] );

        Loop(casaid, MAX_HOUSES)
        {
            if(HouseExist(casaid))
            {
                if(HouseInfo[casaid][hOwned] == 3)
                {
                    HouseInfo[casaid][hPrice] = 200000;
                    HouseInfo[casaid][hVipHouse] = false;

                    HouseInfo[casaid][hEntranceX] = CPos[ 0 ];
                    HouseInfo[casaid][hEntranceY] = CPos[ 1 ];
                    HouseInfo[casaid][hEntranceZ] = CPos[ 2 ];
                    HouseInfo[casaid][hLocked] = 1;
                    HouseInfo[casaid][hWorld] = (casaid+1);
                    HouseInfo[casaid][hOwned] = 1;
                    HouseInfo[casaid][hExist] = true;

                    format(HouseInfo[casaid][hOwner], 24, GetName(playerid));
                    SetHouseExit(casaid, InteriorHouse[9][ h_Int ], InteriorHouse[9][ h_Px ], InteriorHouse[9][ h_Py ], InteriorHouse[9][ h_Pz ], InteriorHouse[9][ h_Sx ], InteriorHouse[9][ h_Sy ], InteriorHouse[9][ h_Sz ], InteriorHouse[9][ h_Sa ]);

                    PlayerInfo[playerid][CriarCasaCash] = 0;

                    if(PlayerInfo[playerid][pHouse1] != 999)
                    {
                        PlayerInfo[playerid][pHouse2] = casaid;

                        } else {

                        PlayerInfo[playerid][pHouse1] = casaid;
                    }

                    LoadHouseID(casaid);
                    SaveHouse(casaid);

                    SendClientMessage(playerid, Purple, "Parabens pela nova residencia.");

                    format(STRLOG, sizeof(STRLOG), "[%s] %s criou a casa com cash ID: %i.", GetDateEx(), GetName(playerid), casaid);
                    SLog("Cash.log", STRLOG);

                    PlaySoundForPlayer( playerid, 1149);
                    return true;
                }

            } else if(!HouseExist(casaid))
            {

                HouseInfo[casaid][hPrice] = 800000;
                HouseInfo[casaid][hVipHouse] = false;

                HouseInfo[casaid][hEntranceX] = CPos[ 0 ];
                HouseInfo[casaid][hEntranceY] = CPos[ 1 ];
                HouseInfo[casaid][hEntranceZ] = CPos[ 2 ];
                HouseInfo[casaid][hLocked] = 1;
                HouseInfo[casaid][hWorld] = (casaid+1);

                HouseInfo[casaid][hOwned] = 1;
                HouseInfo[casaid][hExist] = true;

                format(HouseInfo[casaid][hOwner], 24, GetName(playerid));
                SetHouseExit(casaid, InteriorHouse[9][ h_Int ], InteriorHouse[9][ h_Px ], InteriorHouse[9][ h_Py ], InteriorHouse[9][ h_Pz ], InteriorHouse[9][ h_Sx ], InteriorHouse[9][ h_Sy ], InteriorHouse[9][ h_Sz ], InteriorHouse[9][ h_Sa ]);

                PlayerInfo[playerid][CriarCasaCash] = 0;

                if(PlayerInfo[playerid][pHouse1] != 999)
                {
                    PlayerInfo[playerid][pHouse2] = casaid;

                    } else {

                    PlayerInfo[playerid][pHouse1] = casaid;
                }

                LoadHouseID(casaid);
                SaveHouse(casaid);

                SendClientMessage(playerid, Purple, "Parabens pela nova residencia.");

                format(STRLOG, sizeof(STRLOG), "[%s] %s criou a casa com cash ID: %i.", GetDateEx(), GetName(playerid), casaid);
                SLog("Cash.log", STRLOG);

                PlaySoundForPlayer( playerid, 1149);
            }
        }

    } else ErroMSG(playerid, "Voce nao tem direito de usar esse comando. Compre na /loja");
    return true;
}

CMD:criarsetcash(playerid, params[])
{
    if(PlayerInfo[playerid][CriarSetCash] == 0) return ErroMSG(playerid, "Voce nao tem direito de usar esse comando. Compre na /loja");
    if(!IsPlayerInAnyVehicle(playerid)) return ErroMSG(playerid, "Voce precisa estar dentro do veiculo selecionado");

    new Cor1, Cor2;
    if(sscanf(params, "dd", Cor1, Cor2)) return SendClientMessage(playerid, -1, "Use /criarsetcash [cor1] [cor2]");

    new File:arquivo = fopen("VeiculosSET.txt", io_append),
        modelo = GetVehicleModel(GetPlayerVehicleID(playerid)),
        Float:spawn[3],
        Float:angulo,
        linha[150]
    ;

    SendClientMessage(playerid, Verde, "Voce criou um set com sucesso, ira aparecer em 3 segundos");

    GetVehiclePos(GetPlayerVehicleID(playerid), spawn[0], spawn[1], spawn[2]);
    GetVehicleZAngle(GetPlayerVehicleID(playerid), angulo);

    PlayerInfo[playerid][CriarSetCash] = 0;

    SetTimerEx("CriarSetV", 5000, false, "ddffffdd", playerid, modelo, spawn[0], spawn[1], spawn[2], angulo, Cor1, Cor2);

    format(linha, 180, "%i,%f,%f,%f,%f,%i,%i-%s\r\n", modelo, spawn[0], spawn[1], spawn[2], angulo, Cor1, Cor2, GetName(playerid));
    fwrite(arquivo, linha);
    fclose(arquivo);

    format(STRLOG, sizeof(STRLOG), "[%s] %s criou um set ID: %d.", GetDateEx(), GetName(playerid), modelo);
    SLog("Cash.log", STRLOG);
    return 1;
}

Public:CriarSetV(playerid, modelid, Float:SpawnX, Float:SpawnY, Float:SpawnZ, Float:SpawnRot, Color1, Color2)
{
    new str[100];
    format(str, 100, "Set Criado: ID:%d, cor1:%d, cor2:%d", modelid, Color1, Color2);
    SendClientMessage(playerid, Verde, str);

    new carroid = AddStaticVehicleEx(modelid, SpawnX, SpawnY, SpawnZ, SpawnRot, Color1, Color2, 120);

    SetVehicleEngineState(carroid, 0);
    SetVehicleParams(carroid, 3, 0);

    combustivel[carroid] = 80;

    return 1;
}

CMD:loja(playerid)
{
    SendClientMessage(playerid, 0xFFFF00AA, "Confira a loja de cash do servidor.");
    SendClientMessage(playerid, 0xFFFF00AA, "Para comprar cash veja o comando /comprarcash");

    ShowDialogLojaCash(playerid);
    return 1;
}

Public:ShowDialogLojaCash(playerid)
{
    new strdialog[400];
    format(strdialog, sizeof(strdialog), "Item\tCash\n\
    Player VIP\t{FFFF00}SUBMENU\n{FFFFFF}Player Socio\t{FFFF00}SUBMENU\n{FFFFFF}Comprar Level\t{FFFF00}%d\n{FFFFFF}Comprar Dinheiro\t{FFFF00}SUBMENU\n{FFFFFF}Escolher uma casa\t{FFFF00}%d\n{FFFFFF}Escolher um veiculo\t{FFFF00}%d\n{FFFFFF}Escolher uma empresa\t{FFFF00}%d\n{FFFFFF}Add casa no mapa\t{FFFF00}%d\n{FFFFFF}Add veiculo no mapa\t{FFFF00}%d\n", PRECO_LEVEL, PRECO_ECS, PRECO_EVE, PRECO_EEMP, PRECO_ACS, PRECO_AVE);
    ShowPlayerDialog(playerid, DIALOG_LOJACASH, DIALOG_STYLE_TABLIST_HEADERS, ""#SERVELOGO" - LOJA", strdialog, "Ir", "Sair");
    return 1;
}

CMD:comprarcash(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_COMPRARCASH, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - CASH", "\
    Cash e a moeda secundaria do servidor,\n\
    Com ela voce tem beneficios exclusivos,\n\
    facilidade e rapidez para adiquirir itens.\n\n\
    {FF0000}Pacotes:\n\
    {FFFFFF}1000 cash 15 Reais\n\
    {FFFFFF}2000 cash 25 Reais\n\
    {FFFFFF}3000 cash 30 Reais\n\
    {FFFFFF}5000 cash 50 Reais\n\
    {FFFFFF}10000 cash 90 Reais\n\n\
    Para comprar ou mais informacoes\n\
    Entre em contato:\n\
    ", "CONTATO", "SAIR");
    return 1;
}

cmd:bug(playerid, params[])
{
    new coment[128];
    if(sscanf(params, "s[128]", coment)) return SCM(playerid, -1, "Use /bug [descricao]");

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    new String[150], File:Csalvos = fopen("logs/Bugs.txt", io_append);
    format(String, sizeof(String), "%s-%s\n%f,%f,%f\n\n", GetName(playerid), coment, x, y, z);
    fwrite(Csalvos, String);
    fclose(Csalvos);

    SCM(playerid, -1, "Bug relatado. Agradecemos a ajuda.");
    return 1;
}

cmd:dica(playerid, params[])
{
    new coment[128];
    if(sscanf(params, "s[128]", coment)) return SCM(playerid, -1, "Use /dica [descricao]");

    new String[150], File:Csalvos = fopen("logs/Dicas.txt", io_append);
    format(String, sizeof(String), "%s-%s\n\n", GetName(playerid), coment);
    fwrite(Csalvos, String);
    fclose(Csalvos);

    SCM(playerid, -1, "Dica enviada. Agradecemos o feedback.");
    return 1;
}

CMD:beneficios(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_INFO_, DIALOG_STYLE_LIST, ""#SERVELOGO" - VIP - SOCIO", "Vip\nVip+\nVip Plus\nSocio", "Ir", "Voltar");
    return 1;
}

CMD:beneficiosvip(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_INFO_VIP, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - VIP - SOCIO", "\
    {ffffff}Adquirindo nosso Plano Vip voce tera funcoes liberadas, leia com atençao.\n\
    Disponibilizaremos dos Seguintes Beneficios Durante o Tempo MES contratado,\n\n\
    {ffff00}VIP\n\
    20(porcento) de descontos em Casas e Empresas\n\
    10(porcento) de rendimento em Propriedades\n\
    20(porcento) de AcrÐ¹scimo ao Pagamento do Payday\n\n\
    - Vantagens\n\
    Pacote Level (+15 Niveis) Adicionado ao Seu Score.\n\
    Pacote Cash (R$ 500.000) adicionados ao Seu banco\n\
    Veiculos Vips\n\
    Casas Luxuosas\n\
    KitVip Colete(50), KATANA, Eagle, Shotgun, M4\n\
    ChatVip /V para um chat Private com os Vips\n\
    Direito de Adquirir mais Veiculos (Quantidade = 2)", "Voltar", "");
    return 1;
}

CMD:beneficiosvipmais(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_INFO_VIP, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - VIP - SOCIO", "\
    {ffffff}Adquirindo nosso Plano Vip voce tera funcoes liberadas, leia com atençao.\n\
    Disponibilizaremos dos Seguintes Beneficios Durante o Tempo MES contratado,\n\n\
    {ffff00}VIP+\n\
    40(porcento) de descontos em Casas e Empresas\n\
    25(porcento) de rendimento em Propriedades\n\
    35(porcento) de AcrÐ¹scimo ao Pagamento do Payday\n\n\
    - Vantagens\n\
    Pacote Level (+30 Niveis) Adicionado ao Seu Score.\n\
    Pacote Cash (R$ 800.000) adicionados ao Seu banco\n\
    Veiculos Vips\n\
    Casas Luxuosas\n\
    Abastecimento em qualquer local\n\
    KitVip Colete(70), katana, Eagle, TEC, AK\n\
    ChatVip /V para um chat Private com os Vips\n\
    Direito de Adquirir mais Veiculos (Quantidade = 2)", "Voltar", "");
    return 1;
}

CMD:beneficiosvipplus(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_INFO_VIP, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - VIP - SOCIO", "\
    {ffffff}Adquirindo nosso Plano Vip voce tera funcoes liberadas, leia com atençao.\n\
    Disponibilizaremos dos Seguintes Beneficios Durante o Tempo MES contratado,\n\n\
    {ffff00}VIP Plus\n\
    60(porcento) de descontos em Casas e Empresas\n\
    40(porcento) de rendimento em Propriedades\n\
    45(porcento) de AcrÐ¹scimo ao Pagamento do Payday\n\n\
    - Vantagens\n\
    Pacote Level (+50 Niveis) Adicionado ao Seu Score.\n\
    Pacote Cash (R$ 1.000.000) adicionados ao Seu banco\n\
    Veiculos Vips\n\
    Casas Luxuosas\n\
    Abastecimento em qualquer local\n\
    Spawnar Infernus e NRG a qualquer momento\n\
    KitVip Colete(100), Vida(100), katana, Eagle, TEC, Shotgun, AK, Sniper\n\
    ChatVip /V para um chat Private com os Vips\n\
    Direito de Adquirir mais Veiculos (Quantidade = 2)", "Voltar", "");
    return 1;
}

CMD:beneficiossocio(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_INFO_VIP, DIALOG_STYLE_MSGBOX, ""#SERVELOGO" - VIP - SOCIO", "\
    {ffffff}Adquirindo nosso Plano Vip voce tera funcoes liberadas, leia com atençao.\n\
    Disponibilizaremos dos Seguintes Beneficios Durante o Tempo MES contratado,\n\n\
    {ffff00}SOCIO\n\
    60(porcento) de descontos em Casas e Empresas\n\
    40(porcento) de rendimento em Propriedades\n\
    45(porcento) de AcrÐ¹scimo ao Pagamento do Payday\n\n\
    - Vantagens\n\
    Pacote Level (+50 Niveis) Adicionado ao Seu Score.\n\
    Pacote Cash (R$ 1.200.000) adicionados ao Seu banco\n\
    Spawnar qualquer Veiculo\n\
    Casas Luxuosas\n\
    Abastecimento em qualquer local\n\
    Jetpack\n\
    KitVip Colete(100, Vida(100), katana, Eagle, TEC, Shotgun, AK, Sniper\n\
    ChatVip /V para um chat Private com os Vips\n\
    Direito de Adquirir mais Veiculos (Quantidade = 2)", "Voltar", "");
    return 1;
}

CMD:criaregg(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < comando_egg) return 0;

    if(sscanf(params, "dd", params[0], params[1])) return SCM(playerid, -1, "Use: /criaregg [level] [dinheiro]");

    SendClientMessage(playerid, -1, "Easter Egg criado.");

    new Float:ppos[3];
    GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

    egg[totaleggs][eLevel] =  params[0];
    egg[totaleggs][eGrana] = params[1];
    egg[totaleggs][eX] = ppos[0]+1.0;
    egg[totaleggs][eY] = ppos[1];
    egg[totaleggs][eZ] = ppos[2];

    SalvarEasterEggs(totaleggs);
    CriarEasterEgg(totaleggs);

    totaleggs ++;
    return 1;
}

CMD:abrir(playerid)
{
    static cFile[100];
    Loop(a, MAX_EGGS)
    {
        format(cFile, 100, PASTA_EGGS, a);
        if(DOF2_FileExists(cFile))
        {
            if(IsPlayerInRangeOfPoint(playerid, 4.0, egg[a][eX], egg[a][eY], egg[a][eZ]))
            {
                new string[124];

                if(egg[a][eLevel] > 0)
                {
                    format(string, sizeof(string), "Easter Egg descoberto. Voce encontrou %d de level.", egg[a][eLevel]);
                    PlayerInfo[playerid][pLevel] += egg[a][eLevel];

                } else if(egg[a][eGrana] > 0)
                {
                    format(string, sizeof(string), "Easter Egg descoberto. Voce encontrou R$%d,00 reais.", egg[a][eGrana]);
                    ActionPlayerGrana(playerid, "+", egg[a][eGrana], 1);
                }
                SendClientMessage(playerid, -1, string);
                DeletarEasterEggs(a);
                break;
            }
        }
    }
    return 1;
}

CMD:multas(playerid)
{
    new string[200];
    if(PlayerInfo[playerid][pMultas] == 0)
    {
        format(string, sizeof(string), "{FFFFFF}Ola %s.\n\n No momento voce nao possue multas abertas.\n\n", GetName(playerid));
        ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Multas", string, "Sair", "");

        } else {

        format(string, sizeof(string), "{FFFFFF}Ola %s.\n\n No momento voce possue um total de {CECECE}%d{FFFFFF} em multas acumuladas.\nVa ate a loterica para quitar suas multas.\n\n", GetName(playerid), PlayerInfo[playerid][pMultas]);
        ShowPlayerDialog(playerid, Dinfo, DIALOG_STYLE_MSGBOX, "Multas", string, "Sair", "");
    }
    return 1;
}

stock VoziloJeBicikla(id)
{
	if(id == 481 || id == 509 || id == 510) return 1;
	return 0;
}

stock StopAudioStreamForAll()
{
    for(new i = 0, e = GetMaxPlayers(); i < e; i++)
	{
        if(IsPlayerConnected(i))
		{
            StopAudioStreamForPlayer(i);
        }
    }
    return 1;
}

stock PlayAudioStreamForAll(inputtext[])
{
    for(new i = 0, e = GetMaxPlayers(); i < e; i++)
	{
        if(IsPlayerConnected(i))
		{
            PlayAudioStreamForPlayer(i, inputtext);
        }
    }
    return 1;
}
